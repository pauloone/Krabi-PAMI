
bettlebrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021fc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080022bc  080022bc  000032bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d8  080022d8  00004018  2**0
                  CONTENTS
  4 .ARM          00000008  080022d8  080022d8  000032d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022e0  080022e0  00004018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022e0  080022e0  000032e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022e4  080022e4  000032e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080022e8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000018  08002300  00004018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002300  000041d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f898  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264b  00000000  00000000  000138d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  00015f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee3  00000000  00000000  000167d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000fe0d  00000000  00000000  000176bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000031db  00000000  00000000  000274c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0002a6a3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001780  00000000  00000000  0002a6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 000084d7  00000000  00000000  0002be68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0003433f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022a4 	.word	0x080022a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080022a4 	.word	0x080022a4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8d8 	bl	8000490 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8d3 	bl	8000490 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzsi2>:
 8000454:	211c      	movs	r1, #28
 8000456:	2301      	movs	r3, #1
 8000458:	041b      	lsls	r3, r3, #16
 800045a:	4298      	cmp	r0, r3
 800045c:	d301      	bcc.n	8000462 <__clzsi2+0xe>
 800045e:	0c00      	lsrs	r0, r0, #16
 8000460:	3910      	subs	r1, #16
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4298      	cmp	r0, r3
 8000466:	d301      	bcc.n	800046c <__clzsi2+0x18>
 8000468:	0a00      	lsrs	r0, r0, #8
 800046a:	3908      	subs	r1, #8
 800046c:	091b      	lsrs	r3, r3, #4
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0x22>
 8000472:	0900      	lsrs	r0, r0, #4
 8000474:	3904      	subs	r1, #4
 8000476:	a202      	add	r2, pc, #8	@ (adr r2, 8000480 <__clzsi2+0x2c>)
 8000478:	5c10      	ldrb	r0, [r2, r0]
 800047a:	1840      	adds	r0, r0, r1
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	02020304 	.word	0x02020304
 8000484:	01010101 	.word	0x01010101
	...

08000490 <__clzdi2>:
 8000490:	b510      	push	{r4, lr}
 8000492:	2900      	cmp	r1, #0
 8000494:	d103      	bne.n	800049e <__clzdi2+0xe>
 8000496:	f7ff ffdd 	bl	8000454 <__clzsi2>
 800049a:	3020      	adds	r0, #32
 800049c:	e002      	b.n	80004a4 <__clzdi2+0x14>
 800049e:	0008      	movs	r0, r1
 80004a0:	f7ff ffd8 	bl	8000454 <__clzsi2>
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <EXTI4_15_IRQHandler>:
void RUN_interrupt(void){
	asm("NOP");
}

void EXTI4_15_IRQHandler(void)
{
 80004a8:	b510      	push	{r4, lr}
// Function called on 4_15 interrupt
// We call the HAL handler
	if(HAL_EXTI_GetPending(&RUN_Handle, EXTI_TRIGGER_RISING_FALLING))
 80004aa:	4c06      	ldr	r4, [pc, #24]	@ (80004c4 <EXTI4_15_IRQHandler+0x1c>)
 80004ac:	2103      	movs	r1, #3
 80004ae:	0020      	movs	r0, r4
 80004b0:	f001 f850 	bl	8001554 <HAL_EXTI_GetPending>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d100      	bne.n	80004ba <EXTI4_15_IRQHandler+0x12>
	{
		HAL_EXTI_IRQHandler(&RUN_Handle);
	}
};
 80004b8:	bd10      	pop	{r4, pc}
		HAL_EXTI_IRQHandler(&RUN_Handle);
 80004ba:	0020      	movs	r0, r4
 80004bc:	f001 f838 	bl	8001530 <HAL_EXTI_IRQHandler>
};
 80004c0:	e7fa      	b.n	80004b8 <EXTI4_15_IRQHandler+0x10>
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	20000034 	.word	0x20000034

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b500      	push	{lr}
 80004ca:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004cc:	2220      	movs	r2, #32
 80004ce:	2100      	movs	r1, #0
 80004d0:	a80c      	add	r0, sp, #48	@ 0x30
 80004d2:	f001 febb 	bl	800224c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	2214      	movs	r2, #20
 80004d8:	2100      	movs	r1, #0
 80004da:	4668      	mov	r0, sp
 80004dc:	f001 feb6 	bl	800224c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e0:	2218      	movs	r2, #24
 80004e2:	2100      	movs	r1, #0
 80004e4:	a805      	add	r0, sp, #20
 80004e6:	f001 feb1 	bl	800224c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ea:	491d      	ldr	r1, [pc, #116]	@ (8000560 <SystemClock_Config+0x98>)
 80004ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000564 <SystemClock_Config+0x9c>)
 80004ee:	680a      	ldr	r2, [r1, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f0:	a80b      	add	r0, sp, #44	@ 0x2c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f2:	401a      	ands	r2, r3
 80004f4:	2380      	movs	r3, #128	@ 0x80
 80004f6:	011b      	lsls	r3, r3, #4
 80004f8:	4313      	orrs	r3, r2
 80004fa:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fc:	2302      	movs	r3, #2
 80004fe:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000500:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000502:	2300      	movs	r3, #0
 8000504:	9315      	str	r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000506:	2380      	movs	r3, #128	@ 0x80
 8000508:	02db      	lsls	r3, r3, #11
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800050c:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800050e:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000510:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000512:	03db      	lsls	r3, r3, #15
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000514:	320f      	adds	r2, #15
 8000516:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000518:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051a:	f001 fa1d 	bl	8001958 <HAL_RCC_OscConfig>
 800051e:	2800      	cmp	r0, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000522:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000526:	220f      	movs	r2, #15
 8000528:	2303      	movs	r3, #3
 800052a:	9200      	str	r2, [sp, #0]
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2200      	movs	r2, #0
 8000530:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000532:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000534:	2101      	movs	r1, #1
 8000536:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000538:	9202      	str	r2, [sp, #8]
 800053a:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800053c:	f001 fcc0 	bl	8001ec0 <HAL_RCC_ClockConfig>
 8000540:	2800      	cmp	r0, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x80>
 8000544:	b672      	cpsid	i
  while (1)
 8000546:	e7fe      	b.n	8000546 <SystemClock_Config+0x7e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000548:	2308      	movs	r3, #8
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800054a:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800054c:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800054e:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000550:	f001 fda4 	bl	800209c <HAL_RCCEx_PeriphCLKConfig>
 8000554:	2800      	cmp	r0, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x94>
 8000558:	b672      	cpsid	i
  while (1)
 800055a:	e7fe      	b.n	800055a <SystemClock_Config+0x92>
}
 800055c:	b019      	add	sp, #100	@ 0x64
 800055e:	bd00      	pop	{pc}
 8000560:	40007000 	.word	0x40007000
 8000564:	ffffe7ff 	.word	0xffffe7ff

08000568 <main>:
{
 8000568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056a:	46d6      	mov	lr, sl
 800056c:	464f      	mov	r7, r9
 800056e:	4646      	mov	r6, r8
 8000570:	b5c0      	push	{r6, r7, lr}
 8000572:	b08c      	sub	sp, #48	@ 0x30
	HAL_Init();
 8000574:	f000 facc 	bl	8000b10 <HAL_Init>
  SystemClock_Config();
 8000578:	f7ff ffa6 	bl	80004c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	2214      	movs	r2, #20
 800057e:	2100      	movs	r1, #0
 8000580:	a807      	add	r0, sp, #28
 8000582:	f001 fe63 	bl	800224c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000586:	2304      	movs	r3, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058a:	4eb0      	ldr	r6, [pc, #704]	@ (800084c <main+0x2e4>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800058c:	21c0      	movs	r1, #192	@ 0xc0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000590:	48af      	ldr	r0, [pc, #700]	@ (8000850 <main+0x2e8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	431a      	orrs	r2, r3
 8000594:	62f2      	str	r2, [r6, #44]	@ 0x2c
 8000596:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000598:	0209      	lsls	r1, r1, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059c:	2202      	movs	r2, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	9302      	str	r3, [sp, #8]
 80005a0:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a4:	4690      	mov	r8, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	432b      	orrs	r3, r5
 80005a8:	62f3      	str	r3, [r6, #44]	@ 0x2c
 80005aa:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	402b      	ands	r3, r5
 80005b0:	9303      	str	r3, [sp, #12]
 80005b2:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b4:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80005b6:	4313      	orrs	r3, r2
 80005b8:	62f3      	str	r3, [r6, #44]	@ 0x2c
 80005ba:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80005bc:	4013      	ands	r3, r2
 80005be:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80005c4:	f001 f8ce 	bl	8001764 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EN_TOF1_Pin|EN_TOF2_Pin, GPIO_PIN_RESET);
 80005c8:	20a0      	movs	r0, #160	@ 0xa0
 80005ca:	2200      	movs	r2, #0
 80005cc:	210c      	movs	r1, #12
 80005ce:	05c0      	lsls	r0, r0, #23
 80005d0:	f001 f8c8 	bl	8001764 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005d4:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005d6:	489e      	ldr	r0, [pc, #632]	@ (8000850 <main+0x2e8>)
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005d8:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005da:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005dc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	9709      	str	r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e4:	f000 ffc2 	bl	800156c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80005e8:	2380      	movs	r3, #128	@ 0x80
 80005ea:	021b      	lsls	r3, r3, #8
 80005ec:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005ee:	4643      	mov	r3, r8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f0:	4897      	ldr	r0, [pc, #604]	@ (8000850 <main+0x2e8>)
 80005f2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005f4:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fa:	f000 ffb7 	bl	800156c <HAL_GPIO_Init>
  HAL_GPIO_Init(I_OTF_GPIO_Port, &GPIO_InitStruct);
 80005fe:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = I_OTF_Pin;
 8000600:	2310      	movs	r3, #16
  HAL_GPIO_Init(I_OTF_GPIO_Port, &GPIO_InitStruct);
 8000602:	a907      	add	r1, sp, #28
 8000604:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = I_OTF_Pin;
 8000606:	469a      	mov	sl, r3
 8000608:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060c:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(I_OTF_GPIO_Port, &GPIO_InitStruct);
 800060e:	f000 ffad 	bl	800156c <HAL_GPIO_Init>
  HAL_GPIO_Init(RUN_GPIO_Port, &GPIO_InitStruct);
 8000612:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = RUN_Pin;
 8000614:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(RUN_GPIO_Port, &GPIO_InitStruct);
 8000616:	a907      	add	r1, sp, #28
 8000618:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = RUN_Pin;
 800061a:	4699      	mov	r9, r3
 800061c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061e:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000620:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(RUN_GPIO_Port, &GPIO_InitStruct);
 8000622:	f000 ffa3 	bl	800156c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8000626:	4643      	mov	r3, r8
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000628:	488a      	ldr	r0, [pc, #552]	@ (8000854 <main+0x2ec>)
 800062a:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = SWITCH_Pin;
 800062c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062e:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000630:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8000632:	f000 ff9b 	bl	800156c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000636:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000638:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800063a:	432b      	orrs	r3, r5
 800063c:	6333      	str	r3, [r6, #48]	@ 0x30
 800063e:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000640:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000642:	402b      	ands	r3, r5
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000644:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800064a:	f000 fe21 	bl	8001290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800064e:	2009      	movs	r0, #9
 8000650:	f000 fe48 	bl	80012e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	200a      	movs	r0, #10
 800065a:	f000 fe19 	bl	8001290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800065e:	200a      	movs	r0, #10
 8000660:	f000 fe40 	bl	80012e4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000664:	2200      	movs	r2, #0
 8000666:	2100      	movs	r1, #0
 8000668:	200b      	movs	r0, #11
 800066a:	f000 fe11 	bl	8001290 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800066e:	200b      	movs	r0, #11
 8000670:	f000 fe38 	bl	80012e4 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000674:	2208      	movs	r2, #8
 8000676:	2100      	movs	r1, #0
 8000678:	a805      	add	r0, sp, #20
 800067a:	f001 fde7 	bl	800224c <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800067e:	2214      	movs	r2, #20
 8000680:	2100      	movs	r1, #0
 8000682:	a807      	add	r0, sp, #28
 8000684:	f001 fde2 	bl	800224c <memset>
  hadc.Instance = ADC1;
 8000688:	4c73      	ldr	r4, [pc, #460]	@ (8000858 <main+0x2f0>)
 800068a:	4b74      	ldr	r3, [pc, #464]	@ (800085c <main+0x2f4>)
  hadc.Init.DMAContinuousRequests = ENABLE;
 800068c:	2201      	movs	r2, #1
  hadc.Instance = ADC1;
 800068e:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000690:	23c0      	movs	r3, #192	@ 0xc0
 8000692:	061b      	lsls	r3, r3, #24
 8000694:	6063      	str	r3, [r4, #4]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000696:	4643      	mov	r3, r8
 8000698:	63a3      	str	r3, [r4, #56]	@ 0x38
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800069a:	2380      	movs	r3, #128	@ 0x80
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	62a3      	str	r3, [r4, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80006a0:	464b      	mov	r3, r9
 80006a2:	6263      	str	r3, [r4, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 80006a4:	3b54      	subs	r3, #84	@ 0x54
 80006a6:	54e2      	strb	r2, [r4, r3]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006a8:	0020      	movs	r0, r4
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006aa:	3b24      	subs	r3, #36	@ 0x24
  hadc.Init.OversamplingMode = DISABLE;
 80006ac:	63e7      	str	r7, [r4, #60]	@ 0x3c
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006ae:	60a7      	str	r7, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80006b0:	6125      	str	r5, [r4, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b2:	60e7      	str	r7, [r4, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80006b4:	8425      	strh	r5, [r4, #32]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006b6:	6163      	str	r3, [r4, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006b8:	6327      	str	r7, [r4, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006ba:	61a7      	str	r7, [r4, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80006bc:	6365      	str	r5, [r4, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006be:	61e7      	str	r7, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006c0:	f000 fb26 	bl	8000d10 <HAL_ADC_Init>
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d001      	beq.n	80006cc <main+0x164>
 80006c8:	b672      	cpsid	i
  while (1)
 80006ca:	e7fe      	b.n	80006ca <main+0x162>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006cc:	2380      	movs	r3, #128	@ 0x80
  sConfig.Channel = ADC_CHANNEL_5;
 80006ce:	4f64      	ldr	r7, [pc, #400]	@ (8000860 <main+0x2f8>)
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006d0:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006d2:	0020      	movs	r0, r4
 80006d4:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_5;
 80006d6:	9705      	str	r7, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006d8:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006da:	f000 fccb 	bl	8001074 <HAL_ADC_ConfigChannel>
 80006de:	2800      	cmp	r0, #0
 80006e0:	d001      	beq.n	80006e6 <main+0x17e>
 80006e2:	b672      	cpsid	i
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <main+0x17c>
  sConfig.Channel = ADC_CHANNEL_6;
 80006e6:	4b5f      	ldr	r3, [pc, #380]	@ (8000864 <main+0x2fc>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006e8:	0020      	movs	r0, r4
 80006ea:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_6;
 80006ec:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006ee:	f000 fcc1 	bl	8001074 <HAL_ADC_ConfigChannel>
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d001      	beq.n	80006fa <main+0x192>
 80006f6:	b672      	cpsid	i
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <main+0x190>
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80006fa:	23c0      	movs	r3, #192	@ 0xc0
 80006fc:	041b      	lsls	r3, r3, #16
 80006fe:	9307      	str	r3, [sp, #28]
  AnalogWDGConfig.ITMode = DISABLE;
 8000700:	2224      	movs	r2, #36	@ 0x24
 8000702:	466b      	mov	r3, sp
 8000704:	189b      	adds	r3, r3, r2
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8000706:	9708      	str	r7, [sp, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8000708:	a907      	add	r1, sp, #28
  AnalogWDGConfig.ITMode = DISABLE;
 800070a:	7018      	strb	r0, [r3, #0]
  AnalogWDGConfig.HighThreshold = 0;
 800070c:	900a      	str	r0, [sp, #40]	@ 0x28
  AnalogWDGConfig.LowThreshold = 0;
 800070e:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 8000710:	0020      	movs	r0, r4
 8000712:	f000 fd1b 	bl	800114c <HAL_ADC_AnalogWDGConfig>
 8000716:	1e01      	subs	r1, r0, #0
 8000718:	d001      	beq.n	800071e <main+0x1b6>
 800071a:	b672      	cpsid	i
  while (1)
 800071c:	e7fe      	b.n	800071c <main+0x1b4>
  if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 800071e:	0020      	movs	r0, r4
 8000720:	f000 fd60 	bl	80011e4 <HAL_ADCEx_Calibration_Start>
 8000724:	2800      	cmp	r0, #0
 8000726:	d001      	beq.n	800072c <main+0x1c4>
 8000728:	b672      	cpsid	i
  while (1)
 800072a:	e7fe      	b.n	800072a <main+0x1c2>
  hi2c1.Instance = I2C1;
 800072c:	4f4e      	ldr	r7, [pc, #312]	@ (8000868 <main+0x300>)
 800072e:	4b4f      	ldr	r3, [pc, #316]	@ (800086c <main+0x304>)
  hi2c1.Init.OwnAddress1 = 0;
 8000730:	60b8      	str	r0, [r7, #8]
  hi2c1.Instance = I2C1;
 8000732:	603b      	str	r3, [r7, #0]
  hi2c1.Init.Timing = 0x6042C3C7;
 8000734:	4b4e      	ldr	r3, [pc, #312]	@ (8000870 <main+0x308>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000736:	6138      	str	r0, [r7, #16]
  hi2c1.Init.Timing = 0x6042C3C7;
 8000738:	607b      	str	r3, [r7, #4]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800073a:	2380      	movs	r3, #128	@ 0x80
  hi2c1.Init.OwnAddress2 = 0;
 800073c:	6178      	str	r0, [r7, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800073e:	61b8      	str	r0, [r7, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000740:	61f8      	str	r0, [r7, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000742:	029b      	lsls	r3, r3, #10
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000744:	0038      	movs	r0, r7
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000746:	60fd      	str	r5, [r7, #12]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000748:	623b      	str	r3, [r7, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800074a:	f001 f811 	bl	8001770 <HAL_I2C_Init>
 800074e:	1e01      	subs	r1, r0, #0
 8000750:	d001      	beq.n	8000756 <main+0x1ee>
 8000752:	b672      	cpsid	i
  while (1)
 8000754:	e7fe      	b.n	8000754 <main+0x1ec>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000756:	0038      	movs	r0, r7
 8000758:	f001 f862 	bl	8001820 <HAL_I2CEx_ConfigAnalogFilter>
 800075c:	1e01      	subs	r1, r0, #0
 800075e:	d001      	beq.n	8000764 <main+0x1fc>
 8000760:	b672      	cpsid	i
  while (1)
 8000762:	e7fe      	b.n	8000762 <main+0x1fa>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000764:	0038      	movs	r0, r7
 8000766:	f001 f881 	bl	800186c <HAL_I2CEx_ConfigDigitalFilter>
 800076a:	2800      	cmp	r0, #0
 800076c:	d001      	beq.n	8000772 <main+0x20a>
 800076e:	b672      	cpsid	i
  while (1)
 8000770:	e7fe      	b.n	8000770 <main+0x208>
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000772:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	a907      	add	r1, sp, #28
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000776:	432b      	orrs	r3, r5
 8000778:	63b3      	str	r3, [r6, #56]	@ 0x38
  TIM2->PSC = 0;
 800077a:	2680      	movs	r6, #128	@ 0x80
  TIM2->ARR = PWM_PERIOD;
 800077c:	2340      	movs	r3, #64	@ 0x40
  TIM2->PSC = 0;
 800077e:	05f6      	lsls	r6, r6, #23
  TIM2->ARR = PWM_PERIOD;
 8000780:	33ff      	adds	r3, #255	@ 0xff
  TIM2->PSC = 0;
 8000782:	62b0      	str	r0, [r6, #40]	@ 0x28
  TIM2->ARR = PWM_PERIOD;
 8000784:	62f3      	str	r3, [r6, #44]	@ 0x2c
  TIM2->CR1 |= TIM_CR1_CMS_0;
 8000786:	6832      	ldr	r2, [r6, #0]
 8000788:	3b20      	subs	r3, #32
 800078a:	3bff      	subs	r3, #255	@ 0xff
 800078c:	431a      	orrs	r2, r3
 800078e:	6032      	str	r2, [r6, #0]
  TIM2->CR2 |= TIM_TRGO_UPDATE;
 8000790:	6872      	ldr	r2, [r6, #4]
 8000792:	4313      	orrs	r3, r2
 8000794:	6073      	str	r3, [r6, #4]
  TIM2->EGR |= TIM_EGR_UG;
 8000796:	6973      	ldr	r3, [r6, #20]
 8000798:	432b      	orrs	r3, r5
 800079a:	6173      	str	r3, [r6, #20]
  TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1
 800079c:	2368      	movs	r3, #104	@ 0x68
 800079e:	69b2      	ldr	r2, [r6, #24]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	61b3      	str	r3, [r6, #24]
  TIM2->CCER |= TIM_CCER_CC1E;
 80007a4:	6a33      	ldr	r3, [r6, #32]
 80007a6:	432b      	orrs	r3, r5
 80007a8:	6233      	str	r3, [r6, #32]
  TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1
 80007aa:	23d0      	movs	r3, #208	@ 0xd0
  TIM2->CCR1 = 0;
 80007ac:	6370      	str	r0, [r6, #52]	@ 0x34
  TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1
 80007ae:	69b2      	ldr	r2, [r6, #24]
 80007b0:	01db      	lsls	r3, r3, #7
 80007b2:	4313      	orrs	r3, r2
  TIM2->CCER |= TIM_CCER_CC2E;
 80007b4:	4652      	mov	r2, sl
  TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1
 80007b6:	61b3      	str	r3, [r6, #24]
  TIM2->CCER |= TIM_CCER_CC2E;
 80007b8:	6a33      	ldr	r3, [r6, #32]
 80007ba:	431a      	orrs	r2, r3
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007bc:	2303      	movs	r3, #3
  TIM2->CCER |= TIM_CCER_CC2E;
 80007be:	6232      	str	r2, [r6, #32]
  TIM2->CCR2 = 0;
 80007c0:	63b0      	str	r0, [r6, #56]	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	9009      	str	r0, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007c6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	4643      	mov	r3, r8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007cc:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80007d0:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f000 fecb 	bl	800156c <HAL_GPIO_Init>
  if (HAL_ADC_Start_DMA(&hadc, &adc_values.dma_pointer, 4) != HAL_OK)
 80007d6:	4d27      	ldr	r5, [pc, #156]	@ (8000874 <main+0x30c>)
 80007d8:	2204      	movs	r2, #4
 80007da:	0029      	movs	r1, r5
 80007dc:	0020      	movs	r0, r4
 80007de:	f000 fb73 	bl	8000ec8 <HAL_ADC_Start_DMA>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d001      	beq.n	80007ea <main+0x282>
 80007e6:	b672      	cpsid	i
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <main+0x280>
  adc_value_pointer = &adc_values.adc_values[0];
 80007ea:	4b23      	ldr	r3, [pc, #140]	@ (8000878 <main+0x310>)
 80007ec:	601d      	str	r5, [r3, #0]
  other_adc_value_pointer = &adc_values.adc_values[0];
 80007ee:	4b23      	ldr	r3, [pc, #140]	@ (800087c <main+0x314>)
 80007f0:	601d      	str	r5, [r3, #0]
  TIM2->CCR1 = PWM_PERIOD/2;
 80007f2:	239f      	movs	r3, #159	@ 0x9f
	  RUN_state = HAL_GPIO_ReadPin(RUN_GPIO_Port, RUN_Pin);
 80007f4:	25a0      	movs	r5, #160	@ 0xa0
  TIM2->CCR1 = PWM_PERIOD/2;
 80007f6:	6373      	str	r3, [r6, #52]	@ 0x34
  TIM2->CCR2  = PWM_PERIOD/2;
 80007f8:	63b3      	str	r3, [r6, #56]	@ 0x38
	  RUN_state = HAL_GPIO_ReadPin(RUN_GPIO_Port, RUN_Pin);
 80007fa:	2680      	movs	r6, #128	@ 0x80
 80007fc:	05ed      	lsls	r5, r5, #23
 80007fe:	0031      	movs	r1, r6
 8000800:	0028      	movs	r0, r5
 8000802:	f000 ffa9 	bl	8001758 <HAL_GPIO_ReadPin>
  while(RUN_state == GPIO_PIN_RESET){
 8000806:	2800      	cmp	r0, #0
 8000808:	d0f9      	beq.n	80007fe <main+0x296>
  HAL_Delay(1000);
 800080a:	20fa      	movs	r0, #250	@ 0xfa
  TIM2->CR1 |= TIM_CR1_CEN;
 800080c:	2580      	movs	r5, #128	@ 0x80
  HAL_Delay(1000);
 800080e:	0080      	lsls	r0, r0, #2
 8000810:	f000 f9a4 	bl	8000b5c <HAL_Delay>
  TIM2->CR1 |= TIM_CR1_CEN;
 8000814:	2201      	movs	r2, #1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET); // enable motors
 8000816:	21c0      	movs	r1, #192	@ 0xc0
  TIM2->CR1 |= TIM_CR1_CEN;
 8000818:	05ed      	lsls	r5, r5, #23
 800081a:	682b      	ldr	r3, [r5, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET); // enable motors
 800081c:	0209      	lsls	r1, r1, #8
  TIM2->CR1 |= TIM_CR1_CEN;
 800081e:	4313      	orrs	r3, r2
 8000820:	602b      	str	r3, [r5, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET); // enable motors
 8000822:	480b      	ldr	r0, [pc, #44]	@ (8000850 <main+0x2e8>)
 8000824:	f000 ff9e 	bl	8001764 <HAL_GPIO_WritePin>
  HAL_Delay(10000);
 8000828:	4815      	ldr	r0, [pc, #84]	@ (8000880 <main+0x318>)
 800082a:	f000 f997 	bl	8000b5c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET); // enable motors
 800082e:	21c0      	movs	r1, #192	@ 0xc0
 8000830:	4807      	ldr	r0, [pc, #28]	@ (8000850 <main+0x2e8>)
 8000832:	2200      	movs	r2, #0
 8000834:	0209      	lsls	r1, r1, #8
 8000836:	f000 ff95 	bl	8001764 <HAL_GPIO_WritePin>
  TIM2->CR1 &= !TIM_CR1_CEN;
 800083a:	682b      	ldr	r3, [r5, #0]
 800083c:	2300      	movs	r3, #0
  HAL_ADC_Stop_DMA(&hadc);
 800083e:	0020      	movs	r0, r4
  TIM2->CR1 &= !TIM_CR1_CEN;
 8000840:	602b      	str	r3, [r5, #0]
  HAL_ADC_Stop_DMA(&hadc);
 8000842:	f000 fb85 	bl	8000f50 <HAL_ADC_Stop_DMA>
	  asm("NOP");
 8000846:	46c0      	nop			@ (mov r8, r8)
  while(1){
 8000848:	e7fd      	b.n	8000846 <main+0x2de>
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	40021000 	.word	0x40021000
 8000850:	50000800 	.word	0x50000800
 8000854:	50000400 	.word	0x50000400
 8000858:	20000170 	.word	0x20000170
 800085c:	40012400 	.word	0x40012400
 8000860:	14000020 	.word	0x14000020
 8000864:	18000040 	.word	0x18000040
 8000868:	200000d4 	.word	0x200000d4
 800086c:	40005400 	.word	0x40005400
 8000870:	6042c3c7 	.word	0x6042c3c7
 8000874:	20000004 	.word	0x20000004
 8000878:	20000040 	.word	0x20000040
 800087c:	2000003c 	.word	0x2000003c
 8000880:	00002710 	.word	0x00002710

08000884 <Error_Handler>:
 8000884:	b672      	cpsid	i
  while (1)
 8000886:	e7fe      	b.n	8000886 <Error_Handler+0x2>

08000888 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000888:	2101      	movs	r1, #1
 800088a:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <HAL_MspInit+0x18>)
 800088c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800088e:	430a      	orrs	r2, r1
 8000890:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2280      	movs	r2, #128	@ 0x80
 8000894:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000896:	0552      	lsls	r2, r2, #21
 8000898:	430a      	orrs	r2, r1
 800089a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089c:	4770      	bx	lr
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a4:	b530      	push	{r4, r5, lr}
 80008a6:	0004      	movs	r4, r0
 80008a8:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	2214      	movs	r2, #20
 80008ac:	2100      	movs	r1, #0
 80008ae:	a802      	add	r0, sp, #8
 80008b0:	f001 fccc 	bl	800224c <memset>
  if(hadc->Instance==ADC1)
 80008b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <HAL_ADC_MspInit+0x84>)
 80008b6:	6822      	ldr	r2, [r4, #0]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d001      	beq.n	80008c0 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008bc:	b009      	add	sp, #36	@ 0x24
 80008be:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008c0:	2280      	movs	r2, #128	@ 0x80
 80008c2:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <HAL_ADC_MspInit+0x88>)
 80008c4:	0092      	lsls	r2, r2, #2
 80008c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c8:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ca:	430a      	orrs	r2, r1
 80008cc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2201      	movs	r2, #1
 80008d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4311      	orrs	r1, r2
 80008d6:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80008d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	401a      	ands	r2, r3
 80008de:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9;
 80008e0:	2298      	movs	r2, #152	@ 0x98
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_9;
 80008e4:	2303      	movs	r3, #3
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	9202      	str	r2, [sp, #8]
 80008ea:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f000 fe3e 	bl	800156c <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80008f0:	2280      	movs	r2, #128	@ 0x80
    hdma_adc.Instance = DMA1_Channel1;
 80008f2:	4d0f      	ldr	r5, [pc, #60]	@ (8000930 <HAL_ADC_MspInit+0x8c>)
 80008f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <HAL_ADC_MspInit+0x90>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80008f6:	612a      	str	r2, [r5, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008f8:	3280      	adds	r2, #128	@ 0x80
 80008fa:	616a      	str	r2, [r5, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008fc:	2280      	movs	r2, #128	@ 0x80
 80008fe:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 8000900:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000902:	61aa      	str	r2, [r5, #24]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000904:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000906:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000908:	0028      	movs	r0, r5
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800090a:	606b      	str	r3, [r5, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800090c:	60ab      	str	r3, [r5, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800090e:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000910:	61ea      	str	r2, [r5, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000912:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000914:	f000 fd0c 	bl	8001330 <HAL_DMA_Init>
 8000918:	2800      	cmp	r0, #0
 800091a:	d102      	bne.n	8000922 <HAL_ADC_MspInit+0x7e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800091c:	64e5      	str	r5, [r4, #76]	@ 0x4c
 800091e:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8000920:	e7cc      	b.n	80008bc <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000922:	f7ff ffaf 	bl	8000884 <Error_Handler>
 8000926:	e7f9      	b.n	800091c <HAL_ADC_MspInit+0x78>
 8000928:	40012400 	.word	0x40012400
 800092c:	40021000 	.word	0x40021000
 8000930:	20000128 	.word	0x20000128
 8000934:	40020008 	.word	0x40020008

08000938 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000938:	b510      	push	{r4, lr}
 800093a:	0004      	movs	r4, r0
 800093c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	2214      	movs	r2, #20
 8000940:	2100      	movs	r1, #0
 8000942:	a802      	add	r0, sp, #8
 8000944:	f001 fc82 	bl	800224c <memset>
  if(hi2c->Instance==I2C1)
 8000948:	4b10      	ldr	r3, [pc, #64]	@ (800098c <HAL_I2C_MspInit+0x54>)
 800094a:	6822      	ldr	r2, [r4, #0]
 800094c:	429a      	cmp	r2, r3
 800094e:	d001      	beq.n	8000954 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000950:	b008      	add	sp, #32
 8000952:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000956:	20c0      	movs	r0, #192	@ 0xc0
 8000958:	2112      	movs	r1, #18
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4c0d      	ldr	r4, [pc, #52]	@ (8000990 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800095c:	00c0      	lsls	r0, r0, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000960:	431a      	orrs	r2, r3
 8000962:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8000964:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000966:	9002      	str	r0, [sp, #8]
 8000968:	9103      	str	r1, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	401a      	ands	r2, r3
 800096c:	9201      	str	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000972:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	a902      	add	r1, sp, #8
 8000976:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800097a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f000 fdf6 	bl	800156c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000984:	039b      	lsls	r3, r3, #14
 8000986:	4313      	orrs	r3, r2
 8000988:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800098a:	e7e1      	b.n	8000950 <HAL_I2C_MspInit+0x18>
 800098c:	40005400 	.word	0x40005400
 8000990:	40021000 	.word	0x40021000

08000994 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler>
 8000996:	46c0      	nop			@ (mov r8, r8)

08000998 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <HardFault_Handler>
 800099a:	46c0      	nop			@ (mov r8, r8)

0800099c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800099c:	4770      	bx	lr
 800099e:	46c0      	nop			@ (mov r8, r8)

080009a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80009a0:	4770      	bx	lr
 80009a2:	46c0      	nop			@ (mov r8, r8)

080009a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a6:	f000 f8c7 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009aa:	bd10      	pop	{r4, pc}

080009ac <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */


  Fixed32_19 error = error_direction * (FP32_19_INT_TO_FP(*adc_value_pointer) - FP_ADC_TARGET);
 80009ac:	4a1f      	ldr	r2, [pc, #124]	@ (8000a2c <DMA1_Channel1_IRQHandler+0x80>)
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <DMA1_Channel1_IRQHandler+0x84>)
 80009b0:	4694      	mov	ip, r2
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a1f      	ldr	r2, [pc, #124]	@ (8000a34 <DMA1_Channel1_IRQHandler+0x88>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	8811      	ldrh	r1, [r2, #0]
 80009ba:	04db      	lsls	r3, r3, #19
 80009bc:	4463      	add	r3, ip
 80009be:	4359      	muls	r1, r3
  Fixed32_19 output = output_previous + PID_A * error + PID_B * error_previous;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <DMA1_Channel1_IRQHandler+0x8c>)
{
 80009c2:	b570      	push	{r4, r5, r6, lr}
  Fixed32_19 output = output_previous + PID_A * error + PID_B * error_previous;
 80009c4:	434b      	muls	r3, r1
 80009c6:	481d      	ldr	r0, [pc, #116]	@ (8000a3c <DMA1_Channel1_IRQHandler+0x90>)
 80009c8:	4c1d      	ldr	r4, [pc, #116]	@ (8000a40 <DMA1_Channel1_IRQHandler+0x94>)
 80009ca:	6802      	ldr	r2, [r0, #0]
 80009cc:	6825      	ldr	r5, [r4, #0]
 80009ce:	189a      	adds	r2, r3, r2
 80009d0:	006b      	lsls	r3, r5, #1
 80009d2:	195b      	adds	r3, r3, r5
 80009d4:	011d      	lsls	r5, r3, #4
 80009d6:	195b      	adds	r3, r3, r5
 80009d8:	021d      	lsls	r5, r3, #8
 80009da:	195b      	adds	r3, r3, r5
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	1ad3      	subs	r3, r2, r3
  output_previous = output > OUTPUT_SAT ? OUTPUT_SAT : (output < - OUTPUT_SAT ? - OUTPUT_SAT: 0);
 80009e0:	22c8      	movs	r2, #200	@ 0xc8
 80009e2:	0492      	lsls	r2, r2, #18
 80009e4:	4293      	cmp	r3, r2
 80009e6:	dc06      	bgt.n	80009f6 <DMA1_Channel1_IRQHandler+0x4a>
 80009e8:	4a16      	ldr	r2, [pc, #88]	@ (8000a44 <DMA1_Channel1_IRQHandler+0x98>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	da18      	bge.n	8000a20 <DMA1_Channel1_IRQHandler+0x74>
 80009ee:	25c8      	movs	r5, #200	@ 0xc8
 80009f0:	26c8      	movs	r6, #200	@ 0xc8
 80009f2:	006d      	lsls	r5, r5, #1
 80009f4:	e002      	b.n	80009fc <DMA1_Channel1_IRQHandler+0x50>
 80009f6:	26c8      	movs	r6, #200	@ 0xc8
 80009f8:	25c8      	movs	r5, #200	@ 0xc8
 80009fa:	0076      	lsls	r6, r6, #1
  error_previous = error;
  int16_t output_in_pwm_unit = (int16_t) (FP32_19_FP_TO_INT(output_previous));

  int16_t pwm1 = FORWARD_SPEED < - output_in_pwm_unit ? 0 : (uint16_t)(FORWARD_SPEED + output_in_pwm_unit);
  int16_t pwm2 =  (FORWARD_SPEED < output_in_pwm_unit ? 0 : (uint16_t)(FORWARD_SPEED - output_in_pwm_unit));
  TIM2->CCR1 = (uint16_t) pwm1;
 80009fc:	2380      	movs	r3, #128	@ 0x80
  output_previous = output > OUTPUT_SAT ? OUTPUT_SAT : (output < - OUTPUT_SAT ? - OUTPUT_SAT: 0);
 80009fe:	6002      	str	r2, [r0, #0]
  TIM2->CCR2 = (uint16_t) pwm2;
  /* USER CODE END DMA1_Channel1_IRQn 1 */

  hdma_adc.DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma_adc.ChannelIndex & 0x1cU));
 8000a00:	221c      	movs	r2, #28
  TIM2->CCR1 = (uint16_t) pwm1;
 8000a02:	05db      	lsls	r3, r3, #23
  error_previous = error;
 8000a04:	6021      	str	r1, [r4, #0]
  TIM2->CCR1 = (uint16_t) pwm1;
 8000a06:	635e      	str	r6, [r3, #52]	@ 0x34
  TIM2->CCR2 = (uint16_t) pwm2;
 8000a08:	639d      	str	r5, [r3, #56]	@ 0x38
  hdma_adc.DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma_adc.ChannelIndex & 0x1cU));
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <DMA1_Channel1_IRQHandler+0x9c>)
 8000a0c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8000a0e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8000a10:	4011      	ands	r1, r2
 8000a12:	3a1a      	subs	r2, #26
 8000a14:	408a      	lsls	r2, r1
  __HAL_UNLOCK(&hdma_adc);
 8000a16:	2100      	movs	r1, #0
  hdma_adc.DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma_adc.ChannelIndex & 0x1cU));
 8000a18:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(&hdma_adc);
 8000a1a:	2224      	movs	r2, #36	@ 0x24
 8000a1c:	5499      	strb	r1, [r3, r2]
}
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	2596      	movs	r5, #150	@ 0x96
 8000a22:	006d      	lsls	r5, r5, #1
 8000a24:	002e      	movs	r6, r5
  output_previous = output > OUTPUT_SAT ? OUTPUT_SAT : (output < - OUTPUT_SAT ? - OUTPUT_SAT: 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	e7e8      	b.n	80009fc <DMA1_Channel1_IRQHandler+0x50>
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	e6780000 	.word	0xe6780000
 8000a30:	20000040 	.word	0x20000040
 8000a34:	20000000 	.word	0x20000000
 8000a38:	0000cce7 	.word	0x0000cce7
 8000a3c:	200001cc 	.word	0x200001cc
 8000a40:	200001d0 	.word	0x200001d0
 8000a44:	fce00000 	.word	0xfce00000
 8000a48:	20000128 	.word	0x20000128

08000a4c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000a4c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000a4e:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <DMA1_Channel2_3_IRQHandler+0xc>)
 8000a50:	f000 fd1e 	bl	8001490 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000a54:	bd10      	pop	{r4, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	20000044 	.word	0x20000044

08000a5c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000a5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000a5e:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8000a60:	f000 fd16 	bl	8001490 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000a64:	bd10      	pop	{r4, pc}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	2000008c 	.word	0x2000008c

08000a6c <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	4770      	bx	lr
 8000a6e:	46c0      	nop			@ (mov r8, r8)

08000a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a70:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a72:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a74:	f7ff fffa 	bl	8000a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a78:	480c      	ldr	r0, [pc, #48]	@ (8000aac <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7a:	490d      	ldr	r1, [pc, #52]	@ (8000ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <LoopForever+0xe>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a90:	4c0a      	ldr	r4, [pc, #40]	@ (8000abc <LoopForever+0x16>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f001 fbdd 	bl	800225c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa2:	f7ff fd61 	bl	8000568 <main>

08000aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa6:	e7fe      	b.n	8000aa6 <LoopForever>
   ldr   r0, =_estack
 8000aa8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ab4:	080022e8 	.word	0x080022e8
  ldr r2, =_sbss
 8000ab8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000abc:	200001d8 	.word	0x200001d8

08000ac0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_COMP_IRQHandler>
	...

08000ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac8:	20fa      	movs	r0, #250	@ 0xfa
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_InitTick+0x40>)
 8000acc:	0080      	lsls	r0, r0, #2
 8000ace:	7819      	ldrb	r1, [r3, #0]
 8000ad0:	f7ff fb1a 	bl	8000108 <__udivsi3>
 8000ad4:	4d0c      	ldr	r5, [pc, #48]	@ (8000b08 <HAL_InitTick+0x44>)
 8000ad6:	0001      	movs	r1, r0
 8000ad8:	6828      	ldr	r0, [r5, #0]
 8000ada:	f7ff fb15 	bl	8000108 <__udivsi3>
 8000ade:	f000 fc0d 	bl	80012fc <HAL_SYSTICK_Config>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	d10c      	bne.n	8000b00 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8000ae6:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae8:	2c03      	cmp	r4, #3
 8000aea:	d900      	bls.n	8000aee <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000aec:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aee:	3802      	subs	r0, #2
 8000af0:	2200      	movs	r2, #0
 8000af2:	0021      	movs	r1, r4
 8000af4:	f000 fbcc 	bl	8001290 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <HAL_InitTick+0x48>)
 8000afa:	2000      	movs	r0, #0
 8000afc:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000afe:	e7f5      	b.n	8000aec <HAL_InitTick+0x28>
    return HAL_ERROR;
 8000b00:	2001      	movs	r0, #1
 8000b02:	e7f3      	b.n	8000aec <HAL_InitTick+0x28>
 8000b04:	20000010 	.word	0x20000010
 8000b08:	2000000c 	.word	0x2000000c
 8000b0c:	20000014 	.word	0x20000014

08000b10 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b10:	2140      	movs	r1, #64	@ 0x40
 8000b12:	4a08      	ldr	r2, [pc, #32]	@ (8000b34 <HAL_Init+0x24>)
{
 8000b14:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b16:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b18:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b1a:	430b      	orrs	r3, r1
 8000b1c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1e:	f7ff ffd1 	bl	8000ac4 <HAL_InitTick>
 8000b22:	1e04      	subs	r4, r0, #0
 8000b24:	d002      	beq.n	8000b2c <HAL_Init+0x1c>
    status = HAL_ERROR;
 8000b26:	2401      	movs	r4, #1
}
 8000b28:	0020      	movs	r0, r4
 8000b2a:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000b2c:	f7ff feac 	bl	8000888 <HAL_MspInit>
 8000b30:	e7fa      	b.n	8000b28 <HAL_Init+0x18>
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	40022000 	.word	0x40022000

08000b38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b38:	4a03      	ldr	r2, [pc, #12]	@ (8000b48 <HAL_IncTick+0x10>)
 8000b3a:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <HAL_IncTick+0x14>)
 8000b3c:	6811      	ldr	r1, [r2, #0]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	185b      	adds	r3, r3, r1
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	4770      	bx	lr
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	200001d4 	.word	0x200001d4
 8000b4c:	20000010 	.word	0x20000010

08000b50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b50:	4b01      	ldr	r3, [pc, #4]	@ (8000b58 <HAL_GetTick+0x8>)
 8000b52:	6818      	ldr	r0, [r3, #0]
}
 8000b54:	4770      	bx	lr
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	200001d4 	.word	0x200001d4

08000b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b5c:	b570      	push	{r4, r5, r6, lr}
 8000b5e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b60:	f7ff fff6 	bl	8000b50 <HAL_GetTick>
 8000b64:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b66:	1c63      	adds	r3, r4, #1
 8000b68:	d002      	beq.n	8000b70 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <HAL_Delay+0x20>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b70:	f7ff ffee 	bl	8000b50 <HAL_GetTick>
 8000b74:	1b40      	subs	r0, r0, r5
 8000b76:	42a0      	cmp	r0, r4
 8000b78:	d3fa      	bcc.n	8000b70 <HAL_Delay+0x14>
  {
  }
}
 8000b7a:	bd70      	pop	{r4, r5, r6, pc}
 8000b7c:	20000010 	.word	0x20000010

08000b80 <ADC_Disable>:
  uint32_t tickstart = 0U;

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b80:	2103      	movs	r1, #3
 8000b82:	6802      	ldr	r2, [r0, #0]
{
 8000b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b86:	6893      	ldr	r3, [r2, #8]
{
 8000b88:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b8a:	400b      	ands	r3, r1
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d001      	beq.n	8000b94 <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8000b90:	2000      	movs	r0, #0
}
 8000b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b94:	6810      	ldr	r0, [r2, #0]
 8000b96:	4203      	tst	r3, r0
 8000b98:	d0fa      	beq.n	8000b90 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000b9a:	2705      	movs	r7, #5
 8000b9c:	6890      	ldr	r0, [r2, #8]
 8000b9e:	4007      	ands	r7, r0
 8000ba0:	2f01      	cmp	r7, #1
 8000ba2:	d008      	beq.n	8000bb6 <ADC_Disable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8000ba8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000baa:	430a      	orrs	r2, r1
 8000bac:	6562      	str	r2, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bae:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8000bb4:	e7ed      	b.n	8000b92 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	6893      	ldr	r3, [r2, #8]
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000bba:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 8000bbc:	4303      	orrs	r3, r0
 8000bbe:	6093      	str	r3, [r2, #8]
 8000bc0:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8000bc2:	f7ff ffc5 	bl	8000b50 <HAL_GetTick>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000bc6:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000bc8:	0006      	movs	r6, r0
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	421f      	tst	r7, r3
 8000bce:	d0df      	beq.n	8000b90 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000bd0:	f7ff ffbe 	bl	8000b50 <HAL_GetTick>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000bd4:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000bd6:	1b80      	subs	r0, r0, r6
 8000bd8:	280a      	cmp	r0, #10
 8000bda:	d902      	bls.n	8000be2 <ADC_Disable+0x62>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	4215      	tst	r5, r2
 8000be0:	d103      	bne.n	8000bea <ADC_Disable+0x6a>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	421d      	tst	r5, r3
 8000be6:	d1f3      	bne.n	8000bd0 <ADC_Disable+0x50>
 8000be8:	e7d2      	b.n	8000b90 <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bea:	2210      	movs	r2, #16
 8000bec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8000bee:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000bf6:	432b      	orrs	r3, r5
 8000bf8:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8000bfa:	e7ca      	b.n	8000b92 <ADC_Disable+0x12>

08000bfc <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bfc:	2303      	movs	r3, #3
{
 8000bfe:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c00:	6802      	ldr	r2, [r0, #0]
{
 8000c02:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c04:	6891      	ldr	r1, [r2, #8]
{
 8000c06:	b082      	sub	sp, #8
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c08:	400b      	ands	r3, r1
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d02d      	beq.n	8000c6a <ADC_Enable+0x6e>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000c0e:	6891      	ldr	r1, [r2, #8]
 8000c10:	4b23      	ldr	r3, [pc, #140]	@ (8000ca0 <ADC_Enable+0xa4>)
 8000c12:	4219      	tst	r1, r3
 8000c14:	d130      	bne.n	8000c78 <ADC_Enable+0x7c>
    __HAL_ADC_ENABLE(hadc);
 8000c16:	2101      	movs	r1, #1
 8000c18:	6893      	ldr	r3, [r2, #8]
 8000c1a:	430b      	orrs	r3, r1
 8000c1c:	6093      	str	r3, [r2, #8]
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <ADC_Enable+0xa8>)
 8000c20:	4921      	ldr	r1, [pc, #132]	@ (8000ca8 <ADC_Enable+0xac>)
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	f7ff fa70 	bl	8000108 <__udivsi3>
 8000c28:	9001      	str	r0, [sp, #4]

  while (waitLoopIndex != 0U)
 8000c2a:	9b01      	ldr	r3, [sp, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d005      	beq.n	8000c3c <ADC_Enable+0x40>
  {
    waitLoopIndex--;
 8000c30:	9b01      	ldr	r3, [sp, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	9301      	str	r3, [sp, #4]
  while (waitLoopIndex != 0U)
 8000c36:	9b01      	ldr	r3, [sp, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d1f9      	bne.n	8000c30 <ADC_Enable+0x34>
    tickstart = HAL_GetTick();
 8000c3c:	f7ff ff88 	bl	8000b50 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c40:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000c42:	0006      	movs	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c44:	681b      	ldr	r3, [r3, #0]
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c46:	2501      	movs	r5, #1
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c48:	07db      	lsls	r3, r3, #31
 8000c4a:	d40b      	bmi.n	8000c64 <ADC_Enable+0x68>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c4c:	f7ff ff80 	bl	8000b50 <HAL_GetTick>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c50:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c52:	1b80      	subs	r0, r0, r6
 8000c54:	280a      	cmp	r0, #10
 8000c56:	d902      	bls.n	8000c5e <ADC_Enable+0x62>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	4215      	tst	r5, r2
 8000c5c:	d016      	beq.n	8000c8c <ADC_Enable+0x90>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	421d      	tst	r5, r3
 8000c62:	d0f3      	beq.n	8000c4c <ADC_Enable+0x50>
  return HAL_OK;
 8000c64:	2000      	movs	r0, #0
}
 8000c66:	b002      	add	sp, #8
 8000c68:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c6a:	6811      	ldr	r1, [r2, #0]
 8000c6c:	420b      	tst	r3, r1
 8000c6e:	d1f9      	bne.n	8000c64 <ADC_Enable+0x68>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000c70:	6891      	ldr	r1, [r2, #8]
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <ADC_Enable+0xa4>)
 8000c74:	4219      	tst	r1, r3
 8000c76:	d0ce      	beq.n	8000c16 <ADC_Enable+0x1a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c78:	2210      	movs	r2, #16
 8000c7a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8000c7c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000c84:	3a0f      	subs	r2, #15
 8000c86:	4313      	orrs	r3, r2
 8000c88:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8000c8a:	e7ec      	b.n	8000c66 <ADC_Enable+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c8c:	2210      	movs	r2, #16
 8000c8e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8000c90:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c92:	4313      	orrs	r3, r2
 8000c94:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000c98:	432b      	orrs	r3, r5
 8000c9a:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8000c9c:	e7e3      	b.n	8000c66 <ADC_Enable+0x6a>
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	80000017 	.word	0x80000017
 8000ca4:	2000000c 	.word	0x2000000c
 8000ca8:	000f4240 	.word	0x000f4240

08000cac <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000cac:	2204      	movs	r2, #4
 8000cae:	6803      	ldr	r3, [r0, #0]
{
 8000cb0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000cb2:	6899      	ldr	r1, [r3, #8]
{
 8000cb4:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000cb6:	420a      	tst	r2, r1
 8000cb8:	d01d      	beq.n	8000cf6 <ADC_ConversionStop+0x4a>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8000cba:	6899      	ldr	r1, [r3, #8]
 8000cbc:	420a      	tst	r2, r1
 8000cbe:	d006      	beq.n	8000cce <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8000cc0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8000cc2:	0792      	lsls	r2, r2, #30
 8000cc4:	d403      	bmi.n	8000cce <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000cc6:	2110      	movs	r1, #16
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000cce:	f7ff ff3f 	bl	8000b50 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000cd2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000cd4:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	075b      	lsls	r3, r3, #29
 8000cda:	d50c      	bpl.n	8000cf6 <ADC_ConversionStop+0x4a>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000cdc:	2504      	movs	r5, #4
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000cde:	f7ff ff37 	bl	8000b50 <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000ce2:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000ce4:	1b80      	subs	r0, r0, r6
 8000ce6:	280a      	cmp	r0, #10
 8000ce8:	d902      	bls.n	8000cf0 <ADC_ConversionStop+0x44>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	4215      	tst	r5, r2
 8000cee:	d104      	bne.n	8000cfa <ADC_ConversionStop+0x4e>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	421d      	tst	r5, r3
 8000cf4:	d1f3      	bne.n	8000cde <ADC_ConversionStop+0x32>
  return HAL_OK;
 8000cf6:	2000      	movs	r0, #0
}
 8000cf8:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cfa:	2210      	movs	r2, #16
 8000cfc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cfe:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d00:	4313      	orrs	r3, r2
 8000d02:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000d06:	3a0f      	subs	r2, #15
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8000d0c:	e7f4      	b.n	8000cf8 <ADC_ConversionStop+0x4c>
 8000d0e:	46c0      	nop			@ (mov r8, r8)

08000d10 <HAL_ADC_Init>:
{
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	1e04      	subs	r4, r0, #0
  if (hadc == NULL)
 8000d14:	d036      	beq.n	8000d84 <HAL_ADC_Init+0x74>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d16:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d100      	bne.n	8000d1e <HAL_ADC_Init+0xe>
 8000d1c:	e09a      	b.n	8000e54 <HAL_ADC_Init+0x144>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d1e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000d20:	06db      	lsls	r3, r3, #27
 8000d22:	d428      	bmi.n	8000d76 <HAL_ADC_Init+0x66>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d28:	0752      	lsls	r2, r2, #29
 8000d2a:	d424      	bmi.n	8000d76 <HAL_ADC_Init+0x66>
  ADC_STATE_CLR_SET(hadc->State,
 8000d2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000d2e:	4960      	ldr	r1, [pc, #384]	@ (8000eb0 <HAL_ADC_Init+0x1a0>)
 8000d30:	400a      	ands	r2, r1
 8000d32:	3106      	adds	r1, #6
 8000d34:	31ff      	adds	r1, #255	@ 0xff
 8000d36:	430a      	orrs	r2, r1
 8000d38:	6562      	str	r2, [r4, #84]	@ 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	6899      	ldr	r1, [r3, #8]
 8000d3e:	400a      	ands	r2, r1
 8000d40:	2a01      	cmp	r2, #1
 8000d42:	d100      	bne.n	8000d46 <HAL_ADC_Init+0x36>
 8000d44:	e0a0      	b.n	8000e88 <HAL_ADC_Init+0x178>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000d46:	2080      	movs	r0, #128	@ 0x80
 8000d48:	6861      	ldr	r1, [r4, #4]
 8000d4a:	05c0      	lsls	r0, r0, #23
 8000d4c:	004a      	lsls	r2, r1, #1
 8000d4e:	0852      	lsrs	r2, r2, #1
 8000d50:	4282      	cmp	r2, r0
 8000d52:	d019      	beq.n	8000d88 <HAL_ADC_Init+0x78>
 8000d54:	2280      	movs	r2, #128	@ 0x80
 8000d56:	0612      	lsls	r2, r2, #24
 8000d58:	4291      	cmp	r1, r2
 8000d5a:	d015      	beq.n	8000d88 <HAL_ADC_Init+0x78>
 8000d5c:	691a      	ldr	r2, [r3, #16]
 8000d5e:	4d55      	ldr	r5, [pc, #340]	@ (8000eb4 <HAL_ADC_Init+0x1a4>)
 8000d60:	0092      	lsls	r2, r2, #2
 8000d62:	0892      	lsrs	r2, r2, #2
 8000d64:	611a      	str	r2, [r3, #16]
 8000d66:	4a54      	ldr	r2, [pc, #336]	@ (8000eb8 <HAL_ADC_Init+0x1a8>)
 8000d68:	6810      	ldr	r0, [r2, #0]
 8000d6a:	4028      	ands	r0, r5
 8000d6c:	6010      	str	r0, [r2, #0]
 8000d6e:	6810      	ldr	r0, [r2, #0]
 8000d70:	4301      	orrs	r1, r0
 8000d72:	6011      	str	r1, [r2, #0]
 8000d74:	e00f      	b.n	8000d96 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d76:	2210      	movs	r2, #16
 8000d78:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2350      	movs	r3, #80	@ 0x50
 8000d82:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8000d84:	2001      	movs	r0, #1
}
 8000d86:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000d88:	691a      	ldr	r2, [r3, #16]
 8000d8a:	0092      	lsls	r2, r2, #2
 8000d8c:	0892      	lsrs	r2, r2, #2
 8000d8e:	611a      	str	r2, [r3, #16]
 8000d90:	691a      	ldr	r2, [r3, #16]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000d96:	2118      	movs	r1, #24
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	438a      	bics	r2, r1
 8000d9c:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	68a1      	ldr	r1, [r4, #8]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	60da      	str	r2, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000da6:	4944      	ldr	r1, [pc, #272]	@ (8000eb8 <HAL_ADC_Init+0x1a8>)
 8000da8:	4844      	ldr	r0, [pc, #272]	@ (8000ebc <HAL_ADC_Init+0x1ac>)
 8000daa:	680a      	ldr	r2, [r1, #0]
 8000dac:	4002      	ands	r2, r0
 8000dae:	600a      	str	r2, [r1, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000db0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8000db2:	6808      	ldr	r0, [r1, #0]
 8000db4:	0652      	lsls	r2, r2, #25
 8000db6:	4302      	orrs	r2, r0
 8000db8:	600a      	str	r2, [r1, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000dba:	2280      	movs	r2, #128	@ 0x80
 8000dbc:	6899      	ldr	r1, [r3, #8]
 8000dbe:	0552      	lsls	r2, r2, #21
 8000dc0:	4211      	tst	r1, r2
 8000dc2:	d04d      	beq.n	8000e60 <HAL_ADC_Init+0x150>
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	493e      	ldr	r1, [pc, #248]	@ (8000ec0 <HAL_ADC_Init+0x1b0>)
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000dc8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000dca:	400a      	ands	r2, r1
 8000dcc:	60da      	str	r2, [r3, #12]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000dce:	2220      	movs	r2, #32
 8000dd0:	5ca0      	ldrb	r0, [r4, r2]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000dd2:	68e2      	ldr	r2, [r4, #12]
 8000dd4:	68d9      	ldr	r1, [r3, #12]
 8000dd6:	432a      	orrs	r2, r5
 8000dd8:	430a      	orrs	r2, r1
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000dda:	69a1      	ldr	r1, [r4, #24]
 8000ddc:	0389      	lsls	r1, r1, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000dde:	430a      	orrs	r2, r1
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000de0:	69e1      	ldr	r1, [r4, #28]
 8000de2:	03c9      	lsls	r1, r1, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000de4:	430a      	orrs	r2, r1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000de6:	0341      	lsls	r1, r0, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000de8:	430a      	orrs	r2, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000dea:	212c      	movs	r1, #44	@ 0x2c
 8000dec:	5c61      	ldrb	r1, [r4, r1]
 8000dee:	0049      	lsls	r1, r1, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000df0:	430a      	orrs	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000df2:	6921      	ldr	r1, [r4, #16]
 8000df4:	3902      	subs	r1, #2
 8000df6:	424d      	negs	r5, r1
 8000df8:	4169      	adcs	r1, r5
 8000dfa:	0089      	lsls	r1, r1, #2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000dfc:	430a      	orrs	r2, r1
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dfe:	21c2      	movs	r1, #194	@ 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e00:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e02:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000e04:	31ff      	adds	r1, #255	@ 0xff
 8000e06:	428a      	cmp	r2, r1
 8000e08:	d004      	beq.n	8000e14 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000e0a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8000e0c:	68d9      	ldr	r1, [r3, #12]
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	430a      	orrs	r2, r1
 8000e12:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e14:	2221      	movs	r2, #33	@ 0x21
 8000e16:	5ca2      	ldrb	r2, [r4, r2]
 8000e18:	2a01      	cmp	r2, #1
 8000e1a:	d039      	beq.n	8000e90 <HAL_ADC_Init+0x180>
  if (hadc->Init.OversamplingMode == ENABLE)
 8000e1c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8000e1e:	2901      	cmp	r1, #1
 8000e20:	d022      	beq.n	8000e68 <HAL_ADC_Init+0x158>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000e22:	2201      	movs	r2, #1
 8000e24:	6919      	ldr	r1, [r3, #16]
 8000e26:	420a      	tst	r2, r1
 8000e28:	d002      	beq.n	8000e30 <HAL_ADC_Init+0x120>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000e2a:	6919      	ldr	r1, [r3, #16]
 8000e2c:	4391      	bics	r1, r2
 8000e2e:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000e30:	2107      	movs	r1, #7
 8000e32:	695a      	ldr	r2, [r3, #20]
  return HAL_OK;
 8000e34:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000e36:	438a      	bics	r2, r1
 8000e38:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000e3a:	695a      	ldr	r2, [r3, #20]
 8000e3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	615a      	str	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8000e42:	2300      	movs	r3, #0
  ADC_STATE_CLR_SET(hadc->State,
 8000e44:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8000e46:	65a3      	str	r3, [r4, #88]	@ 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8000e48:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000e4a:	4393      	bics	r3, r2
 8000e4c:	3a02      	subs	r2, #2
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	6563      	str	r3, [r4, #84]	@ 0x54
  return HAL_OK;
 8000e52:	e798      	b.n	8000d86 <HAL_ADC_Init+0x76>
    hadc->Lock = HAL_UNLOCKED;
 8000e54:	2250      	movs	r2, #80	@ 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8000e56:	6583      	str	r3, [r0, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000e58:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000e5a:	f7ff fd23 	bl	80008a4 <HAL_ADC_MspInit>
 8000e5e:	e75e      	b.n	8000d1e <HAL_ADC_Init+0xe>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000e60:	6899      	ldr	r1, [r3, #8]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	e7ad      	b.n	8000dc4 <HAL_ADC_Init+0xb4>
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000e68:	691a      	ldr	r2, [r3, #16]
 8000e6a:	4816      	ldr	r0, [pc, #88]	@ (8000ec4 <HAL_ADC_Init+0x1b4>)
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e6c:	6c65      	ldr	r5, [r4, #68]	@ 0x44
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000e6e:	4002      	ands	r2, r0
 8000e70:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e72:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000e74:	6918      	ldr	r0, [r3, #16]
 8000e76:	432a      	orrs	r2, r5
                              hadc->Init.Oversample.RightBitShift             |
 8000e78:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8000e7a:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000e7c:	4302      	orrs	r2, r0
 8000e7e:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	430a      	orrs	r2, r1
 8000e84:	611a      	str	r2, [r3, #16]
 8000e86:	e7d3      	b.n	8000e30 <HAL_ADC_Init+0x120>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	420a      	tst	r2, r1
 8000e8c:	d18b      	bne.n	8000da6 <HAL_ADC_Init+0x96>
 8000e8e:	e75a      	b.n	8000d46 <HAL_ADC_Init+0x36>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e90:	2800      	cmp	r0, #0
 8000e92:	d105      	bne.n	8000ea0 <HAL_ADC_Init+0x190>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000e94:	2280      	movs	r2, #128	@ 0x80
 8000e96:	68d9      	ldr	r1, [r3, #12]
 8000e98:	0252      	lsls	r2, r2, #9
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	e7bd      	b.n	8000e1c <HAL_ADC_Init+0x10c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ea0:	2020      	movs	r0, #32
 8000ea2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8000ea4:	4301      	orrs	r1, r0
 8000ea6:	6561      	str	r1, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ea8:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	65a2      	str	r2, [r4, #88]	@ 0x58
 8000eae:	e7b5      	b.n	8000e1c <HAL_ADC_Init+0x10c>
 8000eb0:	fffffefd 	.word	0xfffffefd
 8000eb4:	ffc3ffff 	.word	0xffc3ffff
 8000eb8:	40012708 	.word	0x40012708
 8000ebc:	fdffffff 	.word	0xfdffffff
 8000ec0:	fffe0219 	.word	0xfffe0219
 8000ec4:	fffffc03 	.word	0xfffffc03

08000ec8 <HAL_ADC_Start_DMA>:
{
 8000ec8:	b5d0      	push	{r4, r6, r7, lr}
 8000eca:	000e      	movs	r6, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ecc:	6801      	ldr	r1, [r0, #0]
{
 8000ece:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ed0:	688b      	ldr	r3, [r1, #8]
{
 8000ed2:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ed4:	075b      	lsls	r3, r3, #29
 8000ed6:	d432      	bmi.n	8000f3e <HAL_ADC_Start_DMA+0x76>
    __HAL_LOCK(hadc);
 8000ed8:	2350      	movs	r3, #80	@ 0x50
 8000eda:	5cc2      	ldrb	r2, [r0, r3]
 8000edc:	2a01      	cmp	r2, #1
 8000ede:	d02e      	beq.n	8000f3e <HAL_ADC_Start_DMA+0x76>
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	54c2      	strb	r2, [r0, r3]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000ee4:	68cb      	ldr	r3, [r1, #12]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000eea:	69c3      	ldr	r3, [r0, #28]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d004      	beq.n	8000efa <HAL_ADC_Start_DMA+0x32>
      tmp_hal_status = ADC_Enable(hadc);
 8000ef0:	f7ff fe84 	bl	8000bfc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	d121      	bne.n	8000f3c <HAL_ADC_Start_DMA+0x74>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ef8:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000efa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <HAL_ADC_Start_DMA+0x7c>)
 8000efe:	401a      	ands	r2, r3
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4313      	orrs	r3, r2
 8000f06:	6563      	str	r3, [r4, #84]	@ 0x54
      __HAL_UNLOCK(hadc);
 8000f08:	2250      	movs	r2, #80	@ 0x50
      ADC_CLEAR_ERRORCODE(hadc);
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_UNLOCK(hadc);
 8000f0e:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f10:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <HAL_ADC_Start_DMA+0x80>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f14:	3a40      	subs	r2, #64	@ 0x40
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f16:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <HAL_ADC_Start_DMA+0x84>)
 8000f1a:	6343      	str	r3, [r0, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f1c:	231c      	movs	r3, #28
 8000f1e:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f20:	684b      	ldr	r3, [r1, #4]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	604b      	str	r3, [r1, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000f26:	0032      	movs	r2, r6
 8000f28:	003b      	movs	r3, r7
 8000f2a:	3140      	adds	r1, #64	@ 0x40
 8000f2c:	f000 fa46 	bl	80013bc <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f30:	2104      	movs	r1, #4
 8000f32:	2000      	movs	r0, #0
 8000f34:	6822      	ldr	r2, [r4, #0]
 8000f36:	6893      	ldr	r3, [r2, #8]
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	6093      	str	r3, [r2, #8]
}
 8000f3c:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_LOCK(hadc);
 8000f3e:	2002      	movs	r0, #2
 8000f40:	e7fc      	b.n	8000f3c <HAL_ADC_Start_DMA+0x74>
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	fffff0fe 	.word	0xfffff0fe
 8000f48:	08000fe1 	.word	0x08000fe1
 8000f4c:	08001059 	.word	0x08001059

08000f50 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8000f50:	2350      	movs	r3, #80	@ 0x50
{
 8000f52:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8000f54:	5cc2      	ldrb	r2, [r0, r3]
{
 8000f56:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000f58:	2a01      	cmp	r2, #1
 8000f5a:	d023      	beq.n	8000fa4 <HAL_ADC_Stop_DMA+0x54>
 8000f5c:	2601      	movs	r6, #1
 8000f5e:	54c6      	strb	r6, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000f60:	f7ff fea4 	bl	8000cac <ADC_ConversionStop>
 8000f64:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8000f66:	d118      	bne.n	8000f9a <HAL_ADC_Stop_DMA+0x4a>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8000f68:	6823      	ldr	r3, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000f6a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	43b2      	bics	r2, r6
 8000f70:	60da      	str	r2, [r3, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000f72:	2225      	movs	r2, #37	@ 0x25
 8000f74:	5c82      	ldrb	r2, [r0, r2]
 8000f76:	2a02      	cmp	r2, #2
 8000f78:	d016      	beq.n	8000fa8 <HAL_ADC_Stop_DMA+0x58>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000f7a:	2110      	movs	r1, #16
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	438a      	bics	r2, r1
 8000f80:	605a      	str	r2, [r3, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8000f82:	0020      	movs	r0, r4
 8000f84:	f7ff fdfc 	bl	8000b80 <ADC_Disable>
 8000f88:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 8000f8a:	d106      	bne.n	8000f9a <HAL_ADC_Stop_DMA+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 8000f8c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <HAL_ADC_Stop_DMA+0x88>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	3204      	adds	r2, #4
 8000f94:	32ff      	adds	r2, #255	@ 0xff
 8000f96:	4313      	orrs	r3, r2
 8000f98:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8000f9a:	2350      	movs	r3, #80	@ 0x50
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	54e2      	strb	r2, [r4, r3]
}
 8000fa0:	0028      	movs	r0, r5
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8000fa4:	2502      	movs	r5, #2
 8000fa6:	e7fb      	b.n	8000fa0 <HAL_ADC_Stop_DMA+0x50>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8000fa8:	f000 fa52 	bl	8001450 <HAL_DMA_Abort>
 8000fac:	1e05      	subs	r5, r0, #0
      if (tmp_hal_status != HAL_OK)
 8000fae:	d00c      	beq.n	8000fca <HAL_ADC_Stop_DMA+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000fb0:	2240      	movs	r2, #64	@ 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000fb2:	2110      	movs	r1, #16
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000fb4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      ADC_Disable(hadc);
 8000fb6:	0020      	movs	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000fb8:	4313      	orrs	r3, r2
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000fba:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000fbc:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000fbe:	6853      	ldr	r3, [r2, #4]
 8000fc0:	438b      	bics	r3, r1
 8000fc2:	6053      	str	r3, [r2, #4]
      ADC_Disable(hadc);
 8000fc4:	f7ff fddc 	bl	8000b80 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000fc8:	e7e7      	b.n	8000f9a <HAL_ADC_Stop_DMA+0x4a>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000fca:	2110      	movs	r1, #16
 8000fcc:	6822      	ldr	r2, [r4, #0]
 8000fce:	6853      	ldr	r3, [r2, #4]
 8000fd0:	438b      	bics	r3, r1
 8000fd2:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8000fd4:	e7d5      	b.n	8000f82 <HAL_ADC_Stop_DMA+0x32>
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	fffffefe 	.word	0xfffffefe

08000fdc <HAL_ADC_ConvCpltCallback>:
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 8000fdc:	4770      	bx	lr
 8000fde:	46c0      	nop			@ (mov r8, r8)

08000fe0 <ADC_DMAConvCplt>:
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000fe0:	2150      	movs	r1, #80	@ 0x50
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000fe2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8000fe4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000fe6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8000fe8:	4211      	tst	r1, r2
 8000fea:	d10e      	bne.n	800100a <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fec:	2280      	movs	r2, #128	@ 0x80
 8000fee:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8000ff0:	0092      	lsls	r2, r2, #2
 8000ff2:	430a      	orrs	r2, r1
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ff4:	21c0      	movs	r1, #192	@ 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ff6:	655a      	str	r2, [r3, #84]	@ 0x54
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	0109      	lsls	r1, r1, #4
 8000ffc:	68d0      	ldr	r0, [r2, #12]
 8000ffe:	4208      	tst	r0, r1
 8001000:	d007      	beq.n	8001012 <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc);
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff ffea 	bl	8000fdc <HAL_ADC_ConvCpltCallback>
}
 8001008:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800100a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800100e:	4798      	blx	r3
}
 8001010:	e7fa      	b.n	8001008 <ADC_DMAConvCplt+0x28>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8001012:	2120      	movs	r1, #32
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001014:	5c58      	ldrb	r0, [r3, r1]
 8001016:	2800      	cmp	r0, #0
 8001018:	d1f3      	bne.n	8001002 <ADC_DMAConvCplt+0x22>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800101a:	6810      	ldr	r0, [r2, #0]
 800101c:	0700      	lsls	r0, r0, #28
 800101e:	d5f0      	bpl.n	8001002 <ADC_DMAConvCplt+0x22>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001020:	6890      	ldr	r0, [r2, #8]
 8001022:	0740      	lsls	r0, r0, #29
 8001024:	d40b      	bmi.n	800103e <ADC_DMAConvCplt+0x5e>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001026:	200c      	movs	r0, #12
 8001028:	6851      	ldr	r1, [r2, #4]
 800102a:	4381      	bics	r1, r0
 800102c:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800102e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001030:	4907      	ldr	r1, [pc, #28]	@ (8001050 <ADC_DMAConvCplt+0x70>)
 8001032:	400a      	ands	r2, r1
 8001034:	3104      	adds	r1, #4
 8001036:	31ff      	adds	r1, #255	@ 0xff
 8001038:	430a      	orrs	r2, r1
 800103a:	655a      	str	r2, [r3, #84]	@ 0x54
 800103c:	e7e1      	b.n	8001002 <ADC_DMAConvCplt+0x22>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800103e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001040:	430a      	orrs	r2, r1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001042:	2101      	movs	r1, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001044:	655a      	str	r2, [r3, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001046:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001048:	430a      	orrs	r2, r1
 800104a:	659a      	str	r2, [r3, #88]	@ 0x58
 800104c:	e7d9      	b.n	8001002 <ADC_DMAConvCplt+0x22>
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	fffffefe 	.word	0xfffffefe

08001054 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8001054:	4770      	bx	lr
 8001056:	46c0      	nop			@ (mov r8, r8)

08001058 <ADC_DMAError>:
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001058:	2240      	movs	r2, #64	@ 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800105a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 800105c:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800105e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001060:	4313      	orrs	r3, r2
 8001062:	6543      	str	r3, [r0, #84]	@ 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001064:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001066:	3a3c      	subs	r2, #60	@ 0x3c
 8001068:	4313      	orrs	r3, r2
 800106a:	6583      	str	r3, [r0, #88]	@ 0x58
  HAL_ADC_ErrorCallback(hadc);
 800106c:	f7ff fff2 	bl	8001054 <HAL_ADC_ErrorCallback>
}
 8001070:	bd10      	pop	{r4, pc}
 8001072:	46c0      	nop			@ (mov r8, r8)

08001074 <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 8001074:	2350      	movs	r3, #80	@ 0x50
{
 8001076:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001078:	5cc2      	ldrb	r2, [r0, r3]
{
 800107a:	0004      	movs	r4, r0
 800107c:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 800107e:	2a01      	cmp	r2, #1
 8001080:	d055      	beq.n	800112e <HAL_ADC_ConfigChannel+0xba>
 8001082:	2201      	movs	r2, #1
 8001084:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001086:	6802      	ldr	r2, [r0, #0]
 8001088:	6890      	ldr	r0, [r2, #8]
 800108a:	0740      	lsls	r0, r0, #29
 800108c:	d42e      	bmi.n	80010ec <HAL_ADC_ConfigChannel+0x78>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800108e:	2380      	movs	r3, #128	@ 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001090:	680d      	ldr	r5, [r1, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8001092:	4e28      	ldr	r6, [pc, #160]	@ (8001134 <HAL_ADC_ConfigChannel+0xc0>)
 8001094:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001096:	0368      	lsls	r0, r5, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001098:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800109a:	0b40      	lsrs	r0, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800109c:	402b      	ands	r3, r5
  if (sConfig->Rank != ADC_RANK_NONE)
 800109e:	42b1      	cmp	r1, r6
 80010a0:	d02c      	beq.n	80010fc <HAL_ADC_ConfigChannel+0x88>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80010a2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80010a4:	4301      	orrs	r1, r0
 80010a6:	6291      	str	r1, [r2, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d017      	beq.n	80010dc <HAL_ADC_ConfigChannel+0x68>
      ADC->CCR |= ADC_CCR_TSEN;
 80010ac:	2380      	movs	r3, #128	@ 0x80
 80010ae:	4a22      	ldr	r2, [pc, #136]	@ (8001138 <HAL_ADC_ConfigChannel+0xc4>)
 80010b0:	041b      	lsls	r3, r3, #16
 80010b2:	6811      	ldr	r1, [r2, #0]
 80010b4:	430b      	orrs	r3, r1
 80010b6:	6013      	str	r3, [r2, #0]
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80010b8:	4b20      	ldr	r3, [pc, #128]	@ (800113c <HAL_ADC_ConfigChannel+0xc8>)
 80010ba:	4921      	ldr	r1, [pc, #132]	@ (8001140 <HAL_ADC_ConfigChannel+0xcc>)
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	f7ff f823 	bl	8000108 <__udivsi3>
 80010c2:	0083      	lsls	r3, r0, #2
 80010c4:	181b      	adds	r3, r3, r0
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
  while (waitLoopIndex != 0U)
 80010ca:	9b01      	ldr	r3, [sp, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <HAL_ADC_ConfigChannel+0x68>
    waitLoopIndex--;
 80010d0:	9b01      	ldr	r3, [sp, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	9301      	str	r3, [sp, #4]
  while (waitLoopIndex != 0U)
 80010d6:	9b01      	ldr	r3, [sp, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1f9      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x5c>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80010dc:	03ad      	lsls	r5, r5, #14
 80010de:	d41f      	bmi.n	8001120 <HAL_ADC_ConfigChannel+0xac>
  __HAL_UNLOCK(hadc);
 80010e0:	2350      	movs	r3, #80	@ 0x50
 80010e2:	2200      	movs	r2, #0
  return HAL_OK;
 80010e4:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80010e6:	54e2      	strb	r2, [r4, r3]
}
 80010e8:	b002      	add	sp, #8
 80010ea:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010ec:	2120      	movs	r1, #32
 80010ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    return HAL_ERROR;
 80010f0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f2:	430a      	orrs	r2, r1
 80010f4:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 80010f6:	2200      	movs	r2, #0
 80010f8:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 80010fa:	e7f5      	b.n	80010e8 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80010fc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80010fe:	4381      	bics	r1, r0
 8001100:	6291      	str	r1, [r2, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <HAL_ADC_ConfigChannel+0x9c>
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001106:	4a0c      	ldr	r2, [pc, #48]	@ (8001138 <HAL_ADC_ConfigChannel+0xc4>)
 8001108:	490e      	ldr	r1, [pc, #56]	@ (8001144 <HAL_ADC_ConfigChannel+0xd0>)
 800110a:	6813      	ldr	r3, [r2, #0]
 800110c:	400b      	ands	r3, r1
 800110e:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001110:	03ad      	lsls	r5, r5, #14
 8001112:	d5e5      	bpl.n	80010e0 <HAL_ADC_ConfigChannel+0x6c>
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001114:	4a08      	ldr	r2, [pc, #32]	@ (8001138 <HAL_ADC_ConfigChannel+0xc4>)
 8001116:	490c      	ldr	r1, [pc, #48]	@ (8001148 <HAL_ADC_ConfigChannel+0xd4>)
 8001118:	6813      	ldr	r3, [r2, #0]
 800111a:	400b      	ands	r3, r1
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e7df      	b.n	80010e0 <HAL_ADC_ConfigChannel+0x6c>
      ADC->CCR |= ADC_CCR_VREFEN;
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <HAL_ADC_ConfigChannel+0xc4>)
 8001124:	03db      	lsls	r3, r3, #15
 8001126:	6811      	ldr	r1, [r2, #0]
 8001128:	430b      	orrs	r3, r1
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	e7d8      	b.n	80010e0 <HAL_ADC_ConfigChannel+0x6c>
  __HAL_LOCK(hadc);
 800112e:	2002      	movs	r0, #2
 8001130:	e7da      	b.n	80010e8 <HAL_ADC_ConfigChannel+0x74>
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	00001001 	.word	0x00001001
 8001138:	40012708 	.word	0x40012708
 800113c:	2000000c 	.word	0x2000000c
 8001140:	000f4240 	.word	0x000f4240
 8001144:	ff7fffff 	.word	0xff7fffff
 8001148:	ffbfffff 	.word	0xffbfffff

0800114c <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 800114c:	2250      	movs	r2, #80	@ 0x50
{
 800114e:	b570      	push	{r4, r5, r6, lr}
 8001150:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 8001152:	5c80      	ldrb	r0, [r0, r2]
  if (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
 8001154:	680c      	ldr	r4, [r1, #0]
  __HAL_LOCK(hadc);
 8001156:	2801      	cmp	r0, #1
 8001158:	d03e      	beq.n	80011d8 <HAL_ADC_AnalogWDGConfig+0x8c>
 800115a:	2001      	movs	r0, #1
 800115c:	5498      	strb	r0, [r3, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	6890      	ldr	r0, [r2, #8]
 8001162:	0740      	lsls	r0, r0, #29
 8001164:	d42a      	bmi.n	80011bc <HAL_ADC_AnalogWDGConfig+0x70>
    if (AnalogWDGConfig->ITMode == ENABLE)
 8001166:	7a08      	ldrb	r0, [r1, #8]
 8001168:	2801      	cmp	r0, #1
 800116a:	d030      	beq.n	80011ce <HAL_ADC_AnalogWDGConfig+0x82>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 800116c:	2580      	movs	r5, #128	@ 0x80
 800116e:	6850      	ldr	r0, [r2, #4]
 8001170:	43a8      	bics	r0, r5
 8001172:	6050      	str	r0, [r2, #4]
                              (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 8001174:	26f8      	movs	r6, #248	@ 0xf8
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDSGL |
 8001176:	68d0      	ldr	r0, [r2, #12]
 8001178:	4d18      	ldr	r5, [pc, #96]	@ (80011dc <HAL_ADC_AnalogWDGConfig+0x90>)
                              (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 800117a:	05f6      	lsls	r6, r6, #23
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDSGL |
 800117c:	4028      	ands	r0, r5
 800117e:	60d0      	str	r0, [r2, #12]
    hadc->Instance->CFGR1 |= (AnalogWDGConfig->WatchdogMode |
 8001180:	68d5      	ldr	r5, [r2, #12]
                              (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 8001182:	6848      	ldr	r0, [r1, #4]
    hadc->Instance->CFGR1 |= (AnalogWDGConfig->WatchdogMode |
 8001184:	432c      	orrs	r4, r5
                              (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 8001186:	4030      	ands	r0, r6
    hadc->Instance->CFGR1 |= (AnalogWDGConfig->WatchdogMode |
 8001188:	4320      	orrs	r0, r4
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800118a:	2403      	movs	r4, #3
    hadc->Instance->CFGR1 |= (AnalogWDGConfig->WatchdogMode |
 800118c:	60d0      	str	r0, [r2, #12]
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800118e:	68d0      	ldr	r0, [r2, #12]
 8001190:	68cd      	ldr	r5, [r1, #12]
 8001192:	08c0      	lsrs	r0, r0, #3
 8001194:	4020      	ands	r0, r4
 8001196:	0040      	lsls	r0, r0, #1
 8001198:	4085      	lsls	r5, r0
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800119a:	68d0      	ldr	r0, [r2, #12]
    hadc->Instance->TR = ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted);
 800119c:	042d      	lsls	r5, r5, #16
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800119e:	08c0      	lsrs	r0, r0, #3
 80011a0:	4004      	ands	r4, r0
 80011a2:	6908      	ldr	r0, [r1, #16]
 80011a4:	0064      	lsls	r4, r4, #1
 80011a6:	40a0      	lsls	r0, r4
    hadc->Instance->TR &= (uint32_t) ~(ADC_TR_HT | ADC_TR_LT);
 80011a8:	6a11      	ldr	r1, [r2, #32]
 80011aa:	4c0d      	ldr	r4, [pc, #52]	@ (80011e0 <HAL_ADC_AnalogWDGConfig+0x94>)
 80011ac:	4021      	ands	r1, r4
 80011ae:	6211      	str	r1, [r2, #32]
    hadc->Instance->TR = ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted);
 80011b0:	6215      	str	r5, [r2, #32]
    hadc->Instance->TR |= tmpAWDLowThresholdShifted;
 80011b2:	6a11      	ldr	r1, [r2, #32]
 80011b4:	4301      	orrs	r1, r0
 80011b6:	6211      	str	r1, [r2, #32]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011b8:	2000      	movs	r0, #0
 80011ba:	e004      	b.n	80011c6 <HAL_ADC_AnalogWDGConfig+0x7a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011bc:	2120      	movs	r1, #32
    tmp_hal_status = HAL_ERROR;
 80011be:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80011c2:	430a      	orrs	r2, r1
 80011c4:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 80011c6:	2250      	movs	r2, #80	@ 0x50
 80011c8:	2100      	movs	r1, #0
 80011ca:	5499      	strb	r1, [r3, r2]
}
 80011cc:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80011ce:	2580      	movs	r5, #128	@ 0x80
 80011d0:	6850      	ldr	r0, [r2, #4]
 80011d2:	4328      	orrs	r0, r5
 80011d4:	6050      	str	r0, [r2, #4]
 80011d6:	e7cd      	b.n	8001174 <HAL_ADC_AnalogWDGConfig+0x28>
  __HAL_LOCK(hadc);
 80011d8:	2002      	movs	r0, #2
 80011da:	e7f7      	b.n	80011cc <HAL_ADC_AnalogWDGConfig+0x80>
 80011dc:	833fffff 	.word	0x833fffff
 80011e0:	f000f000 	.word	0xf000f000

080011e4 <HAL_ADCEx_Calibration_Start>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011e4:	2350      	movs	r3, #80	@ 0x50
{
 80011e6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80011e8:	5cc2      	ldrb	r2, [r0, r3]
{
 80011ea:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80011ec:	2a01      	cmp	r2, #1
 80011ee:	d04b      	beq.n	8001288 <HAL_ADCEx_Calibration_Start+0xa4>
 80011f0:	2201      	movs	r2, #1
 80011f2:	54c2      	strb	r2, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011f4:	6803      	ldr	r3, [r0, #0]
 80011f6:	3202      	adds	r2, #2
 80011f8:	6899      	ldr	r1, [r3, #8]
 80011fa:	400a      	ands	r2, r1
 80011fc:	2a01      	cmp	r2, #1
 80011fe:	d10b      	bne.n	8001218 <HAL_ADCEx_Calibration_Start+0x34>
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	420a      	tst	r2, r1
 8001204:	d008      	beq.n	8001218 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001206:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001208:	321f      	adds	r2, #31
 800120a:	4313      	orrs	r3, r2
 800120c:	6543      	str	r3, [r0, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800120e:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001210:	2350      	movs	r3, #80	@ 0x50
 8001212:	2200      	movs	r2, #0
 8001214:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8001216:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001218:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800121a:	491c      	ldr	r1, [pc, #112]	@ (800128c <HAL_ADCEx_Calibration_Start+0xa8>)
 800121c:	400a      	ands	r2, r1
 800121e:	3106      	adds	r1, #6
 8001220:	31ff      	adds	r1, #255	@ 0xff
 8001222:	430a      	orrs	r2, r1
 8001224:	6562      	str	r2, [r4, #84]	@ 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001226:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	3101      	adds	r1, #1
 800122c:	438a      	bics	r2, r1
 800122e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001230:	2280      	movs	r2, #128	@ 0x80
 8001232:	6899      	ldr	r1, [r3, #8]
 8001234:	0612      	lsls	r2, r2, #24
 8001236:	430a      	orrs	r2, r1
 8001238:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800123a:	f7ff fc89 	bl	8000b50 <HAL_GetTick>
 800123e:	0005      	movs	r5, r0
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001240:	6823      	ldr	r3, [r4, #0]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	2a00      	cmp	r2, #0
 8001246:	da13      	bge.n	8001270 <HAL_ADCEx_Calibration_Start+0x8c>
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001248:	f7ff fc82 	bl	8000b50 <HAL_GetTick>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800124c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800124e:	1b40      	subs	r0, r0, r5
 8001250:	280a      	cmp	r0, #10
 8001252:	d9f6      	bls.n	8001242 <HAL_ADCEx_Calibration_Start+0x5e>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	2a00      	cmp	r2, #0
 8001258:	daf3      	bge.n	8001242 <HAL_ADCEx_Calibration_Start+0x5e>
          ADC_STATE_CLR_SET(hadc->State,
 800125a:	2212      	movs	r2, #18
 800125c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 800125e:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 8001260:	4393      	bics	r3, r2
 8001262:	3a02      	subs	r2, #2
 8001264:	4313      	orrs	r3, r2
 8001266:	6563      	str	r3, [r4, #84]	@ 0x54
          __HAL_UNLOCK(hadc);
 8001268:	2200      	movs	r2, #0
 800126a:	2350      	movs	r3, #80	@ 0x50
 800126c:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 800126e:	e7d2      	b.n	8001216 <HAL_ADCEx_Calibration_Start+0x32>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001270:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001272:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001274:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001276:	430e      	orrs	r6, r1
 8001278:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800127a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127c:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800127e:	4393      	bics	r3, r2
 8001280:	3a02      	subs	r2, #2
 8001282:	4313      	orrs	r3, r2
 8001284:	6563      	str	r3, [r4, #84]	@ 0x54
 8001286:	e7c3      	b.n	8001210 <HAL_ADCEx_Calibration_Start+0x2c>
  __HAL_LOCK(hadc);
 8001288:	2002      	movs	r0, #2
 800128a:	e7c4      	b.n	8001216 <HAL_ADCEx_Calibration_Start+0x32>
 800128c:	fffffefd 	.word	0xfffffefd

08001290 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001290:	22ff      	movs	r2, #255	@ 0xff
 8001292:	2303      	movs	r3, #3
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001294:	b510      	push	{r4, lr}
 8001296:	0014      	movs	r4, r2
 8001298:	4003      	ands	r3, r0
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800129e:	0189      	lsls	r1, r1, #6
 80012a0:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a2:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012a4:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 80012a6:	2800      	cmp	r0, #0
 80012a8:	db0b      	blt.n	80012c2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <HAL_NVIC_SetPriority+0x4c>)
 80012ac:	21c0      	movs	r1, #192	@ 0xc0
 80012ae:	469c      	mov	ip, r3
 80012b0:	0880      	lsrs	r0, r0, #2
 80012b2:	0080      	lsls	r0, r0, #2
 80012b4:	4460      	add	r0, ip
 80012b6:	0089      	lsls	r1, r1, #2
 80012b8:	5843      	ldr	r3, [r0, r1]
 80012ba:	4023      	ands	r3, r4
 80012bc:	4313      	orrs	r3, r2
 80012be:	5043      	str	r3, [r0, r1]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80012c0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c2:	230f      	movs	r3, #15
 80012c4:	4906      	ldr	r1, [pc, #24]	@ (80012e0 <HAL_NVIC_SetPriority+0x50>)
 80012c6:	4003      	ands	r3, r0
 80012c8:	468c      	mov	ip, r1
 80012ca:	3b08      	subs	r3, #8
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4463      	add	r3, ip
 80012d2:	69d9      	ldr	r1, [r3, #28]
 80012d4:	400c      	ands	r4, r1
 80012d6:	4314      	orrs	r4, r2
 80012d8:	61dc      	str	r4, [r3, #28]
 80012da:	e7f1      	b.n	80012c0 <HAL_NVIC_SetPriority+0x30>
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012e4:	2800      	cmp	r0, #0
 80012e6:	db05      	blt.n	80012f4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e8:	221f      	movs	r2, #31
 80012ea:	2301      	movs	r3, #1
 80012ec:	4002      	ands	r2, r0
 80012ee:	4093      	lsls	r3, r2
 80012f0:	4a01      	ldr	r2, [pc, #4]	@ (80012f8 <HAL_NVIC_EnableIRQ+0x14>)
 80012f2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80012f4:	4770      	bx	lr
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	e000e100 	.word	0xe000e100

080012fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	2280      	movs	r2, #128	@ 0x80
 80012fe:	1e43      	subs	r3, r0, #1
 8001300:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	4293      	cmp	r3, r2
 8001306:	d20e      	bcs.n	8001326 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001308:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130a:	4a07      	ldr	r2, [pc, #28]	@ (8001328 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800130c:	4807      	ldr	r0, [pc, #28]	@ (800132c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001310:	6a03      	ldr	r3, [r0, #32]
 8001312:	0609      	lsls	r1, r1, #24
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	430b      	orrs	r3, r1
 800131a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800131c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131e:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001322:	3307      	adds	r3, #7
 8001324:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001326:	4770      	bx	lr
 8001328:	e000e010 	.word	0xe000e010
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001330:	b570      	push	{r4, r5, r6, lr}
 8001332:	1e04      	subs	r4, r0, #0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001334:	d038      	beq.n	80013a8 <HAL_DMA_Init+0x78>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001336:	6805      	ldr	r5, [r0, #0]
 8001338:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <HAL_DMA_Init+0x7c>)
 800133a:	2114      	movs	r1, #20
 800133c:	18e8      	adds	r0, r5, r3
 800133e:	f7fe fee3 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001342:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <HAL_DMA_Init+0x80>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001344:	2202      	movs	r2, #2
  hdma->DmaBaseAddress = DMA1;
 8001346:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001348:	2325      	movs	r3, #37	@ 0x25
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800134a:	0080      	lsls	r0, r0, #2
 800134c:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800134e:	54e2      	strb	r2, [r4, r3]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001350:	682a      	ldr	r2, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001352:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <HAL_DMA_Init+0x84>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001354:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001356:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001358:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135a:	6926      	ldr	r6, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 800135c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135e:	4333      	orrs	r3, r6
 8001360:	6966      	ldr	r6, [r4, #20]
 8001362:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001364:	69a6      	ldr	r6, [r4, #24]
 8001366:	4333      	orrs	r3, r6
 8001368:	69e6      	ldr	r6, [r4, #28]
 800136a:	4333      	orrs	r3, r6
          hdma->Init.Mode                | hdma->Init.Priority;
 800136c:	6a26      	ldr	r6, [r4, #32]
 800136e:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8001370:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001372:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001374:	2380      	movs	r3, #128	@ 0x80
 8001376:	01db      	lsls	r3, r3, #7
 8001378:	4299      	cmp	r1, r3
 800137a:	d00c      	beq.n	8001396 <HAL_DMA_Init+0x66>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800137c:	211c      	movs	r1, #28
 800137e:	4001      	ands	r1, r0
 8001380:	200f      	movs	r0, #15
 8001382:	4088      	lsls	r0, r1
 8001384:	4a0c      	ldr	r2, [pc, #48]	@ (80013b8 <HAL_DMA_Init+0x88>)
 8001386:	6813      	ldr	r3, [r2, #0]
 8001388:	4383      	bics	r3, r0
 800138a:	6013      	str	r3, [r2, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800138c:	6863      	ldr	r3, [r4, #4]
 800138e:	6810      	ldr	r0, [r2, #0]
 8001390:	408b      	lsls	r3, r1
 8001392:	4303      	orrs	r3, r0
 8001394:	6013      	str	r3, [r2, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001396:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001398:	2225      	movs	r2, #37	@ 0x25
 800139a:	2101      	movs	r1, #1

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 800139c:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139e:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80013a0:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 80013a2:	3a01      	subs	r2, #1
 80013a4:	54a3      	strb	r3, [r4, r2]
}
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80013a8:	2001      	movs	r0, #1
 80013aa:	e7fc      	b.n	80013a6 <HAL_DMA_Init+0x76>
 80013ac:	bffdfff8 	.word	0xbffdfff8
 80013b0:	40020000 	.word	0x40020000
 80013b4:	ffff800f 	.word	0xffff800f
 80013b8:	400200a8 	.word	0x400200a8

080013bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013be:	46ce      	mov	lr, r9
 80013c0:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013c2:	2424      	movs	r4, #36	@ 0x24
{
 80013c4:	b580      	push	{r7, lr}
  __HAL_LOCK(hdma);
 80013c6:	5d05      	ldrb	r5, [r0, r4]
 80013c8:	2d01      	cmp	r5, #1
 80013ca:	d008      	beq.n	80013de <HAL_DMA_Start_IT+0x22>
 80013cc:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 80013ce:	2725      	movs	r7, #37	@ 0x25
  __HAL_LOCK(hdma);
 80013d0:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 80013d2:	5dc5      	ldrb	r5, [r0, r7]
 80013d4:	b2ee      	uxtb	r6, r5
 80013d6:	2d01      	cmp	r5, #1
 80013d8:	d006      	beq.n	80013e8 <HAL_DMA_Start_IT+0x2c>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013da:	2300      	movs	r3, #0
 80013dc:	5503      	strb	r3, [r0, r4]
  __HAL_LOCK(hdma);
 80013de:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 80013e0:	bcc0      	pop	{r6, r7}
 80013e2:	46b9      	mov	r9, r7
 80013e4:	46b0      	mov	r8, r6
 80013e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80013e8:	3c22      	subs	r4, #34	@ 0x22
 80013ea:	55c4      	strb	r4, [r0, r7]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ec:	2400      	movs	r4, #0
 80013ee:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80013f0:	6804      	ldr	r4, [r0, #0]
 80013f2:	6825      	ldr	r5, [r4, #0]
 80013f4:	43b5      	bics	r5, r6
 80013f6:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013f8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80013fa:	46a9      	mov	r9, r5
 80013fc:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80013fe:	46a8      	mov	r8, r5
 8001400:	251c      	movs	r5, #28
 8001402:	4647      	mov	r7, r8
 8001404:	402f      	ands	r7, r5
 8001406:	40be      	lsls	r6, r7
 8001408:	464d      	mov	r5, r9
 800140a:	606e      	str	r6, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800140c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800140e:	6883      	ldr	r3, [r0, #8]
 8001410:	2b10      	cmp	r3, #16
 8001412:	d00e      	beq.n	8001432 <HAL_DMA_Start_IT+0x76>
    if(NULL != hdma->XferHalfCpltCallback )
 8001414:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001416:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001418:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00e      	beq.n	800143c <HAL_DMA_Start_IT+0x80>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800141e:	220e      	movs	r2, #14
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	4313      	orrs	r3, r2
 8001424:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001426:	2201      	movs	r2, #1
 8001428:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800142a:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800142c:	4313      	orrs	r3, r2
 800142e:	6023      	str	r3, [r4, #0]
 8001430:	e7d6      	b.n	80013e0 <HAL_DMA_Start_IT+0x24>
    if(NULL != hdma->XferHalfCpltCallback )
 8001432:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->Instance->CPAR = DstAddress;
 8001434:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001436:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800143c:	2204      	movs	r2, #4
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	4393      	bics	r3, r2
 8001442:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	3206      	adds	r2, #6
 8001448:	4313      	orrs	r3, r2
 800144a:	6023      	str	r3, [r4, #0]
 800144c:	e7eb      	b.n	8001426 <HAL_DMA_Start_IT+0x6a>
 800144e:	46c0      	nop			@ (mov r8, r8)

08001450 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001450:	2225      	movs	r2, #37	@ 0x25
{
 8001452:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001454:	5c81      	ldrb	r1, [r0, r2]
{
 8001456:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001458:	2902      	cmp	r1, #2
 800145a:	d006      	beq.n	800146a <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145c:	3a21      	subs	r2, #33	@ 0x21
 800145e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001460:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001462:	2224      	movs	r2, #36	@ 0x24
 8001464:	2100      	movs	r1, #0
 8001466:	5499      	strb	r1, [r3, r2]
}
 8001468:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800146a:	240e      	movs	r4, #14
 800146c:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800146e:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001470:	6808      	ldr	r0, [r1, #0]
 8001472:	43a0      	bics	r0, r4
 8001474:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8001476:	2001      	movs	r0, #1
 8001478:	680c      	ldr	r4, [r1, #0]
 800147a:	4384      	bics	r4, r0
 800147c:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800147e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001480:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8001482:	4029      	ands	r1, r5
 8001484:	0005      	movs	r5, r0
 8001486:	408d      	lsls	r5, r1
 8001488:	6065      	str	r5, [r4, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800148a:	5498      	strb	r0, [r3, r2]
    return status;
 800148c:	2000      	movs	r0, #0
 800148e:	e7e8      	b.n	8001462 <HAL_DMA_Abort+0x12>

08001490 <HAL_DMA_IRQHandler>:
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001490:	221c      	movs	r2, #28
{
 8001492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001494:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001496:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001498:	4013      	ands	r3, r2
 800149a:	3a18      	subs	r2, #24
 800149c:	0011      	movs	r1, r2
 800149e:	4099      	lsls	r1, r3
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014a0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80014a2:	6805      	ldr	r5, [r0, #0]
 80014a4:	682f      	ldr	r7, [r5, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80014a6:	420c      	tst	r4, r1
 80014a8:	d00d      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x36>
 80014aa:	423a      	tst	r2, r7
 80014ac:	d00b      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ae:	682b      	ldr	r3, [r5, #0]
 80014b0:	069b      	lsls	r3, r3, #26
 80014b2:	d402      	bmi.n	80014ba <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014b4:	682b      	ldr	r3, [r5, #0]
 80014b6:	4393      	bics	r3, r2
 80014b8:	602b      	str	r3, [r5, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80014ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80014bc:	6071      	str	r1, [r6, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d000      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 80014c2:	4798      	blx	r3
}
 80014c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80014c6:	2202      	movs	r2, #2
 80014c8:	0011      	movs	r1, r2
 80014ca:	4099      	lsls	r1, r3
 80014cc:	420c      	tst	r4, r1
 80014ce:	d014      	beq.n	80014fa <HAL_DMA_IRQHandler+0x6a>
 80014d0:	423a      	tst	r2, r7
 80014d2:	d012      	beq.n	80014fa <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014d4:	682b      	ldr	r3, [r5, #0]
 80014d6:	069b      	lsls	r3, r3, #26
 80014d8:	d406      	bmi.n	80014e8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014da:	682b      	ldr	r3, [r5, #0]
 80014dc:	3208      	adds	r2, #8
 80014de:	4393      	bics	r3, r2
 80014e0:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80014e2:	2325      	movs	r3, #37	@ 0x25
 80014e4:	3a09      	subs	r2, #9
 80014e6:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80014e8:	2324      	movs	r3, #36	@ 0x24
 80014ea:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80014ec:	6071      	str	r1, [r6, #4]
    __HAL_UNLOCK(hdma);
 80014ee:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 80014f0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0e6      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 80014f6:	4798      	blx	r3
  return;
 80014f8:	e7e4      	b.n	80014c4 <HAL_DMA_IRQHandler+0x34>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80014fa:	2208      	movs	r2, #8
 80014fc:	0011      	movs	r1, r2
 80014fe:	4099      	lsls	r1, r3
 8001500:	420c      	tst	r4, r1
 8001502:	d0df      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x34>
 8001504:	423a      	tst	r2, r7
 8001506:	d0dd      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x34>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001508:	210e      	movs	r1, #14
 800150a:	682a      	ldr	r2, [r5, #0]
 800150c:	438a      	bics	r2, r1
 800150e:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001510:	2201      	movs	r2, #1
 8001512:	0011      	movs	r1, r2
 8001514:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001516:	2325      	movs	r3, #37	@ 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001518:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800151a:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800151c:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800151e:	2200      	movs	r2, #0
 8001520:	3b01      	subs	r3, #1
 8001522:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8001524:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0cc      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 800152a:	4798      	blx	r3
  return;
 800152c:	e7ca      	b.n	80014c4 <HAL_DMA_IRQHandler+0x34>
 800152e:	46c0      	nop			@ (mov r8, r8)

08001530 <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001530:	231f      	movs	r3, #31
 8001532:	6802      	ldr	r2, [r0, #0]
{
 8001534:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001536:	401a      	ands	r2, r3
 8001538:	3b1e      	subs	r3, #30
 800153a:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800153c:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <HAL_EXTI_IRQHandler+0x20>)
 800153e:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8001540:	420b      	tst	r3, r1
 8001542:	d004      	beq.n	800154e <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001544:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001546:	6843      	ldr	r3, [r0, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d000      	beq.n	800154e <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 800154c:	4798      	blx	r3
    }
  }
}
 800154e:	bd10      	pop	{r4, pc}
 8001550:	40010400 	.word	0x40010400

08001554 <HAL_EXTI_GetPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8001554:	221f      	movs	r2, #31
 8001556:	6803      	ldr	r3, [r0, #0]
 8001558:	4013      	ands	r3, r2
  maskline = (1uL << linepos);

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 800155a:	4a03      	ldr	r2, [pc, #12]	@ (8001568 <HAL_EXTI_GetPending+0x14>)
 800155c:	6950      	ldr	r0, [r2, #20]
  maskline = (1uL << linepos);
 800155e:	2201      	movs	r2, #1
 8001560:	409a      	lsls	r2, r3
  regval = ((EXTI->PR & maskline) >> linepos);
 8001562:	4010      	ands	r0, r2
 8001564:	40d8      	lsrs	r0, r3
  return regval;
}
 8001566:	4770      	bx	lr
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	46de      	mov	lr, fp
 8001570:	4657      	mov	r7, sl
 8001572:	464e      	mov	r6, r9
 8001574:	4645      	mov	r5, r8
 8001576:	b5e0      	push	{r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001578:	680c      	ldr	r4, [r1, #0]
{
 800157a:	468b      	mov	fp, r1
  uint32_t position = 0x00U;
 800157c:	2300      	movs	r3, #0
{
 800157e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 8001580:	2c00      	cmp	r4, #0
 8001582:	d067      	beq.n	8001654 <HAL_GPIO_Init+0xe8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001584:	2201      	movs	r2, #1
 8001586:	409a      	lsls	r2, r3
 8001588:	4694      	mov	ip, r2
 800158a:	4022      	ands	r2, r4
 800158c:	4692      	mov	sl, r2

    if (iocurrent)
 800158e:	4662      	mov	r2, ip
 8001590:	4214      	tst	r4, r2
 8001592:	d05b      	beq.n	800164c <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001594:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001596:	465a      	mov	r2, fp
 8001598:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800159a:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800159c:	6855      	ldr	r5, [r2, #4]
 800159e:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015a0:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a2:	402a      	ands	r2, r5
 80015a4:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015a6:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a8:	2e01      	cmp	r6, #1
 80015aa:	d95a      	bls.n	8001662 <HAL_GPIO_Init+0xf6>
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ac:	2a03      	cmp	r2, #3
 80015ae:	d000      	beq.n	80015b2 <HAL_GPIO_Init+0x46>
 80015b0:	e0ac      	b.n	800170c <HAL_GPIO_Init+0x1a0>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b2:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 80015b4:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015b6:	9900      	ldr	r1, [sp, #0]
 80015b8:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ba:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 80015bc:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015be:	22c0      	movs	r2, #192	@ 0xc0
 80015c0:	0292      	lsls	r2, r2, #10
 80015c2:	4215      	tst	r5, r2
 80015c4:	d042      	beq.n	800164c <HAL_GPIO_Init+0xe0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	2601      	movs	r6, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015c8:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	495d      	ldr	r1, [pc, #372]	@ (8001740 <HAL_GPIO_Init+0x1d4>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015cc:	401f      	ands	r7, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015d0:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	4332      	orrs	r2, r6
 80015d4:	634a      	str	r2, [r1, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80015d6:	495b      	ldr	r1, [pc, #364]	@ (8001744 <HAL_GPIO_Init+0x1d8>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015d8:	360e      	adds	r6, #14
 80015da:	468c      	mov	ip, r1
 80015dc:	40be      	lsls	r6, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 80015de:	089a      	lsrs	r2, r3, #2
 80015e0:	0092      	lsls	r2, r2, #2
 80015e2:	4462      	add	r2, ip
 80015e4:	6891      	ldr	r1, [r2, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015e6:	43b1      	bics	r1, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80015e8:	26a0      	movs	r6, #160	@ 0xa0
 80015ea:	05f6      	lsls	r6, r6, #23
 80015ec:	42b0      	cmp	r0, r6
 80015ee:	d00e      	beq.n	800160e <HAL_GPIO_Init+0xa2>
 80015f0:	4e55      	ldr	r6, [pc, #340]	@ (8001748 <HAL_GPIO_Init+0x1dc>)
 80015f2:	42b0      	cmp	r0, r6
 80015f4:	d100      	bne.n	80015f8 <HAL_GPIO_Init+0x8c>
 80015f6:	e09a      	b.n	800172e <HAL_GPIO_Init+0x1c2>
 80015f8:	4e54      	ldr	r6, [pc, #336]	@ (800174c <HAL_GPIO_Init+0x1e0>)
 80015fa:	42b0      	cmp	r0, r6
 80015fc:	d100      	bne.n	8001600 <HAL_GPIO_Init+0x94>
 80015fe:	e09a      	b.n	8001736 <HAL_GPIO_Init+0x1ca>
 8001600:	4e53      	ldr	r6, [pc, #332]	@ (8001750 <HAL_GPIO_Init+0x1e4>)
 8001602:	42b0      	cmp	r0, r6
 8001604:	d100      	bne.n	8001608 <HAL_GPIO_Init+0x9c>
 8001606:	e08e      	b.n	8001726 <HAL_GPIO_Init+0x1ba>
 8001608:	2606      	movs	r6, #6
 800160a:	40be      	lsls	r6, r7
 800160c:	4331      	orrs	r1, r6
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160e:	2680      	movs	r6, #128	@ 0x80
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001610:	6091      	str	r1, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001612:	4651      	mov	r1, sl
        temp = EXTI->RTSR;
 8001614:	4a4f      	ldr	r2, [pc, #316]	@ (8001754 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001616:	0376      	lsls	r6, r6, #13
        temp &= ~((uint32_t)iocurrent);
 8001618:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR;
 800161a:	6892      	ldr	r2, [r2, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161c:	4235      	tst	r5, r6
 800161e:	d000      	beq.n	8001622 <HAL_GPIO_Init+0xb6>
 8001620:	e071      	b.n	8001706 <HAL_GPIO_Init+0x19a>
        temp &= ~((uint32_t)iocurrent);
 8001622:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001624:	4e4b      	ldr	r6, [pc, #300]	@ (8001754 <HAL_GPIO_Init+0x1e8>)
 8001626:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001628:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800162a:	02af      	lsls	r7, r5, #10
 800162c:	d468      	bmi.n	8001700 <HAL_GPIO_Init+0x194>
        temp &= ~((uint32_t)iocurrent);
 800162e:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001630:	4e48      	ldr	r6, [pc, #288]	@ (8001754 <HAL_GPIO_Init+0x1e8>)
 8001632:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8001634:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001636:	03af      	lsls	r7, r5, #14
 8001638:	d45f      	bmi.n	80016fa <HAL_GPIO_Init+0x18e>
        temp &= ~((uint32_t)iocurrent);
 800163a:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800163c:	4e45      	ldr	r6, [pc, #276]	@ (8001754 <HAL_GPIO_Init+0x1e8>)
 800163e:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001640:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001642:	03ed      	lsls	r5, r5, #15
 8001644:	d455      	bmi.n	80016f2 <HAL_GPIO_Init+0x186>
        temp &= ~((uint32_t)iocurrent);
 8001646:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001648:	4942      	ldr	r1, [pc, #264]	@ (8001754 <HAL_GPIO_Init+0x1e8>)
 800164a:	600a      	str	r2, [r1, #0]
  while (((GPIO_Init->Pin) >> position) != 0)
 800164c:	0022      	movs	r2, r4
      }
    }
    position++;
 800164e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8001650:	40da      	lsrs	r2, r3
 8001652:	d197      	bne.n	8001584 <HAL_GPIO_Init+0x18>
  }
}
 8001654:	b003      	add	sp, #12
 8001656:	bcf0      	pop	{r4, r5, r6, r7}
 8001658:	46bb      	mov	fp, r7
 800165a:	46b2      	mov	sl, r6
 800165c:	46a9      	mov	r9, r5
 800165e:	46a0      	mov	r8, r4
 8001660:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8001662:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001664:	000e      	movs	r6, r1
 8001666:	9900      	ldr	r1, [sp, #0]
 8001668:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 800166a:	4659      	mov	r1, fp
 800166c:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800166e:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001670:	000e      	movs	r6, r1
 8001672:	40be      	lsls	r6, r7
 8001674:	46b0      	mov	r8, r6
 8001676:	464e      	mov	r6, r9
 8001678:	4641      	mov	r1, r8
 800167a:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 800167c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800167e:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001680:	000e      	movs	r6, r1
 8001682:	4661      	mov	r1, ip
 8001684:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001686:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001688:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168a:	000e      	movs	r6, r1
 800168c:	2101      	movs	r1, #1
 800168e:	400e      	ands	r6, r1
 8001690:	409e      	lsls	r6, r3
 8001692:	46b4      	mov	ip, r6
 8001694:	4646      	mov	r6, r8
 8001696:	4661      	mov	r1, ip
 8001698:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 800169a:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800169c:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800169e:	000e      	movs	r6, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a4:	4659      	mov	r1, fp
 80016a6:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016a8:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016aa:	000e      	movs	r6, r1
 80016ac:	40be      	lsls	r6, r7
 80016ae:	46b4      	mov	ip, r6
 80016b0:	4646      	mov	r6, r8
 80016b2:	4661      	mov	r1, ip
 80016b4:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 80016b6:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b8:	2a02      	cmp	r2, #2
 80016ba:	d000      	beq.n	80016be <HAL_GPIO_Init+0x152>
 80016bc:	e779      	b.n	80015b2 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 80016be:	08d9      	lsrs	r1, r3, #3
 80016c0:	0089      	lsls	r1, r1, #2
 80016c2:	468c      	mov	ip, r1
 80016c4:	4484      	add	ip, r0
 80016c6:	4661      	mov	r1, ip
 80016c8:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80016ca:	2107      	movs	r1, #7
 80016cc:	4019      	ands	r1, r3
 80016ce:	0089      	lsls	r1, r1, #2
 80016d0:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3U];
 80016d2:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80016d4:	210f      	movs	r1, #15
 80016d6:	4646      	mov	r6, r8
 80016d8:	40b1      	lsls	r1, r6
 80016da:	9e01      	ldr	r6, [sp, #4]
 80016dc:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80016de:	4659      	mov	r1, fp
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80016e0:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80016e2:	4646      	mov	r6, r8
 80016e4:	6909      	ldr	r1, [r1, #16]
 80016e6:	40b1      	lsls	r1, r6
 80016e8:	9e01      	ldr	r6, [sp, #4]
 80016ea:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 80016ec:	4661      	mov	r1, ip
 80016ee:	620e      	str	r6, [r1, #32]
 80016f0:	e75f      	b.n	80015b2 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 80016f2:	4651      	mov	r1, sl
 80016f4:	4311      	orrs	r1, r2
 80016f6:	000a      	movs	r2, r1
 80016f8:	e7a6      	b.n	8001648 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 80016fa:	4656      	mov	r6, sl
 80016fc:	4332      	orrs	r2, r6
 80016fe:	e79d      	b.n	800163c <HAL_GPIO_Init+0xd0>
          temp |= iocurrent;
 8001700:	4656      	mov	r6, sl
 8001702:	4332      	orrs	r2, r6
 8001704:	e794      	b.n	8001630 <HAL_GPIO_Init+0xc4>
          temp |= iocurrent;
 8001706:	4656      	mov	r6, sl
 8001708:	4332      	orrs	r2, r6
 800170a:	e78b      	b.n	8001624 <HAL_GPIO_Init+0xb8>
 800170c:	000e      	movs	r6, r1
        temp = GPIOx->PUPDR;
 800170e:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001710:	4031      	ands	r1, r6
 8001712:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001714:	4659      	mov	r1, fp
 8001716:	6889      	ldr	r1, [r1, #8]
 8001718:	40b9      	lsls	r1, r7
 800171a:	468c      	mov	ip, r1
 800171c:	4641      	mov	r1, r8
 800171e:	4666      	mov	r6, ip
 8001720:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8001722:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001724:	e745      	b.n	80015b2 <HAL_GPIO_Init+0x46>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001726:	2605      	movs	r6, #5
 8001728:	40be      	lsls	r6, r7
 800172a:	4331      	orrs	r1, r6
 800172c:	e76f      	b.n	800160e <HAL_GPIO_Init+0xa2>
 800172e:	2601      	movs	r6, #1
 8001730:	40be      	lsls	r6, r7
 8001732:	4331      	orrs	r1, r6
 8001734:	e76b      	b.n	800160e <HAL_GPIO_Init+0xa2>
 8001736:	2602      	movs	r6, #2
 8001738:	40be      	lsls	r6, r7
 800173a:	4331      	orrs	r1, r6
 800173c:	e767      	b.n	800160e <HAL_GPIO_Init+0xa2>
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000
 8001748:	50000400 	.word	0x50000400
 800174c:	50000800 	.word	0x50000800
 8001750:	50001c00 	.word	0x50001c00
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001758:	6900      	ldr	r0, [r0, #16]
 800175a:	4008      	ands	r0, r1
 800175c:	1e43      	subs	r3, r0, #1
 800175e:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001760:	b2c0      	uxtb	r0, r0
}
 8001762:	4770      	bx	lr

08001764 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001764:	2a00      	cmp	r2, #0
 8001766:	d001      	beq.n	800176c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001768:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800176a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800176c:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800176e:	e7fc      	b.n	800176a <HAL_GPIO_WritePin+0x6>

08001770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001770:	b510      	push	{r4, lr}
 8001772:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001774:	d04c      	beq.n	8001810 <HAL_I2C_Init+0xa0>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001776:	2341      	movs	r3, #65	@ 0x41
 8001778:	5cc3      	ldrb	r3, [r0, r3]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d042      	beq.n	8001806 <HAL_I2C_Init+0x96>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001780:	2341      	movs	r3, #65	@ 0x41
 8001782:	2224      	movs	r2, #36	@ 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001784:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001786:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8001788:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800178a:	68a0      	ldr	r0, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	438a      	bics	r2, r1
 8001790:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001792:	4920      	ldr	r1, [pc, #128]	@ (8001814 <HAL_I2C_Init+0xa4>)
 8001794:	6862      	ldr	r2, [r4, #4]
 8001796:	400a      	ands	r2, r1
 8001798:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	491e      	ldr	r1, [pc, #120]	@ (8001818 <HAL_I2C_Init+0xa8>)
 800179e:	400a      	ands	r2, r1
 80017a0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017a2:	68e2      	ldr	r2, [r4, #12]
 80017a4:	2a01      	cmp	r2, #1
 80017a6:	d029      	beq.n	80017fc <HAL_I2C_Init+0x8c>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017a8:	2184      	movs	r1, #132	@ 0x84
 80017aa:	0209      	lsls	r1, r1, #8
 80017ac:	4301      	orrs	r1, r0
 80017ae:	6099      	str	r1, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017b0:	2a02      	cmp	r2, #2
 80017b2:	d102      	bne.n	80017ba <HAL_I2C_Init+0x4a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017b4:	2280      	movs	r2, #128	@ 0x80
 80017b6:	0112      	lsls	r2, r2, #4
 80017b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	4a17      	ldr	r2, [pc, #92]	@ (800181c <HAL_I2C_Init+0xac>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 80017be:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	4914      	ldr	r1, [pc, #80]	@ (8001818 <HAL_I2C_Init+0xa8>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017cc:	6961      	ldr	r1, [r4, #20]
 80017ce:	6922      	ldr	r2, [r4, #16]
 80017d0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017d2:	69a1      	ldr	r1, [r4, #24]
 80017d4:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017d6:	430a      	orrs	r2, r1
 80017d8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017da:	6a21      	ldr	r1, [r4, #32]
 80017dc:	69e2      	ldr	r2, [r4, #28]
 80017de:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 80017e0:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017e2:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ea:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80017ec:	2241      	movs	r2, #65	@ 0x41
 80017ee:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f0:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f4:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 80017f6:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f8:	54a3      	strb	r3, [r4, r2]
}
 80017fa:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017fc:	2280      	movs	r2, #128	@ 0x80
 80017fe:	0212      	lsls	r2, r2, #8
 8001800:	4302      	orrs	r2, r0
 8001802:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001804:	e7d9      	b.n	80017ba <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8001806:	3340      	adds	r3, #64	@ 0x40
 8001808:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 800180a:	f7ff f895 	bl	8000938 <HAL_I2C_MspInit>
 800180e:	e7b7      	b.n	8001780 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8001810:	2001      	movs	r0, #1
 8001812:	e7f2      	b.n	80017fa <HAL_I2C_Init+0x8a>
 8001814:	f0ffffff 	.word	0xf0ffffff
 8001818:	ffff7fff 	.word	0xffff7fff
 800181c:	02008000 	.word	0x02008000

08001820 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001822:	2441      	movs	r4, #65	@ 0x41
 8001824:	5d03      	ldrb	r3, [r0, r4]
{
 8001826:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001828:	b2dd      	uxtb	r5, r3
 800182a:	2b20      	cmp	r3, #32
 800182c:	d11a      	bne.n	8001864 <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800182e:	2640      	movs	r6, #64	@ 0x40
 8001830:	5d83      	ldrb	r3, [r0, r6]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d016      	beq.n	8001864 <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001836:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001838:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 800183a:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 800183c:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800183e:	490a      	ldr	r1, [pc, #40]	@ (8001868 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	43ba      	bics	r2, r7
 8001844:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	400a      	ands	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800184c:	4662      	mov	r2, ip
 800184e:	6819      	ldr	r1, [r3, #0]
 8001850:	4311      	orrs	r1, r2
 8001852:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	433a      	orrs	r2, r7
 8001858:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800185a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800185c:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 800185e:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8001860:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8001864:	2002      	movs	r0, #2
 8001866:	e7fc      	b.n	8001862 <HAL_I2CEx_ConfigAnalogFilter+0x42>
 8001868:	ffffefff 	.word	0xffffefff

0800186c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800186c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186e:	46ce      	mov	lr, r9
 8001870:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001872:	2441      	movs	r4, #65	@ 0x41
{
 8001874:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001876:	5d03      	ldrb	r3, [r0, r4]
 8001878:	b2dd      	uxtb	r5, r3
 800187a:	2b20      	cmp	r3, #32
 800187c:	d11f      	bne.n	80018be <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800187e:	2640      	movs	r6, #64	@ 0x40
 8001880:	5d83      	ldrb	r3, [r0, r6]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d01b      	beq.n	80018be <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001886:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001888:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 800188a:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 800188c:	6802      	ldr	r2, [r0, #0]
 800188e:	46b9      	mov	r9, r7
 8001890:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001892:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8001894:	43bb      	bics	r3, r7
 8001896:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8001898:	6813      	ldr	r3, [r2, #0]
 800189a:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 800189c:	4647      	mov	r7, r8
 800189e:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 80018a0:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 80018a2:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018a4:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018a6:	4649      	mov	r1, r9
 80018a8:	6813      	ldr	r3, [r2, #0]
 80018aa:	430b      	orrs	r3, r1
 80018ac:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ae:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80018b0:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 80018b2:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 80018b4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80018b6:	bcc0      	pop	{r6, r7}
 80018b8:	46b9      	mov	r9, r7
 80018ba:	46b0      	mov	r8, r6
 80018bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80018be:	2002      	movs	r0, #2
 80018c0:	e7f9      	b.n	80018b6 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	fffff0ff 	.word	0xfffff0ff

080018c8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018c8:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80018ca:	491d      	ldr	r1, [pc, #116]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x78>)
{
 80018cc:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80018ce:	68ca      	ldr	r2, [r1, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d00b      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x26>
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d017      	beq.n	800190a <HAL_RCC_GetSysClockFreq+0x42>
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d009      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x2a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018de:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80018e0:	684b      	ldr	r3, [r1, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018e2:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80018e4:	041b      	lsls	r3, r3, #16
 80018e6:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018e8:	3301      	adds	r3, #1
 80018ea:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 80018ec:	bd70      	pop	{r4, r5, r6, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 80018ee:	4815      	ldr	r0, [pc, #84]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x7c>)
 80018f0:	e7fc      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x24>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018f2:	2010      	movs	r0, #16
 80018f4:	680b      	ldr	r3, [r1, #0]
 80018f6:	4018      	ands	r0, r3
        sysclockfreq =  (HSI_VALUE >> 2);
 80018f8:	4243      	negs	r3, r0
 80018fa:	4158      	adcs	r0, r3
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x80>)
 80018fe:	4240      	negs	r0, r0
 8001900:	4018      	ands	r0, r3
 8001902:	4b12      	ldr	r3, [pc, #72]	@ (800194c <HAL_RCC_GetSysClockFreq+0x84>)
 8001904:	469c      	mov	ip, r3
 8001906:	4460      	add	r0, ip
 8001908:	e7f0      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800190a:	0293      	lsls	r3, r2, #10
 800190c:	4810      	ldr	r0, [pc, #64]	@ (8001950 <HAL_RCC_GetSysClockFreq+0x88>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800190e:	0212      	lsls	r2, r2, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001910:	68cd      	ldr	r5, [r1, #12]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001912:	0f1b      	lsrs	r3, r3, #28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001914:	0f94      	lsrs	r4, r2, #30
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001916:	5cc0      	ldrb	r0, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001918:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800191a:	03ed      	lsls	r5, r5, #15
 800191c:	d40c      	bmi.n	8001938 <HAL_RCC_GetSysClockFreq+0x70>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800191e:	680b      	ldr	r3, [r1, #0]
 8001920:	06db      	lsls	r3, r3, #27
 8001922:	d50b      	bpl.n	800193c <HAL_RCC_GetSysClockFreq+0x74>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001924:	4a09      	ldr	r2, [pc, #36]	@ (800194c <HAL_RCC_GetSysClockFreq+0x84>)
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001926:	2300      	movs	r3, #0
 8001928:	2100      	movs	r1, #0
 800192a:	f7fe fc99 	bl	8000260 <__aeabi_lmul>
 800192e:	0022      	movs	r2, r4
 8001930:	2300      	movs	r3, #0
 8001932:	f7fe fc75 	bl	8000220 <__aeabi_uldivmod>
 8001936:	e7d9      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001938:	4a02      	ldr	r2, [pc, #8]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x7c>)
 800193a:	e7f4      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x5e>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800193c:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x8c>)
 800193e:	e7f2      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x5e>
 8001940:	40021000 	.word	0x40021000
 8001944:	007a1200 	.word	0x007a1200
 8001948:	00b71b00 	.word	0x00b71b00
 800194c:	003d0900 	.word	0x003d0900
 8001950:	080022bc 	.word	0x080022bc
 8001954:	00f42400 	.word	0x00f42400

08001958 <HAL_RCC_OscConfig>:
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	46d6      	mov	lr, sl
 800195c:	464f      	mov	r7, r9
 800195e:	4646      	mov	r6, r8
 8001960:	b5c0      	push	{r6, r7, lr}
 8001962:	0004      	movs	r4, r0
 8001964:	b082      	sub	sp, #8
  if(RCC_OscInitStruct == NULL)
 8001966:	2800      	cmp	r0, #0
 8001968:	d100      	bne.n	800196c <HAL_RCC_OscConfig+0x14>
 800196a:	e186      	b.n	8001c7a <HAL_RCC_OscConfig+0x322>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196c:	4bca      	ldr	r3, [pc, #808]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
 800196e:	250c      	movs	r5, #12
 8001970:	68da      	ldr	r2, [r3, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001972:	68de      	ldr	r6, [r3, #12]
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	025b      	lsls	r3, r3, #9
 8001978:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197c:	4015      	ands	r5, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197e:	07da      	lsls	r2, r3, #31
 8001980:	d533      	bpl.n	80019ea <HAL_RCC_OscConfig+0x92>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001982:	2d08      	cmp	r5, #8
 8001984:	d100      	bne.n	8001988 <HAL_RCC_OscConfig+0x30>
 8001986:	e16f      	b.n	8001c68 <HAL_RCC_OscConfig+0x310>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001988:	2d0c      	cmp	r5, #12
 800198a:	d100      	bne.n	800198e <HAL_RCC_OscConfig+0x36>
 800198c:	e169      	b.n	8001c62 <HAL_RCC_OscConfig+0x30a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800198e:	2280      	movs	r2, #128	@ 0x80
 8001990:	6863      	ldr	r3, [r4, #4]
 8001992:	0252      	lsls	r2, r2, #9
 8001994:	4293      	cmp	r3, r2
 8001996:	d100      	bne.n	800199a <HAL_RCC_OscConfig+0x42>
 8001998:	e171      	b.n	8001c7e <HAL_RCC_OscConfig+0x326>
 800199a:	21a0      	movs	r1, #160	@ 0xa0
 800199c:	02c9      	lsls	r1, r1, #11
 800199e:	428b      	cmp	r3, r1
 80019a0:	d100      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4c>
 80019a2:	e211      	b.n	8001dc8 <HAL_RCC_OscConfig+0x470>
 80019a4:	4fbc      	ldr	r7, [pc, #752]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
 80019a6:	48bd      	ldr	r0, [pc, #756]	@ (8001c9c <HAL_RCC_OscConfig+0x344>)
 80019a8:	6839      	ldr	r1, [r7, #0]
 80019aa:	4001      	ands	r1, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	6839      	ldr	r1, [r7, #0]
 80019b0:	400a      	ands	r2, r1
 80019b2:	9201      	str	r2, [sp, #4]
 80019b4:	9a01      	ldr	r2, [sp, #4]
 80019b6:	49ba      	ldr	r1, [pc, #744]	@ (8001ca0 <HAL_RCC_OscConfig+0x348>)
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	400a      	ands	r2, r1
 80019bc:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d000      	beq.n	80019c4 <HAL_RCC_OscConfig+0x6c>
 80019c2:	e160      	b.n	8001c86 <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
 80019c4:	f7ff f8c4 	bl	8000b50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019c8:	2380      	movs	r3, #128	@ 0x80
 80019ca:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 80019cc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ce:	4699      	mov	r9, r3
 80019d0:	e006      	b.n	80019e0 <HAL_RCC_OscConfig+0x88>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d2:	f7ff f8bd 	bl	8000b50 <HAL_GetTick>
 80019d6:	4643      	mov	r3, r8
 80019d8:	1ac0      	subs	r0, r0, r3
 80019da:	2864      	cmp	r0, #100	@ 0x64
 80019dc:	d900      	bls.n	80019e0 <HAL_RCC_OscConfig+0x88>
 80019de:	e1b1      	b.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019e0:	464a      	mov	r2, r9
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	4213      	tst	r3, r2
 80019e6:	d1f4      	bne.n	80019d2 <HAL_RCC_OscConfig+0x7a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	079a      	lsls	r2, r3, #30
 80019ec:	d52b      	bpl.n	8001a46 <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80019ee:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80019f0:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80019f2:	421a      	tst	r2, r3
 80019f4:	d000      	beq.n	80019f8 <HAL_RCC_OscConfig+0xa0>
 80019f6:	e0d9      	b.n	8001bac <HAL_RCC_OscConfig+0x254>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019f8:	2d04      	cmp	r5, #4
 80019fa:	d100      	bne.n	80019fe <HAL_RCC_OscConfig+0xa6>
 80019fc:	e0de      	b.n	8001bbc <HAL_RCC_OscConfig+0x264>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019fe:	2d0c      	cmp	r5, #12
 8001a00:	d100      	bne.n	8001a04 <HAL_RCC_OscConfig+0xac>
 8001a02:	e16f      	b.n	8001ce4 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a04:	4ea4      	ldr	r6, [pc, #656]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
      if(hsi_state != RCC_HSI_OFF)
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d100      	bne.n	8001a0c <HAL_RCC_OscConfig+0xb4>
 8001a0a:	e1b2      	b.n	8001d72 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a0c:	2109      	movs	r1, #9
 8001a0e:	6832      	ldr	r2, [r6, #0]
 8001a10:	438a      	bics	r2, r1
 8001a12:	4313      	orrs	r3, r2
 8001a14:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a16:	f7ff f89b 	bl	8000b50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a1a:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8001a1c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a1e:	4698      	mov	r8, r3
 8001a20:	e005      	b.n	8001a2e <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a22:	f7ff f895 	bl	8000b50 <HAL_GetTick>
 8001a26:	1bc0      	subs	r0, r0, r7
 8001a28:	2802      	cmp	r0, #2
 8001a2a:	d900      	bls.n	8001a2e <HAL_RCC_OscConfig+0xd6>
 8001a2c:	e18a      	b.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a2e:	4642      	mov	r2, r8
 8001a30:	6833      	ldr	r3, [r6, #0]
 8001a32:	421a      	tst	r2, r3
 8001a34:	d0f5      	beq.n	8001a22 <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a36:	6872      	ldr	r2, [r6, #4]
 8001a38:	6923      	ldr	r3, [r4, #16]
 8001a3a:	499a      	ldr	r1, [pc, #616]	@ (8001ca4 <HAL_RCC_OscConfig+0x34c>)
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	400a      	ands	r2, r1
 8001a40:	4313      	orrs	r3, r2
 8001a42:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	06da      	lsls	r2, r3, #27
 8001a48:	d52b      	bpl.n	8001aa2 <HAL_RCC_OscConfig+0x14a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a4a:	2d00      	cmp	r5, #0
 8001a4c:	d100      	bne.n	8001a50 <HAL_RCC_OscConfig+0xf8>
 8001a4e:	e0dd      	b.n	8001c0c <HAL_RCC_OscConfig+0x2b4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a50:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8001a52:	4e91      	ldr	r6, [pc, #580]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d100      	bne.n	8001a5a <HAL_RCC_OscConfig+0x102>
 8001a58:	e1a0      	b.n	8001d9c <HAL_RCC_OscConfig+0x444>
        __HAL_RCC_MSI_ENABLE();
 8001a5a:	2380      	movs	r3, #128	@ 0x80
 8001a5c:	6832      	ldr	r2, [r6, #0]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4313      	orrs	r3, r2
 8001a62:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a64:	f7ff f874 	bl	8000b50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a68:	2380      	movs	r3, #128	@ 0x80
 8001a6a:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8001a6c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a6e:	4698      	mov	r8, r3
 8001a70:	e005      	b.n	8001a7e <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a72:	f7ff f86d 	bl	8000b50 <HAL_GetTick>
 8001a76:	1bc0      	subs	r0, r0, r7
 8001a78:	2802      	cmp	r0, #2
 8001a7a:	d900      	bls.n	8001a7e <HAL_RCC_OscConfig+0x126>
 8001a7c:	e162      	b.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a7e:	4642      	mov	r2, r8
 8001a80:	6833      	ldr	r3, [r6, #0]
 8001a82:	4213      	tst	r3, r2
 8001a84:	d0f5      	beq.n	8001a72 <HAL_RCC_OscConfig+0x11a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a86:	6873      	ldr	r3, [r6, #4]
 8001a88:	4a87      	ldr	r2, [pc, #540]	@ (8001ca8 <HAL_RCC_OscConfig+0x350>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	6a22      	ldr	r2, [r4, #32]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a92:	6872      	ldr	r2, [r6, #4]
 8001a94:	69e3      	ldr	r3, [r4, #28]
 8001a96:	0212      	lsls	r2, r2, #8
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	0a12      	lsrs	r2, r2, #8
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	071a      	lsls	r2, r3, #28
 8001aa4:	d519      	bpl.n	8001ada <HAL_RCC_OscConfig+0x182>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa6:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8001aa8:	4e7b      	ldr	r6, [pc, #492]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d100      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x158>
 8001aae:	e14b      	b.n	8001d48 <HAL_RCC_OscConfig+0x3f0>
      __HAL_RCC_LSI_ENABLE();
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	6533      	str	r3, [r6, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001ab8:	f7ff f84a 	bl	8000b50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001abc:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8001abe:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ac0:	4698      	mov	r8, r3
 8001ac2:	e005      	b.n	8001ad0 <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff f844 	bl	8000b50 <HAL_GetTick>
 8001ac8:	1bc0      	subs	r0, r0, r7
 8001aca:	2802      	cmp	r0, #2
 8001acc:	d900      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x178>
 8001ace:	e139      	b.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ad0:	4642      	mov	r2, r8
 8001ad2:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8001ad4:	421a      	tst	r2, r3
 8001ad6:	d0f5      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x16c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	075b      	lsls	r3, r3, #29
 8001adc:	d542      	bpl.n	8001b64 <HAL_RCC_OscConfig+0x20c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ade:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001ae0:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae2:	4a6d      	ldr	r2, [pc, #436]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
 8001ae4:	055b      	lsls	r3, r3, #21
 8001ae6:	6b91      	ldr	r1, [r2, #56]	@ 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001ae8:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aea:	4219      	tst	r1, r3
 8001aec:	d104      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8001af0:	430b      	orrs	r3, r1
 8001af2:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 8001af4:	2301      	movs	r3, #1
 8001af6:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	2780      	movs	r7, #128	@ 0x80
 8001afa:	4e6c      	ldr	r6, [pc, #432]	@ (8001cac <HAL_RCC_OscConfig+0x354>)
 8001afc:	007f      	lsls	r7, r7, #1
 8001afe:	6833      	ldr	r3, [r6, #0]
 8001b00:	423b      	tst	r3, r7
 8001b02:	d100      	bne.n	8001b06 <HAL_RCC_OscConfig+0x1ae>
 8001b04:	e10e      	b.n	8001d24 <HAL_RCC_OscConfig+0x3cc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b06:	2280      	movs	r2, #128	@ 0x80
 8001b08:	68a3      	ldr	r3, [r4, #8]
 8001b0a:	0052      	lsls	r2, r2, #1
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d100      	bne.n	8001b12 <HAL_RCC_OscConfig+0x1ba>
 8001b10:	e19c      	b.n	8001e4c <HAL_RCC_OscConfig+0x4f4>
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d100      	bne.n	8001b18 <HAL_RCC_OscConfig+0x1c0>
 8001b16:	e0e9      	b.n	8001cec <HAL_RCC_OscConfig+0x394>
 8001b18:	21a0      	movs	r1, #160	@ 0xa0
 8001b1a:	00c9      	lsls	r1, r1, #3
 8001b1c:	428b      	cmp	r3, r1
 8001b1e:	d100      	bne.n	8001b22 <HAL_RCC_OscConfig+0x1ca>
 8001b20:	e1b5      	b.n	8001e8e <HAL_RCC_OscConfig+0x536>
 8001b22:	4b5d      	ldr	r3, [pc, #372]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
 8001b24:	4962      	ldr	r1, [pc, #392]	@ (8001cb0 <HAL_RCC_OscConfig+0x358>)
 8001b26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b28:	400a      	ands	r2, r1
 8001b2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b2e:	4961      	ldr	r1, [pc, #388]	@ (8001cb4 <HAL_RCC_OscConfig+0x35c>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	651a      	str	r2, [r3, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001b34:	f7ff f80c 	bl	8000b50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b38:	2780      	movs	r7, #128	@ 0x80
 8001b3a:	4b57      	ldr	r3, [pc, #348]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
      tickstart = HAL_GetTick();
 8001b3c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b3e:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb8 <HAL_RCC_OscConfig+0x360>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b42:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b46:	e005      	b.n	8001b54 <HAL_RCC_OscConfig+0x1fc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7ff f802 	bl	8000b50 <HAL_GetTick>
 8001b4c:	1b80      	subs	r0, r0, r6
 8001b4e:	4548      	cmp	r0, r9
 8001b50:	d900      	bls.n	8001b54 <HAL_RCC_OscConfig+0x1fc>
 8001b52:	e0f7      	b.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b54:	4643      	mov	r3, r8
 8001b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b58:	423b      	tst	r3, r7
 8001b5a:	d0f5      	beq.n	8001b48 <HAL_RCC_OscConfig+0x1f0>
    if(pwrclkchanged == SET)
 8001b5c:	4653      	mov	r3, sl
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d100      	bne.n	8001b64 <HAL_RCC_OscConfig+0x20c>
 8001b62:	e16d      	b.n	8001e40 <HAL_RCC_OscConfig+0x4e8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b64:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d019      	beq.n	8001b9e <HAL_RCC_OscConfig+0x246>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b6a:	2d0c      	cmp	r5, #12
 8001b6c:	d100      	bne.n	8001b70 <HAL_RCC_OscConfig+0x218>
 8001b6e:	e172      	b.n	8001e56 <HAL_RCC_OscConfig+0x4fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d100      	bne.n	8001b76 <HAL_RCC_OscConfig+0x21e>
 8001b74:	e132      	b.n	8001ddc <HAL_RCC_OscConfig+0x484>
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4c48      	ldr	r4, [pc, #288]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
 8001b78:	4a50      	ldr	r2, [pc, #320]	@ (8001cbc <HAL_RCC_OscConfig+0x364>)
 8001b7a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b7c:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001b7e:	4013      	ands	r3, r2
 8001b80:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b82:	f7fe ffe5 	bl	8000b50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b86:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8001b88:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b8a:	e005      	b.n	8001b98 <HAL_RCC_OscConfig+0x240>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7fe ffe0 	bl	8000b50 <HAL_GetTick>
 8001b90:	1b40      	subs	r0, r0, r5
 8001b92:	2802      	cmp	r0, #2
 8001b94:	d900      	bls.n	8001b98 <HAL_RCC_OscConfig+0x240>
 8001b96:	e0d5      	b.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	4233      	tst	r3, r6
 8001b9c:	d1f6      	bne.n	8001b8c <HAL_RCC_OscConfig+0x234>
  return HAL_OK;
 8001b9e:	2000      	movs	r0, #0
}
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bce0      	pop	{r5, r6, r7}
 8001ba4:	46ba      	mov	sl, r7
 8001ba6:	46b1      	mov	r9, r6
 8001ba8:	46a8      	mov	r8, r5
 8001baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001bac:	483a      	ldr	r0, [pc, #232]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001bae:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001bb0:	6801      	ldr	r1, [r0, #0]
 8001bb2:	4311      	orrs	r1, r2
 8001bb4:	6001      	str	r1, [r0, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb6:	2d04      	cmp	r5, #4
 8001bb8:	d000      	beq.n	8001bbc <HAL_RCC_OscConfig+0x264>
 8001bba:	e720      	b.n	80019fe <HAL_RCC_OscConfig+0xa6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001bbc:	4a36      	ldr	r2, [pc, #216]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	0752      	lsls	r2, r2, #29
 8001bc2:	d501      	bpl.n	8001bc8 <HAL_RCC_OscConfig+0x270>
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d058      	beq.n	8001c7a <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4e33      	ldr	r6, [pc, #204]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
 8001bca:	6922      	ldr	r2, [r4, #16]
 8001bcc:	6871      	ldr	r1, [r6, #4]
 8001bce:	4835      	ldr	r0, [pc, #212]	@ (8001ca4 <HAL_RCC_OscConfig+0x34c>)
 8001bd0:	0212      	lsls	r2, r2, #8
 8001bd2:	4001      	ands	r1, r0
 8001bd4:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bd6:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001bda:	6832      	ldr	r2, [r6, #0]
 8001bdc:	438a      	bics	r2, r1
 8001bde:	4313      	orrs	r3, r2
 8001be0:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001be2:	f7ff fe71 	bl	80018c8 <HAL_RCC_GetSysClockFreq>
 8001be6:	68f3      	ldr	r3, [r6, #12]
 8001be8:	4a35      	ldr	r2, [pc, #212]	@ (8001cc0 <HAL_RCC_OscConfig+0x368>)
 8001bea:	061b      	lsls	r3, r3, #24
 8001bec:	0f1b      	lsrs	r3, r3, #28
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	4934      	ldr	r1, [pc, #208]	@ (8001cc4 <HAL_RCC_OscConfig+0x36c>)
 8001bf2:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8001bf4:	4b34      	ldr	r3, [pc, #208]	@ (8001cc8 <HAL_RCC_OscConfig+0x370>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bf6:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	f7fe ff63 	bl	8000ac4 <HAL_InitTick>
      if(status != HAL_OK)
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d1ce      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x248>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	06da      	lsls	r2, r3, #27
 8001c06:	d400      	bmi.n	8001c0a <HAL_RCC_OscConfig+0x2b2>
 8001c08:	e74b      	b.n	8001aa2 <HAL_RCC_OscConfig+0x14a>
 8001c0a:	e71e      	b.n	8001a4a <HAL_RCC_OscConfig+0xf2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c0c:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	059b      	lsls	r3, r3, #22
 8001c12:	d502      	bpl.n	8001c1a <HAL_RCC_OscConfig+0x2c2>
 8001c14:	69a3      	ldr	r3, [r4, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d02f      	beq.n	8001c7a <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
 8001c1c:	4822      	ldr	r0, [pc, #136]	@ (8001ca8 <HAL_RCC_OscConfig+0x350>)
 8001c1e:	6851      	ldr	r1, [r2, #4]
 8001c20:	6a23      	ldr	r3, [r4, #32]
 8001c22:	4001      	ands	r1, r0
 8001c24:	4319      	orrs	r1, r3
 8001c26:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c28:	6850      	ldr	r0, [r2, #4]
 8001c2a:	69e1      	ldr	r1, [r4, #28]
 8001c2c:	0200      	lsls	r0, r0, #8
 8001c2e:	0a00      	lsrs	r0, r0, #8
 8001c30:	0609      	lsls	r1, r1, #24
 8001c32:	4301      	orrs	r1, r0
 8001c34:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c36:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c38:	2280      	movs	r2, #128	@ 0x80
 8001c3a:	0b5b      	lsrs	r3, r3, #13
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	0212      	lsls	r2, r2, #8
 8001c40:	409a      	lsls	r2, r3
 8001c42:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c44:	481e      	ldr	r0, [pc, #120]	@ (8001cc0 <HAL_RCC_OscConfig+0x368>)
 8001c46:	060a      	lsls	r2, r1, #24
 8001c48:	0f12      	lsrs	r2, r2, #28
 8001c4a:	5c82      	ldrb	r2, [r0, r2]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c4c:	4e1d      	ldr	r6, [pc, #116]	@ (8001cc4 <HAL_RCC_OscConfig+0x36c>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c4e:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c50:	6033      	str	r3, [r6, #0]
        status = HAL_InitTick (uwTickPrio);
 8001c52:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <HAL_RCC_OscConfig+0x370>)
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	f7fe ff35 	bl	8000ac4 <HAL_InitTick>
        if(status != HAL_OK)
 8001c5a:	2800      	cmp	r0, #0
 8001c5c:	d1a0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x248>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	e71f      	b.n	8001aa2 <HAL_RCC_OscConfig+0x14a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c62:	2e00      	cmp	r6, #0
 8001c64:	d100      	bne.n	8001c68 <HAL_RCC_OscConfig+0x310>
 8001c66:	e692      	b.n	800198e <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	4a0b      	ldr	r2, [pc, #44]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	0392      	lsls	r2, r2, #14
 8001c6e:	d400      	bmi.n	8001c72 <HAL_RCC_OscConfig+0x31a>
 8001c70:	e6bb      	b.n	80019ea <HAL_RCC_OscConfig+0x92>
 8001c72:	6862      	ldr	r2, [r4, #4]
 8001c74:	2a00      	cmp	r2, #0
 8001c76:	d000      	beq.n	8001c7a <HAL_RCC_OscConfig+0x322>
 8001c78:	e6b7      	b.n	80019ea <HAL_RCC_OscConfig+0x92>
    return HAL_ERROR;
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	e790      	b.n	8001ba0 <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7e:	4906      	ldr	r1, [pc, #24]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
 8001c80:	680a      	ldr	r2, [r1, #0]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001c86:	f7fe ff63 	bl	8000b50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c8a:	4b03      	ldr	r3, [pc, #12]	@ (8001c98 <HAL_RCC_OscConfig+0x340>)
        tickstart = HAL_GetTick();
 8001c8c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c8e:	4699      	mov	r9, r3
 8001c90:	2380      	movs	r3, #128	@ 0x80
 8001c92:	029b      	lsls	r3, r3, #10
 8001c94:	4698      	mov	r8, r3
 8001c96:	e01e      	b.n	8001cd6 <HAL_RCC_OscConfig+0x37e>
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	fffeffff 	.word	0xfffeffff
 8001ca0:	fffbffff 	.word	0xfffbffff
 8001ca4:	ffffe0ff 	.word	0xffffe0ff
 8001ca8:	ffff1fff 	.word	0xffff1fff
 8001cac:	40007000 	.word	0x40007000
 8001cb0:	fffffeff 	.word	0xfffffeff
 8001cb4:	fffffbff 	.word	0xfffffbff
 8001cb8:	00001388 	.word	0x00001388
 8001cbc:	feffffff 	.word	0xfeffffff
 8001cc0:	080022c8 	.word	0x080022c8
 8001cc4:	2000000c 	.word	0x2000000c
 8001cc8:	20000014 	.word	0x20000014
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7fe ff40 	bl	8000b50 <HAL_GetTick>
 8001cd0:	1bc0      	subs	r0, r0, r7
 8001cd2:	2864      	cmp	r0, #100	@ 0x64
 8001cd4:	d836      	bhi.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cd6:	464b      	mov	r3, r9
 8001cd8:	4642      	mov	r2, r8
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4213      	tst	r3, r2
 8001cde:	d0f5      	beq.n	8001ccc <HAL_RCC_OscConfig+0x374>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce0:	6823      	ldr	r3, [r4, #0]
 8001ce2:	e682      	b.n	80019ea <HAL_RCC_OscConfig+0x92>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ce4:	2e00      	cmp	r6, #0
 8001ce6:	d000      	beq.n	8001cea <HAL_RCC_OscConfig+0x392>
 8001ce8:	e68c      	b.n	8001a04 <HAL_RCC_OscConfig+0xac>
 8001cea:	e767      	b.n	8001bbc <HAL_RCC_OscConfig+0x264>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cec:	4e6d      	ldr	r6, [pc, #436]	@ (8001ea4 <HAL_RCC_OscConfig+0x54c>)
 8001cee:	4a6e      	ldr	r2, [pc, #440]	@ (8001ea8 <HAL_RCC_OscConfig+0x550>)
 8001cf0:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	6533      	str	r3, [r6, #80]	@ 0x50
 8001cf6:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8001cf8:	4a6c      	ldr	r2, [pc, #432]	@ (8001eac <HAL_RCC_OscConfig+0x554>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	6533      	str	r3, [r6, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001cfe:	f7fe ff27 	bl	8000b50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	4b69      	ldr	r3, [pc, #420]	@ (8001eb0 <HAL_RCC_OscConfig+0x558>)
      tickstart = HAL_GetTick();
 8001d0a:	0007      	movs	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d0e:	e004      	b.n	8001d1a <HAL_RCC_OscConfig+0x3c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7fe ff1e 	bl	8000b50 <HAL_GetTick>
 8001d14:	1bc0      	subs	r0, r0, r7
 8001d16:	4548      	cmp	r0, r9
 8001d18:	d814      	bhi.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d1a:	4642      	mov	r2, r8
 8001d1c:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8001d1e:	4213      	tst	r3, r2
 8001d20:	d1f6      	bne.n	8001d10 <HAL_RCC_OscConfig+0x3b8>
 8001d22:	e71b      	b.n	8001b5c <HAL_RCC_OscConfig+0x204>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d24:	6833      	ldr	r3, [r6, #0]
 8001d26:	433b      	orrs	r3, r7
 8001d28:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d2a:	f7fe ff11 	bl	8000b50 <HAL_GetTick>
 8001d2e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	6833      	ldr	r3, [r6, #0]
 8001d32:	423b      	tst	r3, r7
 8001d34:	d000      	beq.n	8001d38 <HAL_RCC_OscConfig+0x3e0>
 8001d36:	e6e6      	b.n	8001b06 <HAL_RCC_OscConfig+0x1ae>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d38:	f7fe ff0a 	bl	8000b50 <HAL_GetTick>
 8001d3c:	4643      	mov	r3, r8
 8001d3e:	1ac0      	subs	r0, r0, r3
 8001d40:	2864      	cmp	r0, #100	@ 0x64
 8001d42:	d9f5      	bls.n	8001d30 <HAL_RCC_OscConfig+0x3d8>
            return HAL_TIMEOUT;
 8001d44:	2003      	movs	r0, #3
 8001d46:	e72b      	b.n	8001ba0 <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_LSI_DISABLE();
 8001d48:	2201      	movs	r2, #1
 8001d4a:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8001d4c:	4393      	bics	r3, r2
 8001d4e:	6533      	str	r3, [r6, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001d50:	f7fe fefe 	bl	8000b50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d54:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8001d56:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d58:	4698      	mov	r8, r3
 8001d5a:	e004      	b.n	8001d66 <HAL_RCC_OscConfig+0x40e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7fe fef8 	bl	8000b50 <HAL_GetTick>
 8001d60:	1bc0      	subs	r0, r0, r7
 8001d62:	2802      	cmp	r0, #2
 8001d64:	d8ee      	bhi.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d66:	4642      	mov	r2, r8
 8001d68:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8001d6a:	421a      	tst	r2, r3
 8001d6c:	d1f6      	bne.n	8001d5c <HAL_RCC_OscConfig+0x404>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6e:	6823      	ldr	r3, [r4, #0]
 8001d70:	e6b3      	b.n	8001ada <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_DISABLE();
 8001d72:	2201      	movs	r2, #1
 8001d74:	6833      	ldr	r3, [r6, #0]
 8001d76:	4393      	bics	r3, r2
 8001d78:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001d7a:	f7fe fee9 	bl	8000b50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d7e:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8001d80:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d82:	4698      	mov	r8, r3
 8001d84:	e004      	b.n	8001d90 <HAL_RCC_OscConfig+0x438>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d86:	f7fe fee3 	bl	8000b50 <HAL_GetTick>
 8001d8a:	1bc0      	subs	r0, r0, r7
 8001d8c:	2802      	cmp	r0, #2
 8001d8e:	d8d9      	bhi.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d90:	4642      	mov	r2, r8
 8001d92:	6833      	ldr	r3, [r6, #0]
 8001d94:	421a      	tst	r2, r3
 8001d96:	d1f6      	bne.n	8001d86 <HAL_RCC_OscConfig+0x42e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	e733      	b.n	8001c04 <HAL_RCC_OscConfig+0x2ac>
        __HAL_RCC_MSI_DISABLE();
 8001d9c:	6833      	ldr	r3, [r6, #0]
 8001d9e:	4a42      	ldr	r2, [pc, #264]	@ (8001ea8 <HAL_RCC_OscConfig+0x550>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001da4:	f7fe fed4 	bl	8000b50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8001dac:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dae:	4698      	mov	r8, r3
 8001db0:	e004      	b.n	8001dbc <HAL_RCC_OscConfig+0x464>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001db2:	f7fe fecd 	bl	8000b50 <HAL_GetTick>
 8001db6:	1bc0      	subs	r0, r0, r7
 8001db8:	2802      	cmp	r0, #2
 8001dba:	d8c3      	bhi.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dbc:	4642      	mov	r2, r8
 8001dbe:	6833      	ldr	r3, [r6, #0]
 8001dc0:	4213      	tst	r3, r2
 8001dc2:	d1f6      	bne.n	8001db2 <HAL_RCC_OscConfig+0x45a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	e66c      	b.n	8001aa2 <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc8:	2180      	movs	r1, #128	@ 0x80
 8001dca:	4b36      	ldr	r3, [pc, #216]	@ (8001ea4 <HAL_RCC_OscConfig+0x54c>)
 8001dcc:	02c9      	lsls	r1, r1, #11
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	4301      	orrs	r1, r0
 8001dd2:	6019      	str	r1, [r3, #0]
 8001dd4:	6819      	ldr	r1, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dda:	e754      	b.n	8001c86 <HAL_RCC_OscConfig+0x32e>
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	4d31      	ldr	r5, [pc, #196]	@ (8001ea4 <HAL_RCC_OscConfig+0x54c>)
 8001dde:	4a35      	ldr	r2, [pc, #212]	@ (8001eb4 <HAL_RCC_OscConfig+0x55c>)
 8001de0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001de2:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001de4:	4013      	ands	r3, r2
 8001de6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001de8:	f7fe feb2 	bl	8000b50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dec:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8001dee:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001df0:	e004      	b.n	8001dfc <HAL_RCC_OscConfig+0x4a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df2:	f7fe fead 	bl	8000b50 <HAL_GetTick>
 8001df6:	1b80      	subs	r0, r0, r6
 8001df8:	2802      	cmp	r0, #2
 8001dfa:	d8a3      	bhi.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001dfc:	682b      	ldr	r3, [r5, #0]
 8001dfe:	423b      	tst	r3, r7
 8001e00:	d1f7      	bne.n	8001df2 <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001e04:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001e06:	68ea      	ldr	r2, [r5, #12]
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	492b      	ldr	r1, [pc, #172]	@ (8001eb8 <HAL_RCC_OscConfig+0x560>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e0c:	4e25      	ldr	r6, [pc, #148]	@ (8001ea4 <HAL_RCC_OscConfig+0x54c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e0e:	400a      	ands	r2, r1
 8001e10:	4313      	orrs	r3, r2
 8001e12:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001e18:	2380      	movs	r3, #128	@ 0x80
 8001e1a:	682a      	ldr	r2, [r5, #0]
 8001e1c:	045b      	lsls	r3, r3, #17
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001e22:	f7fe fe95 	bl	8000b50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e26:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001e28:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e2a:	04ad      	lsls	r5, r5, #18
 8001e2c:	e004      	b.n	8001e38 <HAL_RCC_OscConfig+0x4e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7fe fe8f 	bl	8000b50 <HAL_GetTick>
 8001e32:	1b00      	subs	r0, r0, r4
 8001e34:	2802      	cmp	r0, #2
 8001e36:	d885      	bhi.n	8001d44 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e38:	6833      	ldr	r3, [r6, #0]
 8001e3a:	422b      	tst	r3, r5
 8001e3c:	d0f7      	beq.n	8001e2e <HAL_RCC_OscConfig+0x4d6>
 8001e3e:	e6ae      	b.n	8001b9e <HAL_RCC_OscConfig+0x246>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e40:	4a18      	ldr	r2, [pc, #96]	@ (8001ea4 <HAL_RCC_OscConfig+0x54c>)
 8001e42:	491e      	ldr	r1, [pc, #120]	@ (8001ebc <HAL_RCC_OscConfig+0x564>)
 8001e44:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8001e46:	400b      	ands	r3, r1
 8001e48:	6393      	str	r3, [r2, #56]	@ 0x38
 8001e4a:	e68b      	b.n	8001b64 <HAL_RCC_OscConfig+0x20c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4c:	4a15      	ldr	r2, [pc, #84]	@ (8001ea4 <HAL_RCC_OscConfig+0x54c>)
 8001e4e:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8001e50:	430b      	orrs	r3, r1
 8001e52:	6513      	str	r3, [r2, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e54:	e66e      	b.n	8001b34 <HAL_RCC_OscConfig+0x1dc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d100      	bne.n	8001e5c <HAL_RCC_OscConfig+0x504>
 8001e5a:	e70e      	b.n	8001c7a <HAL_RCC_OscConfig+0x322>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5c:	2280      	movs	r2, #128	@ 0x80
        pll_config = RCC->CFGR;
 8001e5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <HAL_RCC_OscConfig+0x54c>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e60:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
        pll_config = RCC->CFGR;
 8001e62:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e64:	0252      	lsls	r2, r2, #9
 8001e66:	401a      	ands	r2, r3
 8001e68:	428a      	cmp	r2, r1
 8001e6a:	d000      	beq.n	8001e6e <HAL_RCC_OscConfig+0x516>
 8001e6c:	e705      	b.n	8001c7a <HAL_RCC_OscConfig+0x322>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e6e:	22f0      	movs	r2, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e70:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e72:	0392      	lsls	r2, r2, #14
 8001e74:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	428a      	cmp	r2, r1
 8001e78:	d000      	beq.n	8001e7c <HAL_RCC_OscConfig+0x524>
 8001e7a:	e6fe      	b.n	8001c7a <HAL_RCC_OscConfig+0x322>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e7c:	22c0      	movs	r2, #192	@ 0xc0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e7e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001e80:	0412      	lsls	r2, r2, #16
 8001e82:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e84:	1a18      	subs	r0, r3, r0
 8001e86:	1e43      	subs	r3, r0, #1
 8001e88:	4198      	sbcs	r0, r3
 8001e8a:	b2c0      	uxtb	r0, r0
 8001e8c:	e688      	b.n	8001ba0 <HAL_RCC_OscConfig+0x248>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <HAL_RCC_OscConfig+0x54c>)
 8001e90:	3901      	subs	r1, #1
 8001e92:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001e94:	39ff      	subs	r1, #255	@ 0xff
 8001e96:	4301      	orrs	r1, r0
 8001e98:	6519      	str	r1, [r3, #80]	@ 0x50
 8001e9a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	651a      	str	r2, [r3, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea0:	e648      	b.n	8001b34 <HAL_RCC_OscConfig+0x1dc>
 8001ea2:	46c0      	nop			@ (mov r8, r8)
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	fffffeff 	.word	0xfffffeff
 8001eac:	fffffbff 	.word	0xfffffbff
 8001eb0:	00001388 	.word	0x00001388
 8001eb4:	feffffff 	.word	0xfeffffff
 8001eb8:	ff02ffff 	.word	0xff02ffff
 8001ebc:	efffffff 	.word	0xefffffff

08001ec0 <HAL_RCC_ClockConfig>:
{
 8001ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec2:	46ce      	mov	lr, r9
 8001ec4:	4647      	mov	r7, r8
 8001ec6:	0005      	movs	r5, r0
 8001ec8:	000c      	movs	r4, r1
 8001eca:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 8001ecc:	2800      	cmp	r0, #0
 8001ece:	d066      	beq.n	8001f9e <HAL_RCC_ClockConfig+0xde>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4e6a      	ldr	r6, [pc, #424]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	6833      	ldr	r3, [r6, #0]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	428b      	cmp	r3, r1
 8001eda:	d362      	bcc.n	8001fa2 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	079a      	lsls	r2, r3, #30
 8001ee0:	d506      	bpl.n	8001ef0 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee2:	20f0      	movs	r0, #240	@ 0xf0
 8001ee4:	4966      	ldr	r1, [pc, #408]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee6:	68ca      	ldr	r2, [r1, #12]
 8001ee8:	4382      	bics	r2, r0
 8001eea:	68a8      	ldr	r0, [r5, #8]
 8001eec:	4302      	orrs	r2, r0
 8001eee:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef0:	07db      	lsls	r3, r3, #31
 8001ef2:	d52d      	bpl.n	8001f50 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ef4:	4b62      	ldr	r3, [pc, #392]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef6:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ef8:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efa:	2a02      	cmp	r2, #2
 8001efc:	d04d      	beq.n	8001f9a <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efe:	2a03      	cmp	r2, #3
 8001f00:	d100      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x44>
 8001f02:	e06f      	b.n	8001fe4 <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f04:	2a01      	cmp	r2, #1
 8001f06:	d100      	bne.n	8001f0a <HAL_RCC_ClockConfig+0x4a>
 8001f08:	e0a3      	b.n	8002052 <HAL_RCC_ClockConfig+0x192>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f0a:	059b      	lsls	r3, r3, #22
 8001f0c:	d547      	bpl.n	8001f9e <HAL_RCC_ClockConfig+0xde>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f0e:	2103      	movs	r1, #3
 8001f10:	4e5b      	ldr	r6, [pc, #364]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001f12:	68f3      	ldr	r3, [r6, #12]
 8001f14:	438b      	bics	r3, r1
 8001f16:	4313      	orrs	r3, r2
 8001f18:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8001f1a:	f7fe fe19 	bl	8000b50 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001f20:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d100      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x68>
 8001f26:	e074      	b.n	8002012 <HAL_RCC_ClockConfig+0x152>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d100      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x6e>
 8001f2c:	e081      	b.n	8002032 <HAL_RCC_ClockConfig+0x172>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d100      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x74>
 8001f32:	e093      	b.n	800205c <HAL_RCC_ClockConfig+0x19c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f34:	230c      	movs	r3, #12
 8001f36:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f38:	4b52      	ldr	r3, [pc, #328]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	4699      	mov	r9, r3
 8001f3c:	e004      	b.n	8001f48 <HAL_RCC_ClockConfig+0x88>
 8001f3e:	f7fe fe07 	bl	8000b50 <HAL_GetTick>
 8001f42:	1bc0      	subs	r0, r0, r7
 8001f44:	4548      	cmp	r0, r9
 8001f46:	d842      	bhi.n	8001fce <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f48:	4642      	mov	r2, r8
 8001f4a:	68f3      	ldr	r3, [r6, #12]
 8001f4c:	421a      	tst	r2, r3
 8001f4e:	d1f6      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f50:	2201      	movs	r2, #1
 8001f52:	4e4a      	ldr	r6, [pc, #296]	@ (800207c <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	6833      	ldr	r3, [r6, #0]
 8001f56:	4013      	ands	r3, r2
 8001f58:	42a3      	cmp	r3, r4
 8001f5a:	d847      	bhi.n	8001fec <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	682b      	ldr	r3, [r5, #0]
 8001f5e:	075a      	lsls	r2, r3, #29
 8001f60:	d506      	bpl.n	8001f70 <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f62:	4947      	ldr	r1, [pc, #284]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	4848      	ldr	r0, [pc, #288]	@ (8002088 <HAL_RCC_ClockConfig+0x1c8>)
 8001f66:	68ca      	ldr	r2, [r1, #12]
 8001f68:	4002      	ands	r2, r0
 8001f6a:	68e8      	ldr	r0, [r5, #12]
 8001f6c:	4302      	orrs	r2, r0
 8001f6e:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f70:	071b      	lsls	r3, r3, #28
 8001f72:	d42e      	bmi.n	8001fd2 <HAL_RCC_ClockConfig+0x112>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f74:	f7ff fca8 	bl	80018c8 <HAL_RCC_GetSysClockFreq>
 8001f78:	4b41      	ldr	r3, [pc, #260]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7a:	4a44      	ldr	r2, [pc, #272]	@ (800208c <HAL_RCC_ClockConfig+0x1cc>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	4944      	ldr	r1, [pc, #272]	@ (8002090 <HAL_RCC_ClockConfig+0x1d0>)
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	0f1b      	lsrs	r3, r3, #28
 8001f84:	5cd3      	ldrb	r3, [r2, r3]
 8001f86:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 8001f88:	4b42      	ldr	r3, [pc, #264]	@ (8002094 <HAL_RCC_ClockConfig+0x1d4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f8a:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	f7fe fd99 	bl	8000ac4 <HAL_InitTick>
}
 8001f92:	bcc0      	pop	{r6, r7}
 8001f94:	46b9      	mov	r9, r7
 8001f96:	46b0      	mov	r8, r6
 8001f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f9a:	039b      	lsls	r3, r3, #14
 8001f9c:	d4b7      	bmi.n	8001f0e <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	e7f7      	b.n	8001f92 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	6833      	ldr	r3, [r6, #0]
 8001fa4:	4393      	bics	r3, r2
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001faa:	f7fe fdd1 	bl	8000b50 <HAL_GetTick>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	2301      	movs	r3, #1
 8001fb0:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb2:	4b34      	ldr	r3, [pc, #208]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 8001fb4:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb6:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb8:	4642      	mov	r2, r8
 8001fba:	6833      	ldr	r3, [r6, #0]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	42a3      	cmp	r3, r4
 8001fc0:	d100      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x104>
 8001fc2:	e78b      	b.n	8001edc <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7fe fdc4 	bl	8000b50 <HAL_GetTick>
 8001fc8:	1bc0      	subs	r0, r0, r7
 8001fca:	4548      	cmp	r0, r9
 8001fcc:	d9f4      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 8001fce:	2003      	movs	r0, #3
 8001fd0:	e7df      	b.n	8001f92 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fd2:	492b      	ldr	r1, [pc, #172]	@ (8002080 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	692b      	ldr	r3, [r5, #16]
 8001fd6:	68ca      	ldr	r2, [r1, #12]
 8001fd8:	482f      	ldr	r0, [pc, #188]	@ (8002098 <HAL_RCC_ClockConfig+0x1d8>)
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4002      	ands	r2, r0
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60cb      	str	r3, [r1, #12]
 8001fe2:	e7c7      	b.n	8001f74 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fe4:	019b      	lsls	r3, r3, #6
 8001fe6:	d492      	bmi.n	8001f0e <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8001fe8:	2001      	movs	r0, #1
 8001fea:	e7d2      	b.n	8001f92 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fec:	6833      	ldr	r3, [r6, #0]
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	2701      	movs	r7, #1
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff0:	4393      	bics	r3, r2
 8001ff2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001ff4:	f7fe fdac 	bl	8000b50 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff8:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 8001ffa:	0004      	movs	r4, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffc:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	6833      	ldr	r3, [r6, #0]
 8002000:	421f      	tst	r7, r3
 8002002:	d0ab      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7fe fda4 	bl	8000b50 <HAL_GetTick>
 8002008:	1b00      	subs	r0, r0, r4
 800200a:	4540      	cmp	r0, r8
 800200c:	d9f7      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x13e>
        return HAL_TIMEOUT;
 800200e:	2003      	movs	r0, #3
 8002010:	e7bf      	b.n	8001f92 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002012:	330a      	adds	r3, #10
 8002014:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002016:	4b1b      	ldr	r3, [pc, #108]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	4699      	mov	r9, r3
 800201a:	e004      	b.n	8002026 <HAL_RCC_ClockConfig+0x166>
 800201c:	f7fe fd98 	bl	8000b50 <HAL_GetTick>
 8002020:	1bc0      	subs	r0, r0, r7
 8002022:	4548      	cmp	r0, r9
 8002024:	d8d3      	bhi.n	8001fce <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002026:	4642      	mov	r2, r8
 8002028:	68f3      	ldr	r3, [r6, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	2b08      	cmp	r3, #8
 800202e:	d1f5      	bne.n	800201c <HAL_RCC_ClockConfig+0x15c>
 8002030:	e78e      	b.n	8001f50 <HAL_RCC_ClockConfig+0x90>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002032:	3309      	adds	r3, #9
 8002034:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002036:	4b13      	ldr	r3, [pc, #76]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	4699      	mov	r9, r3
 800203a:	e004      	b.n	8002046 <HAL_RCC_ClockConfig+0x186>
 800203c:	f7fe fd88 	bl	8000b50 <HAL_GetTick>
 8002040:	1bc0      	subs	r0, r0, r7
 8002042:	4548      	cmp	r0, r9
 8002044:	d8c3      	bhi.n	8001fce <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002046:	4642      	mov	r2, r8
 8002048:	68f3      	ldr	r3, [r6, #12]
 800204a:	4013      	ands	r3, r2
 800204c:	2b0c      	cmp	r3, #12
 800204e:	d1f5      	bne.n	800203c <HAL_RCC_ClockConfig+0x17c>
 8002050:	e77e      	b.n	8001f50 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002052:	075b      	lsls	r3, r3, #29
 8002054:	d500      	bpl.n	8002058 <HAL_RCC_ClockConfig+0x198>
 8002056:	e75a      	b.n	8001f0e <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8002058:	2001      	movs	r0, #1
 800205a:	e79a      	b.n	8001f92 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800205c:	330b      	adds	r3, #11
 800205e:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	4699      	mov	r9, r3
 8002064:	e004      	b.n	8002070 <HAL_RCC_ClockConfig+0x1b0>
 8002066:	f7fe fd73 	bl	8000b50 <HAL_GetTick>
 800206a:	1bc0      	subs	r0, r0, r7
 800206c:	4548      	cmp	r0, r9
 800206e:	d8ae      	bhi.n	8001fce <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002070:	4642      	mov	r2, r8
 8002072:	68f3      	ldr	r3, [r6, #12]
 8002074:	4013      	ands	r3, r2
 8002076:	2b04      	cmp	r3, #4
 8002078:	d1f5      	bne.n	8002066 <HAL_RCC_ClockConfig+0x1a6>
 800207a:	e769      	b.n	8001f50 <HAL_RCC_ClockConfig+0x90>
 800207c:	40022000 	.word	0x40022000
 8002080:	40021000 	.word	0x40021000
 8002084:	00001388 	.word	0x00001388
 8002088:	fffff8ff 	.word	0xfffff8ff
 800208c:	080022c8 	.word	0x080022c8
 8002090:	2000000c 	.word	0x2000000c
 8002094:	20000014 	.word	0x20000014
 8002098:	ffffc7ff 	.word	0xffffc7ff

0800209c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209e:	46ce      	mov	lr, r9
 80020a0:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020a2:	6803      	ldr	r3, [r0, #0]
{
 80020a4:	0004      	movs	r4, r0
 80020a6:	b580      	push	{r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020a8:	069a      	lsls	r2, r3, #26
 80020aa:	d567      	bpl.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ac:	2380      	movs	r3, #128	@ 0x80
  FlagStatus       pwrclkchanged = RESET;
 80020ae:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b0:	4a5c      	ldr	r2, [pc, #368]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80020b2:	055b      	lsls	r3, r3, #21
 80020b4:	6b91      	ldr	r1, [r2, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 80020b6:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b8:	4219      	tst	r1, r3
 80020ba:	d100      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x22>
 80020bc:	e088      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	2680      	movs	r6, #128	@ 0x80
 80020c0:	4d59      	ldr	r5, [pc, #356]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80020c2:	0076      	lsls	r6, r6, #1
 80020c4:	682b      	ldr	r3, [r5, #0]
 80020c6:	4233      	tst	r3, r6
 80020c8:	d100      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x30>
 80020ca:	e08d      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80020cc:	20c0      	movs	r0, #192	@ 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80020ce:	4955      	ldr	r1, [pc, #340]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80020d0:	6863      	ldr	r3, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80020d2:	680a      	ldr	r2, [r1, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80020d4:	0380      	lsls	r0, r0, #14
 80020d6:	405a      	eors	r2, r3
 80020d8:	4202      	tst	r2, r0
 80020da:	d006      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80020dc:	22c0      	movs	r2, #192	@ 0xc0
 80020de:	0018      	movs	r0, r3
 80020e0:	0292      	lsls	r2, r2, #10
 80020e2:	4010      	ands	r0, r2
 80020e4:	4290      	cmp	r0, r2
 80020e6:	d100      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80020e8:	e096      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020ea:	4d4e      	ldr	r5, [pc, #312]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80020ec:	22c0      	movs	r2, #192	@ 0xc0
 80020ee:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80020f0:	0292      	lsls	r2, r2, #10
 80020f2:	0006      	movs	r6, r0

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020f4:	6821      	ldr	r1, [r4, #0]
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020f6:	4016      	ands	r6, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80020f8:	4210      	tst	r0, r2
 80020fa:	d024      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 80020fc:	401a      	ands	r2, r3
 80020fe:	42b2      	cmp	r2, r6
 8002100:	d021      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002102:	0689      	lsls	r1, r1, #26
 8002104:	d536      	bpl.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002106:	2680      	movs	r6, #128	@ 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002108:	6d29      	ldr	r1, [r5, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800210a:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 800210c:	0336      	lsls	r6, r6, #12
 800210e:	433e      	orrs	r6, r7
 8002110:	652e      	str	r6, [r5, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002112:	6d2e      	ldr	r6, [r5, #80]	@ 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002114:	4845      	ldr	r0, [pc, #276]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x190>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002116:	4f46      	ldr	r7, [pc, #280]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x194>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002118:	4008      	ands	r0, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800211a:	403e      	ands	r6, r7
 800211c:	652e      	str	r6, [r5, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800211e:	6528      	str	r0, [r5, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002120:	05c9      	lsls	r1, r1, #23
 8002122:	d516      	bpl.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7fe fd14 	bl	8000b50 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002128:	2780      	movs	r7, #128	@ 0x80
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	4b42      	ldr	r3, [pc, #264]	@ (8002234 <HAL_RCCEx_PeriphCLKConfig+0x198>)
        tickstart = HAL_GetTick();
 800212c:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002130:	00bf      	lsls	r7, r7, #2
 8002132:	e004      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002134:	f7fe fd0c 	bl	8000b50 <HAL_GetTick>
 8002138:	1b80      	subs	r0, r0, r6
 800213a:	4548      	cmp	r0, r9
 800213c:	d863      	bhi.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x16a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800213e:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8002140:	423b      	tst	r3, r7
 8002142:	d0f7      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002144:	6821      	ldr	r1, [r4, #0]
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002146:	0689      	lsls	r1, r1, #26
 8002148:	d514      	bpl.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800214a:	22c0      	movs	r2, #192	@ 0xc0
 800214c:	6863      	ldr	r3, [r4, #4]
 800214e:	0292      	lsls	r2, r2, #10
 8002150:	401a      	ands	r2, r3
 8002152:	21c0      	movs	r1, #192	@ 0xc0
 8002154:	0289      	lsls	r1, r1, #10
 8002156:	428a      	cmp	r2, r1
 8002158:	d108      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800215a:	4832      	ldr	r0, [pc, #200]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800215c:	4d36      	ldr	r5, [pc, #216]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800215e:	6801      	ldr	r1, [r0, #0]
 8002160:	4029      	ands	r1, r5
 8002162:	25c0      	movs	r5, #192	@ 0xc0
 8002164:	03ad      	lsls	r5, r5, #14
 8002166:	402b      	ands	r3, r5
 8002168:	430b      	orrs	r3, r1
 800216a:	6003      	str	r3, [r0, #0]
 800216c:	492d      	ldr	r1, [pc, #180]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800216e:	6d0b      	ldr	r3, [r1, #80]	@ 0x50
 8002170:	4313      	orrs	r3, r2
 8002172:	650b      	str	r3, [r1, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002174:	4643      	mov	r3, r8
 8002176:	2b01      	cmp	r3, #1
 8002178:	d047      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	079a      	lsls	r2, r3, #30
 800217e:	d506      	bpl.n	800218e <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002180:	200c      	movs	r0, #12
 8002182:	4928      	ldr	r1, [pc, #160]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002184:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002186:	4382      	bics	r2, r0
 8002188:	68a0      	ldr	r0, [r4, #8]
 800218a:	4302      	orrs	r2, r0
 800218c:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800218e:	075a      	lsls	r2, r3, #29
 8002190:	d506      	bpl.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002192:	4924      	ldr	r1, [pc, #144]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002194:	4829      	ldr	r0, [pc, #164]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002196:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002198:	4002      	ands	r2, r0
 800219a:	68e0      	ldr	r0, [r4, #12]
 800219c:	4302      	orrs	r2, r0
 800219e:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021a0:	071a      	lsls	r2, r3, #28
 80021a2:	d506      	bpl.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a4:	491f      	ldr	r1, [pc, #124]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80021a6:	4826      	ldr	r0, [pc, #152]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80021a8:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80021aa:	4002      	ands	r2, r0
 80021ac:	6920      	ldr	r0, [r4, #16]
 80021ae:	4302      	orrs	r2, r0
 80021b0:	64ca      	str	r2, [r1, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021b2:	061b      	lsls	r3, r3, #24
 80021b4:	d404      	bmi.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80021b6:	2000      	movs	r0, #0
}
 80021b8:	bcc0      	pop	{r6, r7}
 80021ba:	46b9      	mov	r9, r7
 80021bc:	46b0      	mov	r8, r6
 80021be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80021c0:	4a18      	ldr	r2, [pc, #96]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80021c2:	4920      	ldr	r1, [pc, #128]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80021c4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80021c6:	400b      	ands	r3, r1
 80021c8:	6961      	ldr	r1, [r4, #20]
 80021ca:	430b      	orrs	r3, r1
 80021cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ce:	e7f2      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d0:	6b91      	ldr	r1, [r2, #56]	@ 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	2680      	movs	r6, #128	@ 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 80021d8:	2301      	movs	r3, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021da:	4d13      	ldr	r5, [pc, #76]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
      pwrclkchanged = SET;
 80021dc:	4698      	mov	r8, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021de:	682b      	ldr	r3, [r5, #0]
 80021e0:	0076      	lsls	r6, r6, #1
 80021e2:	4233      	tst	r3, r6
 80021e4:	d000      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80021e6:	e771      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e8:	682b      	ldr	r3, [r5, #0]
 80021ea:	4333      	orrs	r3, r6
 80021ec:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80021ee:	f7fe fcaf 	bl	8000b50 <HAL_GetTick>
 80021f2:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	682b      	ldr	r3, [r5, #0]
 80021f6:	4233      	tst	r3, r6
 80021f8:	d000      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 80021fa:	e767      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fc:	f7fe fca8 	bl	8000b50 <HAL_GetTick>
 8002200:	1bc0      	subs	r0, r0, r7
 8002202:	2864      	cmp	r0, #100	@ 0x64
 8002204:	d9f6      	bls.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
          return HAL_TIMEOUT;
 8002206:	2003      	movs	r0, #3
 8002208:	e7d6      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4a06      	ldr	r2, [pc, #24]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800220c:	490e      	ldr	r1, [pc, #56]	@ (8002248 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800220e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8002210:	400b      	ands	r3, r1
 8002212:	6393      	str	r3, [r2, #56]	@ 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	e7b1      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002218:	680a      	ldr	r2, [r1, #0]
 800221a:	0392      	lsls	r2, r2, #14
 800221c:	d400      	bmi.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x184>
 800221e:	e764      	b.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
          return HAL_ERROR;
 8002220:	2001      	movs	r0, #1
 8002222:	e7c9      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002224:	40021000 	.word	0x40021000
 8002228:	40007000 	.word	0x40007000
 800222c:	fffcffff 	.word	0xfffcffff
 8002230:	fff7ffff 	.word	0xfff7ffff
 8002234:	00001388 	.word	0x00001388
 8002238:	ffcfffff 	.word	0xffcfffff
 800223c:	fffff3ff 	.word	0xfffff3ff
 8002240:	ffffcfff 	.word	0xffffcfff
 8002244:	fff3ffff 	.word	0xfff3ffff
 8002248:	efffffff 	.word	0xefffffff

0800224c <memset>:
 800224c:	0003      	movs	r3, r0
 800224e:	1882      	adds	r2, r0, r2
 8002250:	4293      	cmp	r3, r2
 8002252:	d100      	bne.n	8002256 <memset+0xa>
 8002254:	4770      	bx	lr
 8002256:	7019      	strb	r1, [r3, #0]
 8002258:	3301      	adds	r3, #1
 800225a:	e7f9      	b.n	8002250 <memset+0x4>

0800225c <__libc_init_array>:
 800225c:	b570      	push	{r4, r5, r6, lr}
 800225e:	2600      	movs	r6, #0
 8002260:	4c0c      	ldr	r4, [pc, #48]	@ (8002294 <__libc_init_array+0x38>)
 8002262:	4d0d      	ldr	r5, [pc, #52]	@ (8002298 <__libc_init_array+0x3c>)
 8002264:	1b64      	subs	r4, r4, r5
 8002266:	10a4      	asrs	r4, r4, #2
 8002268:	42a6      	cmp	r6, r4
 800226a:	d109      	bne.n	8002280 <__libc_init_array+0x24>
 800226c:	2600      	movs	r6, #0
 800226e:	f000 f819 	bl	80022a4 <_init>
 8002272:	4c0a      	ldr	r4, [pc, #40]	@ (800229c <__libc_init_array+0x40>)
 8002274:	4d0a      	ldr	r5, [pc, #40]	@ (80022a0 <__libc_init_array+0x44>)
 8002276:	1b64      	subs	r4, r4, r5
 8002278:	10a4      	asrs	r4, r4, #2
 800227a:	42a6      	cmp	r6, r4
 800227c:	d105      	bne.n	800228a <__libc_init_array+0x2e>
 800227e:	bd70      	pop	{r4, r5, r6, pc}
 8002280:	00b3      	lsls	r3, r6, #2
 8002282:	58eb      	ldr	r3, [r5, r3]
 8002284:	4798      	blx	r3
 8002286:	3601      	adds	r6, #1
 8002288:	e7ee      	b.n	8002268 <__libc_init_array+0xc>
 800228a:	00b3      	lsls	r3, r6, #2
 800228c:	58eb      	ldr	r3, [r5, r3]
 800228e:	4798      	blx	r3
 8002290:	3601      	adds	r6, #1
 8002292:	e7f2      	b.n	800227a <__libc_init_array+0x1e>
 8002294:	080022e0 	.word	0x080022e0
 8002298:	080022e0 	.word	0x080022e0
 800229c:	080022e4 	.word	0x080022e4
 80022a0:	080022e0 	.word	0x080022e0

080022a4 <_init>:
 80022a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022aa:	bc08      	pop	{r3}
 80022ac:	469e      	mov	lr, r3
 80022ae:	4770      	bx	lr

080022b0 <_fini>:
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b6:	bc08      	pop	{r3}
 80022b8:	469e      	mov	lr, r3
 80022ba:	4770      	bx	lr
