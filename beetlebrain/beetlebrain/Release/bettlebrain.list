
bettlebrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b28  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007be8  08007be8  00008be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c20  08007c20  00009018  2**0
                  CONTENTS
  4 .ARM          00000008  08007c20  08007c20  00008c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c28  08007c28  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c28  08007c28  00008c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c2c  08007c2c  00008c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007c30  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000018  08007c48  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08007c48  00009238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f874  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002640  00000000  00000000  000188b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  0001aef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00011488  00000000  00000000  0001b0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014389  00000000  00000000  0002c584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00073f14  00000000  00000000  0004090d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000b4821  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001780  00000000  00000000  000b4864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 0000086c  00000000  00000000  000b5fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000081a4  00000000  00000000  000b6850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007bd0 	.word	0x08007bd0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08007bd0 	.word	0x08007bd0

08000108 <RUN_interrupt>:
	HAL_NVIC_SetPriority(EXTI4_15_IRQn,3,0);
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
}

void RUN_interrupt(void){
	asm("NOP");
 8000108:	46c0      	nop			@ (mov r8, r8)
}
 800010a:	4770      	bx	lr

0800010c <interrupt_init>:
	EXTI_ConfigTypeDef hext_a7_config = {0};
 800010c:	2300      	movs	r3, #0
void interrupt_init(void){
 800010e:	b510      	push	{r4, lr}
 8000110:	b084      	sub	sp, #16
	EXTI_ConfigTypeDef hext_a7_config = {0};
 8000112:	9303      	str	r3, [sp, #12]
	hext_a7_config.Line = EXTI_LINE_7;
 8000114:	2301      	movs	r3, #1
 8000116:	4a0e      	ldr	r2, [pc, #56]	@ (8000150 <interrupt_init+0x44>)
	HAL_EXTI_GetHandle(&RUN_Handle, EXTI_LINE_7);
 8000118:	4c0e      	ldr	r4, [pc, #56]	@ (8000154 <interrupt_init+0x48>)
	hext_a7_config.Line = EXTI_LINE_7;
 800011a:	9200      	str	r2, [sp, #0]
 800011c:	9301      	str	r3, [sp, #4]
	hext_a7_config.Trigger = EXTI_TRIGGER_RISING_FALLING;
 800011e:	2303      	movs	r3, #3
	HAL_EXTI_GetHandle(&RUN_Handle, EXTI_LINE_7);
 8000120:	0020      	movs	r0, r4
 8000122:	490b      	ldr	r1, [pc, #44]	@ (8000150 <interrupt_init+0x44>)
	hext_a7_config.Trigger = EXTI_TRIGGER_RISING_FALLING;
 8000124:	9302      	str	r3, [sp, #8]
	HAL_EXTI_GetHandle(&RUN_Handle, EXTI_LINE_7);
 8000126:	f001 fe01 	bl	8001d2c <HAL_EXTI_GetHandle>
	HAL_EXTI_SetConfigLine(&RUN_Handle, &hext_a7_config);
 800012a:	4669      	mov	r1, sp
 800012c:	0020      	movs	r0, r4
 800012e:	f001 fd21 	bl	8001b74 <HAL_EXTI_SetConfigLine>
	HAL_EXTI_RegisterCallback(&RUN_Handle, HAL_EXTI_COMMON_CB_ID, &RUN_interrupt);
 8000132:	2100      	movs	r1, #0
 8000134:	0020      	movs	r0, r4
 8000136:	4a08      	ldr	r2, [pc, #32]	@ (8000158 <interrupt_init+0x4c>)
 8000138:	f001 fdf0 	bl	8001d1c <HAL_EXTI_RegisterCallback>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn,3,0);
 800013c:	2200      	movs	r2, #0
 800013e:	2103      	movs	r1, #3
 8000140:	2007      	movs	r0, #7
 8000142:	f001 f9e5 	bl	8001510 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000146:	2007      	movs	r0, #7
 8000148:	f001 fa0c 	bl	8001564 <HAL_NVIC_EnableIRQ>
}
 800014c:	b004      	add	sp, #16
 800014e:	bd10      	pop	{r4, pc}
 8000150:	06000007 	.word	0x06000007
 8000154:	20000034 	.word	0x20000034
 8000158:	08000109 	.word	0x08000109

0800015c <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 800015c:	b510      	push	{r4, lr}
// Function called on 4_15 interrupt
// We call the HAL handler
	if(HAL_EXTI_GetPending(&RUN_Handle, EXTI_TRIGGER_RISING_FALLING))
 800015e:	4c06      	ldr	r4, [pc, #24]	@ (8000178 <EXTI4_15_IRQHandler+0x1c>)
 8000160:	2103      	movs	r1, #3
 8000162:	0020      	movs	r0, r4
 8000164:	f001 fdfc 	bl	8001d60 <HAL_EXTI_GetPending>
 8000168:	2800      	cmp	r0, #0
 800016a:	d100      	bne.n	800016e <EXTI4_15_IRQHandler+0x12>
	{
		HAL_EXTI_IRQHandler(&RUN_Handle);
	}
};
 800016c:	bd10      	pop	{r4, pc}
		HAL_EXTI_IRQHandler(&RUN_Handle);
 800016e:	0020      	movs	r0, r4
 8000170:	f001 fde4 	bl	8001d3c <HAL_EXTI_IRQHandler>
};
 8000174:	e7fa      	b.n	800016c <EXTI4_15_IRQHandler+0x10>
 8000176:	46c0      	nop			@ (mov r8, r8)
 8000178:	20000034 	.word	0x20000034

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b500      	push	{lr}
 800017e:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000180:	2220      	movs	r2, #32
 8000182:	2100      	movs	r1, #0
 8000184:	a80c      	add	r0, sp, #48	@ 0x30
 8000186:	f007 fcf6 	bl	8007b76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018a:	2214      	movs	r2, #20
 800018c:	2100      	movs	r1, #0
 800018e:	4668      	mov	r0, sp
 8000190:	f007 fcf1 	bl	8007b76 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000194:	2218      	movs	r2, #24
 8000196:	2100      	movs	r1, #0
 8000198:	a805      	add	r0, sp, #20
 800019a:	f007 fcec 	bl	8007b76 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800019e:	491d      	ldr	r1, [pc, #116]	@ (8000214 <SystemClock_Config+0x98>)
 80001a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000218 <SystemClock_Config+0x9c>)
 80001a2:	680a      	ldr	r2, [r1, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001a4:	a80b      	add	r0, sp, #44	@ 0x2c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80001a6:	401a      	ands	r2, r3
 80001a8:	2380      	movs	r3, #128	@ 0x80
 80001aa:	011b      	lsls	r3, r3, #4
 80001ac:	4313      	orrs	r3, r2
 80001ae:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b0:	2302      	movs	r3, #2
 80001b2:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b4:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80001b6:	2300      	movs	r3, #0
 80001b8:	9315      	str	r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80001ba:	2380      	movs	r3, #128	@ 0x80
 80001bc:	02db      	lsls	r3, r3, #11
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001be:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80001c0:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80001c2:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c4:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80001c6:	03db      	lsls	r3, r3, #15
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c8:	320f      	adds	r2, #15
 80001ca:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80001cc:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ce:	f006 fb29 	bl	8006824 <HAL_RCC_OscConfig>
 80001d2:	2800      	cmp	r0, #0
 80001d4:	d001      	beq.n	80001da <SystemClock_Config+0x5e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001d6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001d8:	e7fe      	b.n	80001d8 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001da:	220f      	movs	r2, #15
 80001dc:	2303      	movs	r3, #3
 80001de:	9200      	str	r2, [sp, #0]
 80001e0:	9301      	str	r3, [sp, #4]
 80001e2:	2200      	movs	r2, #0
 80001e4:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001e8:	2101      	movs	r1, #1
 80001ea:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	9202      	str	r2, [sp, #8]
 80001ee:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001f0:	f006 fdcc 	bl	8006d8c <HAL_RCC_ClockConfig>
 80001f4:	2800      	cmp	r0, #0
 80001f6:	d001      	beq.n	80001fc <SystemClock_Config+0x80>
 80001f8:	b672      	cpsid	i
  while (1)
 80001fa:	e7fe      	b.n	80001fa <SystemClock_Config+0x7e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80001fc:	2308      	movs	r3, #8
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80001fe:	9009      	str	r0, [sp, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000200:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000202:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000204:	f006 ff52 	bl	80070ac <HAL_RCCEx_PeriphCLKConfig>
 8000208:	2800      	cmp	r0, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x94>
 800020c:	b672      	cpsid	i
  while (1)
 800020e:	e7fe      	b.n	800020e <SystemClock_Config+0x92>
}
 8000210:	b019      	add	sp, #100	@ 0x64
 8000212:	bd00      	pop	{pc}
 8000214:	40007000 	.word	0x40007000
 8000218:	ffffe7ff 	.word	0xffffe7ff

0800021c <Error_Handler>:
 800021c:	b672      	cpsid	i
  while (1)
 800021e:	e7fe      	b.n	800021e <Error_Handler+0x2>

08000220 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000220:	2101      	movs	r1, #1
 8000222:	4b05      	ldr	r3, [pc, #20]	@ (8000238 <HAL_MspInit+0x18>)
 8000224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000226:	430a      	orrs	r2, r1
 8000228:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800022a:	2280      	movs	r2, #128	@ 0x80
 800022c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800022e:	0552      	lsls	r2, r2, #21
 8000230:	430a      	orrs	r2, r1
 8000232:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000234:	4770      	bx	lr
 8000236:	46c0      	nop			@ (mov r8, r8)
 8000238:	40021000 	.word	0x40021000

0800023c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	0004      	movs	r4, r0
 8000240:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000242:	2214      	movs	r2, #20
 8000244:	2100      	movs	r1, #0
 8000246:	a802      	add	r0, sp, #8
 8000248:	f007 fc95 	bl	8007b76 <memset>
  if(hadc->Instance==ADC1)
 800024c:	4b1c      	ldr	r3, [pc, #112]	@ (80002c0 <HAL_ADC_MspInit+0x84>)
 800024e:	6822      	ldr	r2, [r4, #0]
 8000250:	429a      	cmp	r2, r3
 8000252:	d001      	beq.n	8000258 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000254:	b009      	add	sp, #36	@ 0x24
 8000256:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000258:	2280      	movs	r2, #128	@ 0x80
 800025a:	4b1a      	ldr	r3, [pc, #104]	@ (80002c4 <HAL_ADC_MspInit+0x88>)
 800025c:	0092      	lsls	r2, r2, #2
 800025e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000260:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000262:	430a      	orrs	r2, r1
 8000264:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000266:	2201      	movs	r2, #1
 8000268:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800026a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800026c:	4311      	orrs	r1, r2
 800026e:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000272:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000274:	401a      	ands	r2, r3
 8000276:	9201      	str	r2, [sp, #4]
 8000278:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800027a:	2260      	movs	r2, #96	@ 0x60
 800027c:	2303      	movs	r3, #3
 800027e:	9202      	str	r2, [sp, #8]
 8000280:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000282:	f001 fd8d 	bl	8001da0 <HAL_GPIO_Init>
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000286:	2280      	movs	r2, #128	@ 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8000288:	4d0f      	ldr	r5, [pc, #60]	@ (80002c8 <HAL_ADC_MspInit+0x8c>)
 800028a:	4b10      	ldr	r3, [pc, #64]	@ (80002cc <HAL_ADC_MspInit+0x90>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800028c:	612a      	str	r2, [r5, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800028e:	3280      	adds	r2, #128	@ 0x80
 8000290:	616a      	str	r2, [r5, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000292:	2280      	movs	r2, #128	@ 0x80
 8000294:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 8000296:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000298:	61aa      	str	r2, [r5, #24]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800029a:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800029c:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800029e:	0028      	movs	r0, r5
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80002a0:	606b      	str	r3, [r5, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002a2:	60ab      	str	r3, [r5, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80002a4:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80002a6:	61ea      	str	r2, [r5, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80002a8:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80002aa:	f001 f9ff 	bl	80016ac <HAL_DMA_Init>
 80002ae:	2800      	cmp	r0, #0
 80002b0:	d102      	bne.n	80002b8 <HAL_ADC_MspInit+0x7c>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80002b2:	64e5      	str	r5, [r4, #76]	@ 0x4c
 80002b4:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80002b6:	e7cd      	b.n	8000254 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80002b8:	f7ff ffb0 	bl	800021c <Error_Handler>
 80002bc:	e7f9      	b.n	80002b2 <HAL_ADC_MspInit+0x76>
 80002be:	46c0      	nop			@ (mov r8, r8)
 80002c0:	40012400 	.word	0x40012400
 80002c4:	40021000 	.word	0x40021000
 80002c8:	200001e4 	.word	0x200001e4
 80002cc:	40020008 	.word	0x40020008

080002d0 <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 80002d0:	4b0a      	ldr	r3, [pc, #40]	@ (80002fc <HAL_ADC_MspDeInit+0x2c>)
 80002d2:	6802      	ldr	r2, [r0, #0]
{
 80002d4:	b510      	push	{r4, lr}
 80002d6:	0004      	movs	r4, r0
  if(hadc->Instance==ADC1)
 80002d8:	429a      	cmp	r2, r3
 80002da:	d000      	beq.n	80002de <HAL_ADC_MspDeInit+0xe>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 80002dc:	bd10      	pop	{r4, pc}
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6);
 80002de:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC1_CLK_DISABLE();
 80002e0:	4a07      	ldr	r2, [pc, #28]	@ (8000300 <HAL_ADC_MspDeInit+0x30>)
 80002e2:	4908      	ldr	r1, [pc, #32]	@ (8000304 <HAL_ADC_MspDeInit+0x34>)
 80002e4:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6);
 80002e6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_DISABLE();
 80002e8:	400b      	ands	r3, r1
 80002ea:	6353      	str	r3, [r2, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6);
 80002ec:	2160      	movs	r1, #96	@ 0x60
 80002ee:	f001 fe4d 	bl	8001f8c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hadc->DMA_Handle);
 80002f2:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80002f4:	f001 fa20 	bl	8001738 <HAL_DMA_DeInit>
}
 80002f8:	e7f0      	b.n	80002dc <HAL_ADC_MspDeInit+0xc>
 80002fa:	46c0      	nop			@ (mov r8, r8)
 80002fc:	40012400 	.word	0x40012400
 8000300:	40021000 	.word	0x40021000
 8000304:	fffffdff 	.word	0xfffffdff

08000308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000308:	b530      	push	{r4, r5, lr}
 800030a:	0004      	movs	r4, r0
 800030c:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030e:	2214      	movs	r2, #20
 8000310:	2100      	movs	r1, #0
 8000312:	a802      	add	r0, sp, #8
 8000314:	f007 fc2f 	bl	8007b76 <memset>
  if(hi2c->Instance==I2C1)
 8000318:	4b2c      	ldr	r3, [pc, #176]	@ (80003cc <HAL_I2C_MspInit+0xc4>)
 800031a:	6822      	ldr	r2, [r4, #0]
 800031c:	429a      	cmp	r2, r3
 800031e:	d001      	beq.n	8000324 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000320:	b009      	add	sp, #36	@ 0x24
 8000322:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000324:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000326:	20c0      	movs	r0, #192	@ 0xc0
 8000328:	2112      	movs	r1, #18
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032a:	4d29      	ldr	r5, [pc, #164]	@ (80003d0 <HAL_I2C_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800032c:	00c0      	lsls	r0, r0, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8000330:	431a      	orrs	r2, r3
 8000332:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8000334:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000336:	9002      	str	r0, [sp, #8]
 8000338:	9103      	str	r1, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800033a:	401a      	ands	r2, r3
 800033c:	9201      	str	r2, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033e:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000342:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000344:	05c0      	lsls	r0, r0, #23
 8000346:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000348:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800034a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800034c:	f001 fd28 	bl	8001da0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000350:	2380      	movs	r3, #128	@ 0x80
 8000352:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8000354:	039b      	lsls	r3, r3, #14
 8000356:	4313      	orrs	r3, r2
 8000358:	63ab      	str	r3, [r5, #56]	@ 0x38
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800035a:	2280      	movs	r2, #128	@ 0x80
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800035c:	4d1d      	ldr	r5, [pc, #116]	@ (80003d4 <HAL_I2C_MspInit+0xcc>)
 800035e:	4b1e      	ldr	r3, [pc, #120]	@ (80003d8 <HAL_I2C_MspInit+0xd0>)
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000360:	612a      	str	r2, [r5, #16]
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000362:	602b      	str	r3, [r5, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8000364:	2306      	movs	r3, #6
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000366:	3280      	adds	r2, #128	@ 0x80
 8000368:	616a      	str	r2, [r5, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800036a:	2280      	movs	r2, #128	@ 0x80
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800036c:	606b      	str	r3, [r5, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800036e:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000370:	00d2      	lsls	r2, r2, #3
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000372:	0028      	movs	r0, r5
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000374:	60ab      	str	r3, [r5, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000376:	60eb      	str	r3, [r5, #12]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000378:	61aa      	str	r2, [r5, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800037a:	61eb      	str	r3, [r5, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800037c:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800037e:	f001 f995 	bl	80016ac <HAL_DMA_Init>
 8000382:	2800      	cmp	r0, #0
 8000384:	d11b      	bne.n	80003be <HAL_I2C_MspInit+0xb6>
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000386:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <HAL_I2C_MspInit+0xd4>)
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000388:	63e5      	str	r5, [r4, #60]	@ 0x3c
 800038a:	62ac      	str	r4, [r5, #40]	@ 0x28
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800038c:	4d14      	ldr	r5, [pc, #80]	@ (80003e0 <HAL_I2C_MspInit+0xd8>)
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800038e:	2280      	movs	r2, #128	@ 0x80
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000390:	602b      	str	r3, [r5, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8000392:	2306      	movs	r3, #6
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000394:	612a      	str	r2, [r5, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000396:	3280      	adds	r2, #128	@ 0x80
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8000398:	606b      	str	r3, [r5, #4]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800039a:	616a      	str	r2, [r5, #20]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800039c:	330a      	adds	r3, #10
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800039e:	2280      	movs	r2, #128	@ 0x80
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80003a0:	60ab      	str	r3, [r5, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80003a2:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003a4:	00d2      	lsls	r2, r2, #3
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80003a6:	0028      	movs	r0, r5
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80003a8:	60eb      	str	r3, [r5, #12]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80003aa:	61aa      	str	r2, [r5, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80003ac:	61eb      	str	r3, [r5, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80003ae:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80003b0:	f001 f97c 	bl	80016ac <HAL_DMA_Init>
 80003b4:	2800      	cmp	r0, #0
 80003b6:	d105      	bne.n	80003c4 <HAL_I2C_MspInit+0xbc>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80003b8:	63a5      	str	r5, [r4, #56]	@ 0x38
 80003ba:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80003bc:	e7b0      	b.n	8000320 <HAL_I2C_MspInit+0x18>
      Error_Handler();
 80003be:	f7ff ff2d 	bl	800021c <Error_Handler>
 80003c2:	e7e0      	b.n	8000386 <HAL_I2C_MspInit+0x7e>
      Error_Handler();
 80003c4:	f7ff ff2a 	bl	800021c <Error_Handler>
 80003c8:	e7f6      	b.n	80003b8 <HAL_I2C_MspInit+0xb0>
 80003ca:	46c0      	nop			@ (mov r8, r8)
 80003cc:	40005400 	.word	0x40005400
 80003d0:	40021000 	.word	0x40021000
 80003d4:	2000019c 	.word	0x2000019c
 80003d8:	40020080 	.word	0x40020080
 80003dc:	4002001c 	.word	0x4002001c
 80003e0:	20000154 	.word	0x20000154

080003e4 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 80003e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000424 <HAL_I2C_MspDeInit+0x40>)
 80003e6:	6802      	ldr	r2, [r0, #0]
{
 80003e8:	b510      	push	{r4, lr}
 80003ea:	0004      	movs	r4, r0
  if(hi2c->Instance==I2C1)
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d000      	beq.n	80003f2 <HAL_I2C_MspDeInit+0xe>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80003f0:	bd10      	pop	{r4, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 80003f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000428 <HAL_I2C_MspDeInit+0x44>)
 80003f4:	490d      	ldr	r1, [pc, #52]	@ (800042c <HAL_I2C_MspDeInit+0x48>)
 80003f6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80003f8:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_I2C1_CLK_DISABLE();
 80003fa:	400b      	ands	r3, r1
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80003fc:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_I2C1_CLK_DISABLE();
 80003fe:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 8000400:	0089      	lsls	r1, r1, #2
 8000402:	05c0      	lsls	r0, r0, #23
 8000404:	f001 fdc2 	bl	8001f8c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8000408:	2180      	movs	r1, #128	@ 0x80
 800040a:	20a0      	movs	r0, #160	@ 0xa0
 800040c:	00c9      	lsls	r1, r1, #3
 800040e:	05c0      	lsls	r0, r0, #23
 8000410:	f001 fdbc 	bl	8001f8c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hi2c->hdmarx);
 8000414:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8000416:	f001 f98f 	bl	8001738 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 800041a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800041c:	f001 f98c 	bl	8001738 <HAL_DMA_DeInit>
}
 8000420:	e7e6      	b.n	80003f0 <HAL_I2C_MspDeInit+0xc>
 8000422:	46c0      	nop			@ (mov r8, r8)
 8000424:	40005400 	.word	0x40005400
 8000428:	40021000 	.word	0x40021000
 800042c:	ffdfffff 	.word	0xffdfffff

08000430 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000430:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <HAL_RTC_MspInit+0x18>)
 8000432:	6802      	ldr	r2, [r0, #0]
 8000434:	429a      	cmp	r2, r3
 8000436:	d000      	beq.n	800043a <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000438:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 800043a:	2380      	movs	r3, #128	@ 0x80
 800043c:	4a03      	ldr	r2, [pc, #12]	@ (800044c <HAL_RTC_MspInit+0x1c>)
 800043e:	02db      	lsls	r3, r3, #11
 8000440:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8000442:	430b      	orrs	r3, r1
 8000444:	6513      	str	r3, [r2, #80]	@ 0x50
}
 8000446:	e7f7      	b.n	8000438 <HAL_RTC_MspInit+0x8>
 8000448:	40002800 	.word	0x40002800
 800044c:	40021000 	.word	0x40021000

08000450 <HAL_RTC_MspDeInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <HAL_RTC_MspDeInit+0x18>)
 8000452:	6802      	ldr	r2, [r0, #0]
 8000454:	429a      	cmp	r2, r3
 8000456:	d000      	beq.n	800045a <HAL_RTC_MspDeInit+0xa>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8000458:	4770      	bx	lr
    __HAL_RCC_RTC_DISABLE();
 800045a:	4a04      	ldr	r2, [pc, #16]	@ (800046c <HAL_RTC_MspDeInit+0x1c>)
 800045c:	4904      	ldr	r1, [pc, #16]	@ (8000470 <HAL_RTC_MspDeInit+0x20>)
 800045e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8000460:	400b      	ands	r3, r1
 8000462:	6513      	str	r3, [r2, #80]	@ 0x50
}
 8000464:	e7f8      	b.n	8000458 <HAL_RTC_MspDeInit+0x8>
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	40002800 	.word	0x40002800
 800046c:	40021000 	.word	0x40021000
 8000470:	fffbffff 	.word	0xfffbffff

08000474 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <NMI_Handler>
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000478:	e7fe      	b.n	8000478 <HardFault_Handler>
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800047c:	4770      	bx	lr
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000480:	4770      	bx	lr
 8000482:	46c0      	nop			@ (mov r8, r8)

08000484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000484:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000486:	f000 f913 	bl	80006b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800048a:	bd10      	pop	{r4, pc}

0800048c <DMA1_Channel1_IRQHandler>:
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */

  Fixed32_19 error = error_direction * (FP32_19_INT_TO_FP(*adc_value_pointer) - FP_ADC_TARGET);
 800048c:	4a1f      	ldr	r2, [pc, #124]	@ (800050c <DMA1_Channel1_IRQHandler+0x80>)
 800048e:	4b20      	ldr	r3, [pc, #128]	@ (8000510 <DMA1_Channel1_IRQHandler+0x84>)
 8000490:	4694      	mov	ip, r2
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a1f      	ldr	r2, [pc, #124]	@ (8000514 <DMA1_Channel1_IRQHandler+0x88>)
 8000496:	881b      	ldrh	r3, [r3, #0]
{
 8000498:	b530      	push	{r4, r5, lr}
  Fixed32_19 error = error_direction * (FP32_19_INT_TO_FP(*adc_value_pointer) - FP_ADC_TARGET);
 800049a:	04db      	lsls	r3, r3, #19
 800049c:	8814      	ldrh	r4, [r2, #0]
 800049e:	4463      	add	r3, ip
 80004a0:	435c      	muls	r4, r3
  Fixed32_19 output = output_previous + PID_A * error + PID_B * error_previous;
 80004a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000518 <DMA1_Channel1_IRQHandler+0x8c>)
 80004a4:	481d      	ldr	r0, [pc, #116]	@ (800051c <DMA1_Channel1_IRQHandler+0x90>)
 80004a6:	4363      	muls	r3, r4
 80004a8:	6842      	ldr	r2, [r0, #4]
 80004aa:	6801      	ldr	r1, [r0, #0]
 80004ac:	1859      	adds	r1, r3, r1
 80004ae:	0113      	lsls	r3, r2, #4
 80004b0:	1a9b      	subs	r3, r3, r2
 80004b2:	035b      	lsls	r3, r3, #13
 80004b4:	1a9b      	subs	r3, r3, r2
 80004b6:	00db      	lsls	r3, r3, #3
 80004b8:	1a9b      	subs	r3, r3, r2
 80004ba:	011a      	lsls	r2, r3, #4
 80004bc:	189b      	adds	r3, r3, r2
 80004be:	021a      	lsls	r2, r3, #8
 80004c0:	189b      	adds	r3, r3, r2
  output_previous = output > OUTPUT_SAT ? OUTPUT_SAT : (output < - OUTPUT_SAT ? - OUTPUT_SAT: 0);
 80004c2:	22c8      	movs	r2, #200	@ 0xc8
  Fixed32_19 output = output_previous + PID_A * error + PID_B * error_previous;
 80004c4:	18cb      	adds	r3, r1, r3
  output_previous = output > OUTPUT_SAT ? OUTPUT_SAT : (output < - OUTPUT_SAT ? - OUTPUT_SAT: 0);
 80004c6:	0492      	lsls	r2, r2, #18
 80004c8:	4293      	cmp	r3, r2
 80004ca:	dc1a      	bgt.n	8000502 <DMA1_Channel1_IRQHandler+0x76>
 80004cc:	4a14      	ldr	r2, [pc, #80]	@ (8000520 <DMA1_Channel1_IRQHandler+0x94>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	db13      	blt.n	80004fa <DMA1_Channel1_IRQHandler+0x6e>
 80004d2:	21fa      	movs	r1, #250	@ 0xfa
 80004d4:	2545      	movs	r5, #69	@ 0x45
 80004d6:	2200      	movs	r2, #0
 80004d8:	c014      	stmia	r0!, {r2, r4}
  error_previous = error;
  int16_t output_in_pwm_unit = (int16_t) (FP32_19_FP_TO_INT(output_previous));

  int16_t pwm1 = FORWARD_SPEED < - output_in_pwm_unit ? 0 : (uint16_t)(FORWARD_SPEED + output_in_pwm_unit);
  int16_t pwm2 =  (FORWARD_SPEED < output_in_pwm_unit ? 0 : (uint16_t)(FORWARD_SPEED - output_in_pwm_unit));
  TIM2->CCR1 = (uint16_t) (PWM_PERIOD > pwm1 ? PWM_PERIOD-pwm1 : 0);
 80004da:	2380      	movs	r3, #128	@ 0x80
  TIM2->CCR2 = (uint16_t) pwm2;
  /* USER CODE END DMA1_Channel1_IRQn 1 */
  hdma_adc.DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma_adc.ChannelIndex & 0x1cU));
 80004dc:	221c      	movs	r2, #28
  TIM2->CCR1 = (uint16_t) (PWM_PERIOD > pwm1 ? PWM_PERIOD-pwm1 : 0);
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	635d      	str	r5, [r3, #52]	@ 0x34
  TIM2->CCR2 = (uint16_t) pwm2;
 80004e2:	6399      	str	r1, [r3, #56]	@ 0x38
  hdma_adc.DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma_adc.ChannelIndex & 0x1cU));
 80004e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <DMA1_Channel1_IRQHandler+0x98>)
 80004e6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80004e8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80004ea:	4011      	ands	r1, r2
 80004ec:	3a1a      	subs	r2, #26
 80004ee:	408a      	lsls	r2, r1
  __HAL_UNLOCK(&hdma_adc);
 80004f0:	2100      	movs	r1, #0
  hdma_adc.DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma_adc.ChannelIndex & 0x1cU));
 80004f2:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(&hdma_adc);
 80004f4:	2224      	movs	r2, #36	@ 0x24
 80004f6:	5499      	strb	r1, [r3, r2]
}
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	21af      	movs	r1, #175	@ 0xaf
 80004fc:	25a9      	movs	r5, #169	@ 0xa9
 80004fe:	0049      	lsls	r1, r1, #1
 8000500:	e7ea      	b.n	80004d8 <DMA1_Channel1_IRQHandler+0x4c>
  error_previous = error;
 8000502:	2196      	movs	r1, #150	@ 0x96
  TIM2->CCR1 = (uint16_t) (PWM_PERIOD > pwm1 ? PWM_PERIOD-pwm1 : 0);
 8000504:	2500      	movs	r5, #0
  error_previous = error;
 8000506:	c014      	stmia	r0!, {r2, r4}
  TIM2->CCR1 = (uint16_t) (PWM_PERIOD > pwm1 ? PWM_PERIOD-pwm1 : 0);
 8000508:	e7e7      	b.n	80004da <DMA1_Channel1_IRQHandler+0x4e>
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	e2500000 	.word	0xe2500000
 8000510:	200000ec 	.word	0x200000ec
 8000514:	20000008 	.word	0x20000008
 8000518:	000199a4 	.word	0x000199a4
 800051c:	2000022c 	.word	0x2000022c
 8000520:	fce00000 	.word	0xfce00000
 8000524:	200001e4 	.word	0x200001e4

08000528 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000528:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800052a:	4802      	ldr	r0, [pc, #8]	@ (8000534 <DMA1_Channel2_3_IRQHandler+0xc>)
 800052c:	f001 fa74 	bl	8001a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000530:	bd10      	pop	{r4, pc}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	20000154 	.word	0x20000154

08000538 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000538:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800053a:	4802      	ldr	r0, [pc, #8]	@ (8000544 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 800053c:	f001 fa6c 	bl	8001a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	2000019c 	.word	0x2000019c

08000548 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000548:	4770      	bx	lr
 800054a:	46c0      	nop			@ (mov r8, r8)

0800054c <SystemCoreClockUpdate>:
void SystemCoreClockUpdate (void)
{
  uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800054c:	230c      	movs	r3, #12
 800054e:	4a2a      	ldr	r2, [pc, #168]	@ (80005f8 <SystemCoreClockUpdate+0xac>)
{
 8000550:	b510      	push	{r4, lr}
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000552:	68d1      	ldr	r1, [r2, #12]
 8000554:	400b      	ands	r3, r1

  switch (tmp)
 8000556:	2b04      	cmp	r3, #4
 8000558:	d031      	beq.n	80005be <SystemCoreClockUpdate+0x72>
 800055a:	2b08      	cmp	r3, #8
 800055c:	d01a      	beq.n	8000594 <SystemCoreClockUpdate+0x48>
 800055e:	2b00      	cmp	r3, #0
 8000560:	d024      	beq.n	80005ac <SystemCoreClockUpdate+0x60>
    case 0x08U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
      break;
    default:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000562:	68d3      	ldr	r3, [r2, #12]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 8000564:	68d1      	ldr	r1, [r2, #12]
      pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8000566:	4c25      	ldr	r4, [pc, #148]	@ (80005fc <SystemCoreClockUpdate+0xb0>)
 8000568:	029b      	lsls	r3, r3, #10
      plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800056a:	0209      	lsls	r1, r1, #8

      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800056c:	68d0      	ldr	r0, [r2, #12]
      pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 800056e:	0f1b      	lsrs	r3, r3, #28
      plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000570:	0f89      	lsrs	r1, r1, #30
      pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
 8000572:	5ce3      	ldrb	r3, [r4, r3]
      plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000574:	3101      	adds	r1, #1

      if (pllsource == 0x00U)
 8000576:	03c0      	lsls	r0, r0, #15
 8000578:	d42a      	bmi.n	80005d0 <SystemCoreClockUpdate+0x84>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800057a:	6812      	ldr	r2, [r2, #0]
 800057c:	06d2      	lsls	r2, r2, #27
 800057e:	d531      	bpl.n	80005e4 <SystemCoreClockUpdate+0x98>
        {
          SystemCoreClock = (((HSI_VALUE / 4U) * pllmul) / plldiv);
 8000580:	015a      	lsls	r2, r3, #5
 8000582:	1ad2      	subs	r2, r2, r3
 8000584:	0190      	lsls	r0, r2, #6
 8000586:	1a80      	subs	r0, r0, r2
 8000588:	00c0      	lsls	r0, r0, #3
 800058a:	18c0      	adds	r0, r0, r3
 800058c:	0200      	lsls	r0, r0, #8
 800058e:	f006 ff83 	bl	8007498 <__udivsi3>
 8000592:	e001      	b.n	8000598 <SystemCoreClockUpdate+0x4c>
  switch (tmp)
 8000594:	481a      	ldr	r0, [pc, #104]	@ (8000600 <SystemCoreClockUpdate+0xb4>)
 8000596:	4c19      	ldr	r4, [pc, #100]	@ (80005fc <SystemCoreClockUpdate+0xb0>)
      }
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000598:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <SystemCoreClockUpdate+0xac>)
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800059a:	4a1a      	ldr	r2, [pc, #104]	@ (8000604 <SystemCoreClockUpdate+0xb8>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	061b      	lsls	r3, r3, #24
 80005a0:	0f1b      	lsrs	r3, r3, #28
 80005a2:	18e4      	adds	r4, r4, r3
 80005a4:	7b23      	ldrb	r3, [r4, #12]
  SystemCoreClock >>= tmp;
 80005a6:	40d8      	lsrs	r0, r3
 80005a8:	6010      	str	r0, [r2, #0]
}
 80005aa:	bd10      	pop	{r4, pc}
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 80005ac:	2080      	movs	r0, #128	@ 0x80
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> RCC_ICSCR_MSIRANGE_Pos;
 80005ae:	6853      	ldr	r3, [r2, #4]
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 80005b0:	0200      	lsls	r0, r0, #8
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> RCC_ICSCR_MSIRANGE_Pos;
 80005b2:	041b      	lsls	r3, r3, #16
 80005b4:	0f5b      	lsrs	r3, r3, #29
      SystemCoreClock = (32768U * (1U << (msirange + 1U)));
 80005b6:	3301      	adds	r3, #1
 80005b8:	4098      	lsls	r0, r3
      break;
 80005ba:	4c10      	ldr	r4, [pc, #64]	@ (80005fc <SystemCoreClockUpdate+0xb0>)
 80005bc:	e7ec      	b.n	8000598 <SystemCoreClockUpdate+0x4c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80005be:	6813      	ldr	r3, [r2, #0]
 80005c0:	06db      	lsls	r3, r3, #27
 80005c2:	d502      	bpl.n	80005ca <SystemCoreClockUpdate+0x7e>
 80005c4:	4810      	ldr	r0, [pc, #64]	@ (8000608 <SystemCoreClockUpdate+0xbc>)
 80005c6:	4c0d      	ldr	r4, [pc, #52]	@ (80005fc <SystemCoreClockUpdate+0xb0>)
 80005c8:	e7e6      	b.n	8000598 <SystemCoreClockUpdate+0x4c>
 80005ca:	4810      	ldr	r0, [pc, #64]	@ (800060c <SystemCoreClockUpdate+0xc0>)
 80005cc:	4c0b      	ldr	r4, [pc, #44]	@ (80005fc <SystemCoreClockUpdate+0xb0>)
 80005ce:	e7e3      	b.n	8000598 <SystemCoreClockUpdate+0x4c>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 80005d0:	015a      	lsls	r2, r3, #5
 80005d2:	1ad2      	subs	r2, r2, r3
 80005d4:	0190      	lsls	r0, r2, #6
 80005d6:	1a80      	subs	r0, r0, r2
 80005d8:	00c0      	lsls	r0, r0, #3
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	0240      	lsls	r0, r0, #9
 80005de:	f006 ff5b 	bl	8007498 <__udivsi3>
 80005e2:	e7d9      	b.n	8000598 <SystemCoreClockUpdate+0x4c>
          SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 80005e4:	015a      	lsls	r2, r3, #5
 80005e6:	1ad2      	subs	r2, r2, r3
 80005e8:	0190      	lsls	r0, r2, #6
 80005ea:	1a80      	subs	r0, r0, r2
 80005ec:	00c0      	lsls	r0, r0, #3
 80005ee:	18c0      	adds	r0, r0, r3
 80005f0:	0280      	lsls	r0, r0, #10
 80005f2:	f006 ff51 	bl	8007498 <__udivsi3>
 80005f6:	e7cf      	b.n	8000598 <SystemCoreClockUpdate+0x4c>
 80005f8:	40021000 	.word	0x40021000
 80005fc:	08007be8 	.word	0x08007be8
 8000600:	007a1200 	.word	0x007a1200
 8000604:	2000000c 	.word	0x2000000c
 8000608:	003d0900 	.word	0x003d0900
 800060c:	00f42400 	.word	0x00f42400
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000610:	4770      	bx	lr
 8000612:	46c0      	nop			@ (mov r8, r8)

08000614 <HAL_MspDeInit>:

/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
 8000614:	4770      	bx	lr
 8000616:	46c0      	nop			@ (mov r8, r8)

08000618 <HAL_DeInit>:
  __HAL_RCC_APB1_FORCE_RESET();
 8000618:	2101      	movs	r1, #1
  __HAL_RCC_APB1_RELEASE_RESET();
 800061a:	2200      	movs	r2, #0
{
 800061c:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_FORCE_RESET();
 800061e:	4b07      	ldr	r3, [pc, #28]	@ (800063c <HAL_DeInit+0x24>)
 8000620:	4249      	negs	r1, r1
 8000622:	6299      	str	r1, [r3, #40]	@ 0x28
  __HAL_RCC_APB1_RELEASE_RESET();
 8000624:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_APB2_FORCE_RESET();
 8000626:	6259      	str	r1, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000628:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_AHB_FORCE_RESET();
 800062a:	6219      	str	r1, [r3, #32]
  __HAL_RCC_AHB_RELEASE_RESET();
 800062c:	621a      	str	r2, [r3, #32]
  __HAL_RCC_IOP_FORCE_RESET();
 800062e:	61d9      	str	r1, [r3, #28]
  __HAL_RCC_IOP_RELEASE_RESET();
 8000630:	61da      	str	r2, [r3, #28]
  HAL_MspDeInit();
 8000632:	f7ff ffef 	bl	8000614 <HAL_MspDeInit>
}
 8000636:	2000      	movs	r0, #0
 8000638:	bd10      	pop	{r4, pc}
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	40021000 	.word	0x40021000

08000640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000644:	20fa      	movs	r0, #250	@ 0xfa
 8000646:	4e0e      	ldr	r6, [pc, #56]	@ (8000680 <HAL_InitTick+0x40>)
 8000648:	0080      	lsls	r0, r0, #2
 800064a:	7831      	ldrb	r1, [r6, #0]
 800064c:	f006 ff24 	bl	8007498 <__udivsi3>
 8000650:	4d0c      	ldr	r5, [pc, #48]	@ (8000684 <HAL_InitTick+0x44>)
 8000652:	0001      	movs	r1, r0
 8000654:	6828      	ldr	r0, [r5, #0]
 8000656:	f006 ff1f 	bl	8007498 <__udivsi3>
 800065a:	f000 ffad 	bl	80015b8 <HAL_SYSTICK_Config>
 800065e:	2800      	cmp	r0, #0
 8000660:	d10b      	bne.n	800067a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000662:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000664:	2c03      	cmp	r4, #3
 8000666:	d900      	bls.n	800066a <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000668:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800066a:	3802      	subs	r0, #2
 800066c:	2200      	movs	r2, #0
 800066e:	0021      	movs	r1, r4
 8000670:	f000 ff4e 	bl	8001510 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000674:	2000      	movs	r0, #0
 8000676:	6074      	str	r4, [r6, #4]
  return HAL_OK;
 8000678:	e7f6      	b.n	8000668 <HAL_InitTick+0x28>
    return HAL_ERROR;
 800067a:	2001      	movs	r0, #1
 800067c:	e7f4      	b.n	8000668 <HAL_InitTick+0x28>
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	20000010 	.word	0x20000010
 8000684:	2000000c 	.word	0x2000000c

08000688 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000688:	2140      	movs	r1, #64	@ 0x40
 800068a:	4a08      	ldr	r2, [pc, #32]	@ (80006ac <HAL_Init+0x24>)
{
 800068c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800068e:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000690:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000692:	430b      	orrs	r3, r1
 8000694:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000696:	f7ff ffd3 	bl	8000640 <HAL_InitTick>
 800069a:	1e04      	subs	r4, r0, #0
 800069c:	d002      	beq.n	80006a4 <HAL_Init+0x1c>
    status = HAL_ERROR;
 800069e:	2401      	movs	r4, #1
}
 80006a0:	0020      	movs	r0, r4
 80006a2:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80006a4:	f7ff fdbc 	bl	8000220 <HAL_MspInit>
 80006a8:	e7fa      	b.n	80006a0 <HAL_Init+0x18>
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	40022000 	.word	0x40022000

080006b0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006b0:	4a03      	ldr	r2, [pc, #12]	@ (80006c0 <HAL_IncTick+0x10>)
 80006b2:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <HAL_IncTick+0x14>)
 80006b4:	6811      	ldr	r1, [r2, #0]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	185b      	adds	r3, r3, r1
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	4770      	bx	lr
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	20000234 	.word	0x20000234
 80006c4:	20000010 	.word	0x20000010

080006c8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006c8:	4b01      	ldr	r3, [pc, #4]	@ (80006d0 <HAL_GetTick+0x8>)
 80006ca:	6818      	ldr	r0, [r3, #0]
}
 80006cc:	4770      	bx	lr
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	20000234 	.word	0x20000234

080006d4 <HAL_GetTickPrio>:
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
  return uwTickPrio;
 80006d4:	4b01      	ldr	r3, [pc, #4]	@ (80006dc <HAL_GetTickPrio+0x8>)
 80006d6:	6858      	ldr	r0, [r3, #4]
}
 80006d8:	4770      	bx	lr
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	20000010 	.word	0x20000010

080006e0 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 80006e0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status  = HAL_OK;
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 80006e2:	4c07      	ldr	r4, [pc, #28]	@ (8000700 <HAL_SetTickFreq+0x20>)
 80006e4:	7825      	ldrb	r5, [r4, #0]
 80006e6:	4285      	cmp	r5, r0
 80006e8:	d101      	bne.n	80006ee <HAL_SetTickFreq+0xe>
  HAL_StatusTypeDef status  = HAL_OK;
 80006ea:	2000      	movs	r0, #0
      uwTickFreq = prevTickFreq;
    }
  }

  return status;
}
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
    uwTickFreq = Freq;
 80006ee:	7020      	strb	r0, [r4, #0]
    status = HAL_InitTick(uwTickPrio);
 80006f0:	6860      	ldr	r0, [r4, #4]
 80006f2:	f7ff ffa5 	bl	8000640 <HAL_InitTick>
    if (status != HAL_OK)
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d0f7      	beq.n	80006ea <HAL_SetTickFreq+0xa>
      uwTickFreq = prevTickFreq;
 80006fa:	7025      	strb	r5, [r4, #0]
 80006fc:	e7f6      	b.n	80006ec <HAL_SetTickFreq+0xc>
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	20000010 	.word	0x20000010

08000704 <HAL_GetTickFreq>:
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
  return uwTickFreq;
 8000704:	4b01      	ldr	r3, [pc, #4]	@ (800070c <HAL_GetTickFreq+0x8>)
 8000706:	7818      	ldrb	r0, [r3, #0]
}
 8000708:	4770      	bx	lr
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	20000010 	.word	0x20000010

08000710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000714:	f7ff ffd8 	bl	80006c8 <HAL_GetTick>
 8000718:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800071a:	1c63      	adds	r3, r4, #1
 800071c:	d002      	beq.n	8000724 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800071e:	4b04      	ldr	r3, [pc, #16]	@ (8000730 <HAL_Delay+0x20>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000724:	f7ff ffd0 	bl	80006c8 <HAL_GetTick>
 8000728:	1b40      	subs	r0, r0, r5
 800072a:	42a0      	cmp	r0, r4
 800072c:	d3fa      	bcc.n	8000724 <HAL_Delay+0x14>
  {
  }
}
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	20000010 	.word	0x20000010

08000734 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000734:	2102      	movs	r1, #2
 8000736:	4a02      	ldr	r2, [pc, #8]	@ (8000740 <HAL_SuspendTick+0xc>)
 8000738:	6813      	ldr	r3, [r2, #0]
 800073a:	438b      	bics	r3, r1
 800073c:	6013      	str	r3, [r2, #0]
}
 800073e:	4770      	bx	lr
 8000740:	e000e010 	.word	0xe000e010

08000744 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000744:	2102      	movs	r1, #2
 8000746:	4a02      	ldr	r2, [pc, #8]	@ (8000750 <HAL_ResumeTick+0xc>)
 8000748:	6813      	ldr	r3, [r2, #0]
 800074a:	430b      	orrs	r3, r1
 800074c:	6013      	str	r3, [r2, #0]
}
 800074e:	4770      	bx	lr
 8000750:	e000e010 	.word	0xe000e010

08000754 <HAL_GetHalVersion>:
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32L0xx_HAL_VERSION;
}
 8000754:	4800      	ldr	r0, [pc, #0]	@ (8000758 <HAL_GetHalVersion+0x4>)
 8000756:	4770      	bx	lr
 8000758:	010a0600 	.word	0x010a0600

0800075c <HAL_GetREVID>:
  * @brief Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 800075c:	4b01      	ldr	r3, [pc, #4]	@ (8000764 <HAL_GetREVID+0x8>)
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	0c00      	lsrs	r0, r0, #16
}
 8000762:	4770      	bx	lr
 8000764:	40015800 	.word	0x40015800

08000768 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000768:	4b02      	ldr	r3, [pc, #8]	@ (8000774 <HAL_GetDEVID+0xc>)
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	0500      	lsls	r0, r0, #20
 800076e:	0d00      	lsrs	r0, r0, #20
}
 8000770:	4770      	bx	lr
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	40015800 	.word	0x40015800

08000778 <HAL_GetUIDw0>:
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8000778:	4b01      	ldr	r3, [pc, #4]	@ (8000780 <HAL_GetUIDw0+0x8>)
 800077a:	6818      	ldr	r0, [r3, #0]
}
 800077c:	4770      	bx	lr
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	1ff80050 	.word	0x1ff80050

08000784 <HAL_GetUIDw1>:
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8000784:	4b01      	ldr	r3, [pc, #4]	@ (800078c <HAL_GetUIDw1+0x8>)
 8000786:	6818      	ldr	r0, [r3, #0]
}
 8000788:	4770      	bx	lr
 800078a:	46c0      	nop			@ (mov r8, r8)
 800078c:	1ff80054 	.word	0x1ff80054

08000790 <HAL_GetUIDw2>:
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8000790:	4b01      	ldr	r3, [pc, #4]	@ (8000798 <HAL_GetUIDw2+0x8>)
 8000792:	6818      	ldr	r0, [r3, #0]
}
 8000794:	4770      	bx	lr
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	1ff80064 	.word	0x1ff80064

0800079c <HAL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800079c:	2101      	movs	r1, #1
 800079e:	4a02      	ldr	r2, [pc, #8]	@ (80007a8 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 80007a0:	6853      	ldr	r3, [r2, #4]
 80007a2:	430b      	orrs	r3, r1
 80007a4:	6053      	str	r3, [r2, #4]
}
 80007a6:	4770      	bx	lr
 80007a8:	40015800 	.word	0x40015800

080007ac <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80007ac:	2101      	movs	r1, #1
 80007ae:	4a02      	ldr	r2, [pc, #8]	@ (80007b8 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80007b0:	6853      	ldr	r3, [r2, #4]
 80007b2:	438b      	bics	r3, r1
 80007b4:	6053      	str	r3, [r2, #4]
}
 80007b6:	4770      	bx	lr
 80007b8:	40015800 	.word	0x40015800

080007bc <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80007bc:	2102      	movs	r1, #2
 80007be:	4a02      	ldr	r2, [pc, #8]	@ (80007c8 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80007c0:	6853      	ldr	r3, [r2, #4]
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6053      	str	r3, [r2, #4]
}
 80007c6:	4770      	bx	lr
 80007c8:	40015800 	.word	0x40015800

080007cc <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80007cc:	2102      	movs	r1, #2
 80007ce:	4a02      	ldr	r2, [pc, #8]	@ (80007d8 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80007d0:	6853      	ldr	r3, [r2, #4]
 80007d2:	438b      	bics	r3, r1
 80007d4:	6053      	str	r3, [r2, #4]
}
 80007d6:	4770      	bx	lr
 80007d8:	40015800 	.word	0x40015800

080007dc <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80007dc:	2104      	movs	r1, #4
 80007de:	4a02      	ldr	r2, [pc, #8]	@ (80007e8 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80007e0:	6853      	ldr	r3, [r2, #4]
 80007e2:	430b      	orrs	r3, r1
 80007e4:	6053      	str	r3, [r2, #4]
}
 80007e6:	4770      	bx	lr
 80007e8:	40015800 	.word	0x40015800

080007ec <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80007ec:	2104      	movs	r1, #4
 80007ee:	4a02      	ldr	r2, [pc, #8]	@ (80007f8 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80007f0:	6853      	ldr	r3, [r2, #4]
 80007f2:	438b      	bics	r3, r1
 80007f4:	6053      	str	r3, [r2, #4]
}
 80007f6:	4770      	bx	lr
 80007f8:	40015800 	.word	0x40015800

080007fc <HAL_DBGMCU_DBG_EnableLowPowerConfig>:
void HAL_DBGMCU_DBG_EnableLowPowerConfig(uint32_t Periph)
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(Periph));

  DBGMCU->CR |= Periph;
 80007fc:	4a02      	ldr	r2, [pc, #8]	@ (8000808 <HAL_DBGMCU_DBG_EnableLowPowerConfig+0xc>)
 80007fe:	6853      	ldr	r3, [r2, #4]
 8000800:	4303      	orrs	r3, r0
 8000802:	6053      	str	r3, [r2, #4]

}
 8000804:	4770      	bx	lr
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	40015800 	.word	0x40015800

0800080c <HAL_DBGMCU_DBG_DisableLowPowerConfig>:
void HAL_DBGMCU_DBG_DisableLowPowerConfig(uint32_t Periph)
{
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(Periph));
  {
    DBGMCU->CR &= ~Periph;
 800080c:	4a02      	ldr	r2, [pc, #8]	@ (8000818 <HAL_DBGMCU_DBG_DisableLowPowerConfig+0xc>)
 800080e:	6853      	ldr	r3, [r2, #4]
 8000810:	4383      	bics	r3, r0
 8000812:	6053      	str	r3, [r2, #4]
  }
}
 8000814:	4770      	bx	lr
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	40015800 	.word	0x40015800

0800081c <HAL_SYSCFG_GetBootMode>:
  *              - 0x00000100 : Boot is configured in System Flash memory
  *              - 0x00000300 : Boot is configured in Embedded SRAM memory
  */
uint32_t  HAL_SYSCFG_GetBootMode(void)
{
  return (SYSCFG->CFGR1 & SYSCFG_CFGR1_BOOT_MODE);
 800081c:	4b02      	ldr	r3, [pc, #8]	@ (8000828 <HAL_SYSCFG_GetBootMode+0xc>)
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	23c0      	movs	r3, #192	@ 0xc0
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4018      	ands	r0, r3
}
 8000826:	4770      	bx	lr
 8000828:	40010000 	.word	0x40010000

0800082c <HAL_SYSCFG_VREFINT_OutputSelect>:
{
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFINT_OUT_SELECT(SYSCFG_Vrefint_OUTPUT));

  /* Set the output Vrefint pin */
  SYSCFG->CFGR3 &= ~(SYSCFG_CFGR3_VREF_OUT);
 800082c:	2130      	movs	r1, #48	@ 0x30
 800082e:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <HAL_SYSCFG_VREFINT_OutputSelect+0x14>)
 8000830:	6a1a      	ldr	r2, [r3, #32]
 8000832:	438a      	bics	r2, r1
 8000834:	621a      	str	r2, [r3, #32]
  SYSCFG->CFGR3 |= (uint32_t)(SYSCFG_Vrefint_OUTPUT);
 8000836:	6a1a      	ldr	r2, [r3, #32]
 8000838:	4302      	orrs	r2, r0
 800083a:	621a      	str	r2, [r3, #32]
}
 800083c:	4770      	bx	lr
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	40010000 	.word	0x40010000

08000844 <HAL_SYSCFG_Enable_Lock_VREFINT>:
  * @retval None
  */
void HAL_SYSCFG_Enable_Lock_VREFINT(void)
{
    /* Enable the LOCK by setting REF_LOCK bit in the CFGR3 register */
    SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_REF_LOCK);
 8000844:	2380      	movs	r3, #128	@ 0x80
 8000846:	4a03      	ldr	r2, [pc, #12]	@ (8000854 <HAL_SYSCFG_Enable_Lock_VREFINT+0x10>)
 8000848:	061b      	lsls	r3, r3, #24
 800084a:	6a11      	ldr	r1, [r2, #32]
 800084c:	430b      	orrs	r3, r1
 800084e:	6213      	str	r3, [r2, #32]
}
 8000850:	4770      	bx	lr
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	40010000 	.word	0x40010000

08000858 <HAL_SYSCFG_Disable_Lock_VREFINT>:
  * @retval None
  */
void HAL_SYSCFG_Disable_Lock_VREFINT(void)
{
    /* Disable the LOCK by setting REF_LOCK bit in the CFGR3 register */
    CLEAR_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_REF_LOCK);
 8000858:	4a02      	ldr	r2, [pc, #8]	@ (8000864 <HAL_SYSCFG_Disable_Lock_VREFINT+0xc>)
 800085a:	6a13      	ldr	r3, [r2, #32]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	085b      	lsrs	r3, r3, #1
 8000860:	6213      	str	r3, [r2, #32]
}
 8000862:	4770      	bx	lr
 8000864:	40010000 	.word	0x40010000

08000868 <ADC_Disable>:
  uint32_t tickstart = 0U;

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000868:	2103      	movs	r1, #3
 800086a:	6802      	ldr	r2, [r0, #0]
{
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800086e:	6893      	ldr	r3, [r2, #8]
{
 8000870:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000872:	400b      	ands	r3, r1
 8000874:	2b01      	cmp	r3, #1
 8000876:	d001      	beq.n	800087c <ADC_Disable+0x14>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8000878:	2000      	movs	r0, #0
}
 800087a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800087c:	6810      	ldr	r0, [r2, #0]
 800087e:	4203      	tst	r3, r0
 8000880:	d0fa      	beq.n	8000878 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000882:	2705      	movs	r7, #5
 8000884:	6890      	ldr	r0, [r2, #8]
 8000886:	4007      	ands	r7, r0
 8000888:	2f01      	cmp	r7, #1
 800088a:	d008      	beq.n	800089e <ADC_Disable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800088c:	2110      	movs	r1, #16
 800088e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8000890:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000892:	430a      	orrs	r2, r1
 8000894:	6562      	str	r2, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000896:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8000898:	4313      	orrs	r3, r2
 800089a:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 800089c:	e7ed      	b.n	800087a <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 800089e:	2002      	movs	r0, #2
 80008a0:	6893      	ldr	r3, [r2, #8]
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80008a2:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 80008a4:	4303      	orrs	r3, r0
 80008a6:	6093      	str	r3, [r2, #8]
 80008a8:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 80008aa:	f7ff ff0d 	bl	80006c8 <HAL_GetTick>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80008ae:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80008b0:	0006      	movs	r6, r0
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	421f      	tst	r7, r3
 80008b6:	d0df      	beq.n	8000878 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80008b8:	f7ff ff06 	bl	80006c8 <HAL_GetTick>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80008bc:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80008be:	1b80      	subs	r0, r0, r6
 80008c0:	280a      	cmp	r0, #10
 80008c2:	d902      	bls.n	80008ca <ADC_Disable+0x62>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80008c4:	689a      	ldr	r2, [r3, #8]
 80008c6:	4215      	tst	r5, r2
 80008c8:	d103      	bne.n	80008d2 <ADC_Disable+0x6a>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	421d      	tst	r5, r3
 80008ce:	d1f3      	bne.n	80008b8 <ADC_Disable+0x50>
 80008d0:	e7d2      	b.n	8000878 <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d2:	2210      	movs	r2, #16
 80008d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 80008d6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d8:	4313      	orrs	r3, r2
 80008da:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80008de:	432b      	orrs	r3, r5
 80008e0:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 80008e2:	e7ca      	b.n	800087a <ADC_Disable+0x12>

080008e4 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008e4:	2303      	movs	r3, #3
{
 80008e6:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008e8:	6802      	ldr	r2, [r0, #0]
{
 80008ea:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008ec:	6891      	ldr	r1, [r2, #8]
{
 80008ee:	b082      	sub	sp, #8
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008f0:	400b      	ands	r3, r1
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d02d      	beq.n	8000952 <ADC_Enable+0x6e>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80008f6:	6891      	ldr	r1, [r2, #8]
 80008f8:	4b23      	ldr	r3, [pc, #140]	@ (8000988 <ADC_Enable+0xa4>)
 80008fa:	4219      	tst	r1, r3
 80008fc:	d130      	bne.n	8000960 <ADC_Enable+0x7c>
    __HAL_ADC_ENABLE(hadc);
 80008fe:	2101      	movs	r1, #1
 8000900:	6893      	ldr	r3, [r2, #8]
 8000902:	430b      	orrs	r3, r1
 8000904:	6093      	str	r3, [r2, #8]
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000906:	4b21      	ldr	r3, [pc, #132]	@ (800098c <ADC_Enable+0xa8>)
 8000908:	4921      	ldr	r1, [pc, #132]	@ (8000990 <ADC_Enable+0xac>)
 800090a:	6818      	ldr	r0, [r3, #0]
 800090c:	f006 fdc4 	bl	8007498 <__udivsi3>
 8000910:	9001      	str	r0, [sp, #4]

  while (waitLoopIndex != 0U)
 8000912:	9b01      	ldr	r3, [sp, #4]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d005      	beq.n	8000924 <ADC_Enable+0x40>
  {
    waitLoopIndex--;
 8000918:	9b01      	ldr	r3, [sp, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	9301      	str	r3, [sp, #4]
  while (waitLoopIndex != 0U)
 800091e:	9b01      	ldr	r3, [sp, #4]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1f9      	bne.n	8000918 <ADC_Enable+0x34>
    tickstart = HAL_GetTick();
 8000924:	f7ff fed0 	bl	80006c8 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000928:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800092a:	0006      	movs	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800092c:	681b      	ldr	r3, [r3, #0]
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800092e:	2501      	movs	r5, #1
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000930:	07db      	lsls	r3, r3, #31
 8000932:	d40b      	bmi.n	800094c <ADC_Enable+0x68>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000934:	f7ff fec8 	bl	80006c8 <HAL_GetTick>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000938:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800093a:	1b80      	subs	r0, r0, r6
 800093c:	280a      	cmp	r0, #10
 800093e:	d902      	bls.n	8000946 <ADC_Enable+0x62>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	4215      	tst	r5, r2
 8000944:	d016      	beq.n	8000974 <ADC_Enable+0x90>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	421d      	tst	r5, r3
 800094a:	d0f3      	beq.n	8000934 <ADC_Enable+0x50>
  return HAL_OK;
 800094c:	2000      	movs	r0, #0
}
 800094e:	b002      	add	sp, #8
 8000950:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000952:	6811      	ldr	r1, [r2, #0]
 8000954:	420b      	tst	r3, r1
 8000956:	d1f9      	bne.n	800094c <ADC_Enable+0x68>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000958:	6891      	ldr	r1, [r2, #8]
 800095a:	4b0b      	ldr	r3, [pc, #44]	@ (8000988 <ADC_Enable+0xa4>)
 800095c:	4219      	tst	r1, r3
 800095e:	d0ce      	beq.n	80008fe <ADC_Enable+0x1a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000960:	2210      	movs	r2, #16
 8000962:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8000964:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000966:	4313      	orrs	r3, r2
 8000968:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800096a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800096c:	3a0f      	subs	r2, #15
 800096e:	4313      	orrs	r3, r2
 8000970:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8000972:	e7ec      	b.n	800094e <ADC_Enable+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000974:	2210      	movs	r2, #16
 8000976:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8000978:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800097a:	4313      	orrs	r3, r2
 800097c:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800097e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000980:	432b      	orrs	r3, r5
 8000982:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8000984:	e7e3      	b.n	800094e <ADC_Enable+0x6a>
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	80000017 	.word	0x80000017
 800098c:	2000000c 	.word	0x2000000c
 8000990:	000f4240 	.word	0x000f4240

08000994 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000994:	2204      	movs	r2, #4
 8000996:	6803      	ldr	r3, [r0, #0]
{
 8000998:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800099a:	6899      	ldr	r1, [r3, #8]
{
 800099c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800099e:	420a      	tst	r2, r1
 80009a0:	d01d      	beq.n	80009de <ADC_ConversionStop+0x4a>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80009a2:	6899      	ldr	r1, [r3, #8]
 80009a4:	420a      	tst	r2, r1
 80009a6:	d006      	beq.n	80009b6 <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 80009a8:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80009aa:	0792      	lsls	r2, r2, #30
 80009ac:	d403      	bmi.n	80009b6 <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80009ae:	2110      	movs	r1, #16
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	430a      	orrs	r2, r1
 80009b4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80009b6:	f7ff fe87 	bl	80006c8 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80009ba:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80009bc:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	075b      	lsls	r3, r3, #29
 80009c2:	d50c      	bpl.n	80009de <ADC_ConversionStop+0x4a>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80009c4:	2504      	movs	r5, #4
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80009c6:	f7ff fe7f 	bl	80006c8 <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80009ca:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80009cc:	1b80      	subs	r0, r0, r6
 80009ce:	280a      	cmp	r0, #10
 80009d0:	d902      	bls.n	80009d8 <ADC_ConversionStop+0x44>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	4215      	tst	r5, r2
 80009d6:	d104      	bne.n	80009e2 <ADC_ConversionStop+0x4e>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	421d      	tst	r5, r3
 80009dc:	d1f3      	bne.n	80009c6 <ADC_ConversionStop+0x32>
  return HAL_OK;
 80009de:	2000      	movs	r0, #0
}
 80009e0:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009e2:	2210      	movs	r2, #16
 80009e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009e6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009e8:	4313      	orrs	r3, r2
 80009ea:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80009ee:	3a0f      	subs	r2, #15
 80009f0:	4313      	orrs	r3, r2
 80009f2:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 80009f4:	e7f4      	b.n	80009e0 <ADC_ConversionStop+0x4c>
 80009f6:	46c0      	nop			@ (mov r8, r8)
}
 80009f8:	4770      	bx	lr
 80009fa:	46c0      	nop			@ (mov r8, r8)

080009fc <HAL_ADC_Init>:
{
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	1e04      	subs	r4, r0, #0
  if (hadc == NULL)
 8000a00:	d036      	beq.n	8000a70 <HAL_ADC_Init+0x74>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a02:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d100      	bne.n	8000a0a <HAL_ADC_Init+0xe>
 8000a08:	e09a      	b.n	8000b40 <HAL_ADC_Init+0x144>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000a0a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000a0c:	06db      	lsls	r3, r3, #27
 8000a0e:	d428      	bmi.n	8000a62 <HAL_ADC_Init+0x66>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000a10:	6823      	ldr	r3, [r4, #0]
 8000a12:	689a      	ldr	r2, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000a14:	0752      	lsls	r2, r2, #29
 8000a16:	d424      	bmi.n	8000a62 <HAL_ADC_Init+0x66>
  ADC_STATE_CLR_SET(hadc->State,
 8000a18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000a1a:	4960      	ldr	r1, [pc, #384]	@ (8000b9c <HAL_ADC_Init+0x1a0>)
 8000a1c:	400a      	ands	r2, r1
 8000a1e:	3106      	adds	r1, #6
 8000a20:	31ff      	adds	r1, #255	@ 0xff
 8000a22:	430a      	orrs	r2, r1
 8000a24:	6562      	str	r2, [r4, #84]	@ 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a26:	2203      	movs	r2, #3
 8000a28:	6899      	ldr	r1, [r3, #8]
 8000a2a:	400a      	ands	r2, r1
 8000a2c:	2a01      	cmp	r2, #1
 8000a2e:	d100      	bne.n	8000a32 <HAL_ADC_Init+0x36>
 8000a30:	e0a0      	b.n	8000b74 <HAL_ADC_Init+0x178>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000a32:	2080      	movs	r0, #128	@ 0x80
 8000a34:	6861      	ldr	r1, [r4, #4]
 8000a36:	05c0      	lsls	r0, r0, #23
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	0852      	lsrs	r2, r2, #1
 8000a3c:	4282      	cmp	r2, r0
 8000a3e:	d019      	beq.n	8000a74 <HAL_ADC_Init+0x78>
 8000a40:	2280      	movs	r2, #128	@ 0x80
 8000a42:	0612      	lsls	r2, r2, #24
 8000a44:	4291      	cmp	r1, r2
 8000a46:	d015      	beq.n	8000a74 <HAL_ADC_Init+0x78>
 8000a48:	691a      	ldr	r2, [r3, #16]
 8000a4a:	4d55      	ldr	r5, [pc, #340]	@ (8000ba0 <HAL_ADC_Init+0x1a4>)
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	0892      	lsrs	r2, r2, #2
 8000a50:	611a      	str	r2, [r3, #16]
 8000a52:	4a54      	ldr	r2, [pc, #336]	@ (8000ba4 <HAL_ADC_Init+0x1a8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	4028      	ands	r0, r5
 8000a58:	6010      	str	r0, [r2, #0]
 8000a5a:	6810      	ldr	r0, [r2, #0]
 8000a5c:	4301      	orrs	r1, r0
 8000a5e:	6011      	str	r1, [r2, #0]
 8000a60:	e00f      	b.n	8000a82 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a62:	2210      	movs	r2, #16
 8000a64:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000a66:	4313      	orrs	r3, r2
 8000a68:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2350      	movs	r3, #80	@ 0x50
 8000a6e:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8000a70:	2001      	movs	r0, #1
}
 8000a72:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000a74:	691a      	ldr	r2, [r3, #16]
 8000a76:	0092      	lsls	r2, r2, #2
 8000a78:	0892      	lsrs	r2, r2, #2
 8000a7a:	611a      	str	r2, [r3, #16]
 8000a7c:	691a      	ldr	r2, [r3, #16]
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000a82:	2118      	movs	r1, #24
 8000a84:	68da      	ldr	r2, [r3, #12]
 8000a86:	438a      	bics	r2, r1
 8000a88:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000a8a:	68da      	ldr	r2, [r3, #12]
 8000a8c:	68a1      	ldr	r1, [r4, #8]
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	60da      	str	r2, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000a92:	4944      	ldr	r1, [pc, #272]	@ (8000ba4 <HAL_ADC_Init+0x1a8>)
 8000a94:	4844      	ldr	r0, [pc, #272]	@ (8000ba8 <HAL_ADC_Init+0x1ac>)
 8000a96:	680a      	ldr	r2, [r1, #0]
 8000a98:	4002      	ands	r2, r0
 8000a9a:	600a      	str	r2, [r1, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000a9c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8000a9e:	6808      	ldr	r0, [r1, #0]
 8000aa0:	0652      	lsls	r2, r2, #25
 8000aa2:	4302      	orrs	r2, r0
 8000aa4:	600a      	str	r2, [r1, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	6899      	ldr	r1, [r3, #8]
 8000aaa:	0552      	lsls	r2, r2, #21
 8000aac:	4211      	tst	r1, r2
 8000aae:	d04d      	beq.n	8000b4c <HAL_ADC_Init+0x150>
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000ab0:	68da      	ldr	r2, [r3, #12]
 8000ab2:	493e      	ldr	r1, [pc, #248]	@ (8000bac <HAL_ADC_Init+0x1b0>)
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ab4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	60da      	str	r2, [r3, #12]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000aba:	2220      	movs	r2, #32
 8000abc:	5ca0      	ldrb	r0, [r4, r2]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000abe:	68e2      	ldr	r2, [r4, #12]
 8000ac0:	68d9      	ldr	r1, [r3, #12]
 8000ac2:	432a      	orrs	r2, r5
 8000ac4:	430a      	orrs	r2, r1
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000ac6:	69a1      	ldr	r1, [r4, #24]
 8000ac8:	0389      	lsls	r1, r1, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000aca:	430a      	orrs	r2, r1
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000acc:	69e1      	ldr	r1, [r4, #28]
 8000ace:	03c9      	lsls	r1, r1, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ad0:	430a      	orrs	r2, r1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ad2:	0341      	lsls	r1, r0, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ad4:	430a      	orrs	r2, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ad6:	212c      	movs	r1, #44	@ 0x2c
 8000ad8:	5c61      	ldrb	r1, [r4, r1]
 8000ada:	0049      	lsls	r1, r1, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000adc:	430a      	orrs	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000ade:	6921      	ldr	r1, [r4, #16]
 8000ae0:	3902      	subs	r1, #2
 8000ae2:	424d      	negs	r5, r1
 8000ae4:	4169      	adcs	r1, r5
 8000ae6:	0089      	lsls	r1, r1, #2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ae8:	430a      	orrs	r2, r1
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000aea:	21c2      	movs	r1, #194	@ 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000aec:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000aee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000af0:	31ff      	adds	r1, #255	@ 0xff
 8000af2:	428a      	cmp	r2, r1
 8000af4:	d004      	beq.n	8000b00 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000af6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8000af8:	68d9      	ldr	r1, [r3, #12]
 8000afa:	432a      	orrs	r2, r5
 8000afc:	430a      	orrs	r2, r1
 8000afe:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b00:	2221      	movs	r2, #33	@ 0x21
 8000b02:	5ca2      	ldrb	r2, [r4, r2]
 8000b04:	2a01      	cmp	r2, #1
 8000b06:	d039      	beq.n	8000b7c <HAL_ADC_Init+0x180>
  if (hadc->Init.OversamplingMode == ENABLE)
 8000b08:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8000b0a:	2901      	cmp	r1, #1
 8000b0c:	d022      	beq.n	8000b54 <HAL_ADC_Init+0x158>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000b0e:	2201      	movs	r2, #1
 8000b10:	6919      	ldr	r1, [r3, #16]
 8000b12:	420a      	tst	r2, r1
 8000b14:	d002      	beq.n	8000b1c <HAL_ADC_Init+0x120>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000b16:	6919      	ldr	r1, [r3, #16]
 8000b18:	4391      	bics	r1, r2
 8000b1a:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000b1c:	2107      	movs	r1, #7
 8000b1e:	695a      	ldr	r2, [r3, #20]
  return HAL_OK;
 8000b20:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000b22:	438a      	bics	r2, r1
 8000b24:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000b26:	695a      	ldr	r2, [r3, #20]
 8000b28:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	615a      	str	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8000b2e:	2300      	movs	r3, #0
  ADC_STATE_CLR_SET(hadc->State,
 8000b30:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8000b32:	65a3      	str	r3, [r4, #88]	@ 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8000b34:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000b36:	4393      	bics	r3, r2
 8000b38:	3a02      	subs	r2, #2
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	6563      	str	r3, [r4, #84]	@ 0x54
  return HAL_OK;
 8000b3e:	e798      	b.n	8000a72 <HAL_ADC_Init+0x76>
    hadc->Lock = HAL_UNLOCKED;
 8000b40:	2250      	movs	r2, #80	@ 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8000b42:	6583      	str	r3, [r0, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000b44:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000b46:	f7ff fb79 	bl	800023c <HAL_ADC_MspInit>
 8000b4a:	e75e      	b.n	8000a0a <HAL_ADC_Init+0xe>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000b4c:	6899      	ldr	r1, [r3, #8]
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	e7ad      	b.n	8000ab0 <HAL_ADC_Init+0xb4>
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000b54:	691a      	ldr	r2, [r3, #16]
 8000b56:	4816      	ldr	r0, [pc, #88]	@ (8000bb0 <HAL_ADC_Init+0x1b4>)
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000b58:	6c65      	ldr	r5, [r4, #68]	@ 0x44
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000b5a:	4002      	ands	r2, r0
 8000b5c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000b5e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8000b60:	6918      	ldr	r0, [r3, #16]
 8000b62:	432a      	orrs	r2, r5
                              hadc->Init.Oversample.RightBitShift             |
 8000b64:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8000b66:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000b68:	4302      	orrs	r2, r0
 8000b6a:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000b6c:	691a      	ldr	r2, [r3, #16]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	611a      	str	r2, [r3, #16]
 8000b72:	e7d3      	b.n	8000b1c <HAL_ADC_Init+0x120>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b74:	6819      	ldr	r1, [r3, #0]
 8000b76:	420a      	tst	r2, r1
 8000b78:	d18b      	bne.n	8000a92 <HAL_ADC_Init+0x96>
 8000b7a:	e75a      	b.n	8000a32 <HAL_ADC_Init+0x36>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d105      	bne.n	8000b8c <HAL_ADC_Init+0x190>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000b80:	2280      	movs	r2, #128	@ 0x80
 8000b82:	68d9      	ldr	r1, [r3, #12]
 8000b84:	0252      	lsls	r2, r2, #9
 8000b86:	430a      	orrs	r2, r1
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	e7bd      	b.n	8000b08 <HAL_ADC_Init+0x10c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b8c:	2020      	movs	r0, #32
 8000b8e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8000b90:	4301      	orrs	r1, r0
 8000b92:	6561      	str	r1, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b94:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8000b96:	430a      	orrs	r2, r1
 8000b98:	65a2      	str	r2, [r4, #88]	@ 0x58
 8000b9a:	e7b5      	b.n	8000b08 <HAL_ADC_Init+0x10c>
 8000b9c:	fffffefd 	.word	0xfffffefd
 8000ba0:	ffc3ffff 	.word	0xffc3ffff
 8000ba4:	40012708 	.word	0x40012708
 8000ba8:	fdffffff 	.word	0xfdffffff
 8000bac:	fffe0219 	.word	0xfffe0219
 8000bb0:	fffffc03 	.word	0xfffffc03
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
 8000bb4:	4770      	bx	lr
 8000bb6:	46c0      	nop			@ (mov r8, r8)

08000bb8 <HAL_ADC_DeInit>:
{
 8000bb8:	b570      	push	{r4, r5, r6, lr}
 8000bba:	1e04      	subs	r4, r0, #0
  if (hadc == NULL)
 8000bbc:	d042      	beq.n	8000c44 <HAL_ADC_DeInit+0x8c>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	6543      	str	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000bc6:	f7ff fee5 	bl	8000994 <ADC_ConversionStop>
 8000bca:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8000bcc:	d02f      	beq.n	8000c2e <HAL_ADC_DeInit+0x76>
  if (tmp_hal_status != HAL_ERROR)
 8000bce:	2801      	cmp	r0, #1
 8000bd0:	d036      	beq.n	8000c40 <HAL_ADC_DeInit+0x88>
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	491c      	ldr	r1, [pc, #112]	@ (8000c48 <HAL_ADC_DeInit+0x90>)
 8000bd6:	685a      	ldr	r2, [r3, #4]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8000bd8:	207f      	movs	r0, #127	@ 0x7f
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8000bda:	400a      	ands	r2, r1
 8000bdc:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8000bde:	4a1b      	ldr	r2, [pc, #108]	@ (8000c4c <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8000be0:	491b      	ldr	r1, [pc, #108]	@ (8000c50 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8000be2:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	400a      	ands	r2, r1
 8000be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	4919      	ldr	r1, [pc, #100]	@ (8000c54 <HAL_ADC_DeInit+0x9c>)
 8000bee:	400a      	ands	r2, r1
 8000bf0:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8000bf2:	691a      	ldr	r2, [r3, #16]
 8000bf4:	4918      	ldr	r1, [pc, #96]	@ (8000c58 <HAL_ADC_DeInit+0xa0>)
 8000bf6:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8000bf8:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8000bfa:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8000bfc:	695a      	ldr	r2, [r3, #20]
 8000bfe:	438a      	bics	r2, r1
 8000c00:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8000c02:	6a1a      	ldr	r2, [r3, #32]
 8000c04:	4915      	ldr	r1, [pc, #84]	@ (8000c5c <HAL_ADC_DeInit+0xa4>)
 8000c06:	400a      	ands	r2, r1
 8000c08:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8000c0a:	22b4      	movs	r2, #180	@ 0xb4
 8000c0c:	5899      	ldr	r1, [r3, r2]
 8000c0e:	4381      	bics	r1, r0
 8000c10:	5099      	str	r1, [r3, r2]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8000c12:	5899      	ldr	r1, [r3, r2]
 8000c14:	4381      	bics	r1, r0
 8000c16:	5099      	str	r1, [r3, r2]
    HAL_ADC_MspDeInit(hadc);
 8000c18:	0020      	movs	r0, r4
 8000c1a:	f7ff fb59 	bl	80002d0 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 8000c22:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8000c24:	2350      	movs	r3, #80	@ 0x50
 8000c26:	2200      	movs	r2, #0
 8000c28:	54e2      	strb	r2, [r4, r3]
}
 8000c2a:	0028      	movs	r0, r5
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8000c2e:	0020      	movs	r0, r4
 8000c30:	f7ff fe1a 	bl	8000868 <ADC_Disable>
 8000c34:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8000c36:	2801      	cmp	r0, #1
 8000c38:	d002      	beq.n	8000c40 <HAL_ADC_DeInit+0x88>
      hadc->State = HAL_ADC_STATE_READY;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	6563      	str	r3, [r4, #84]	@ 0x54
  if (tmp_hal_status != HAL_ERROR)
 8000c3e:	e7c8      	b.n	8000bd2 <HAL_ADC_DeInit+0x1a>
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000c40:	2501      	movs	r5, #1
 8000c42:	e7ef      	b.n	8000c24 <HAL_ADC_DeInit+0x6c>
    return HAL_ERROR;
 8000c44:	2501      	movs	r5, #1
 8000c46:	e7f0      	b.n	8000c2a <HAL_ADC_DeInit+0x72>
 8000c48:	fffff760 	.word	0xfffff760
 8000c4c:	0000089f 	.word	0x0000089f
 8000c50:	efffffff 	.word	0xefffffff
 8000c54:	833e0200 	.word	0x833e0200
 8000c58:	3ffffc02 	.word	0x3ffffc02
 8000c5c:	f000f000 	.word	0xf000f000

08000c60 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c60:	6803      	ldr	r3, [r0, #0]
{
 8000c62:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c64:	689a      	ldr	r2, [r3, #8]
{
 8000c66:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c68:	0752      	lsls	r2, r2, #29
 8000c6a:	d421      	bmi.n	8000cb0 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 8000c6c:	2250      	movs	r2, #80	@ 0x50
 8000c6e:	5c81      	ldrb	r1, [r0, r2]
 8000c70:	2901      	cmp	r1, #1
 8000c72:	d01d      	beq.n	8000cb0 <HAL_ADC_Start+0x50>
 8000c74:	2101      	movs	r1, #1
 8000c76:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000c78:	69c2      	ldr	r2, [r0, #28]
 8000c7a:	2a01      	cmp	r2, #1
 8000c7c:	d112      	bne.n	8000ca4 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 8000c7e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8000c80:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb4 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000c82:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000c84:	4011      	ands	r1, r2
 8000c86:	2280      	movs	r2, #128	@ 0x80
 8000c88:	0052      	lsls	r2, r2, #1
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	6562      	str	r2, [r4, #84]	@ 0x54
      __HAL_UNLOCK(hadc);
 8000c8e:	2150      	movs	r1, #80	@ 0x50
      ADC_CLEAR_ERRORCODE(hadc);
 8000c90:	2200      	movs	r2, #0
 8000c92:	65a2      	str	r2, [r4, #88]	@ 0x58
      __HAL_UNLOCK(hadc);
 8000c94:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000c96:	321c      	adds	r2, #28
 8000c98:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	394c      	subs	r1, #76	@ 0x4c
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	609a      	str	r2, [r3, #8]
}
 8000ca2:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000ca4:	f7ff fe1e 	bl	80008e4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	d1fa      	bne.n	8000ca2 <HAL_ADC_Start+0x42>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000cac:	6823      	ldr	r3, [r4, #0]
 8000cae:	e7e6      	b.n	8000c7e <HAL_ADC_Start+0x1e>
    __HAL_LOCK(hadc);
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	e7f6      	b.n	8000ca2 <HAL_ADC_Start+0x42>
 8000cb4:	fffff0fe 	.word	0xfffff0fe

08000cb8 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000cb8:	2350      	movs	r3, #80	@ 0x50
{
 8000cba:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8000cbc:	5cc2      	ldrb	r2, [r0, r3]
{
 8000cbe:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000cc0:	2a01      	cmp	r2, #1
 8000cc2:	d014      	beq.n	8000cee <HAL_ADC_Stop+0x36>
 8000cc4:	2501      	movs	r5, #1
 8000cc6:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000cc8:	f7ff fe64 	bl	8000994 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8000cd0:	2350      	movs	r3, #80	@ 0x50
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	54e2      	strb	r2, [r4, r3]
}
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8000cd8:	0020      	movs	r0, r4
 8000cda:	f7ff fdc5 	bl	8000868 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000cde:	2800      	cmp	r0, #0
 8000ce0:	d1f6      	bne.n	8000cd0 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8000ce2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000ce4:	4a03      	ldr	r2, [pc, #12]	@ (8000cf4 <HAL_ADC_Stop+0x3c>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	432b      	orrs	r3, r5
 8000cea:	6563      	str	r3, [r4, #84]	@ 0x54
 8000cec:	e7f0      	b.n	8000cd0 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8000cee:	2002      	movs	r0, #2
 8000cf0:	e7f1      	b.n	8000cd6 <HAL_ADC_Stop+0x1e>
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	fffffefe 	.word	0xfffffefe

08000cf8 <HAL_ADC_PollForConversion>:
{
 8000cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000cfa:	6944      	ldr	r4, [r0, #20]
{
 8000cfc:	0005      	movs	r5, r0
 8000cfe:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000d00:	2c08      	cmp	r4, #8
 8000d02:	d004      	beq.n	8000d0e <HAL_ADC_PollForConversion+0x16>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000d04:	6803      	ldr	r3, [r0, #0]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000d06:	240c      	movs	r4, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	07db      	lsls	r3, r3, #31
 8000d0c:	d430      	bmi.n	8000d70 <HAL_ADC_PollForConversion+0x78>
  tickstart = HAL_GetTick();
 8000d0e:	f7ff fcdb 	bl	80006c8 <HAL_GetTick>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000d12:	682a      	ldr	r2, [r5, #0]
  tickstart = HAL_GetTick();
 8000d14:	0007      	movs	r7, r0
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000d16:	0011      	movs	r1, r2
 8000d18:	1c73      	adds	r3, r6, #1
 8000d1a:	d134      	bne.n	8000d86 <HAL_ADC_PollForConversion+0x8e>
 8000d1c:	6813      	ldr	r3, [r2, #0]
 8000d1e:	4223      	tst	r3, r4
 8000d20:	d0fc      	beq.n	8000d1c <HAL_ADC_PollForConversion+0x24>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d22:	2380      	movs	r3, #128	@ 0x80
 8000d24:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	656b      	str	r3, [r5, #84]	@ 0x54
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d2c:	23c0      	movs	r3, #192	@ 0xc0
 8000d2e:	68ca      	ldr	r2, [r1, #12]
 8000d30:	011b      	lsls	r3, r3, #4
 8000d32:	421a      	tst	r2, r3
 8000d34:	d114      	bne.n	8000d60 <HAL_ADC_PollForConversion+0x68>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8000d36:	2320      	movs	r3, #32
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d38:	5cea      	ldrb	r2, [r5, r3]
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d110      	bne.n	8000d60 <HAL_ADC_PollForConversion+0x68>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000d3e:	680a      	ldr	r2, [r1, #0]
 8000d40:	0712      	lsls	r2, r2, #28
 8000d42:	d50d      	bpl.n	8000d60 <HAL_ADC_PollForConversion+0x68>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d44:	688a      	ldr	r2, [r1, #8]
 8000d46:	0752      	lsls	r2, r2, #29
 8000d48:	d43f      	bmi.n	8000dca <HAL_ADC_PollForConversion+0xd2>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	684b      	ldr	r3, [r1, #4]
 8000d4e:	4393      	bics	r3, r2
 8000d50:	604b      	str	r3, [r1, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8000d52:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8000d54:	4a21      	ldr	r2, [pc, #132]	@ (8000ddc <HAL_ADC_PollForConversion+0xe4>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	3204      	adds	r2, #4
 8000d5a:	32ff      	adds	r2, #255	@ 0xff
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	656b      	str	r3, [r5, #84]	@ 0x54
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000d60:	69ab      	ldr	r3, [r5, #24]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8000d66:	2000      	movs	r0, #0
}
 8000d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	600b      	str	r3, [r1, #0]
 8000d6e:	e7fa      	b.n	8000d66 <HAL_ADC_PollForConversion+0x6e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d70:	2220      	movs	r2, #32
 8000d72:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000d74:	4313      	orrs	r3, r2
 8000d76:	6543      	str	r3, [r0, #84]	@ 0x54
      __HAL_UNLOCK(hadc);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2350      	movs	r3, #80	@ 0x50
 8000d7c:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8000d7e:	2001      	movs	r0, #1
 8000d80:	e7f2      	b.n	8000d68 <HAL_ADC_PollForConversion+0x70>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000d82:	682a      	ldr	r2, [r5, #0]
 8000d84:	0011      	movs	r1, r2
 8000d86:	6813      	ldr	r3, [r2, #0]
 8000d88:	421c      	tst	r4, r3
 8000d8a:	d1ca      	bne.n	8000d22 <HAL_ADC_PollForConversion+0x2a>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d010      	beq.n	8000db2 <HAL_ADC_PollForConversion+0xba>
 8000d90:	f7ff fc9a 	bl	80006c8 <HAL_GetTick>
 8000d94:	1bc0      	subs	r0, r0, r7
 8000d96:	42b0      	cmp	r0, r6
 8000d98:	d9f3      	bls.n	8000d82 <HAL_ADC_PollForConversion+0x8a>
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000d9a:	6829      	ldr	r1, [r5, #0]
 8000d9c:	680b      	ldr	r3, [r1, #0]
 8000d9e:	4223      	tst	r3, r4
 8000da0:	d00a      	beq.n	8000db8 <HAL_ADC_PollForConversion+0xc0>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000da2:	680b      	ldr	r3, [r1, #0]
 8000da4:	4223      	tst	r3, r4
 8000da6:	d0f3      	beq.n	8000d90 <HAL_ADC_PollForConversion+0x98>
 8000da8:	e7bb      	b.n	8000d22 <HAL_ADC_PollForConversion+0x2a>
 8000daa:	6813      	ldr	r3, [r2, #0]
 8000dac:	0011      	movs	r1, r2
 8000dae:	4223      	tst	r3, r4
 8000db0:	d1b7      	bne.n	8000d22 <HAL_ADC_PollForConversion+0x2a>
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000db2:	6813      	ldr	r3, [r2, #0]
 8000db4:	4223      	tst	r3, r4
 8000db6:	d1f8      	bne.n	8000daa <HAL_ADC_PollForConversion+0xb2>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000db8:	2204      	movs	r2, #4
 8000dba:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
          return HAL_TIMEOUT;
 8000dbc:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	656b      	str	r3, [r5, #84]	@ 0x54
          __HAL_UNLOCK(hadc);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2350      	movs	r3, #80	@ 0x50
 8000dc6:	54ea      	strb	r2, [r5, r3]
          return HAL_TIMEOUT;
 8000dc8:	e7ce      	b.n	8000d68 <HAL_ADC_PollForConversion+0x70>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dca:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 8000dcc:	4313      	orrs	r3, r2
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dce:	2201      	movs	r2, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dd0:	656b      	str	r3, [r5, #84]	@ 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	65ab      	str	r3, [r5, #88]	@ 0x58
 8000dd8:	e7c2      	b.n	8000d60 <HAL_ADC_PollForConversion+0x68>
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	fffffefe 	.word	0xfffffefe

08000de0 <HAL_ADC_PollForEvent>:
{
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	0005      	movs	r5, r0
 8000de4:	000c      	movs	r4, r1
 8000de6:	0016      	movs	r6, r2
  tickstart = HAL_GetTick();
 8000de8:	f7ff fc6e 	bl	80006c8 <HAL_GetTick>
  while (__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 8000dec:	6829      	ldr	r1, [r5, #0]
  tickstart = HAL_GetTick();
 8000dee:	0007      	movs	r7, r0
  while (__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 8000df0:	000a      	movs	r2, r1
 8000df2:	1c73      	adds	r3, r6, #1
 8000df4:	d11e      	bne.n	8000e34 <HAL_ADC_PollForEvent+0x54>
 8000df6:	680b      	ldr	r3, [r1, #0]
 8000df8:	4023      	ands	r3, r4
 8000dfa:	429c      	cmp	r4, r3
 8000dfc:	d1fb      	bne.n	8000df6 <HAL_ADC_PollForEvent+0x16>
  switch (EventType)
 8000dfe:	2c80      	cmp	r4, #128	@ 0x80
 8000e00:	d00f      	beq.n	8000e22 <HAL_ADC_PollForEvent+0x42>
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000e02:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d108      	bne.n	8000e1a <HAL_ADC_PollForEvent+0x3a>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000e08:	2380      	movs	r3, #128	@ 0x80
 8000e0a:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	430b      	orrs	r3, r1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000e10:	2102      	movs	r1, #2
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000e12:	656b      	str	r3, [r5, #84]	@ 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000e14:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8000e16:	430b      	orrs	r3, r1
 8000e18:	65ab      	str	r3, [r5, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000e1a:	2310      	movs	r3, #16
 8000e1c:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000e1e:	2000      	movs	r0, #0
}
 8000e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e22:	2380      	movs	r3, #128	@ 0x80
 8000e24:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 8000e26:	025b      	lsls	r3, r3, #9
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	656b      	str	r3, [r5, #84]	@ 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e2c:	6014      	str	r4, [r2, #0]
      break;
 8000e2e:	e7f6      	b.n	8000e1e <HAL_ADC_PollForEvent+0x3e>
  while (__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 8000e30:	6829      	ldr	r1, [r5, #0]
 8000e32:	000a      	movs	r2, r1
 8000e34:	680b      	ldr	r3, [r1, #0]
 8000e36:	4023      	ands	r3, r4
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d0e0      	beq.n	8000dfe <HAL_ADC_PollForEvent+0x1e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d013      	beq.n	8000e68 <HAL_ADC_PollForEvent+0x88>
 8000e40:	f7ff fc42 	bl	80006c8 <HAL_GetTick>
 8000e44:	1bc0      	subs	r0, r0, r7
 8000e46:	42b0      	cmp	r0, r6
 8000e48:	d9f2      	bls.n	8000e30 <HAL_ADC_PollForEvent+0x50>
        if (__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 8000e4a:	682a      	ldr	r2, [r5, #0]
 8000e4c:	6813      	ldr	r3, [r2, #0]
 8000e4e:	4023      	ands	r3, r4
 8000e50:	429c      	cmp	r4, r3
 8000e52:	d10d      	bne.n	8000e70 <HAL_ADC_PollForEvent+0x90>
  while (__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 8000e54:	6813      	ldr	r3, [r2, #0]
 8000e56:	4023      	ands	r3, r4
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	d1f1      	bne.n	8000e40 <HAL_ADC_PollForEvent+0x60>
 8000e5c:	e7cf      	b.n	8000dfe <HAL_ADC_PollForEvent+0x1e>
 8000e5e:	680b      	ldr	r3, [r1, #0]
 8000e60:	000a      	movs	r2, r1
 8000e62:	4023      	ands	r3, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d0ca      	beq.n	8000dfe <HAL_ADC_PollForEvent+0x1e>
        if (__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 8000e68:	680b      	ldr	r3, [r1, #0]
 8000e6a:	4023      	ands	r3, r4
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	d0f6      	beq.n	8000e5e <HAL_ADC_PollForEvent+0x7e>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e70:	2204      	movs	r2, #4
 8000e72:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
          return HAL_TIMEOUT;
 8000e74:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e76:	4313      	orrs	r3, r2
 8000e78:	656b      	str	r3, [r5, #84]	@ 0x54
          __HAL_UNLOCK(hadc);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2350      	movs	r3, #80	@ 0x50
 8000e7e:	54ea      	strb	r2, [r5, r3]
          return HAL_TIMEOUT;
 8000e80:	e7ce      	b.n	8000e20 <HAL_ADC_PollForEvent+0x40>
 8000e82:	46c0      	nop			@ (mov r8, r8)

08000e84 <HAL_ADC_Start_IT>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e84:	6803      	ldr	r3, [r0, #0]
{
 8000e86:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e88:	689a      	ldr	r2, [r3, #8]
{
 8000e8a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e8c:	0752      	lsls	r2, r2, #29
 8000e8e:	d427      	bmi.n	8000ee0 <HAL_ADC_Start_IT+0x5c>
    __HAL_LOCK(hadc);
 8000e90:	2250      	movs	r2, #80	@ 0x50
 8000e92:	5c81      	ldrb	r1, [r0, r2]
 8000e94:	2901      	cmp	r1, #1
 8000e96:	d023      	beq.n	8000ee0 <HAL_ADC_Start_IT+0x5c>
 8000e98:	2101      	movs	r1, #1
 8000e9a:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000e9c:	69c2      	ldr	r2, [r0, #28]
 8000e9e:	2a01      	cmp	r2, #1
 8000ea0:	d118      	bne.n	8000ed4 <HAL_ADC_Start_IT+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 8000ea2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8000ea4:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <HAL_ADC_Start_IT+0x74>)
 8000ea6:	4011      	ands	r1, r2
 8000ea8:	2280      	movs	r2, #128	@ 0x80
 8000eaa:	0052      	lsls	r2, r2, #1
 8000eac:	430a      	orrs	r2, r1
 8000eae:	6562      	str	r2, [r4, #84]	@ 0x54
      __HAL_UNLOCK(hadc);
 8000eb0:	2150      	movs	r1, #80	@ 0x50
      ADC_CLEAR_ERRORCODE(hadc);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	65a2      	str	r2, [r4, #88]	@ 0x58
      __HAL_UNLOCK(hadc);
 8000eb6:	5462      	strb	r2, [r4, r1]
      switch (hadc->Init.EOCSelection)
 8000eb8:	6961      	ldr	r1, [r4, #20]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000eba:	321c      	adds	r2, #28
 8000ebc:	601a      	str	r2, [r3, #0]
      switch (hadc->Init.EOCSelection)
 8000ebe:	2908      	cmp	r1, #8
 8000ec0:	d010      	beq.n	8000ee4 <HAL_ADC_Start_IT+0x60>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000ec2:	6859      	ldr	r1, [r3, #4]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	605a      	str	r2, [r3, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000ec8:	2104      	movs	r1, #4
 8000eca:	2000      	movs	r0, #0
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	609a      	str	r2, [r3, #8]
}
 8000ed2:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8000ed4:	f7ff fd06 	bl	80008e4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d1fa      	bne.n	8000ed2 <HAL_ADC_Start_IT+0x4e>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000edc:	6823      	ldr	r3, [r4, #0]
 8000ede:	e7e0      	b.n	8000ea2 <HAL_ADC_Start_IT+0x1e>
    __HAL_LOCK(hadc);
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	e7f6      	b.n	8000ed2 <HAL_ADC_Start_IT+0x4e>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	3904      	subs	r1, #4
 8000ee8:	438a      	bics	r2, r1
 8000eea:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	3114      	adds	r1, #20
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	605a      	str	r2, [r3, #4]
          break;
 8000ef4:	e7e8      	b.n	8000ec8 <HAL_ADC_Start_IT+0x44>
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	fffff0fe 	.word	0xfffff0fe

08000efc <HAL_ADC_Stop_IT>:
  __HAL_LOCK(hadc);
 8000efc:	2350      	movs	r3, #80	@ 0x50
{
 8000efe:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8000f00:	5cc2      	ldrb	r2, [r0, r3]
{
 8000f02:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d019      	beq.n	8000f3c <HAL_ADC_Stop_IT+0x40>
 8000f08:	2501      	movs	r5, #1
 8000f0a:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000f0c:	f7ff fd42 	bl	8000994 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000f10:	2800      	cmp	r0, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_ADC_Stop_IT+0x20>
  __HAL_UNLOCK(hadc);
 8000f14:	2350      	movs	r3, #80	@ 0x50
 8000f16:	2200      	movs	r2, #0
 8000f18:	54e2      	strb	r2, [r4, r3]
}
 8000f1a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000f1c:	211c      	movs	r1, #28
 8000f1e:	6822      	ldr	r2, [r4, #0]
    tmp_hal_status = ADC_Disable(hadc);
 8000f20:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000f22:	6853      	ldr	r3, [r2, #4]
 8000f24:	438b      	bics	r3, r1
 8000f26:	6053      	str	r3, [r2, #4]
    tmp_hal_status = ADC_Disable(hadc);
 8000f28:	f7ff fc9e 	bl	8000868 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d1f1      	bne.n	8000f14 <HAL_ADC_Stop_IT+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8000f30:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000f32:	4a03      	ldr	r2, [pc, #12]	@ (8000f40 <HAL_ADC_Stop_IT+0x44>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	432b      	orrs	r3, r5
 8000f38:	6563      	str	r3, [r4, #84]	@ 0x54
 8000f3a:	e7eb      	b.n	8000f14 <HAL_ADC_Stop_IT+0x18>
  __HAL_LOCK(hadc);
 8000f3c:	2002      	movs	r0, #2
 8000f3e:	e7ec      	b.n	8000f1a <HAL_ADC_Stop_IT+0x1e>
 8000f40:	fffffefe 	.word	0xfffffefe

08000f44 <HAL_ADC_Start_DMA>:
{
 8000f44:	b5d0      	push	{r4, r6, r7, lr}
 8000f46:	000e      	movs	r6, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f48:	6801      	ldr	r1, [r0, #0]
{
 8000f4a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f4c:	688b      	ldr	r3, [r1, #8]
{
 8000f4e:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f50:	075b      	lsls	r3, r3, #29
 8000f52:	d432      	bmi.n	8000fba <HAL_ADC_Start_DMA+0x76>
    __HAL_LOCK(hadc);
 8000f54:	2350      	movs	r3, #80	@ 0x50
 8000f56:	5cc2      	ldrb	r2, [r0, r3]
 8000f58:	2a01      	cmp	r2, #1
 8000f5a:	d02e      	beq.n	8000fba <HAL_ADC_Start_DMA+0x76>
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	54c2      	strb	r2, [r0, r3]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8000f60:	68cb      	ldr	r3, [r1, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	60cb      	str	r3, [r1, #12]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f66:	69c3      	ldr	r3, [r0, #28]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d004      	beq.n	8000f76 <HAL_ADC_Start_DMA+0x32>
      tmp_hal_status = ADC_Enable(hadc);
 8000f6c:	f7ff fcba 	bl	80008e4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d121      	bne.n	8000fb8 <HAL_ADC_Start_DMA+0x74>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f74:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000f76:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <HAL_ADC_Start_DMA+0x7c>)
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4313      	orrs	r3, r2
 8000f82:	6563      	str	r3, [r4, #84]	@ 0x54
      __HAL_UNLOCK(hadc);
 8000f84:	2250      	movs	r2, #80	@ 0x50
      ADC_CLEAR_ERRORCODE(hadc);
 8000f86:	2300      	movs	r3, #0
 8000f88:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_UNLOCK(hadc);
 8000f8a:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f8c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <HAL_ADC_Start_DMA+0x80>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f90:	3a40      	subs	r2, #64	@ 0x40
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f92:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <HAL_ADC_Start_DMA+0x84>)
 8000f96:	6343      	str	r3, [r0, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f98:	231c      	movs	r3, #28
 8000f9a:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000f9c:	684b      	ldr	r3, [r1, #4]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	604b      	str	r3, [r1, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fa2:	0032      	movs	r2, r6
 8000fa4:	003b      	movs	r3, r7
 8000fa6:	3140      	adds	r1, #64	@ 0x40
 8000fa8:	f000 fc2e 	bl	8001808 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000fac:	2104      	movs	r1, #4
 8000fae:	2000      	movs	r0, #0
 8000fb0:	6822      	ldr	r2, [r4, #0]
 8000fb2:	6893      	ldr	r3, [r2, #8]
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	6093      	str	r3, [r2, #8]
}
 8000fb8:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_LOCK(hadc);
 8000fba:	2002      	movs	r0, #2
 8000fbc:	e7fc      	b.n	8000fb8 <HAL_ADC_Start_DMA+0x74>
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	fffff0fe 	.word	0xfffff0fe
 8000fc4:	08001065 	.word	0x08001065
 8000fc8:	080010e5 	.word	0x080010e5

08000fcc <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8000fcc:	2350      	movs	r3, #80	@ 0x50
{
 8000fce:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8000fd0:	5cc2      	ldrb	r2, [r0, r3]
{
 8000fd2:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8000fd4:	2a01      	cmp	r2, #1
 8000fd6:	d023      	beq.n	8001020 <HAL_ADC_Stop_DMA+0x54>
 8000fd8:	2601      	movs	r6, #1
 8000fda:	54c6      	strb	r6, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000fdc:	f7ff fcda 	bl	8000994 <ADC_ConversionStop>
 8000fe0:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8000fe2:	d118      	bne.n	8001016 <HAL_ADC_Stop_DMA+0x4a>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8000fe4:	6823      	ldr	r3, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000fe6:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8000fe8:	68da      	ldr	r2, [r3, #12]
 8000fea:	43b2      	bics	r2, r6
 8000fec:	60da      	str	r2, [r3, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8000fee:	2225      	movs	r2, #37	@ 0x25
 8000ff0:	5c82      	ldrb	r2, [r0, r2]
 8000ff2:	2a02      	cmp	r2, #2
 8000ff4:	d016      	beq.n	8001024 <HAL_ADC_Stop_DMA+0x58>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	438a      	bics	r2, r1
 8000ffc:	605a      	str	r2, [r3, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8000ffe:	0020      	movs	r0, r4
 8001000:	f7ff fc32 	bl	8000868 <ADC_Disable>
 8001004:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 8001006:	d106      	bne.n	8001016 <HAL_ADC_Stop_DMA+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 8001008:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800100a:	4a12      	ldr	r2, [pc, #72]	@ (8001054 <HAL_ADC_Stop_DMA+0x88>)
 800100c:	4013      	ands	r3, r2
 800100e:	3204      	adds	r2, #4
 8001010:	32ff      	adds	r2, #255	@ 0xff
 8001012:	4313      	orrs	r3, r2
 8001014:	6563      	str	r3, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 8001016:	2350      	movs	r3, #80	@ 0x50
 8001018:	2200      	movs	r2, #0
 800101a:	54e2      	strb	r2, [r4, r3]
}
 800101c:	0028      	movs	r0, r5
 800101e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8001020:	2502      	movs	r5, #2
 8001022:	e7fb      	b.n	800101c <HAL_ADC_Stop_DMA+0x50>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001024:	f000 fc3a 	bl	800189c <HAL_DMA_Abort>
 8001028:	1e05      	subs	r5, r0, #0
      if (tmp_hal_status != HAL_OK)
 800102a:	d00c      	beq.n	8001046 <HAL_ADC_Stop_DMA+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800102c:	2240      	movs	r2, #64	@ 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800102e:	2110      	movs	r1, #16
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001030:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      ADC_Disable(hadc);
 8001032:	0020      	movs	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001034:	4313      	orrs	r3, r2
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001036:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001038:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800103a:	6853      	ldr	r3, [r2, #4]
 800103c:	438b      	bics	r3, r1
 800103e:	6053      	str	r3, [r2, #4]
      ADC_Disable(hadc);
 8001040:	f7ff fc12 	bl	8000868 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001044:	e7e7      	b.n	8001016 <HAL_ADC_Stop_DMA+0x4a>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001046:	2110      	movs	r1, #16
 8001048:	6822      	ldr	r2, [r4, #0]
 800104a:	6853      	ldr	r3, [r2, #4]
 800104c:	438b      	bics	r3, r1
 800104e:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8001050:	e7d5      	b.n	8000ffe <HAL_ADC_Stop_DMA+0x32>
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	fffffefe 	.word	0xfffffefe

08001058 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001058:	6803      	ldr	r3, [r0, #0]
 800105a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800105c:	4770      	bx	lr
 800105e:	46c0      	nop			@ (mov r8, r8)

08001060 <HAL_ADC_ConvCpltCallback>:
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 8001060:	4770      	bx	lr
 8001062:	46c0      	nop			@ (mov r8, r8)

08001064 <ADC_DMAConvCplt>:
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001064:	2150      	movs	r1, #80	@ 0x50
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001066:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8001068:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800106a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800106c:	4211      	tst	r1, r2
 800106e:	d10e      	bne.n	800108e <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001070:	2280      	movs	r2, #128	@ 0x80
 8001072:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	430a      	orrs	r2, r1
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001078:	21c0      	movs	r1, #192	@ 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800107a:	655a      	str	r2, [r3, #84]	@ 0x54
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	0109      	lsls	r1, r1, #4
 8001080:	68d0      	ldr	r0, [r2, #12]
 8001082:	4208      	tst	r0, r1
 8001084:	d007      	beq.n	8001096 <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc);
 8001086:	0018      	movs	r0, r3
 8001088:	f7ff ffea 	bl	8001060 <HAL_ADC_ConvCpltCallback>
}
 800108c:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800108e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001092:	4798      	blx	r3
}
 8001094:	e7fa      	b.n	800108c <ADC_DMAConvCplt+0x28>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8001096:	2120      	movs	r1, #32
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001098:	5c58      	ldrb	r0, [r3, r1]
 800109a:	2800      	cmp	r0, #0
 800109c:	d1f3      	bne.n	8001086 <ADC_DMAConvCplt+0x22>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800109e:	6810      	ldr	r0, [r2, #0]
 80010a0:	0700      	lsls	r0, r0, #28
 80010a2:	d5f0      	bpl.n	8001086 <ADC_DMAConvCplt+0x22>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010a4:	6890      	ldr	r0, [r2, #8]
 80010a6:	0740      	lsls	r0, r0, #29
 80010a8:	d40b      	bmi.n	80010c2 <ADC_DMAConvCplt+0x5e>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010aa:	200c      	movs	r0, #12
 80010ac:	6851      	ldr	r1, [r2, #4]
 80010ae:	4381      	bics	r1, r0
 80010b0:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80010b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80010b4:	4907      	ldr	r1, [pc, #28]	@ (80010d4 <ADC_DMAConvCplt+0x70>)
 80010b6:	400a      	ands	r2, r1
 80010b8:	3104      	adds	r1, #4
 80010ba:	31ff      	adds	r1, #255	@ 0xff
 80010bc:	430a      	orrs	r2, r1
 80010be:	655a      	str	r2, [r3, #84]	@ 0x54
 80010c0:	e7e1      	b.n	8001086 <ADC_DMAConvCplt+0x22>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80010c4:	430a      	orrs	r2, r1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c6:	2101      	movs	r1, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010c8:	655a      	str	r2, [r3, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010cc:	430a      	orrs	r2, r1
 80010ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80010d0:	e7d9      	b.n	8001086 <ADC_DMAConvCplt+0x22>
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	fffffefe 	.word	0xfffffefe

080010d8 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 80010d8:	4770      	bx	lr
 80010da:	46c0      	nop			@ (mov r8, r8)

080010dc <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 80010dc:	4770      	bx	lr
 80010de:	46c0      	nop			@ (mov r8, r8)

080010e0 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80010e0:	4770      	bx	lr
 80010e2:	46c0      	nop			@ (mov r8, r8)

080010e4 <ADC_DMAError>:
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80010e4:	2240      	movs	r2, #64	@ 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80010e6:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80010e8:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80010ea:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80010ec:	4313      	orrs	r3, r2
 80010ee:	6543      	str	r3, [r0, #84]	@ 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80010f0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80010f2:	3a3c      	subs	r2, #60	@ 0x3c
 80010f4:	4313      	orrs	r3, r2
 80010f6:	6583      	str	r3, [r0, #88]	@ 0x58
  HAL_ADC_ErrorCallback(hadc);
 80010f8:	f7ff fff2 	bl	80010e0 <HAL_ADC_ErrorCallback>
}
 80010fc:	bd10      	pop	{r4, pc}
 80010fe:	46c0      	nop			@ (mov r8, r8)

08001100 <HAL_ADC_IRQHandler>:
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001100:	2204      	movs	r2, #4
{
 8001102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001104:	6803      	ldr	r3, [r0, #0]
{
 8001106:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001108:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800110a:	685f      	ldr	r7, [r3, #4]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800110c:	4232      	tst	r2, r6
 800110e:	d049      	beq.n	80011a4 <HAL_ADC_IRQHandler+0xa4>
 8001110:	423a      	tst	r2, r7
 8001112:	d047      	beq.n	80011a4 <HAL_ADC_IRQHandler+0xa4>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001114:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001116:	06d2      	lsls	r2, r2, #27
 8001118:	d404      	bmi.n	8001124 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800111a:	2280      	movs	r2, #128	@ 0x80
 800111c:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	430a      	orrs	r2, r1
 8001122:	6562      	str	r2, [r4, #84]	@ 0x54
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001124:	22c0      	movs	r2, #192	@ 0xc0
 8001126:	68d9      	ldr	r1, [r3, #12]
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	4211      	tst	r1, r2
 800112c:	d113      	bne.n	8001156 <HAL_ADC_IRQHandler+0x56>
        (hadc->Init.ContinuousConvMode == DISABLE))
 800112e:	2220      	movs	r2, #32
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001130:	5ca1      	ldrb	r1, [r4, r2]
 8001132:	2900      	cmp	r1, #0
 8001134:	d10f      	bne.n	8001156 <HAL_ADC_IRQHandler+0x56>
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001136:	0731      	lsls	r1, r6, #28
 8001138:	d50d      	bpl.n	8001156 <HAL_ADC_IRQHandler+0x56>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800113a:	6899      	ldr	r1, [r3, #8]
 800113c:	0749      	lsls	r1, r1, #29
 800113e:	d442      	bmi.n	80011c6 <HAL_ADC_IRQHandler+0xc6>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001140:	210c      	movs	r1, #12
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	438a      	bics	r2, r1
 8001146:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001148:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800114a:	4a23      	ldr	r2, [pc, #140]	@ (80011d8 <HAL_ADC_IRQHandler+0xd8>)
 800114c:	4013      	ands	r3, r2
 800114e:	3204      	adds	r2, #4
 8001150:	32ff      	adds	r2, #255	@ 0xff
 8001152:	4313      	orrs	r3, r2
 8001154:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001156:	0020      	movs	r0, r4
 8001158:	f7ff ff82 	bl	8001060 <HAL_ADC_ConvCpltCallback>
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 800115c:	69a3      	ldr	r3, [r4, #24]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d002      	beq.n	8001168 <HAL_ADC_IRQHandler+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001162:	220c      	movs	r2, #12
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8001168:	2580      	movs	r5, #128	@ 0x80
 800116a:	4235      	tst	r5, r6
 800116c:	d001      	beq.n	8001172 <HAL_ADC_IRQHandler+0x72>
 800116e:	423d      	tst	r5, r7
 8001170:	d11e      	bne.n	80011b0 <HAL_ADC_IRQHandler+0xb0>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001172:	2310      	movs	r3, #16
 8001174:	4233      	tst	r3, r6
 8001176:	d014      	beq.n	80011a2 <HAL_ADC_IRQHandler+0xa2>
 8001178:	423b      	tst	r3, r7
 800117a:	d012      	beq.n	80011a2 <HAL_ADC_IRQHandler+0xa2>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800117c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800117e:	6823      	ldr	r3, [r4, #0]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001180:	2a00      	cmp	r2, #0
 8001182:	d002      	beq.n	800118a <HAL_ADC_IRQHandler+0x8a>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001184:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001186:	07d2      	lsls	r2, r2, #31
 8001188:	d509      	bpl.n	800119e <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800118a:	2102      	movs	r1, #2
 800118c:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 800118e:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001190:	430a      	orrs	r2, r1
 8001192:	65a2      	str	r2, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001194:	2210      	movs	r2, #16
 8001196:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001198:	f7ff ffa2 	bl	80010e0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	2210      	movs	r2, #16
 80011a0:	601a      	str	r2, [r3, #0]
}
 80011a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80011a4:	2208      	movs	r2, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80011a6:	4232      	tst	r2, r6
 80011a8:	d0de      	beq.n	8001168 <HAL_ADC_IRQHandler+0x68>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80011aa:	423a      	tst	r2, r7
 80011ac:	d0dc      	beq.n	8001168 <HAL_ADC_IRQHandler+0x68>
 80011ae:	e7b1      	b.n	8001114 <HAL_ADC_IRQHandler+0x14>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	4313      	orrs	r3, r2
 80011b8:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80011ba:	0020      	movs	r0, r4
 80011bc:	f7ff ff8e 	bl	80010dc <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	601d      	str	r5, [r3, #0]
 80011c4:	e7d5      	b.n	8001172 <HAL_ADC_IRQHandler+0x72>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80011c8:	4313      	orrs	r3, r2
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ca:	2201      	movs	r2, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011cc:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80011d0:	4313      	orrs	r3, r2
 80011d2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80011d4:	e7bf      	b.n	8001156 <HAL_ADC_IRQHandler+0x56>
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	fffffefe 	.word	0xfffffefe

080011dc <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 80011dc:	2350      	movs	r3, #80	@ 0x50
{
 80011de:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80011e0:	5cc2      	ldrb	r2, [r0, r3]
{
 80011e2:	0004      	movs	r4, r0
 80011e4:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 80011e6:	2a01      	cmp	r2, #1
 80011e8:	d055      	beq.n	8001296 <HAL_ADC_ConfigChannel+0xba>
 80011ea:	2201      	movs	r2, #1
 80011ec:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80011ee:	6802      	ldr	r2, [r0, #0]
 80011f0:	6890      	ldr	r0, [r2, #8]
 80011f2:	0740      	lsls	r0, r0, #29
 80011f4:	d42e      	bmi.n	8001254 <HAL_ADC_ConfigChannel+0x78>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011f6:	2380      	movs	r3, #128	@ 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80011f8:	680d      	ldr	r5, [r1, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 80011fa:	4e28      	ldr	r6, [pc, #160]	@ (800129c <HAL_ADC_ConfigChannel+0xc0>)
 80011fc:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80011fe:	0368      	lsls	r0, r5, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001200:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001202:	0b40      	lsrs	r0, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001204:	402b      	ands	r3, r5
  if (sConfig->Rank != ADC_RANK_NONE)
 8001206:	42b1      	cmp	r1, r6
 8001208:	d02c      	beq.n	8001264 <HAL_ADC_ConfigChannel+0x88>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800120a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800120c:	4301      	orrs	r1, r0
 800120e:	6291      	str	r1, [r2, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001210:	2b00      	cmp	r3, #0
 8001212:	d017      	beq.n	8001244 <HAL_ADC_ConfigChannel+0x68>
      ADC->CCR |= ADC_CCR_TSEN;
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	4a22      	ldr	r2, [pc, #136]	@ (80012a0 <HAL_ADC_ConfigChannel+0xc4>)
 8001218:	041b      	lsls	r3, r3, #16
 800121a:	6811      	ldr	r1, [r2, #0]
 800121c:	430b      	orrs	r3, r1
 800121e:	6013      	str	r3, [r2, #0]
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001220:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <HAL_ADC_ConfigChannel+0xc8>)
 8001222:	4921      	ldr	r1, [pc, #132]	@ (80012a8 <HAL_ADC_ConfigChannel+0xcc>)
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f006 f937 	bl	8007498 <__udivsi3>
 800122a:	0083      	lsls	r3, r0, #2
 800122c:	181b      	adds	r3, r3, r0
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	9301      	str	r3, [sp, #4]
  while (waitLoopIndex != 0U)
 8001232:	9b01      	ldr	r3, [sp, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_ADC_ConfigChannel+0x68>
    waitLoopIndex--;
 8001238:	9b01      	ldr	r3, [sp, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	9301      	str	r3, [sp, #4]
  while (waitLoopIndex != 0U)
 800123e:	9b01      	ldr	r3, [sp, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f9      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x5c>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001244:	03ad      	lsls	r5, r5, #14
 8001246:	d41f      	bmi.n	8001288 <HAL_ADC_ConfigChannel+0xac>
  __HAL_UNLOCK(hadc);
 8001248:	2350      	movs	r3, #80	@ 0x50
 800124a:	2200      	movs	r2, #0
  return HAL_OK;
 800124c:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800124e:	54e2      	strb	r2, [r4, r3]
}
 8001250:	b002      	add	sp, #8
 8001252:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001254:	2120      	movs	r1, #32
 8001256:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8001258:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800125a:	430a      	orrs	r2, r1
 800125c:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 800125e:	2200      	movs	r2, #0
 8001260:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8001262:	e7f5      	b.n	8001250 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001264:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001266:	4381      	bics	r1, r0
 8001268:	6291      	str	r1, [r2, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800126a:	2b00      	cmp	r3, #0
 800126c:	d004      	beq.n	8001278 <HAL_ADC_ConfigChannel+0x9c>
      ADC->CCR &= ~ADC_CCR_TSEN;
 800126e:	4a0c      	ldr	r2, [pc, #48]	@ (80012a0 <HAL_ADC_ConfigChannel+0xc4>)
 8001270:	490e      	ldr	r1, [pc, #56]	@ (80012ac <HAL_ADC_ConfigChannel+0xd0>)
 8001272:	6813      	ldr	r3, [r2, #0]
 8001274:	400b      	ands	r3, r1
 8001276:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001278:	03ad      	lsls	r5, r5, #14
 800127a:	d5e5      	bpl.n	8001248 <HAL_ADC_ConfigChannel+0x6c>
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800127c:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <HAL_ADC_ConfigChannel+0xc4>)
 800127e:	490c      	ldr	r1, [pc, #48]	@ (80012b0 <HAL_ADC_ConfigChannel+0xd4>)
 8001280:	6813      	ldr	r3, [r2, #0]
 8001282:	400b      	ands	r3, r1
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e7df      	b.n	8001248 <HAL_ADC_ConfigChannel+0x6c>
      ADC->CCR |= ADC_CCR_VREFEN;
 8001288:	2380      	movs	r3, #128	@ 0x80
 800128a:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <HAL_ADC_ConfigChannel+0xc4>)
 800128c:	03db      	lsls	r3, r3, #15
 800128e:	6811      	ldr	r1, [r2, #0]
 8001290:	430b      	orrs	r3, r1
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	e7d8      	b.n	8001248 <HAL_ADC_ConfigChannel+0x6c>
  __HAL_LOCK(hadc);
 8001296:	2002      	movs	r0, #2
 8001298:	e7da      	b.n	8001250 <HAL_ADC_ConfigChannel+0x74>
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	00001001 	.word	0x00001001
 80012a0:	40012708 	.word	0x40012708
 80012a4:	2000000c 	.word	0x2000000c
 80012a8:	000f4240 	.word	0x000f4240
 80012ac:	ff7fffff 	.word	0xff7fffff
 80012b0:	ffbfffff 	.word	0xffbfffff

080012b4 <HAL_ADC_AnalogWDGConfig>:
  __HAL_LOCK(hadc);
 80012b4:	2250      	movs	r2, #80	@ 0x50
{
 80012b6:	b570      	push	{r4, r5, r6, lr}
 80012b8:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 80012ba:	5c80      	ldrb	r0, [r0, r2]
  if (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)
 80012bc:	680c      	ldr	r4, [r1, #0]
  __HAL_LOCK(hadc);
 80012be:	2801      	cmp	r0, #1
 80012c0:	d03e      	beq.n	8001340 <HAL_ADC_AnalogWDGConfig+0x8c>
 80012c2:	2001      	movs	r0, #1
 80012c4:	5498      	strb	r0, [r3, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	6890      	ldr	r0, [r2, #8]
 80012ca:	0740      	lsls	r0, r0, #29
 80012cc:	d42a      	bmi.n	8001324 <HAL_ADC_AnalogWDGConfig+0x70>
    if (AnalogWDGConfig->ITMode == ENABLE)
 80012ce:	7a08      	ldrb	r0, [r1, #8]
 80012d0:	2801      	cmp	r0, #1
 80012d2:	d030      	beq.n	8001336 <HAL_ADC_AnalogWDGConfig+0x82>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80012d4:	2580      	movs	r5, #128	@ 0x80
 80012d6:	6850      	ldr	r0, [r2, #4]
 80012d8:	43a8      	bics	r0, r5
 80012da:	6050      	str	r0, [r2, #4]
                              (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 80012dc:	26f8      	movs	r6, #248	@ 0xf8
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDSGL |
 80012de:	68d0      	ldr	r0, [r2, #12]
 80012e0:	4d18      	ldr	r5, [pc, #96]	@ (8001344 <HAL_ADC_AnalogWDGConfig+0x90>)
                              (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 80012e2:	05f6      	lsls	r6, r6, #23
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDSGL |
 80012e4:	4028      	ands	r0, r5
 80012e6:	60d0      	str	r0, [r2, #12]
    hadc->Instance->CFGR1 |= (AnalogWDGConfig->WatchdogMode |
 80012e8:	68d5      	ldr	r5, [r2, #12]
                              (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 80012ea:	6848      	ldr	r0, [r1, #4]
    hadc->Instance->CFGR1 |= (AnalogWDGConfig->WatchdogMode |
 80012ec:	432c      	orrs	r4, r5
                              (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 80012ee:	4030      	ands	r0, r6
    hadc->Instance->CFGR1 |= (AnalogWDGConfig->WatchdogMode |
 80012f0:	4320      	orrs	r0, r4
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80012f2:	2403      	movs	r4, #3
    hadc->Instance->CFGR1 |= (AnalogWDGConfig->WatchdogMode |
 80012f4:	60d0      	str	r0, [r2, #12]
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80012f6:	68d0      	ldr	r0, [r2, #12]
 80012f8:	68cd      	ldr	r5, [r1, #12]
 80012fa:	08c0      	lsrs	r0, r0, #3
 80012fc:	4020      	ands	r0, r4
 80012fe:	0040      	lsls	r0, r0, #1
 8001300:	4085      	lsls	r5, r0
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8001302:	68d0      	ldr	r0, [r2, #12]
    hadc->Instance->TR = ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted);
 8001304:	042d      	lsls	r5, r5, #16
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8001306:	08c0      	lsrs	r0, r0, #3
 8001308:	4004      	ands	r4, r0
 800130a:	6908      	ldr	r0, [r1, #16]
 800130c:	0064      	lsls	r4, r4, #1
 800130e:	40a0      	lsls	r0, r4
    hadc->Instance->TR &= (uint32_t) ~(ADC_TR_HT | ADC_TR_LT);
 8001310:	6a11      	ldr	r1, [r2, #32]
 8001312:	4c0d      	ldr	r4, [pc, #52]	@ (8001348 <HAL_ADC_AnalogWDGConfig+0x94>)
 8001314:	4021      	ands	r1, r4
 8001316:	6211      	str	r1, [r2, #32]
    hadc->Instance->TR = ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted);
 8001318:	6215      	str	r5, [r2, #32]
    hadc->Instance->TR |= tmpAWDLowThresholdShifted;
 800131a:	6a11      	ldr	r1, [r2, #32]
 800131c:	4301      	orrs	r1, r0
 800131e:	6211      	str	r1, [r2, #32]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001320:	2000      	movs	r0, #0
 8001322:	e004      	b.n	800132e <HAL_ADC_AnalogWDGConfig+0x7a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001324:	2120      	movs	r1, #32
    tmp_hal_status = HAL_ERROR;
 8001326:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001328:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800132a:	430a      	orrs	r2, r1
 800132c:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(hadc);
 800132e:	2250      	movs	r2, #80	@ 0x50
 8001330:	2100      	movs	r1, #0
 8001332:	5499      	strb	r1, [r3, r2]
}
 8001334:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8001336:	2580      	movs	r5, #128	@ 0x80
 8001338:	6850      	ldr	r0, [r2, #4]
 800133a:	4328      	orrs	r0, r5
 800133c:	6050      	str	r0, [r2, #4]
 800133e:	e7cd      	b.n	80012dc <HAL_ADC_AnalogWDGConfig+0x28>
  __HAL_LOCK(hadc);
 8001340:	2002      	movs	r0, #2
 8001342:	e7f7      	b.n	8001334 <HAL_ADC_AnalogWDGConfig+0x80>
 8001344:	833fffff 	.word	0x833fffff
 8001348:	f000f000 	.word	0xf000f000

0800134c <HAL_ADC_GetState>:
  return hadc->State;
 800134c:	6d40      	ldr	r0, [r0, #84]	@ 0x54
}
 800134e:	4770      	bx	lr

08001350 <HAL_ADC_GetError>:
  return hadc->ErrorCode;
 8001350:	6d80      	ldr	r0, [r0, #88]	@ 0x58
}
 8001352:	4770      	bx	lr

08001354 <HAL_ADCEx_Calibration_Start>:

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001354:	2350      	movs	r3, #80	@ 0x50
{
 8001356:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001358:	5cc2      	ldrb	r2, [r0, r3]
{
 800135a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800135c:	2a01      	cmp	r2, #1
 800135e:	d04b      	beq.n	80013f8 <HAL_ADCEx_Calibration_Start+0xa4>
 8001360:	2201      	movs	r2, #1
 8001362:	54c2      	strb	r2, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001364:	6803      	ldr	r3, [r0, #0]
 8001366:	3202      	adds	r2, #2
 8001368:	6899      	ldr	r1, [r3, #8]
 800136a:	400a      	ands	r2, r1
 800136c:	2a01      	cmp	r2, #1
 800136e:	d10b      	bne.n	8001388 <HAL_ADCEx_Calibration_Start+0x34>
 8001370:	6819      	ldr	r1, [r3, #0]
 8001372:	420a      	tst	r2, r1
 8001374:	d008      	beq.n	8001388 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001376:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001378:	321f      	adds	r2, #31
 800137a:	4313      	orrs	r3, r2
 800137c:	6543      	str	r3, [r0, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800137e:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001380:	2350      	movs	r3, #80	@ 0x50
 8001382:	2200      	movs	r2, #0
 8001384:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8001386:	bd70      	pop	{r4, r5, r6, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001388:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800138a:	491c      	ldr	r1, [pc, #112]	@ (80013fc <HAL_ADCEx_Calibration_Start+0xa8>)
 800138c:	400a      	ands	r2, r1
 800138e:	3106      	adds	r1, #6
 8001390:	31ff      	adds	r1, #255	@ 0xff
 8001392:	430a      	orrs	r2, r1
 8001394:	6562      	str	r2, [r4, #84]	@ 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001396:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	3101      	adds	r1, #1
 800139c:	438a      	bics	r2, r1
 800139e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80013a0:	2280      	movs	r2, #128	@ 0x80
 80013a2:	6899      	ldr	r1, [r3, #8]
 80013a4:	0612      	lsls	r2, r2, #24
 80013a6:	430a      	orrs	r2, r1
 80013a8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80013aa:	f7ff f98d 	bl	80006c8 <HAL_GetTick>
 80013ae:	0005      	movs	r5, r0
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	2a00      	cmp	r2, #0
 80013b6:	da13      	bge.n	80013e0 <HAL_ADCEx_Calibration_Start+0x8c>
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013b8:	f7ff f986 	bl	80006c8 <HAL_GetTick>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80013bc:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013be:	1b40      	subs	r0, r0, r5
 80013c0:	280a      	cmp	r0, #10
 80013c2:	d9f6      	bls.n	80013b2 <HAL_ADCEx_Calibration_Start+0x5e>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	2a00      	cmp	r2, #0
 80013c8:	daf3      	bge.n	80013b2 <HAL_ADCEx_Calibration_Start+0x5e>
          ADC_STATE_CLR_SET(hadc->State,
 80013ca:	2212      	movs	r2, #18
 80013cc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
          return HAL_ERROR;
 80013ce:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 80013d0:	4393      	bics	r3, r2
 80013d2:	3a02      	subs	r2, #2
 80013d4:	4313      	orrs	r3, r2
 80013d6:	6563      	str	r3, [r4, #84]	@ 0x54
          __HAL_UNLOCK(hadc);
 80013d8:	2200      	movs	r2, #0
 80013da:	2350      	movs	r3, #80	@ 0x50
 80013dc:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 80013de:	e7d2      	b.n	8001386 <HAL_ADCEx_Calibration_Start+0x32>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80013e0:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80013e2:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80013e4:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80013e6:	430e      	orrs	r6, r1
 80013e8:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80013ea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ec:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 80013ee:	4393      	bics	r3, r2
 80013f0:	3a02      	subs	r2, #2
 80013f2:	4313      	orrs	r3, r2
 80013f4:	6563      	str	r3, [r4, #84]	@ 0x54
 80013f6:	e7c3      	b.n	8001380 <HAL_ADCEx_Calibration_Start+0x2c>
  __HAL_LOCK(hadc);
 80013f8:	2002      	movs	r0, #2
 80013fa:	e7c4      	b.n	8001386 <HAL_ADCEx_Calibration_Start+0x32>
 80013fc:	fffffefd 	.word	0xfffffefd

08001400 <HAL_ADCEx_Calibration_GetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Return the ADC calibration value */
  return ((hadc->Instance->CALFACT) & 0x0000007FU);
 8001400:	23b4      	movs	r3, #180	@ 0xb4
 8001402:	6802      	ldr	r2, [r0, #0]
 8001404:	207f      	movs	r0, #127	@ 0x7f
 8001406:	58d3      	ldr	r3, [r2, r3]
 8001408:	4018      	ands	r0, r3
}
 800140a:	4770      	bx	lr

0800140c <HAL_ADCEx_Calibration_SetValue>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
  assert_param(IS_ADC_CALFACT(CalibrationFactor));

  /* Process locked */
  __HAL_LOCK(hadc);
 800140c:	2150      	movs	r1, #80	@ 0x50
{
 800140e:	b530      	push	{r4, r5, lr}
 8001410:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 8001412:	5c40      	ldrb	r0, [r0, r1]
 8001414:	2801      	cmp	r0, #1
 8001416:	d024      	beq.n	8001462 <HAL_ADCEx_Calibration_SetValue+0x56>
 8001418:	2001      	movs	r0, #1
 800141a:	5458      	strb	r0, [r3, r1]

  /* Verification of hardware constraints before modifying the calibration    */
  /* factors register: ADC must be enabled, no conversion on going.           */
  if ((ADC_IS_ENABLE(hadc) != RESET)                            &&
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	394d      	subs	r1, #77	@ 0x4d
 8001420:	6884      	ldr	r4, [r0, #8]
 8001422:	4021      	ands	r1, r4
 8001424:	2901      	cmp	r1, #1
 8001426:	d00c      	beq.n	8001442 <HAL_ADCEx_Calibration_SetValue+0x36>
    hadc->Instance->CALFACT |= CalibrationFactor;
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001428:	2110      	movs	r1, #16
    /* Update ADC state machine to error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);

    /* Update ADC state machine to error */
    tmp_hal_status = HAL_ERROR;
 800142a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800142e:	430a      	orrs	r2, r1
 8001430:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001432:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001434:	390f      	subs	r1, #15
 8001436:	430a      	orrs	r2, r1
 8001438:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800143a:	2250      	movs	r2, #80	@ 0x50
 800143c:	2100      	movs	r1, #0
 800143e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
}
 8001440:	bd30      	pop	{r4, r5, pc}
  if ((ADC_IS_ENABLE(hadc) != RESET)                            &&
 8001442:	6804      	ldr	r4, [r0, #0]
 8001444:	4221      	tst	r1, r4
 8001446:	d0ef      	beq.n	8001428 <HAL_ADCEx_Calibration_SetValue+0x1c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET))
 8001448:	6881      	ldr	r1, [r0, #8]
  if ((ADC_IS_ENABLE(hadc) != RESET)                            &&
 800144a:	0749      	lsls	r1, r1, #29
 800144c:	d4ec      	bmi.n	8001428 <HAL_ADCEx_Calibration_SetValue+0x1c>
    hadc->Instance->CALFACT &= ~ADC_CALFACT_CALFACT;
 800144e:	21b4      	movs	r1, #180	@ 0xb4
 8001450:	257f      	movs	r5, #127	@ 0x7f
 8001452:	5844      	ldr	r4, [r0, r1]
 8001454:	43ac      	bics	r4, r5
 8001456:	5044      	str	r4, [r0, r1]
    hadc->Instance->CALFACT |= CalibrationFactor;
 8001458:	5844      	ldr	r4, [r0, r1]
 800145a:	4322      	orrs	r2, r4
 800145c:	5042      	str	r2, [r0, r1]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800145e:	2000      	movs	r0, #0
    hadc->Instance->CALFACT |= CalibrationFactor;
 8001460:	e7eb      	b.n	800143a <HAL_ADCEx_Calibration_SetValue+0x2e>
  __HAL_LOCK(hadc);
 8001462:	2002      	movs	r0, #2
 8001464:	e7ec      	b.n	8001440 <HAL_ADCEx_Calibration_SetValue+0x34>
 8001466:	46c0      	nop			@ (mov r8, r8)

08001468 <HAL_ADCEx_EnableVREFINT>:
HAL_StatusTypeDef HAL_ADCEx_EnableVREFINT(void)
{
  uint32_t tickstart = 0U;

  /* Enable the Buffer for the ADC by setting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 8001468:	2380      	movs	r3, #128	@ 0x80
{
 800146a:	b570      	push	{r4, r5, r6, lr}
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 800146c:	4c0d      	ldr	r4, [pc, #52]	@ (80014a4 <HAL_ADCEx_EnableVREFINT+0x3c>)
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	6a22      	ldr	r2, [r4, #32]

  /* Wait for Vrefint buffer effectively enabled */
  /* Get tick count */
  tickstart = HAL_GetTick();

  while (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8001472:	2580      	movs	r5, #128	@ 0x80
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 8001474:	4313      	orrs	r3, r2
 8001476:	6223      	str	r3, [r4, #32]
  tickstart = HAL_GetTick();
 8001478:	f7ff f926 	bl	80006c8 <HAL_GetTick>
  while (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 800147c:	6a23      	ldr	r3, [r4, #32]
 800147e:	05ed      	lsls	r5, r5, #23
  tickstart = HAL_GetTick();
 8001480:	0006      	movs	r6, r0
  while (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8001482:	422b      	tst	r3, r5
 8001484:	d10a      	bne.n	800149c <HAL_ADCEx_EnableVREFINT+0x34>
  {
    if ((HAL_GetTick() - tickstart) > SYSCFG_BUF_VREFINT_ENABLE_TIMEOUT)
 8001486:	f7ff f91f 	bl	80006c8 <HAL_GetTick>
 800148a:	1b80      	subs	r0, r0, r6
 800148c:	2803      	cmp	r0, #3
 800148e:	d902      	bls.n	8001496 <HAL_ADCEx_EnableVREFINT+0x2e>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8001490:	6a23      	ldr	r3, [r4, #32]
 8001492:	422b      	tst	r3, r5
 8001494:	d004      	beq.n	80014a0 <HAL_ADCEx_EnableVREFINT+0x38>
  while (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8001496:	6a23      	ldr	r3, [r4, #32]
 8001498:	422b      	tst	r3, r5
 800149a:	d0f4      	beq.n	8001486 <HAL_ADCEx_EnableVREFINT+0x1e>
        return HAL_ERROR;
      }
    }
  }

  return HAL_OK;
 800149c:	2000      	movs	r0, #0
}
 800149e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80014a0:	2001      	movs	r0, #1
 80014a2:	e7fc      	b.n	800149e <HAL_ADCEx_EnableVREFINT+0x36>
 80014a4:	40010000 	.word	0x40010000

080014a8 <HAL_ADCEx_DisableVREFINT>:
  * @retval None
  */
void HAL_ADCEx_DisableVREFINT(void)
{
  /* Disable the Vrefint by resetting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  CLEAR_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 80014a8:	4a02      	ldr	r2, [pc, #8]	@ (80014b4 <HAL_ADCEx_DisableVREFINT+0xc>)
 80014aa:	4903      	ldr	r1, [pc, #12]	@ (80014b8 <HAL_ADCEx_DisableVREFINT+0x10>)
 80014ac:	6a13      	ldr	r3, [r2, #32]
 80014ae:	400b      	ands	r3, r1
 80014b0:	6213      	str	r3, [r2, #32]
}
 80014b2:	4770      	bx	lr
 80014b4:	40010000 	.word	0x40010000
 80014b8:	fffffeff 	.word	0xfffffeff

080014bc <HAL_ADCEx_EnableVREFINTTempSensor>:
HAL_StatusTypeDef HAL_ADCEx_EnableVREFINTTempSensor(void)
{
  uint32_t tickstart = 0U;

  /* Enable the Buffer for the ADC by setting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_SENSOR_ADC);
 80014bc:	2380      	movs	r3, #128	@ 0x80
{
 80014be:	b570      	push	{r4, r5, r6, lr}
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_SENSOR_ADC);
 80014c0:	4c0d      	ldr	r4, [pc, #52]	@ (80014f8 <HAL_ADCEx_EnableVREFINTTempSensor+0x3c>)
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	6a22      	ldr	r2, [r4, #32]

  /* Wait for Vrefint buffer effectively enabled */
  /* Get tick count */
  tickstart = HAL_GetTick();

  while (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 80014c6:	2580      	movs	r5, #128	@ 0x80
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_SENSOR_ADC);
 80014c8:	4313      	orrs	r3, r2
 80014ca:	6223      	str	r3, [r4, #32]
  tickstart = HAL_GetTick();
 80014cc:	f7ff f8fc 	bl	80006c8 <HAL_GetTick>
  while (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 80014d0:	6a23      	ldr	r3, [r4, #32]
 80014d2:	05ed      	lsls	r5, r5, #23
  tickstart = HAL_GetTick();
 80014d4:	0006      	movs	r6, r0
  while (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 80014d6:	422b      	tst	r3, r5
 80014d8:	d10a      	bne.n	80014f0 <HAL_ADCEx_EnableVREFINTTempSensor+0x34>
  {
    if ((HAL_GetTick() - tickstart) > SYSCFG_BUF_TEMPSENSOR_ENABLE_TIMEOUT)
 80014da:	f7ff f8f5 	bl	80006c8 <HAL_GetTick>
 80014de:	1b80      	subs	r0, r0, r6
 80014e0:	2801      	cmp	r0, #1
 80014e2:	d902      	bls.n	80014ea <HAL_ADCEx_EnableVREFINTTempSensor+0x2e>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 80014e4:	6a23      	ldr	r3, [r4, #32]
 80014e6:	422b      	tst	r3, r5
 80014e8:	d004      	beq.n	80014f4 <HAL_ADCEx_EnableVREFINTTempSensor+0x38>
  while (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 80014ea:	6a23      	ldr	r3, [r4, #32]
 80014ec:	422b      	tst	r3, r5
 80014ee:	d0f4      	beq.n	80014da <HAL_ADCEx_EnableVREFINTTempSensor+0x1e>
        return HAL_ERROR;
      }
    }
  }

  return HAL_OK;
 80014f0:	2000      	movs	r0, #0
}
 80014f2:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80014f4:	2001      	movs	r0, #1
 80014f6:	e7fc      	b.n	80014f2 <HAL_ADCEx_EnableVREFINTTempSensor+0x36>
 80014f8:	40010000 	.word	0x40010000

080014fc <HAL_ADCEx_DisableVREFINTTempSensor>:
  * @retval None
  */
void HAL_ADCEx_DisableVREFINTTempSensor(void)
{
  /* Disable the Vrefint by resetting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  CLEAR_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_SENSOR_ADC);
 80014fc:	4a02      	ldr	r2, [pc, #8]	@ (8001508 <HAL_ADCEx_DisableVREFINTTempSensor+0xc>)
 80014fe:	4903      	ldr	r1, [pc, #12]	@ (800150c <HAL_ADCEx_DisableVREFINTTempSensor+0x10>)
 8001500:	6a13      	ldr	r3, [r2, #32]
 8001502:	400b      	ands	r3, r1
 8001504:	6213      	str	r3, [r2, #32]
}
 8001506:	4770      	bx	lr
 8001508:	40010000 	.word	0x40010000
 800150c:	fffffdff 	.word	0xfffffdff

08001510 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001510:	22ff      	movs	r2, #255	@ 0xff
 8001512:	2303      	movs	r3, #3
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001514:	b510      	push	{r4, lr}
 8001516:	0014      	movs	r4, r2
 8001518:	4003      	ands	r3, r0
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800151e:	0189      	lsls	r1, r1, #6
 8001520:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001522:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001524:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8001526:	2800      	cmp	r0, #0
 8001528:	db0b      	blt.n	8001542 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800152a:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <HAL_NVIC_SetPriority+0x4c>)
 800152c:	21c0      	movs	r1, #192	@ 0xc0
 800152e:	469c      	mov	ip, r3
 8001530:	0880      	lsrs	r0, r0, #2
 8001532:	0080      	lsls	r0, r0, #2
 8001534:	4460      	add	r0, ip
 8001536:	0089      	lsls	r1, r1, #2
 8001538:	5843      	ldr	r3, [r0, r1]
 800153a:	4023      	ands	r3, r4
 800153c:	4313      	orrs	r3, r2
 800153e:	5043      	str	r3, [r0, r1]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001540:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001542:	230f      	movs	r3, #15
 8001544:	4906      	ldr	r1, [pc, #24]	@ (8001560 <HAL_NVIC_SetPriority+0x50>)
 8001546:	4003      	ands	r3, r0
 8001548:	468c      	mov	ip, r1
 800154a:	3b08      	subs	r3, #8
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4463      	add	r3, ip
 8001552:	69d9      	ldr	r1, [r3, #28]
 8001554:	400c      	ands	r4, r1
 8001556:	4314      	orrs	r4, r2
 8001558:	61dc      	str	r4, [r3, #28]
 800155a:	e7f1      	b.n	8001540 <HAL_NVIC_SetPriority+0x30>
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001564:	2800      	cmp	r0, #0
 8001566:	db05      	blt.n	8001574 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001568:	221f      	movs	r2, #31
 800156a:	2301      	movs	r3, #1
 800156c:	4002      	ands	r2, r0
 800156e:	4093      	lsls	r3, r2
 8001570:	4a01      	ldr	r2, [pc, #4]	@ (8001578 <HAL_NVIC_EnableIRQ+0x14>)
 8001572:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001574:	4770      	bx	lr
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	e000e100 	.word	0xe000e100

0800157c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800157c:	2800      	cmp	r0, #0
 800157e:	db0a      	blt.n	8001596 <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001580:	221f      	movs	r2, #31
 8001582:	2301      	movs	r3, #1
 8001584:	4002      	ands	r2, r0
 8001586:	4093      	lsls	r3, r2
 8001588:	2280      	movs	r2, #128	@ 0x80
 800158a:	4903      	ldr	r1, [pc, #12]	@ (8001598 <HAL_NVIC_DisableIRQ+0x1c>)
 800158c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800158e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001592:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100

0800159c <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800159c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	4b03      	ldr	r3, [pc, #12]	@ (80015b0 <HAL_NVIC_SystemReset+0x14>)
 80015a2:	4a04      	ldr	r2, [pc, #16]	@ (80015b4 <HAL_NVIC_SystemReset+0x18>)
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80015aa:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80015ac:	e7fd      	b.n	80015aa <HAL_NVIC_SystemReset+0xe>
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	05fa0004 	.word	0x05fa0004

080015b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b8:	2280      	movs	r2, #128	@ 0x80
 80015ba:	1e43      	subs	r3, r0, #1
 80015bc:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80015be:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d20e      	bcs.n	80015e2 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c4:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c6:	4a07      	ldr	r2, [pc, #28]	@ (80015e4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c8:	4807      	ldr	r0, [pc, #28]	@ (80015e8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ca:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015cc:	6a03      	ldr	r3, [r0, #32]
 80015ce:	0609      	lsls	r1, r1, #24
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	430b      	orrs	r3, r1
 80015d6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d8:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015da:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015dc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015de:	3307      	adds	r3, #7
 80015e0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015e2:	4770      	bx	lr
 80015e4:	e000e010 	.word	0xe000e010
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <HAL_NVIC_GetPriority>:
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
 80015ec:	2203      	movs	r2, #3
 80015ee:	0011      	movs	r1, r2
 80015f0:	4001      	ands	r1, r0
 80015f2:	00c9      	lsls	r1, r1, #3
  if ((int32_t)(IRQn) >= 0)
 80015f4:	2800      	cmp	r0, #0
 80015f6:	db08      	blt.n	800160a <HAL_NVIC_GetPriority+0x1e>
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
 80015f8:	0883      	lsrs	r3, r0, #2
 80015fa:	33c0      	adds	r3, #192	@ 0xc0
 80015fc:	4809      	ldr	r0, [pc, #36]	@ (8001624 <HAL_NVIC_GetPriority+0x38>)
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	581b      	ldr	r3, [r3, r0]
 8001602:	40cb      	lsrs	r3, r1
 8001604:	0998      	lsrs	r0, r3, #6
 8001606:	4010      	ands	r0, r2
  */
uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
{
  /* Get priority for Cortex-M system or device specific interrupts */
  return NVIC_GetPriority(IRQn);
}
 8001608:	4770      	bx	lr
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
 800160a:	230f      	movs	r3, #15
 800160c:	4003      	ands	r3, r0
 800160e:	4806      	ldr	r0, [pc, #24]	@ (8001628 <HAL_NVIC_GetPriority+0x3c>)
 8001610:	3b08      	subs	r3, #8
 8001612:	4684      	mov	ip, r0
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4463      	add	r3, ip
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	40cb      	lsrs	r3, r1
 800161e:	0998      	lsrs	r0, r3, #6
 8001620:	4010      	ands	r0, r2
  return NVIC_GetPriority(IRQn);
 8001622:	e7f1      	b.n	8001608 <HAL_NVIC_GetPriority+0x1c>
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed18 	.word	0xe000ed18

0800162c <HAL_NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800162c:	2800      	cmp	r0, #0
 800162e:	db07      	blt.n	8001640 <HAL_NVIC_SetPendingIRQ+0x14>
    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001630:	221f      	movs	r2, #31
 8001632:	2301      	movs	r3, #1
 8001634:	4002      	ands	r2, r0
 8001636:	4093      	lsls	r3, r2
 8001638:	2280      	movs	r2, #128	@ 0x80
 800163a:	4902      	ldr	r1, [pc, #8]	@ (8001644 <HAL_NVIC_SetPendingIRQ+0x18>)
 800163c:	0052      	lsls	r2, r2, #1
 800163e:	508b      	str	r3, [r1, r2]
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{ 
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
}
 8001640:	4770      	bx	lr
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	e000e100 	.word	0xe000e100

08001648 <HAL_NVIC_GetPendingIRQ>:
  *          (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{ 
 8001648:	0003      	movs	r3, r0
    return(0U);
 800164a:	2000      	movs	r0, #0
  if ((int32_t)(IRQn) >= 0)
 800164c:	2b00      	cmp	r3, #0
 800164e:	db08      	blt.n	8001662 <HAL_NVIC_GetPendingIRQ+0x1a>
    return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001650:	2280      	movs	r2, #128	@ 0x80
 8001652:	4904      	ldr	r1, [pc, #16]	@ (8001664 <HAL_NVIC_GetPendingIRQ+0x1c>)
 8001654:	0052      	lsls	r2, r2, #1
 8001656:	588a      	ldr	r2, [r1, r2]
 8001658:	211f      	movs	r1, #31
 800165a:	400b      	ands	r3, r1
 800165c:	40da      	lsrs	r2, r3
 800165e:	3001      	adds	r0, #1
 8001660:	4010      	ands	r0, r2
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
}
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100

08001668 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001668:	2800      	cmp	r0, #0
 800166a:	db07      	blt.n	800167c <HAL_NVIC_ClearPendingIRQ+0x14>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166c:	221f      	movs	r2, #31
 800166e:	2301      	movs	r3, #1
 8001670:	4002      	ands	r2, r0
 8001672:	4093      	lsls	r3, r2
 8001674:	22c0      	movs	r2, #192	@ 0xc0
 8001676:	4902      	ldr	r1, [pc, #8]	@ (8001680 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8001678:	0052      	lsls	r2, r2, #1
 800167a:	508b      	str	r3, [r1, r2]
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800167c:	4770      	bx	lr
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	e000e100 	.word	0xe000e100

08001684 <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001684:	4a05      	ldr	r2, [pc, #20]	@ (800169c <HAL_SYSTICK_CLKSourceConfig+0x18>)
 8001686:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001688:	2804      	cmp	r0, #4
 800168a:	d003      	beq.n	8001694 <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800168c:	2104      	movs	r1, #4
 800168e:	438b      	bics	r3, r1
 8001690:	6013      	str	r3, [r2, #0]
  }
}
 8001692:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001694:	4303      	orrs	r3, r0
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e7fb      	b.n	8001692 <HAL_SYSTICK_CLKSourceConfig+0xe>
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80016a0:	4770      	bx	lr
 80016a2:	46c0      	nop			@ (mov r8, r8)

080016a4 <HAL_SYSTICK_IRQHandler>:
{
 80016a4:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 80016a6:	f7ff fffb 	bl	80016a0 <HAL_SYSTICK_Callback>
}
 80016aa:	bd10      	pop	{r4, pc}

080016ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016ac:	b570      	push	{r4, r5, r6, lr}
 80016ae:	1e04      	subs	r4, r0, #0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016b0:	d038      	beq.n	8001724 <HAL_DMA_Init+0x78>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016b2:	6805      	ldr	r5, [r0, #0]
 80016b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <HAL_DMA_Init+0x7c>)
 80016b6:	2114      	movs	r1, #20
 80016b8:	18e8      	adds	r0, r5, r3
 80016ba:	f005 feed 	bl	8007498 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80016be:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <HAL_DMA_Init+0x80>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016c0:	2202      	movs	r2, #2
  hdma->DmaBaseAddress = DMA1;
 80016c2:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80016c4:	2325      	movs	r3, #37	@ 0x25
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016c6:	0080      	lsls	r0, r0, #2
 80016c8:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80016ca:	54e2      	strb	r2, [r4, r3]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016cc:	682a      	ldr	r2, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016ce:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <HAL_DMA_Init+0x84>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016d0:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016d2:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80016d4:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d6:	6926      	ldr	r6, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80016d8:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016da:	4333      	orrs	r3, r6
 80016dc:	6966      	ldr	r6, [r4, #20]
 80016de:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e0:	69a6      	ldr	r6, [r4, #24]
 80016e2:	4333      	orrs	r3, r6
 80016e4:	69e6      	ldr	r6, [r4, #28]
 80016e6:	4333      	orrs	r3, r6
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e8:	6a26      	ldr	r6, [r4, #32]
 80016ea:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 80016ec:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ee:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	01db      	lsls	r3, r3, #7
 80016f4:	4299      	cmp	r1, r3
 80016f6:	d00c      	beq.n	8001712 <HAL_DMA_Init+0x66>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80016f8:	211c      	movs	r1, #28
 80016fa:	4001      	ands	r1, r0
 80016fc:	200f      	movs	r0, #15
 80016fe:	4088      	lsls	r0, r1
 8001700:	4a0c      	ldr	r2, [pc, #48]	@ (8001734 <HAL_DMA_Init+0x88>)
 8001702:	6813      	ldr	r3, [r2, #0]
 8001704:	4383      	bics	r3, r0
 8001706:	6013      	str	r3, [r2, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001708:	6863      	ldr	r3, [r4, #4]
 800170a:	6810      	ldr	r0, [r2, #0]
 800170c:	408b      	lsls	r3, r1
 800170e:	4303      	orrs	r3, r0
 8001710:	6013      	str	r3, [r2, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001712:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001714:	2225      	movs	r2, #37	@ 0x25
 8001716:	2101      	movs	r1, #1

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8001718:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800171a:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 800171c:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 800171e:	3a01      	subs	r2, #1
 8001720:	54a3      	strb	r3, [r4, r2]
}
 8001722:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001724:	2001      	movs	r0, #1
 8001726:	e7fc      	b.n	8001722 <HAL_DMA_Init+0x76>
 8001728:	bffdfff8 	.word	0xbffdfff8
 800172c:	40020000 	.word	0x40020000
 8001730:	ffff800f 	.word	0xffff800f
 8001734:	400200a8 	.word	0x400200a8

08001738 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001738:	b570      	push	{r4, r5, r6, lr}
 800173a:	1e04      	subs	r4, r0, #0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800173c:	d024      	beq.n	8001788 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800173e:	2501      	movs	r5, #1
 8001740:	6806      	ldr	r6, [r0, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001742:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8001744:	6833      	ldr	r3, [r6, #0]
 8001746:	43ab      	bics	r3, r5
 8001748:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800174a:	4b10      	ldr	r3, [pc, #64]	@ (800178c <HAL_DMA_DeInit+0x54>)
 800174c:	18f0      	adds	r0, r6, r3
 800174e:	f005 fea3 	bl	8007498 <__udivsi3>
 8001752:	0082      	lsls	r2, r0, #2

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001754:	201c      	movs	r0, #28
 8001756:	4010      	ands	r0, r2
  hdma->Instance->CCR  = 0U;
 8001758:	2300      	movs	r3, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800175a:	4085      	lsls	r5, r0
  hdma->DmaBaseAddress = DMA1;
 800175c:	490c      	ldr	r1, [pc, #48]	@ (8001790 <HAL_DMA_DeInit+0x58>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800175e:	6462      	str	r2, [r4, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001760:	6421      	str	r1, [r4, #64]	@ 0x40
  hdma->Instance->CCR  = 0U;
 8001762:	6033      	str	r3, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001764:	604d      	str	r5, [r1, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001766:	210f      	movs	r1, #15
 8001768:	4081      	lsls	r1, r0
 800176a:	4d0a      	ldr	r5, [pc, #40]	@ (8001794 <HAL_DMA_DeInit+0x5c>)
  hdma->State = HAL_DMA_STATE_RESET;

  /* Release Lock */
  __HAL_UNLOCK(hdma);

  return HAL_OK;
 800176c:	2000      	movs	r0, #0
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800176e:	682a      	ldr	r2, [r5, #0]
 8001770:	438a      	bics	r2, r1
 8001772:	602a      	str	r2, [r5, #0]
  hdma->State = HAL_DMA_STATE_RESET;
 8001774:	2225      	movs	r2, #37	@ 0x25
  hdma->XferCpltCallback = NULL;
 8001776:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001778:	6323      	str	r3, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800177a:	6363      	str	r3, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800177c:	63a3      	str	r3, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800177e:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8001780:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hdma);
 8001782:	3a01      	subs	r2, #1
 8001784:	54a3      	strb	r3, [r4, r2]
}
 8001786:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001788:	2001      	movs	r0, #1
 800178a:	e7fc      	b.n	8001786 <HAL_DMA_DeInit+0x4e>
 800178c:	bffdfff8 	.word	0xbffdfff8
 8001790:	40020000 	.word	0x40020000
 8001794:	400200a8 	.word	0x400200a8

08001798 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	46ce      	mov	lr, r9
 800179c:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800179e:	2424      	movs	r4, #36	@ 0x24
{
 80017a0:	b580      	push	{r7, lr}
  __HAL_LOCK(hdma);
 80017a2:	5d05      	ldrb	r5, [r0, r4]
 80017a4:	2d01      	cmp	r5, #1
 80017a6:	d008      	beq.n	80017ba <HAL_DMA_Start+0x22>
 80017a8:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 80017aa:	2725      	movs	r7, #37	@ 0x25
  __HAL_LOCK(hdma);
 80017ac:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 80017ae:	5dc5      	ldrb	r5, [r0, r7]
 80017b0:	b2ee      	uxtb	r6, r5
 80017b2:	2d01      	cmp	r5, #1
 80017b4:	d006      	beq.n	80017c4 <HAL_DMA_Start+0x2c>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b6:	2300      	movs	r3, #0
 80017b8:	5503      	strb	r3, [r0, r4]
  __HAL_LOCK(hdma);
 80017ba:	2002      	movs	r0, #2
    status = HAL_BUSY;
  }
  return status;
}
 80017bc:	bcc0      	pop	{r6, r7}
 80017be:	46b9      	mov	r9, r7
 80017c0:	46b0      	mov	r8, r6
 80017c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80017c4:	3c22      	subs	r4, #34	@ 0x22
 80017c6:	55c4      	strb	r4, [r0, r7]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c8:	2400      	movs	r4, #0
 80017ca:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80017cc:	6804      	ldr	r4, [r0, #0]
 80017ce:	6825      	ldr	r5, [r4, #0]
 80017d0:	43b5      	bics	r5, r6
 80017d2:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017d4:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80017d6:	46a9      	mov	r9, r5
 80017d8:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80017da:	46a8      	mov	r8, r5
 80017dc:	251c      	movs	r5, #28
 80017de:	4647      	mov	r7, r8
 80017e0:	402f      	ands	r7, r5
 80017e2:	40be      	lsls	r6, r7
 80017e4:	464d      	mov	r5, r9
 80017e6:	606e      	str	r6, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017e8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017ea:	6883      	ldr	r3, [r0, #8]
 80017ec:	2b10      	cmp	r3, #16
 80017ee:	d007      	beq.n	8001800 <HAL_DMA_Start+0x68>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80017f0:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80017f2:	60e2      	str	r2, [r4, #12]
    __HAL_DMA_ENABLE(hdma);
 80017f4:	2201      	movs	r2, #1
 80017f6:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80017fa:	4313      	orrs	r3, r2
 80017fc:	6023      	str	r3, [r4, #0]
 80017fe:	e7dd      	b.n	80017bc <HAL_DMA_Start+0x24>
    hdma->Instance->CPAR = DstAddress;
 8001800:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001802:	60e1      	str	r1, [r4, #12]
 8001804:	e7f6      	b.n	80017f4 <HAL_DMA_Start+0x5c>
 8001806:	46c0      	nop			@ (mov r8, r8)

08001808 <HAL_DMA_Start_IT>:
{
 8001808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180a:	46ce      	mov	lr, r9
 800180c:	4647      	mov	r7, r8
  __HAL_LOCK(hdma);
 800180e:	2424      	movs	r4, #36	@ 0x24
{
 8001810:	b580      	push	{r7, lr}
  __HAL_LOCK(hdma);
 8001812:	5d05      	ldrb	r5, [r0, r4]
 8001814:	2d01      	cmp	r5, #1
 8001816:	d008      	beq.n	800182a <HAL_DMA_Start_IT+0x22>
 8001818:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800181a:	2725      	movs	r7, #37	@ 0x25
  __HAL_LOCK(hdma);
 800181c:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 800181e:	5dc5      	ldrb	r5, [r0, r7]
 8001820:	b2ee      	uxtb	r6, r5
 8001822:	2d01      	cmp	r5, #1
 8001824:	d006      	beq.n	8001834 <HAL_DMA_Start_IT+0x2c>
    __HAL_UNLOCK(hdma);
 8001826:	2300      	movs	r3, #0
 8001828:	5503      	strb	r3, [r0, r4]
  __HAL_LOCK(hdma);
 800182a:	2002      	movs	r0, #2
}
 800182c:	bcc0      	pop	{r6, r7}
 800182e:	46b9      	mov	r9, r7
 8001830:	46b0      	mov	r8, r6
 8001832:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001834:	3c22      	subs	r4, #34	@ 0x22
 8001836:	55c4      	strb	r4, [r0, r7]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001838:	2400      	movs	r4, #0
 800183a:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 800183c:	6804      	ldr	r4, [r0, #0]
 800183e:	6825      	ldr	r5, [r4, #0]
 8001840:	43b5      	bics	r5, r6
 8001842:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001844:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8001846:	46a9      	mov	r9, r5
 8001848:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800184a:	46a8      	mov	r8, r5
 800184c:	251c      	movs	r5, #28
 800184e:	4647      	mov	r7, r8
 8001850:	402f      	ands	r7, r5
 8001852:	40be      	lsls	r6, r7
 8001854:	464d      	mov	r5, r9
 8001856:	606e      	str	r6, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 8001858:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800185a:	6883      	ldr	r3, [r0, #8]
 800185c:	2b10      	cmp	r3, #16
 800185e:	d00e      	beq.n	800187e <HAL_DMA_Start_IT+0x76>
    if(NULL != hdma->XferHalfCpltCallback )
 8001860:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->Instance->CPAR = SrcAddress;
 8001862:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8001864:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00e      	beq.n	8001888 <HAL_DMA_Start_IT+0x80>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186a:	220e      	movs	r2, #14
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	4313      	orrs	r3, r2
 8001870:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001872:	2201      	movs	r2, #1
 8001874:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001876:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001878:	4313      	orrs	r3, r2
 800187a:	6023      	str	r3, [r4, #0]
 800187c:	e7d6      	b.n	800182c <HAL_DMA_Start_IT+0x24>
    if(NULL != hdma->XferHalfCpltCallback )
 800187e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->Instance->CPAR = DstAddress;
 8001880:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001882:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f0      	bne.n	800186a <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001888:	2204      	movs	r2, #4
 800188a:	6823      	ldr	r3, [r4, #0]
 800188c:	4393      	bics	r3, r2
 800188e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	3206      	adds	r2, #6
 8001894:	4313      	orrs	r3, r2
 8001896:	6023      	str	r3, [r4, #0]
 8001898:	e7eb      	b.n	8001872 <HAL_DMA_Start_IT+0x6a>
 800189a:	46c0      	nop			@ (mov r8, r8)

0800189c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800189c:	2225      	movs	r2, #37	@ 0x25
{
 800189e:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a0:	5c81      	ldrb	r1, [r0, r2]
{
 80018a2:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a4:	2902      	cmp	r1, #2
 80018a6:	d006      	beq.n	80018b6 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a8:	3a21      	subs	r2, #33	@ 0x21
 80018aa:	63c2      	str	r2, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80018ac:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80018ae:	2224      	movs	r2, #36	@ 0x24
 80018b0:	2100      	movs	r1, #0
 80018b2:	5499      	strb	r1, [r3, r2]
}
 80018b4:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b6:	240e      	movs	r4, #14
 80018b8:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018ba:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018bc:	6808      	ldr	r0, [r1, #0]
 80018be:	43a0      	bics	r0, r4
 80018c0:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80018c2:	2001      	movs	r0, #1
 80018c4:	680c      	ldr	r4, [r1, #0]
 80018c6:	4384      	bics	r4, r0
 80018c8:	600c      	str	r4, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018ca:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80018cc:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80018ce:	4029      	ands	r1, r5
 80018d0:	0005      	movs	r5, r0
 80018d2:	408d      	lsls	r5, r1
 80018d4:	6065      	str	r5, [r4, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80018d6:	5498      	strb	r0, [r3, r2]
    return status;
 80018d8:	2000      	movs	r0, #0
 80018da:	e7e8      	b.n	80018ae <HAL_DMA_Abort+0x12>

080018dc <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018dc:	2325      	movs	r3, #37	@ 0x25
{
 80018de:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018e0:	5cc2      	ldrb	r2, [r0, r3]
 80018e2:	2a02      	cmp	r2, #2
 80018e4:	d003      	beq.n	80018ee <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e6:	3b21      	subs	r3, #33	@ 0x21
 80018e8:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 80018ea:	2001      	movs	r0, #1
}
 80018ec:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ee:	240e      	movs	r4, #14
 80018f0:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018f2:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f4:	6811      	ldr	r1, [r2, #0]
 80018f6:	43a1      	bics	r1, r4
 80018f8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80018fa:	2101      	movs	r1, #1
 80018fc:	6814      	ldr	r4, [r2, #0]
 80018fe:	438c      	bics	r4, r1
 8001900:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001902:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8001904:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8001906:	402a      	ands	r2, r5
 8001908:	000d      	movs	r5, r1
 800190a:	4095      	lsls	r5, r2
    __HAL_UNLOCK(hdma);
 800190c:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800190e:	6065      	str	r5, [r4, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001910:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001912:	2324      	movs	r3, #36	@ 0x24
 8001914:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8001916:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001918:	2b00      	cmp	r3, #0
 800191a:	d000      	beq.n	800191e <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 800191c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800191e:	2000      	movs	r0, #0
 8001920:	e7e4      	b.n	80018ec <HAL_DMA_Abort_IT+0x10>
 8001922:	46c0      	nop			@ (mov r8, r8)

08001924 <HAL_DMA_PollForTransfer>:
{
 8001924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001926:	464f      	mov	r7, r9
 8001928:	4646      	mov	r6, r8
 800192a:	46d6      	mov	lr, sl
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800192c:	2325      	movs	r3, #37	@ 0x25
{
 800192e:	b5c0      	push	{r6, r7, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001930:	5cc3      	ldrb	r3, [r0, r3]
{
 8001932:	0004      	movs	r4, r0
 8001934:	000e      	movs	r6, r1
 8001936:	0017      	movs	r7, r2
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001938:	b2dd      	uxtb	r5, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d00a      	beq.n	8001954 <HAL_DMA_PollForTransfer+0x30>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193e:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 8001940:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001942:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8001944:	3320      	adds	r3, #32
 8001946:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8001948:	2001      	movs	r0, #1
}
 800194a:	bce0      	pop	{r5, r6, r7}
 800194c:	46ba      	mov	sl, r7
 800194e:	46b1      	mov	r9, r6
 8001950:	46a8      	mov	r8, r5
 8001952:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (0U != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8001954:	6803      	ldr	r3, [r0, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	069b      	lsls	r3, r3, #26
 800195a:	d424      	bmi.n	80019a6 <HAL_DMA_PollForTransfer+0x82>
    temp = DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU);
 800195c:	221c      	movs	r2, #28
 800195e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001960:	4013      	ands	r3, r2
  if (HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8001962:	2900      	cmp	r1, #0
 8001964:	d123      	bne.n	80019ae <HAL_DMA_PollForTransfer+0x8a>
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU);
 8001966:	409d      	lsls	r5, r3
  tickstart = HAL_GetTick();
 8001968:	f7fe feae 	bl	80006c8 <HAL_GetTick>
    if((0U != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1cU)))))
 800196c:	221c      	movs	r2, #28
  tickstart = HAL_GetTick();
 800196e:	4680      	mov	r8, r0
    if((0U != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1cU)))))
 8001970:	2008      	movs	r0, #8
 8001972:	6c61      	ldr	r1, [r4, #68]	@ 0x44
  while(0U == (hdma->DmaBaseAddress->ISR & temp))
 8001974:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    if((0U != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1cU)))))
 8001976:	4011      	ands	r1, r2
 8001978:	4088      	lsls	r0, r1
 800197a:	1c7a      	adds	r2, r7, #1
 800197c:	d003      	beq.n	8001986 <HAL_DMA_PollForTransfer+0x62>
 800197e:	e027      	b.n	80019d0 <HAL_DMA_PollForTransfer+0xac>
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	4210      	tst	r0, r2
 8001984:	d115      	bne.n	80019b2 <HAL_DMA_PollForTransfer+0x8e>
  while(0U == (hdma->DmaBaseAddress->ISR & temp))
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4215      	tst	r5, r2
 800198a:	d0f9      	beq.n	8001980 <HAL_DMA_PollForTransfer+0x5c>
  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 800198c:	2e00      	cmp	r6, #0
 800198e:	d11b      	bne.n	80019c8 <HAL_DMA_PollForTransfer+0xa4>
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_TC1 << (hdma->ChannelIndex& 0x1cU));
 8001990:	2202      	movs	r2, #2
 8001992:	408a      	lsls	r2, r1
 8001994:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001996:	2325      	movs	r3, #37	@ 0x25
 8001998:	2201      	movs	r2, #1
 800199a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 800199c:	2324      	movs	r3, #36	@ 0x24
 800199e:	2200      	movs	r2, #0
  return HAL_OK;
 80019a0:	2000      	movs	r0, #0
  __HAL_UNLOCK(hdma);
 80019a2:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80019a4:	e7d1      	b.n	800194a <HAL_DMA_PollForTransfer+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80019a6:	2380      	movs	r3, #128	@ 0x80
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	63c3      	str	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80019ac:	e7cc      	b.n	8001948 <HAL_DMA_PollForTransfer+0x24>
    temp = DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU);
 80019ae:	2504      	movs	r5, #4
 80019b0:	e7d9      	b.n	8001966 <HAL_DMA_PollForTransfer+0x42>
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80019b2:	2201      	movs	r2, #1
 80019b4:	0010      	movs	r0, r2
 80019b6:	4088      	lsls	r0, r1
 80019b8:	6058      	str	r0, [r3, #4]
      hdma->State= HAL_DMA_STATE_READY;
 80019ba:	2325      	movs	r3, #37	@ 0x25
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019bc:	63e2      	str	r2, [r4, #60]	@ 0x3c
      hdma->State= HAL_DMA_STATE_READY;
 80019be:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 80019c0:	2200      	movs	r2, #0
 80019c2:	3b01      	subs	r3, #1
 80019c4:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80019c6:	e7bf      	b.n	8001948 <HAL_DMA_PollForTransfer+0x24>
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU));
 80019c8:	2204      	movs	r2, #4
 80019ca:	408a      	lsls	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	e7e5      	b.n	800199c <HAL_DMA_PollForTransfer+0x78>
    if((0U != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1cU)))))
 80019d0:	2208      	movs	r2, #8
 80019d2:	4691      	mov	r9, r2
 80019d4:	3214      	adds	r2, #20
 80019d6:	4692      	mov	sl, r2
 80019d8:	e010      	b.n	80019fc <HAL_DMA_PollForTransfer+0xd8>
 80019da:	464a      	mov	r2, r9
 80019dc:	408a      	lsls	r2, r1
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	4210      	tst	r0, r2
 80019e2:	d1e6      	bne.n	80019b2 <HAL_DMA_PollForTransfer+0x8e>
      if(((HAL_GetTick() - tickstart) > Timeout) ||  (Timeout == 0U))
 80019e4:	f7fe fe70 	bl	80006c8 <HAL_GetTick>
 80019e8:	4643      	mov	r3, r8
 80019ea:	1ac0      	subs	r0, r0, r3
 80019ec:	42b8      	cmp	r0, r7
 80019ee:	d809      	bhi.n	8001a04 <HAL_DMA_PollForTransfer+0xe0>
 80019f0:	2f00      	cmp	r7, #0
 80019f2:	d007      	beq.n	8001a04 <HAL_DMA_PollForTransfer+0xe0>
    if((0U != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1cU)))))
 80019f4:	4652      	mov	r2, sl
 80019f6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
  while(0U == (hdma->DmaBaseAddress->ISR & temp))
 80019f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    if((0U != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << (hdma->ChannelIndex& 0x1cU)))))
 80019fa:	4011      	ands	r1, r2
  while(0U == (hdma->DmaBaseAddress->ISR & temp))
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4215      	tst	r5, r2
 8001a00:	d0eb      	beq.n	80019da <HAL_DMA_PollForTransfer+0xb6>
 8001a02:	e7c3      	b.n	800198c <HAL_DMA_PollForTransfer+0x68>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a04:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_READY;
 8001a06:	2201      	movs	r2, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a08:	63e3      	str	r3, [r4, #60]	@ 0x3c
        hdma->State = HAL_DMA_STATE_READY;
 8001a0a:	3305      	adds	r3, #5
 8001a0c:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hdma);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	3b01      	subs	r3, #1
 8001a12:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8001a14:	e798      	b.n	8001948 <HAL_DMA_PollForTransfer+0x24>
 8001a16:	46c0      	nop			@ (mov r8, r8)

08001a18 <HAL_DMA_IRQHandler>:
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a18:	221c      	movs	r2, #28
{
 8001a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a1c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a1e:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a20:	4013      	ands	r3, r2
 8001a22:	3a18      	subs	r2, #24
 8001a24:	0011      	movs	r1, r2
 8001a26:	4099      	lsls	r1, r3
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a28:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001a2a:	6805      	ldr	r5, [r0, #0]
 8001a2c:	682f      	ldr	r7, [r5, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001a2e:	420c      	tst	r4, r1
 8001a30:	d00d      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x36>
 8001a32:	423a      	tst	r2, r7
 8001a34:	d00b      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a36:	682b      	ldr	r3, [r5, #0]
 8001a38:	069b      	lsls	r3, r3, #26
 8001a3a:	d402      	bmi.n	8001a42 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a3c:	682b      	ldr	r3, [r5, #0]
 8001a3e:	4393      	bics	r3, r2
 8001a40:	602b      	str	r3, [r5, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001a42:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001a44:	6071      	str	r1, [r6, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d000      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8001a4a:	4798      	blx	r3
}
 8001a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001a4e:	2202      	movs	r2, #2
 8001a50:	0011      	movs	r1, r2
 8001a52:	4099      	lsls	r1, r3
 8001a54:	420c      	tst	r4, r1
 8001a56:	d014      	beq.n	8001a82 <HAL_DMA_IRQHandler+0x6a>
 8001a58:	423a      	tst	r2, r7
 8001a5a:	d012      	beq.n	8001a82 <HAL_DMA_IRQHandler+0x6a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a5c:	682b      	ldr	r3, [r5, #0]
 8001a5e:	069b      	lsls	r3, r3, #26
 8001a60:	d406      	bmi.n	8001a70 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a62:	682b      	ldr	r3, [r5, #0]
 8001a64:	3208      	adds	r2, #8
 8001a66:	4393      	bics	r3, r2
 8001a68:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	2325      	movs	r3, #37	@ 0x25
 8001a6c:	3a09      	subs	r2, #9
 8001a6e:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001a70:	2324      	movs	r3, #36	@ 0x24
 8001a72:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a74:	6071      	str	r1, [r6, #4]
    __HAL_UNLOCK(hdma);
 8001a76:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 8001a78:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0e6      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8001a7e:	4798      	blx	r3
  return;
 8001a80:	e7e4      	b.n	8001a4c <HAL_DMA_IRQHandler+0x34>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001a82:	2208      	movs	r2, #8
 8001a84:	0011      	movs	r1, r2
 8001a86:	4099      	lsls	r1, r3
 8001a88:	420c      	tst	r4, r1
 8001a8a:	d0df      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x34>
 8001a8c:	423a      	tst	r2, r7
 8001a8e:	d0dd      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x34>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a90:	210e      	movs	r1, #14
 8001a92:	682a      	ldr	r2, [r5, #0]
 8001a94:	438a      	bics	r2, r1
 8001a96:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a98:	2201      	movs	r2, #1
 8001a9a:	0011      	movs	r1, r2
 8001a9c:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	2325      	movs	r3, #37	@ 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001aa0:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aa2:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001aa4:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8001aac:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0cc      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x34>
      hdma->XferErrorCallback(hdma);
 8001ab2:	4798      	blx	r3
  return;
 8001ab4:	e7ca      	b.n	8001a4c <HAL_DMA_IRQHandler+0x34>
 8001ab6:	46c0      	nop			@ (mov r8, r8)

08001ab8 <HAL_DMA_RegisterCallback>:
{
 8001ab8:	0003      	movs	r3, r0
  __HAL_LOCK(hdma);
 8001aba:	2024      	movs	r0, #36	@ 0x24
 8001abc:	5c18      	ldrb	r0, [r3, r0]
{
 8001abe:	b510      	push	{r4, lr}
  __HAL_LOCK(hdma);
 8001ac0:	2801      	cmp	r0, #1
 8001ac2:	d016      	beq.n	8001af2 <HAL_DMA_RegisterCallback+0x3a>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ac4:	2025      	movs	r0, #37	@ 0x25
 8001ac6:	5c1c      	ldrb	r4, [r3, r0]
 8001ac8:	b2e0      	uxtb	r0, r4
 8001aca:	2c01      	cmp	r4, #1
 8001acc:	d004      	beq.n	8001ad8 <HAL_DMA_RegisterCallback+0x20>
 8001ace:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 8001ad0:	2224      	movs	r2, #36	@ 0x24
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	5499      	strb	r1, [r3, r2]
}
 8001ad6:	bd10      	pop	{r4, pc}
    switch (CallbackID)
 8001ad8:	2902      	cmp	r1, #2
 8001ada:	d00f      	beq.n	8001afc <HAL_DMA_RegisterCallback+0x44>
 8001adc:	d804      	bhi.n	8001ae8 <HAL_DMA_RegisterCallback+0x30>
 8001ade:	2900      	cmp	r1, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_DMA_RegisterCallback+0x3e>
  HAL_StatusTypeDef status = HAL_OK;
 8001ae2:	2000      	movs	r0, #0
           hdma->XferHalfCpltCallback = pCallback;
 8001ae4:	631a      	str	r2, [r3, #48]	@ 0x30
           break;
 8001ae6:	e7f3      	b.n	8001ad0 <HAL_DMA_RegisterCallback+0x18>
    switch (CallbackID)
 8001ae8:	2903      	cmp	r1, #3
 8001aea:	d1f1      	bne.n	8001ad0 <HAL_DMA_RegisterCallback+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8001aec:	2000      	movs	r0, #0
           hdma->XferAbortCallback = pCallback;
 8001aee:	639a      	str	r2, [r3, #56]	@ 0x38
           break;
 8001af0:	e7ee      	b.n	8001ad0 <HAL_DMA_RegisterCallback+0x18>
  __HAL_LOCK(hdma);
 8001af2:	2002      	movs	r0, #2
 8001af4:	e7ef      	b.n	8001ad6 <HAL_DMA_RegisterCallback+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 8001af6:	2000      	movs	r0, #0
           hdma->XferCpltCallback = pCallback;
 8001af8:	62da      	str	r2, [r3, #44]	@ 0x2c
           break;
 8001afa:	e7e9      	b.n	8001ad0 <HAL_DMA_RegisterCallback+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8001afc:	2000      	movs	r0, #0
           hdma->XferErrorCallback = pCallback;
 8001afe:	635a      	str	r2, [r3, #52]	@ 0x34
           break;
 8001b00:	e7e6      	b.n	8001ad0 <HAL_DMA_RegisterCallback+0x18>
 8001b02:	46c0      	nop			@ (mov r8, r8)

08001b04 <HAL_DMA_UnRegisterCallback>:
  __HAL_LOCK(hdma);
 8001b04:	2224      	movs	r2, #36	@ 0x24
{
 8001b06:	0003      	movs	r3, r0
  __HAL_LOCK(hdma);
 8001b08:	5c80      	ldrb	r0, [r0, r2]
 8001b0a:	2801      	cmp	r0, #1
 8001b0c:	d011      	beq.n	8001b32 <HAL_DMA_UnRegisterCallback+0x2e>
 8001b0e:	2001      	movs	r0, #1
 8001b10:	5498      	strb	r0, [r3, r2]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b12:	3201      	adds	r2, #1
 8001b14:	5c9a      	ldrb	r2, [r3, r2]
 8001b16:	b2d0      	uxtb	r0, r2
 8001b18:	2a01      	cmp	r2, #1
 8001b1a:	d004      	beq.n	8001b26 <HAL_DMA_UnRegisterCallback+0x22>
 8001b1c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hdma);
 8001b1e:	2224      	movs	r2, #36	@ 0x24
 8001b20:	2100      	movs	r1, #0
 8001b22:	5499      	strb	r1, [r3, r2]
}
 8001b24:	4770      	bx	lr
    switch (CallbackID)
 8001b26:	2904      	cmp	r1, #4
 8001b28:	d8f9      	bhi.n	8001b1e <HAL_DMA_UnRegisterCallback+0x1a>
 8001b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b64 <HAL_DMA_UnRegisterCallback+0x60>)
 8001b2c:	0089      	lsls	r1, r1, #2
 8001b2e:	5852      	ldr	r2, [r2, r1]
 8001b30:	4697      	mov	pc, r2
  __HAL_LOCK(hdma);
 8001b32:	2002      	movs	r0, #2
 8001b34:	e7f6      	b.n	8001b24 <HAL_DMA_UnRegisterCallback+0x20>
           hdma->XferAbortCallback = NULL;
 8001b36:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b38:	2000      	movs	r0, #0
           hdma->XferAbortCallback = NULL;
 8001b3a:	639a      	str	r2, [r3, #56]	@ 0x38
           break;
 8001b3c:	e7ef      	b.n	8001b1e <HAL_DMA_UnRegisterCallback+0x1a>
           hdma->XferCpltCallback = NULL;
 8001b3e:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b40:	2000      	movs	r0, #0
           hdma->XferCpltCallback = NULL;
 8001b42:	62da      	str	r2, [r3, #44]	@ 0x2c
           hdma->XferHalfCpltCallback = NULL;
 8001b44:	631a      	str	r2, [r3, #48]	@ 0x30
           hdma->XferErrorCallback = NULL;
 8001b46:	635a      	str	r2, [r3, #52]	@ 0x34
           hdma->XferAbortCallback = NULL;
 8001b48:	639a      	str	r2, [r3, #56]	@ 0x38
           break;
 8001b4a:	e7e8      	b.n	8001b1e <HAL_DMA_UnRegisterCallback+0x1a>
           hdma->XferHalfCpltCallback = NULL;
 8001b4c:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b4e:	2000      	movs	r0, #0
           hdma->XferHalfCpltCallback = NULL;
 8001b50:	631a      	str	r2, [r3, #48]	@ 0x30
           break;
 8001b52:	e7e4      	b.n	8001b1e <HAL_DMA_UnRegisterCallback+0x1a>
           hdma->XferErrorCallback = NULL;
 8001b54:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b56:	2000      	movs	r0, #0
           hdma->XferErrorCallback = NULL;
 8001b58:	635a      	str	r2, [r3, #52]	@ 0x34
           break;
 8001b5a:	e7e0      	b.n	8001b1e <HAL_DMA_UnRegisterCallback+0x1a>
           hdma->XferCpltCallback = NULL;
 8001b5c:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b5e:	2000      	movs	r0, #0
           hdma->XferCpltCallback = NULL;
 8001b60:	62da      	str	r2, [r3, #44]	@ 0x2c
           break;
 8001b62:	e7dc      	b.n	8001b1e <HAL_DMA_UnRegisterCallback+0x1a>
 8001b64:	08007c0c 	.word	0x08007c0c

08001b68 <HAL_DMA_GetState>:
  return hdma->State;
 8001b68:	2325      	movs	r3, #37	@ 0x25
 8001b6a:	5cc0      	ldrb	r0, [r0, r3]
 8001b6c:	b2c0      	uxtb	r0, r0
}
 8001b6e:	4770      	bx	lr

08001b70 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001b70:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
}
 8001b72:	4770      	bx	lr

08001b74 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8001b74:	b570      	push	{r4, r5, r6, lr}
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8001b76:	2800      	cmp	r0, #0
 8001b78:	d048      	beq.n	8001c0c <HAL_EXTI_SetConfigLine+0x98>
 8001b7a:	2900      	cmp	r1, #0
 8001b7c:	d046      	beq.n	8001c0c <HAL_EXTI_SetConfigLine+0x98>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8001b7e:	680d      	ldr	r5, [r1, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8001b80:	231f      	movs	r3, #31
  hexti->Line = pExtiConfig->Line;
 8001b82:	6005      	str	r5, [r0, #0]
  maskline = (1uL << linepos);
 8001b84:	2001      	movs	r0, #1
 8001b86:	0002      	movs	r2, r0
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8001b88:	402b      	ands	r3, r5
  maskline = (1uL << linepos);
 8001b8a:	409a      	lsls	r2, r3

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8001b8c:	01ac      	lsls	r4, r5, #6
 8001b8e:	d524      	bpl.n	8001bda <HAL_EXTI_SetConfigLine+0x66>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8001b90:	688c      	ldr	r4, [r1, #8]
    {
      EXTI->RTSR |= maskline;
 8001b92:	4e24      	ldr	r6, [pc, #144]	@ (8001c24 <HAL_EXTI_SetConfigLine+0xb0>)
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8001b94:	4220      	tst	r0, r4
 8001b96:	d13b      	bne.n	8001c10 <HAL_EXTI_SetConfigLine+0x9c>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8001b98:	68b0      	ldr	r0, [r6, #8]
 8001b9a:	4390      	bics	r0, r2
 8001b9c:	60b0      	str	r0, [r6, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8001b9e:	07a4      	lsls	r4, r4, #30
 8001ba0:	d53b      	bpl.n	8001c1a <HAL_EXTI_SetConfigLine+0xa6>
    {
      EXTI->FTSR |= maskline;
 8001ba2:	4c20      	ldr	r4, [pc, #128]	@ (8001c24 <HAL_EXTI_SetConfigLine+0xb0>)
 8001ba4:	68e0      	ldr	r0, [r4, #12]
 8001ba6:	4310      	orrs	r0, r2
 8001ba8:	60e0      	str	r0, [r4, #12]
      EXTI->FTSR &= ~maskline;
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8001baa:	20c0      	movs	r0, #192	@ 0xc0
 8001bac:	002c      	movs	r4, r5
 8001bae:	04c0      	lsls	r0, r0, #19
 8001bb0:	4004      	ands	r4, r0
 8001bb2:	4284      	cmp	r4, r0
 8001bb4:	d111      	bne.n	8001bda <HAL_EXTI_SetConfigLine+0x66>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8001bb6:	481c      	ldr	r0, [pc, #112]	@ (8001c28 <HAL_EXTI_SetConfigLine+0xb4>)
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	4684      	mov	ip, r0
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	4028      	ands	r0, r5
 8001bc0:	250f      	movs	r5, #15
 8001bc2:	0080      	lsls	r0, r0, #2
 8001bc4:	4085      	lsls	r5, r0
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4463      	add	r3, ip
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8001bca:	689c      	ldr	r4, [r3, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001bcc:	43ac      	bics	r4, r5
 8001bce:	0025      	movs	r5, r4
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001bd0:	68cc      	ldr	r4, [r1, #12]
 8001bd2:	4084      	lsls	r4, r0
 8001bd4:	0020      	movs	r0, r4
 8001bd6:	4328      	orrs	r0, r5
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8001bd8:	6098      	str	r0, [r3, #8]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8001bda:	684b      	ldr	r3, [r1, #4]
  {
    EXTI->IMR |= maskline;
 8001bdc:	4811      	ldr	r0, [pc, #68]	@ (8001c24 <HAL_EXTI_SetConfigLine+0xb0>)
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8001bde:	07d9      	lsls	r1, r3, #31
 8001be0:	d40a      	bmi.n	8001bf8 <HAL_EXTI_SetConfigLine+0x84>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 8001be2:	6801      	ldr	r1, [r0, #0]
 8001be4:	4391      	bics	r1, r2
 8001be6:	6001      	str	r1, [r0, #0]

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
  {
    EXTI->EMR |= maskline;
 8001be8:	490e      	ldr	r1, [pc, #56]	@ (8001c24 <HAL_EXTI_SetConfigLine+0xb0>)
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8001bea:	079b      	lsls	r3, r3, #30
 8001bec:	d50a      	bpl.n	8001c04 <HAL_EXTI_SetConfigLine+0x90>
    EXTI->EMR |= maskline;
 8001bee:	684b      	ldr	r3, [r1, #4]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
  else
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
 8001bf4:	2000      	movs	r0, #0
}
 8001bf6:	bd70      	pop	{r4, r5, r6, pc}
    EXTI->IMR |= maskline;
 8001bf8:	6801      	ldr	r1, [r0, #0]
 8001bfa:	4311      	orrs	r1, r2
 8001bfc:	6001      	str	r1, [r0, #0]
    EXTI->EMR |= maskline;
 8001bfe:	4909      	ldr	r1, [pc, #36]	@ (8001c24 <HAL_EXTI_SetConfigLine+0xb0>)
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8001c00:	079b      	lsls	r3, r3, #30
 8001c02:	d4f4      	bmi.n	8001bee <HAL_EXTI_SetConfigLine+0x7a>
    EXTI->EMR &= ~maskline;
 8001c04:	684b      	ldr	r3, [r1, #4]
 8001c06:	4393      	bics	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
 8001c0a:	e7f3      	b.n	8001bf4 <HAL_EXTI_SetConfigLine+0x80>
    return HAL_ERROR;
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	e7f2      	b.n	8001bf6 <HAL_EXTI_SetConfigLine+0x82>
      EXTI->RTSR |= maskline;
 8001c10:	68b0      	ldr	r0, [r6, #8]
 8001c12:	4310      	orrs	r0, r2
 8001c14:	60b0      	str	r0, [r6, #8]
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8001c16:	07a4      	lsls	r4, r4, #30
 8001c18:	d4c3      	bmi.n	8001ba2 <HAL_EXTI_SetConfigLine+0x2e>
      EXTI->FTSR &= ~maskline;
 8001c1a:	4c02      	ldr	r4, [pc, #8]	@ (8001c24 <HAL_EXTI_SetConfigLine+0xb0>)
 8001c1c:	68e0      	ldr	r0, [r4, #12]
 8001c1e:	4390      	bics	r0, r2
 8001c20:	60e0      	str	r0, [r4, #12]
 8001c22:	e7c2      	b.n	8001baa <HAL_EXTI_SetConfigLine+0x36>
 8001c24:	40010400 	.word	0x40010400
 8001c28:	40010000 	.word	0x40010000

08001c2c <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8001c2c:	b570      	push	{r4, r5, r6, lr}
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	d02c      	beq.n	8001c8c <HAL_EXTI_GetConfigLine+0x60>
 8001c32:	2900      	cmp	r1, #0
 8001c34:	d02a      	beq.n	8001c8c <HAL_EXTI_GetConfigLine+0x60>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8001c36:	6804      	ldr	r4, [r0, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8001c38:	201f      	movs	r0, #31
  maskline = (1uL << linepos);
 8001c3a:	2201      	movs	r2, #1
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8001c3c:	4020      	ands	r0, r4
  maskline = (1uL << linepos);
 8001c3e:	4082      	lsls	r2, r0

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 8001c40:	4d1a      	ldr	r5, [pc, #104]	@ (8001cac <HAL_EXTI_GetConfigLine+0x80>)
  pExtiConfig->Line = hexti->Line;
 8001c42:	600c      	str	r4, [r1, #0]
  if ((EXTI->IMR & maskline) != 0x00u)
 8001c44:	682b      	ldr	r3, [r5, #0]
 8001c46:	4013      	ands	r3, r2
 8001c48:	1e5e      	subs	r6, r3, #1
 8001c4a:	41b3      	sbcs	r3, r6
 8001c4c:	604b      	str	r3, [r1, #4]
    pExtiConfig->Mode = EXTI_MODE_NONE;
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 8001c4e:	686d      	ldr	r5, [r5, #4]
 8001c50:	422a      	tst	r2, r5
 8001c52:	d002      	beq.n	8001c5a <HAL_EXTI_GetConfigLine+0x2e>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8001c54:	2502      	movs	r5, #2
 8001c56:	432b      	orrs	r3, r5
 8001c58:	604b      	str	r3, [r1, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	608b      	str	r3, [r1, #8]
  pExtiConfig->GPIOSel = 0x00u;
 8001c5e:	60cb      	str	r3, [r1, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8001c60:	01a3      	lsls	r3, r4, #6
 8001c62:	d511      	bpl.n	8001c88 <HAL_EXTI_GetConfigLine+0x5c>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 8001c64:	4d11      	ldr	r5, [pc, #68]	@ (8001cac <HAL_EXTI_GetConfigLine+0x80>)
 8001c66:	68ab      	ldr	r3, [r5, #8]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	1e5e      	subs	r6, r3, #1
 8001c6c:	41b3      	sbcs	r3, r6
 8001c6e:	608b      	str	r3, [r1, #8]
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 8001c70:	68ed      	ldr	r5, [r5, #12]
 8001c72:	422a      	tst	r2, r5
 8001c74:	d002      	beq.n	8001c7c <HAL_EXTI_GetConfigLine+0x50>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8001c76:	2202      	movs	r2, #2
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8001c7c:	23c0      	movs	r3, #192	@ 0xc0
 8001c7e:	0022      	movs	r2, r4
 8001c80:	04db      	lsls	r3, r3, #19
 8001c82:	401a      	ands	r2, r3
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d003      	beq.n	8001c90 <HAL_EXTI_GetConfigLine+0x64>
      regval = SYSCFG->EXTICR[linepos >> 2u];
      pExtiConfig->GPIOSel = (regval >> (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u))) & SYSCFG_EXTICR1_EXTI0;
    }
  }

  return HAL_OK;
 8001c88:	2000      	movs	r0, #0
 8001c8a:	e000      	b.n	8001c8e <HAL_EXTI_GetConfigLine+0x62>
    return HAL_ERROR;
 8001c8c:	2001      	movs	r0, #1
}
 8001c8e:	bd70      	pop	{r4, r5, r6, pc}
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8001c90:	0880      	lsrs	r0, r0, #2
 8001c92:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <HAL_EXTI_GetConfigLine+0x84>)
 8001c94:	3002      	adds	r0, #2
 8001c96:	0080      	lsls	r0, r0, #2
 8001c98:	58c2      	ldr	r2, [r0, r3]
      pExtiConfig->GPIOSel = (regval >> (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u))) & SYSCFG_EXTICR1_EXTI0;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	4023      	ands	r3, r4
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	40da      	lsrs	r2, r3
 8001ca2:	230f      	movs	r3, #15
 8001ca4:	4013      	ands	r3, r2
  return HAL_OK;
 8001ca6:	2000      	movs	r0, #0
      pExtiConfig->GPIOSel = (regval >> (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u))) & SYSCFG_EXTICR1_EXTI0;
 8001ca8:	60cb      	str	r3, [r1, #12]
 8001caa:	e7f0      	b.n	8001c8e <HAL_EXTI_GetConfigLine+0x62>
 8001cac:	40010400 	.word	0x40010400
 8001cb0:	40010000 	.word	0x40010000

08001cb4 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 8001cb4:	b530      	push	{r4, r5, lr}
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	d02a      	beq.n	8001d10 <HAL_EXTI_ClearConfigLine+0x5c>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8001cba:	211f      	movs	r1, #31
  maskline = (1uL << linepos);
 8001cbc:	2201      	movs	r2, #1
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8001cbe:	6804      	ldr	r4, [r0, #0]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 8001cc0:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <HAL_EXTI_ClearConfigLine+0x60>)
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8001cc2:	4021      	ands	r1, r4
  maskline = (1uL << linepos);
 8001cc4:	408a      	lsls	r2, r1
  EXTI->IMR = (EXTI->IMR & ~maskline);
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	43d5      	mvns	r5, r2
 8001cca:	4390      	bics	r0, r2
 8001ccc:	6018      	str	r0, [r3, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 8001cce:	6858      	ldr	r0, [r3, #4]
 8001cd0:	4390      	bics	r0, r2
 8001cd2:	6058      	str	r0, [r3, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8001cd4:	01a2      	lsls	r2, r4, #6
 8001cd6:	d401      	bmi.n	8001cdc <HAL_EXTI_ClearConfigLine+0x28>
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
      SYSCFG->EXTICR[linepos >> 2u] = regval;
    }
  }

  return HAL_OK;
 8001cd8:	2000      	movs	r0, #0
}
 8001cda:	bd30      	pop	{r4, r5, pc}
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	402a      	ands	r2, r5
 8001ce0:	609a      	str	r2, [r3, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	402a      	ands	r2, r5
 8001ce6:	60da      	str	r2, [r3, #12]
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 8001ce8:	23c0      	movs	r3, #192	@ 0xc0
 8001cea:	0022      	movs	r2, r4
 8001cec:	04db      	lsls	r3, r3, #19
 8001cee:	401a      	ands	r2, r3
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1f1      	bne.n	8001cd8 <HAL_EXTI_ClearConfigLine+0x24>
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8001cf4:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <HAL_EXTI_ClearConfigLine+0x64>)
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001cf6:	200f      	movs	r0, #15
 8001cf8:	469c      	mov	ip, r3
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	4023      	ands	r3, r4
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4098      	lsls	r0, r3
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8001d02:	0889      	lsrs	r1, r1, #2
 8001d04:	0089      	lsls	r1, r1, #2
 8001d06:	4461      	add	r1, ip
 8001d08:	688a      	ldr	r2, [r1, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001d0a:	4382      	bics	r2, r0
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8001d0c:	608a      	str	r2, [r1, #8]
 8001d0e:	e7e3      	b.n	8001cd8 <HAL_EXTI_ClearConfigLine+0x24>
    return HAL_ERROR;
 8001d10:	2001      	movs	r0, #1
 8001d12:	e7e2      	b.n	8001cda <HAL_EXTI_ClearConfigLine+0x26>
 8001d14:	40010400 	.word	0x40010400
 8001d18:	40010000 	.word	0x40010000

08001d1c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001d1c:	0003      	movs	r3, r0
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
      break;

    default:
      status = HAL_ERROR;
 8001d1e:	2001      	movs	r0, #1
  switch (CallbackID)
 8001d20:	2900      	cmp	r1, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_EXTI_RegisterCallback+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8001d24:	2000      	movs	r0, #0
      hexti->PendingCallback = pPendingCbfn;
 8001d26:	605a      	str	r2, [r3, #4]
      break;
  }

  return status;
}
 8001d28:	4770      	bx	lr
 8001d2a:	46c0      	nop			@ (mov r8, r8)

08001d2c <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	d002      	beq.n	8001d36 <HAL_EXTI_GetHandle+0xa>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001d30:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8001d32:	2000      	movs	r0, #0
  }
}
 8001d34:	4770      	bx	lr
    return HAL_ERROR;
 8001d36:	2001      	movs	r0, #1
 8001d38:	e7fc      	b.n	8001d34 <HAL_EXTI_GetHandle+0x8>
 8001d3a:	46c0      	nop			@ (mov r8, r8)

08001d3c <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001d3c:	231f      	movs	r3, #31
 8001d3e:	6802      	ldr	r2, [r0, #0]
{
 8001d40:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001d42:	401a      	ands	r2, r3
 8001d44:	3b1e      	subs	r3, #30
 8001d46:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8001d48:	4a04      	ldr	r2, [pc, #16]	@ (8001d5c <HAL_EXTI_IRQHandler+0x20>)
 8001d4a:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8001d4c:	420b      	tst	r3, r1
 8001d4e:	d004      	beq.n	8001d5a <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001d50:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001d52:	6843      	ldr	r3, [r0, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d000      	beq.n	8001d5a <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8001d58:	4798      	blx	r3
    }
  }
}
 8001d5a:	bd10      	pop	{r4, pc}
 8001d5c:	40010400 	.word	0x40010400

08001d60 <HAL_EXTI_GetPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8001d60:	221f      	movs	r2, #31
 8001d62:	6803      	ldr	r3, [r0, #0]
 8001d64:	4013      	ands	r3, r2
  maskline = (1uL << linepos);

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 8001d66:	4a03      	ldr	r2, [pc, #12]	@ (8001d74 <HAL_EXTI_GetPending+0x14>)
 8001d68:	6950      	ldr	r0, [r2, #20]
  maskline = (1uL << linepos);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	409a      	lsls	r2, r3
  regval = ((EXTI->PR & maskline) >> linepos);
 8001d6e:	4010      	ands	r0, r2
 8001d70:	40d8      	lsrs	r0, r3
  return regval;
}
 8001d72:	4770      	bx	lr
 8001d74:	40010400 	.word	0x40010400

08001d78 <HAL_EXTI_ClearPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001d78:	231f      	movs	r3, #31
 8001d7a:	6802      	ldr	r2, [r0, #0]
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	3b1e      	subs	r3, #30
 8001d80:	4093      	lsls	r3, r2

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8001d82:	4a01      	ldr	r2, [pc, #4]	@ (8001d88 <HAL_EXTI_ClearPending+0x10>)
 8001d84:	6153      	str	r3, [r2, #20]
}
 8001d86:	4770      	bx	lr
 8001d88:	40010400 	.word	0x40010400

08001d8c <HAL_EXTI_GenerateSWI>:
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001d8c:	231f      	movs	r3, #31
 8001d8e:	6802      	ldr	r2, [r0, #0]
 8001d90:	401a      	ands	r2, r3
 8001d92:	3b1e      	subs	r3, #30
 8001d94:	4093      	lsls	r3, r2

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8001d96:	4a01      	ldr	r2, [pc, #4]	@ (8001d9c <HAL_EXTI_GenerateSWI+0x10>)
 8001d98:	6113      	str	r3, [r2, #16]
}
 8001d9a:	4770      	bx	lr
 8001d9c:	40010400 	.word	0x40010400

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da2:	46de      	mov	lr, fp
 8001da4:	4657      	mov	r7, sl
 8001da6:	464e      	mov	r6, r9
 8001da8:	4645      	mov	r5, r8
 8001daa:	b5e0      	push	{r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001dac:	680c      	ldr	r4, [r1, #0]
{
 8001dae:	468b      	mov	fp, r1
  uint32_t position = 0x00U;
 8001db0:	2300      	movs	r3, #0
{
 8001db2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 8001db4:	2c00      	cmp	r4, #0
 8001db6:	d067      	beq.n	8001e88 <HAL_GPIO_Init+0xe8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001db8:	2201      	movs	r2, #1
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	4694      	mov	ip, r2
 8001dbe:	4022      	ands	r2, r4
 8001dc0:	4692      	mov	sl, r2

    if (iocurrent)
 8001dc2:	4662      	mov	r2, ip
 8001dc4:	4214      	tst	r4, r2
 8001dc6:	d05b      	beq.n	8001e80 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001dc8:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dca:	465a      	mov	r2, fp
 8001dcc:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001dce:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dd0:	6855      	ldr	r5, [r2, #4]
 8001dd2:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001dd4:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dd6:	402a      	ands	r2, r5
 8001dd8:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001dda:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ddc:	2e01      	cmp	r6, #1
 8001dde:	d95a      	bls.n	8001e96 <HAL_GPIO_Init+0xf6>
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de0:	2a03      	cmp	r2, #3
 8001de2:	d000      	beq.n	8001de6 <HAL_GPIO_Init+0x46>
 8001de4:	e0ac      	b.n	8001f40 <HAL_GPIO_Init+0x1a0>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de6:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8001de8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dea:	9900      	ldr	r1, [sp, #0]
 8001dec:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dee:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8001df0:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df2:	22c0      	movs	r2, #192	@ 0xc0
 8001df4:	0292      	lsls	r2, r2, #10
 8001df6:	4215      	tst	r5, r2
 8001df8:	d042      	beq.n	8001e80 <HAL_GPIO_Init+0xe0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	2601      	movs	r6, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001dfc:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	495d      	ldr	r1, [pc, #372]	@ (8001f74 <HAL_GPIO_Init+0x1d4>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e00:	401f      	ands	r7, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e04:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	4332      	orrs	r2, r6
 8001e08:	634a      	str	r2, [r1, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0a:	495b      	ldr	r1, [pc, #364]	@ (8001f78 <HAL_GPIO_Init+0x1d8>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e0c:	360e      	adds	r6, #14
 8001e0e:	468c      	mov	ip, r1
 8001e10:	40be      	lsls	r6, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e12:	089a      	lsrs	r2, r3, #2
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	4462      	add	r2, ip
 8001e18:	6891      	ldr	r1, [r2, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e1a:	43b1      	bics	r1, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001e1c:	26a0      	movs	r6, #160	@ 0xa0
 8001e1e:	05f6      	lsls	r6, r6, #23
 8001e20:	42b0      	cmp	r0, r6
 8001e22:	d00e      	beq.n	8001e42 <HAL_GPIO_Init+0xa2>
 8001e24:	4e55      	ldr	r6, [pc, #340]	@ (8001f7c <HAL_GPIO_Init+0x1dc>)
 8001e26:	42b0      	cmp	r0, r6
 8001e28:	d100      	bne.n	8001e2c <HAL_GPIO_Init+0x8c>
 8001e2a:	e09a      	b.n	8001f62 <HAL_GPIO_Init+0x1c2>
 8001e2c:	4e54      	ldr	r6, [pc, #336]	@ (8001f80 <HAL_GPIO_Init+0x1e0>)
 8001e2e:	42b0      	cmp	r0, r6
 8001e30:	d100      	bne.n	8001e34 <HAL_GPIO_Init+0x94>
 8001e32:	e09a      	b.n	8001f6a <HAL_GPIO_Init+0x1ca>
 8001e34:	4e53      	ldr	r6, [pc, #332]	@ (8001f84 <HAL_GPIO_Init+0x1e4>)
 8001e36:	42b0      	cmp	r0, r6
 8001e38:	d100      	bne.n	8001e3c <HAL_GPIO_Init+0x9c>
 8001e3a:	e08e      	b.n	8001f5a <HAL_GPIO_Init+0x1ba>
 8001e3c:	2606      	movs	r6, #6
 8001e3e:	40be      	lsls	r6, r7
 8001e40:	4331      	orrs	r1, r6
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e42:	2680      	movs	r6, #128	@ 0x80
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e44:	6091      	str	r1, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	4651      	mov	r1, sl
        temp = EXTI->RTSR;
 8001e48:	4a4f      	ldr	r2, [pc, #316]	@ (8001f88 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4a:	0376      	lsls	r6, r6, #13
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR;
 8001e4e:	6892      	ldr	r2, [r2, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e50:	4235      	tst	r5, r6
 8001e52:	d000      	beq.n	8001e56 <HAL_GPIO_Init+0xb6>
 8001e54:	e071      	b.n	8001f3a <HAL_GPIO_Init+0x19a>
        temp &= ~((uint32_t)iocurrent);
 8001e56:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001e58:	4e4b      	ldr	r6, [pc, #300]	@ (8001f88 <HAL_GPIO_Init+0x1e8>)
 8001e5a:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001e5c:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e5e:	02af      	lsls	r7, r5, #10
 8001e60:	d468      	bmi.n	8001f34 <HAL_GPIO_Init+0x194>
        temp &= ~((uint32_t)iocurrent);
 8001e62:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001e64:	4e48      	ldr	r6, [pc, #288]	@ (8001f88 <HAL_GPIO_Init+0x1e8>)
 8001e66:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8001e68:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e6a:	03af      	lsls	r7, r5, #14
 8001e6c:	d45f      	bmi.n	8001f2e <HAL_GPIO_Init+0x18e>
        temp &= ~((uint32_t)iocurrent);
 8001e6e:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001e70:	4e45      	ldr	r6, [pc, #276]	@ (8001f88 <HAL_GPIO_Init+0x1e8>)
 8001e72:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e74:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e76:	03ed      	lsls	r5, r5, #15
 8001e78:	d455      	bmi.n	8001f26 <HAL_GPIO_Init+0x186>
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001e7c:	4942      	ldr	r1, [pc, #264]	@ (8001f88 <HAL_GPIO_Init+0x1e8>)
 8001e7e:	600a      	str	r2, [r1, #0]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e80:	0022      	movs	r2, r4
      }
    }
    position++;
 8001e82:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e84:	40da      	lsrs	r2, r3
 8001e86:	d197      	bne.n	8001db8 <HAL_GPIO_Init+0x18>
  }
}
 8001e88:	b003      	add	sp, #12
 8001e8a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e8c:	46bb      	mov	fp, r7
 8001e8e:	46b2      	mov	sl, r6
 8001e90:	46a9      	mov	r9, r5
 8001e92:	46a0      	mov	r8, r4
 8001e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8001e96:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e98:	000e      	movs	r6, r1
 8001e9a:	9900      	ldr	r1, [sp, #0]
 8001e9c:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9e:	4659      	mov	r1, fp
 8001ea0:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001ea2:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea4:	000e      	movs	r6, r1
 8001ea6:	40be      	lsls	r6, r7
 8001ea8:	46b0      	mov	r8, r6
 8001eaa:	464e      	mov	r6, r9
 8001eac:	4641      	mov	r1, r8
 8001eae:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8001eb0:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001eb2:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb4:	000e      	movs	r6, r1
 8001eb6:	4661      	mov	r1, ip
 8001eb8:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eba:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ebc:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ebe:	000e      	movs	r6, r1
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	400e      	ands	r6, r1
 8001ec4:	409e      	lsls	r6, r3
 8001ec6:	46b4      	mov	ip, r6
 8001ec8:	4646      	mov	r6, r8
 8001eca:	4661      	mov	r1, ip
 8001ecc:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 8001ece:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8001ed0:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ed2:	000e      	movs	r6, r1
 8001ed4:	9900      	ldr	r1, [sp, #0]
 8001ed6:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ed8:	4659      	mov	r1, fp
 8001eda:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001edc:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ede:	000e      	movs	r6, r1
 8001ee0:	40be      	lsls	r6, r7
 8001ee2:	46b4      	mov	ip, r6
 8001ee4:	4646      	mov	r6, r8
 8001ee6:	4661      	mov	r1, ip
 8001ee8:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 8001eea:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eec:	2a02      	cmp	r2, #2
 8001eee:	d000      	beq.n	8001ef2 <HAL_GPIO_Init+0x152>
 8001ef0:	e779      	b.n	8001de6 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 8001ef2:	08d9      	lsrs	r1, r3, #3
 8001ef4:	0089      	lsls	r1, r1, #2
 8001ef6:	468c      	mov	ip, r1
 8001ef8:	4484      	add	ip, r0
 8001efa:	4661      	mov	r1, ip
 8001efc:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001efe:	2107      	movs	r1, #7
 8001f00:	4019      	ands	r1, r3
 8001f02:	0089      	lsls	r1, r1, #2
 8001f04:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3U];
 8001f06:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f08:	210f      	movs	r1, #15
 8001f0a:	4646      	mov	r6, r8
 8001f0c:	40b1      	lsls	r1, r6
 8001f0e:	9e01      	ldr	r6, [sp, #4]
 8001f10:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001f12:	4659      	mov	r1, fp
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f14:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001f16:	4646      	mov	r6, r8
 8001f18:	6909      	ldr	r1, [r1, #16]
 8001f1a:	40b1      	lsls	r1, r6
 8001f1c:	9e01      	ldr	r6, [sp, #4]
 8001f1e:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 8001f20:	4661      	mov	r1, ip
 8001f22:	620e      	str	r6, [r1, #32]
 8001f24:	e75f      	b.n	8001de6 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8001f26:	4651      	mov	r1, sl
 8001f28:	4311      	orrs	r1, r2
 8001f2a:	000a      	movs	r2, r1
 8001f2c:	e7a6      	b.n	8001e7c <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8001f2e:	4656      	mov	r6, sl
 8001f30:	4332      	orrs	r2, r6
 8001f32:	e79d      	b.n	8001e70 <HAL_GPIO_Init+0xd0>
          temp |= iocurrent;
 8001f34:	4656      	mov	r6, sl
 8001f36:	4332      	orrs	r2, r6
 8001f38:	e794      	b.n	8001e64 <HAL_GPIO_Init+0xc4>
          temp |= iocurrent;
 8001f3a:	4656      	mov	r6, sl
 8001f3c:	4332      	orrs	r2, r6
 8001f3e:	e78b      	b.n	8001e58 <HAL_GPIO_Init+0xb8>
 8001f40:	000e      	movs	r6, r1
        temp = GPIOx->PUPDR;
 8001f42:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f44:	4031      	ands	r1, r6
 8001f46:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f48:	4659      	mov	r1, fp
 8001f4a:	6889      	ldr	r1, [r1, #8]
 8001f4c:	40b9      	lsls	r1, r7
 8001f4e:	468c      	mov	ip, r1
 8001f50:	4641      	mov	r1, r8
 8001f52:	4666      	mov	r6, ip
 8001f54:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8001f56:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f58:	e745      	b.n	8001de6 <HAL_GPIO_Init+0x46>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f5a:	2605      	movs	r6, #5
 8001f5c:	40be      	lsls	r6, r7
 8001f5e:	4331      	orrs	r1, r6
 8001f60:	e76f      	b.n	8001e42 <HAL_GPIO_Init+0xa2>
 8001f62:	2601      	movs	r6, #1
 8001f64:	40be      	lsls	r6, r7
 8001f66:	4331      	orrs	r1, r6
 8001f68:	e76b      	b.n	8001e42 <HAL_GPIO_Init+0xa2>
 8001f6a:	2602      	movs	r6, #2
 8001f6c:	40be      	lsls	r6, r7
 8001f6e:	4331      	orrs	r1, r6
 8001f70:	e767      	b.n	8001e42 <HAL_GPIO_Init+0xa2>
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	50000400 	.word	0x50000400
 8001f80:	50000800 	.word	0x50000800
 8001f84:	50001c00 	.word	0x50001c00
 8001f88:	40010400 	.word	0x40010400

08001f8c <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8e:	46de      	mov	lr, fp
 8001f90:	4657      	mov	r7, sl
 8001f92:	464e      	mov	r6, r9
 8001f94:	4645      	mov	r5, r8
 8001f96:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t position = 0x00U;
 8001f98:	2300      	movs	r3, #0
{
 8001f9a:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8001f9c:	2900      	cmp	r1, #0
 8001f9e:	d062      	beq.n	8002066 <HAL_GPIO_DeInit+0xda>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4691      	mov	r9, r2
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8001fa4:	3202      	adds	r2, #2
 8001fa6:	4693      	mov	fp, r2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001fa8:	4a38      	ldr	r2, [pc, #224]	@ (800208c <HAL_GPIO_DeInit+0x100>)
 8001faa:	4690      	mov	r8, r2
 8001fac:	e041      	b.n	8002032 <HAL_GPIO_DeInit+0xa6>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001fae:	4c38      	ldr	r4, [pc, #224]	@ (8002090 <HAL_GPIO_DeInit+0x104>)
 8001fb0:	42a0      	cmp	r0, r4
 8001fb2:	d05f      	beq.n	8002074 <HAL_GPIO_DeInit+0xe8>
 8001fb4:	4c37      	ldr	r4, [pc, #220]	@ (8002094 <HAL_GPIO_DeInit+0x108>)
 8001fb6:	42a0      	cmp	r0, r4
 8001fb8:	d060      	beq.n	800207c <HAL_GPIO_DeInit+0xf0>
 8001fba:	4c37      	ldr	r4, [pc, #220]	@ (8002098 <HAL_GPIO_DeInit+0x10c>)
 8001fbc:	42a0      	cmp	r0, r4
 8001fbe:	d061      	beq.n	8002084 <HAL_GPIO_DeInit+0xf8>
 8001fc0:	2406      	movs	r4, #6
 8001fc2:	40ac      	lsls	r4, r5
 8001fc4:	0025      	movs	r5, r4
 8001fc6:	42ae      	cmp	r6, r5
 8001fc8:	d111      	bne.n	8001fee <HAL_GPIO_DeInit+0x62>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001fca:	4644      	mov	r4, r8
 8001fcc:	6825      	ldr	r5, [r4, #0]
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
        EXTI->RTSR &= ~((uint32_t)iocurrent);

        tmp = (0x0FUL) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001fce:	9e01      	ldr	r6, [sp, #4]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001fd0:	43bd      	bics	r5, r7
 8001fd2:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001fd4:	6865      	ldr	r5, [r4, #4]
 8001fd6:	43bd      	bics	r5, r7
 8001fd8:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001fda:	68e5      	ldr	r5, [r4, #12]
 8001fdc:	43bd      	bics	r5, r7
 8001fde:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001fe0:	68a5      	ldr	r5, [r4, #8]
 8001fe2:	43bd      	bics	r5, r7
 8001fe4:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001fe6:	4664      	mov	r4, ip
 8001fe8:	68b5      	ldr	r5, [r6, #8]
 8001fea:	43a5      	bics	r5, r4
 8001fec:	60b5      	str	r5, [r6, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8001fee:	465e      	mov	r6, fp
 8001ff0:	005d      	lsls	r5, r3, #1
 8001ff2:	40ae      	lsls	r6, r5
 8001ff4:	6804      	ldr	r4, [r0, #0]
 8001ff6:	0035      	movs	r5, r6
 8001ff8:	4334      	orrs	r4, r6
 8001ffa:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001ffc:	08dc      	lsrs	r4, r3, #3
 8001ffe:	00a4      	lsls	r4, r4, #2
 8002000:	1904      	adds	r4, r0, r4
 8002002:	6a26      	ldr	r6, [r4, #32]
 8002004:	2707      	movs	r7, #7
 8002006:	46b4      	mov	ip, r6
 8002008:	260f      	movs	r6, #15
 800200a:	401f      	ands	r7, r3
 800200c:	00bf      	lsls	r7, r7, #2
 800200e:	40be      	lsls	r6, r7
 8002010:	0037      	movs	r7, r6
 8002012:	4666      	mov	r6, ip
 8002014:	43be      	bics	r6, r7
 8002016:	6226      	str	r6, [r4, #32]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002018:	68c4      	ldr	r4, [r0, #12]
 800201a:	43ac      	bics	r4, r5
 800201c:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800201e:	6844      	ldr	r4, [r0, #4]
 8002020:	4394      	bics	r4, r2
 8002022:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002024:	6882      	ldr	r2, [r0, #8]
 8002026:	43aa      	bics	r2, r5
 8002028:	6082      	str	r2, [r0, #8]
  while ((GPIO_Pin >> position) != 0)
 800202a:	000a      	movs	r2, r1
    }
    position++;
 800202c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 800202e:	40da      	lsrs	r2, r3
 8002030:	d019      	beq.n	8002066 <HAL_GPIO_DeInit+0xda>
    iocurrent = (GPIO_Pin) & (1U << position);
 8002032:	464a      	mov	r2, r9
 8002034:	000f      	movs	r7, r1
 8002036:	409a      	lsls	r2, r3
 8002038:	4017      	ands	r7, r2
    if (iocurrent)
 800203a:	4211      	tst	r1, r2
 800203c:	d0f5      	beq.n	800202a <HAL_GPIO_DeInit+0x9e>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800203e:	4d17      	ldr	r5, [pc, #92]	@ (800209c <HAL_GPIO_DeInit+0x110>)
 8002040:	089c      	lsrs	r4, r3, #2
 8002042:	46ac      	mov	ip, r5
 8002044:	00a4      	lsls	r4, r4, #2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8002046:	465d      	mov	r5, fp
 8002048:	4464      	add	r4, ip
      tmp = SYSCFG->EXTICR[position >> 2U];
 800204a:	68a6      	ldr	r6, [r4, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800204c:	9401      	str	r4, [sp, #4]
 800204e:	240f      	movs	r4, #15
 8002050:	401d      	ands	r5, r3
 8002052:	00ad      	lsls	r5, r5, #2
 8002054:	40ac      	lsls	r4, r5
 8002056:	46a4      	mov	ip, r4
 8002058:	4026      	ands	r6, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800205a:	24a0      	movs	r4, #160	@ 0xa0
 800205c:	05e4      	lsls	r4, r4, #23
 800205e:	42a0      	cmp	r0, r4
 8002060:	d1a5      	bne.n	8001fae <HAL_GPIO_DeInit+0x22>
 8002062:	2500      	movs	r5, #0
 8002064:	e7af      	b.n	8001fc6 <HAL_GPIO_DeInit+0x3a>
  }
}
 8002066:	b003      	add	sp, #12
 8002068:	bcf0      	pop	{r4, r5, r6, r7}
 800206a:	46bb      	mov	fp, r7
 800206c:	46b2      	mov	sl, r6
 800206e:	46a9      	mov	r9, r5
 8002070:	46a0      	mov	r8, r4
 8002072:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002074:	464c      	mov	r4, r9
 8002076:	40ac      	lsls	r4, r5
 8002078:	0025      	movs	r5, r4
 800207a:	e7a4      	b.n	8001fc6 <HAL_GPIO_DeInit+0x3a>
 800207c:	2402      	movs	r4, #2
 800207e:	40ac      	lsls	r4, r5
 8002080:	0025      	movs	r5, r4
 8002082:	e7a0      	b.n	8001fc6 <HAL_GPIO_DeInit+0x3a>
 8002084:	2405      	movs	r4, #5
 8002086:	40ac      	lsls	r4, r5
 8002088:	0025      	movs	r5, r4
 800208a:	e79c      	b.n	8001fc6 <HAL_GPIO_DeInit+0x3a>
 800208c:	40010400 	.word	0x40010400
 8002090:	50000400 	.word	0x50000400
 8002094:	50000800 	.word	0x50000800
 8002098:	50001c00 	.word	0x50001c00
 800209c:	40010000 	.word	0x40010000

080020a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020a0:	6900      	ldr	r0, [r0, #16]
 80020a2:	4008      	ands	r0, r1
 80020a4:	1e43      	subs	r3, r0, #1
 80020a6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80020a8:	b2c0      	uxtb	r0, r0
}
 80020aa:	4770      	bx	lr

080020ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ac:	2a00      	cmp	r2, #0
 80020ae:	d001      	beq.n	80020b4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020b0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80020b2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80020b4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80020b6:	e7fc      	b.n	80020b2 <HAL_GPIO_WritePin+0x6>

080020b8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020b8:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020ba:	0013      	movs	r3, r2
 80020bc:	400b      	ands	r3, r1
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	4391      	bics	r1, r2
 80020c2:	430b      	orrs	r3, r1
 80020c4:	6183      	str	r3, [r0, #24]
}
 80020c6:	4770      	bx	lr

080020c8 <HAL_GPIO_LockPin>:
*         All port bits are not necessarily available on all GPIOs.
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 80020c8:	2380      	movs	r3, #128	@ 0x80
{
 80020ca:	b082      	sub	sp, #8
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 80020cc:	025b      	lsls	r3, r3, #9
 80020ce:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 80020d0:	9b01      	ldr	r3, [sp, #4]
 80020d2:	430b      	orrs	r3, r1
 80020d4:	9301      	str	r3, [sp, #4]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80020d6:	9b01      	ldr	r3, [sp, #4]
 80020d8:	61c3      	str	r3, [r0, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 80020da:	61c1      	str	r1, [r0, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80020dc:	9b01      	ldr	r3, [sp, #4]
 80020de:	61c3      	str	r3, [r0, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 80020e0:	69c3      	ldr	r3, [r0, #28]
 80020e2:	9301      	str	r3, [sp, #4]

  /* read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 80020e4:	69c3      	ldr	r3, [r0, #28]
  }
  else
  {
    return HAL_ERROR;
  }
}
 80020e6:	2001      	movs	r0, #1
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 80020e8:	0c1b      	lsrs	r3, r3, #16
}
 80020ea:	4398      	bics	r0, r3
 80020ec:	b002      	add	sp, #8
 80020ee:	4770      	bx	lr

080020f0 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020f0:	4770      	bx	lr
 80020f2:	46c0      	nop			@ (mov r8, r8)

080020f4 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020f4:	4b04      	ldr	r3, [pc, #16]	@ (8002108 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80020f6:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	4210      	tst	r0, r2
 80020fc:	d100      	bne.n	8002100 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80020fe:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002100:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002102:	f7ff fff5 	bl	80020f0 <HAL_GPIO_EXTI_Callback>
}
 8002106:	e7fa      	b.n	80020fe <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002108:	40010400 	.word	0x40010400

0800210c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800210c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800210e:	46de      	mov	lr, fp
 8002110:	4657      	mov	r7, sl
 8002112:	464e      	mov	r6, r9
 8002114:	4645      	mov	r5, r8
 8002116:	b5e0      	push	{r5, r6, r7, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002118:	6803      	ldr	r3, [r0, #0]
{
 800211a:	4693      	mov	fp, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800211c:	699a      	ldr	r2, [r3, #24]
{
 800211e:	0004      	movs	r4, r0
 8002120:	000d      	movs	r5, r1
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002122:	2610      	movs	r6, #16
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002124:	2704      	movs	r7, #4
{
 8002126:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002128:	0752      	lsls	r2, r2, #29
 800212a:	d467      	bmi.n	80021fc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800212c:	0032      	movs	r2, r6
  HAL_StatusTypeDef status = HAL_OK;
 800212e:	2000      	movs	r0, #0
  uint32_t itflag   = hi2c->Instance->ISR;
 8002130:	6999      	ldr	r1, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002132:	4684      	mov	ip, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002134:	400a      	ands	r2, r1
 8002136:	420e      	tst	r6, r1
 8002138:	d00d      	beq.n	8002156 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800213a:	61de      	str	r6, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800213c:	1c6a      	adds	r2, r5, #1
 800213e:	d000      	beq.n	8002142 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 8002140:	e082      	b.n	8002248 <I2C_WaitOnRXNEFlagUntilTimeout+0x13c>
 8002142:	2120      	movs	r1, #32
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	4211      	tst	r1, r2
 8002148:	d0fc      	beq.n	8002144 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
  uint32_t error_code = 0;
 800214a:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800214c:	2120      	movs	r1, #32
 800214e:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
 8002150:	2101      	movs	r1, #1
 8002152:	468c      	mov	ip, r1
    error_code |= HAL_I2C_ERROR_AF;
 8002154:	433a      	orrs	r2, r7
  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002156:	2080      	movs	r0, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002158:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800215a:	0040      	lsls	r0, r0, #1
 800215c:	4201      	tst	r1, r0
 800215e:	d034      	beq.n	80021ca <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002160:	2501      	movs	r5, #1

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002162:	61d8      	str	r0, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002164:	432a      	orrs	r2, r5

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002166:	0548      	lsls	r0, r1, #21
 8002168:	d504      	bpl.n	8002174 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800216a:	2008      	movs	r0, #8
 800216c:	4302      	orrs	r2, r0

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800216e:	2080      	movs	r0, #128	@ 0x80
 8002170:	00c0      	lsls	r0, r0, #3
 8002172:	61d8      	str	r0, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002174:	0589      	lsls	r1, r1, #22
 8002176:	d504      	bpl.n	8002182 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002178:	2102      	movs	r1, #2
 800217a:	430a      	orrs	r2, r1

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800217c:	31ff      	adds	r1, #255	@ 0xff
 800217e:	31ff      	adds	r1, #255	@ 0xff
 8002180:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002182:	6999      	ldr	r1, [r3, #24]
 8002184:	0789      	lsls	r1, r1, #30
 8002186:	d501      	bpl.n	800218c <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
    hi2c->Instance->TXDR = 0x00U;
 8002188:	2100      	movs	r1, #0
 800218a:	6299      	str	r1, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800218c:	2101      	movs	r1, #1
 800218e:	6998      	ldr	r0, [r3, #24]
 8002190:	4201      	tst	r1, r0
 8002192:	d102      	bne.n	800219a <I2C_WaitOnRXNEFlagUntilTimeout+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002194:	6998      	ldr	r0, [r3, #24]
 8002196:	4301      	orrs	r1, r0
 8002198:	6199      	str	r1, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800219a:	6859      	ldr	r1, [r3, #4]
 800219c:	4854      	ldr	r0, [pc, #336]	@ (80022f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x1e4>)
 800219e:	4001      	ands	r1, r0
 80021a0:	6059      	str	r1, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80021a2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80021a4:	4313      	orrs	r3, r2
 80021a6:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021a8:	2220      	movs	r2, #32
 80021aa:	2341      	movs	r3, #65	@ 0x41
 80021ac:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ae:	2200      	movs	r2, #0
 80021b0:	3301      	adds	r3, #1
 80021b2:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 80021b4:	2340      	movs	r3, #64	@ 0x40
 80021b6:	2200      	movs	r2, #0
      return HAL_ERROR;
 80021b8:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 80021ba:	54e2      	strb	r2, [r4, r3]
}
 80021bc:	b003      	add	sp, #12
 80021be:	bcf0      	pop	{r4, r5, r6, r7}
 80021c0:	46bb      	mov	fp, r7
 80021c2:	46b2      	mov	sl, r6
 80021c4:	46a9      	mov	r9, r5
 80021c6:	46a0      	mov	r8, r4
 80021c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021ca:	0548      	lsls	r0, r1, #21
 80021cc:	d4cd      	bmi.n	800216a <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80021ce:	0589      	lsls	r1, r1, #22
 80021d0:	d4d2      	bmi.n	8002178 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
  if (status != HAL_OK)
 80021d2:	4661      	mov	r1, ip
 80021d4:	2900      	cmp	r1, #0
 80021d6:	d1d4      	bne.n	8002182 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	0692      	lsls	r2, r2, #26
 80021dc:	d410      	bmi.n	8002200 <I2C_WaitOnRXNEFlagUntilTimeout+0xf4>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021de:	f7fe fa73 	bl	80006c8 <HAL_GetTick>
 80021e2:	465b      	mov	r3, fp
 80021e4:	1ac0      	subs	r0, r0, r3
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80021e6:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e8:	42a8      	cmp	r0, r5
 80021ea:	d801      	bhi.n	80021f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe4>
 80021ec:	2d00      	cmp	r5, #0
 80021ee:	d102      	bne.n	80021f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xea>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	4217      	tst	r7, r2
 80021f4:	d01f      	beq.n	8002236 <I2C_WaitOnRXNEFlagUntilTimeout+0x12a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	4217      	tst	r7, r2
 80021fa:	d097      	beq.n	800212c <I2C_WaitOnRXNEFlagUntilTimeout+0x20>
        return HAL_OK;
 80021fc:	2000      	movs	r0, #0
 80021fe:	e7dd      	b.n	80021bc <I2C_WaitOnRXNEFlagUntilTimeout+0xb0>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	0752      	lsls	r2, r2, #29
 8002204:	d502      	bpl.n	800220c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>
 8002206:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8002208:	2a00      	cmp	r2, #0
 800220a:	d1f7      	bne.n	80021fc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800220c:	2210      	movs	r2, #16
 800220e:	0010      	movs	r0, r2
 8002210:	6999      	ldr	r1, [r3, #24]
 8002212:	4008      	ands	r0, r1
 8002214:	420a      	tst	r2, r1
 8002216:	d015      	beq.n	8002244 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002218:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800221a:	3a0c      	subs	r2, #12
 800221c:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800221e:	2120      	movs	r1, #32
 8002220:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4832      	ldr	r0, [pc, #200]	@ (80022f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x1e4>)
 8002226:	4002      	ands	r2, r0
 8002228:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800222a:	2341      	movs	r3, #65	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800222c:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800222e:	54e1      	strb	r1, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002230:	3301      	adds	r3, #1
 8002232:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8002234:	e7be      	b.n	80021b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002236:	2220      	movs	r2, #32
 8002238:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800223a:	4313      	orrs	r3, r2
 800223c:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800223e:	2341      	movs	r3, #65	@ 0x41
 8002240:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8002242:	e7b7      	b.n	80021b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa8>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002244:	6460      	str	r0, [r4, #68]	@ 0x44
 8002246:	e7ea      	b.n	800221e <I2C_WaitOnRXNEFlagUntilTimeout+0x112>
  HAL_StatusTypeDef status = HAL_OK;
 8002248:	2100      	movs	r1, #0
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800224a:	0028      	movs	r0, r5
  uint32_t error_code = 0;
 800224c:	2200      	movs	r2, #0
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800224e:	465d      	mov	r5, fp
  HAL_StatusTypeDef status = HAL_OK;
 8002250:	468a      	mov	sl, r1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002252:	3120      	adds	r1, #32
 8002254:	4688      	mov	r8, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002256:	4693      	mov	fp, r2
 8002258:	4681      	mov	r9, r0
 800225a:	9501      	str	r5, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800225c:	4641      	mov	r1, r8
 800225e:	699a      	ldr	r2, [r3, #24]
 8002260:	4211      	tst	r1, r2
 8002262:	d10f      	bne.n	8002284 <I2C_WaitOnRXNEFlagUntilTimeout+0x178>
 8002264:	4652      	mov	r2, sl
 8002266:	2a00      	cmp	r2, #0
 8002268:	d13d      	bne.n	80022e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x1da>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800226a:	f7fe fa2d 	bl	80006c8 <HAL_GetTick>
 800226e:	1b40      	subs	r0, r0, r5
 8002270:	4581      	cmp	r9, r0
 8002272:	d310      	bcc.n	8002296 <I2C_WaitOnRXNEFlagUntilTimeout+0x18a>
 8002274:	464b      	mov	r3, r9
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <I2C_WaitOnRXNEFlagUntilTimeout+0x18a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800227a:	4641      	mov	r1, r8
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800227c:	6823      	ldr	r3, [r4, #0]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	4211      	tst	r1, r2
 8002282:	d0ef      	beq.n	8002264 <I2C_WaitOnRXNEFlagUntilTimeout+0x158>
    if (status == HAL_OK)
 8002284:	9901      	ldr	r1, [sp, #4]
 8002286:	465a      	mov	r2, fp
 8002288:	468b      	mov	fp, r1
 800228a:	4651      	mov	r1, sl
 800228c:	464d      	mov	r5, r9
 800228e:	2900      	cmp	r1, #0
 8002290:	d100      	bne.n	8002294 <I2C_WaitOnRXNEFlagUntilTimeout+0x188>
 8002292:	e75b      	b.n	800214c <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
 8002294:	e75c      	b.n	8002150 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
          tmp2 = hi2c->Mode;
 8002296:	2242      	movs	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800229c:	5ca2      	ldrb	r2, [r4, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800229e:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022a4:	2280      	movs	r2, #128	@ 0x80
 80022a6:	0212      	lsls	r2, r2, #8
 80022a8:	4211      	tst	r1, r2
 80022aa:	d00d      	beq.n	80022c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x1bc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022ac:	2180      	movs	r1, #128	@ 0x80
 80022ae:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022b0:	4208      	tst	r0, r1
 80022b2:	d109      	bne.n	80022c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x1bc>
              (tmp1 != I2C_CR2_STOP) && \
 80022b4:	4662      	mov	r2, ip
 80022b6:	2a20      	cmp	r2, #32
 80022b8:	d006      	beq.n	80022c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x1bc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	4311      	orrs	r1, r2
 80022be:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 80022c0:	f7fe fa02 	bl	80006c8 <HAL_GetTick>
 80022c4:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	4641      	mov	r1, r8
 80022ca:	699a      	ldr	r2, [r3, #24]
 80022cc:	4211      	tst	r1, r2
 80022ce:	d1c5      	bne.n	800225c <I2C_WaitOnRXNEFlagUntilTimeout+0x150>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022d0:	f7fe f9fa 	bl	80006c8 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022d4:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022d6:	1b40      	subs	r0, r0, r5
 80022d8:	2819      	cmp	r0, #25
 80022da:	d9f5      	bls.n	80022c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x1bc>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80022dc:	2220      	movs	r2, #32
 80022de:	4693      	mov	fp, r2
              status = HAL_ERROR;
 80022e0:	3a1f      	subs	r2, #31
 80022e2:	4692      	mov	sl, r2
 80022e4:	e7ba      	b.n	800225c <I2C_WaitOnRXNEFlagUntilTimeout+0x150>
 80022e6:	9901      	ldr	r1, [sp, #4]
 80022e8:	465a      	mov	r2, fp
 80022ea:	464d      	mov	r5, r9
 80022ec:	468b      	mov	fp, r1
 80022ee:	e72f      	b.n	8002150 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
 80022f0:	fe00e800 	.word	0xfe00e800

080022f4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80022f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f6:	4657      	mov	r7, sl
 80022f8:	464e      	mov	r6, r9
 80022fa:	46de      	mov	lr, fp
 80022fc:	4645      	mov	r5, r8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022fe:	2410      	movs	r4, #16
{
 8002300:	b5e0      	push	{r5, r6, r7, lr}
 8002302:	0006      	movs	r6, r0
 8002304:	000f      	movs	r7, r1
 8002306:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002308:	6803      	ldr	r3, [r0, #0]
 800230a:	9201      	str	r2, [sp, #4]
 800230c:	2502      	movs	r5, #2
 800230e:	46b3      	mov	fp, r6
 8002310:	002a      	movs	r2, r5
 8002312:	6999      	ldr	r1, [r3, #24]
 8002314:	400a      	ands	r2, r1
 8002316:	420d      	tst	r5, r1
 8002318:	d000      	beq.n	800231c <I2C_WaitOnTXISFlagUntilTimeout+0x28>
 800231a:	e072      	b.n	8002402 <I2C_WaitOnTXISFlagUntilTimeout+0x10e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800231c:	0021      	movs	r1, r4
  uint32_t itflag   = hi2c->Instance->ISR;
 800231e:	6998      	ldr	r0, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002320:	2600      	movs	r6, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002322:	4001      	ands	r1, r0
 8002324:	4204      	tst	r4, r0
 8002326:	d00b      	beq.n	8002340 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002328:	61dc      	str	r4, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800232a:	1c79      	adds	r1, r7, #1
 800232c:	d16d      	bne.n	800240a <I2C_WaitOnTXISFlagUntilTimeout+0x116>
 800232e:	2020      	movs	r0, #32
 8002330:	6999      	ldr	r1, [r3, #24]
 8002332:	4208      	tst	r0, r1
 8002334:	d0fc      	beq.n	8002330 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002336:	2120      	movs	r1, #32
 8002338:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800233a:	2104      	movs	r1, #4
    status = HAL_ERROR;
 800233c:	2601      	movs	r6, #1
    error_code |= HAL_I2C_ERROR_AF;
 800233e:	4311      	orrs	r1, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002340:	2080      	movs	r0, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002342:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002344:	0040      	lsls	r0, r0, #1
 8002346:	4202      	tst	r2, r0
 8002348:	d035      	beq.n	80023b6 <I2C_WaitOnTXISFlagUntilTimeout+0xc2>
    error_code |= HAL_I2C_ERROR_BERR;
 800234a:	2401      	movs	r4, #1
 800234c:	465e      	mov	r6, fp
 800234e:	4321      	orrs	r1, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002350:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002352:	0550      	lsls	r0, r2, #21
 8002354:	d504      	bpl.n	8002360 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
    error_code |= HAL_I2C_ERROR_OVR;
 8002356:	2008      	movs	r0, #8
 8002358:	4301      	orrs	r1, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800235a:	2080      	movs	r0, #128	@ 0x80
 800235c:	00c0      	lsls	r0, r0, #3
 800235e:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002360:	0592      	lsls	r2, r2, #22
 8002362:	d504      	bpl.n	800236e <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002364:	2202      	movs	r2, #2
 8002366:	4311      	orrs	r1, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002368:	32ff      	adds	r2, #255	@ 0xff
 800236a:	32ff      	adds	r2, #255	@ 0xff
 800236c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	0792      	lsls	r2, r2, #30
 8002372:	d501      	bpl.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
 8002374:	2200      	movs	r2, #0
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002378:	2201      	movs	r2, #1
 800237a:	6998      	ldr	r0, [r3, #24]
 800237c:	4202      	tst	r2, r0
 800237e:	d102      	bne.n	8002386 <I2C_WaitOnTXISFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002380:	6998      	ldr	r0, [r3, #24]
 8002382:	4302      	orrs	r2, r0
 8002384:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4851      	ldr	r0, [pc, #324]	@ (80024d0 <I2C_WaitOnTXISFlagUntilTimeout+0x1dc>)
 800238a:	4002      	ands	r2, r0
 800238c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800238e:	6c73      	ldr	r3, [r6, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002390:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8002392:	430b      	orrs	r3, r1
 8002394:	6473      	str	r3, [r6, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002396:	2341      	movs	r3, #65	@ 0x41
 8002398:	54f2      	strb	r2, [r6, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800239a:	2200      	movs	r2, #0
 800239c:	3301      	adds	r3, #1
 800239e:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 80023a0:	2340      	movs	r3, #64	@ 0x40
 80023a2:	2200      	movs	r2, #0
      return HAL_ERROR;
 80023a4:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 80023a6:	54f2      	strb	r2, [r6, r3]
}
 80023a8:	b003      	add	sp, #12
 80023aa:	bcf0      	pop	{r4, r5, r6, r7}
 80023ac:	46bb      	mov	fp, r7
 80023ae:	46b2      	mov	sl, r6
 80023b0:	46a9      	mov	r9, r5
 80023b2:	46a0      	mov	r8, r4
 80023b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023b6:	0550      	lsls	r0, r2, #21
 80023b8:	d501      	bpl.n	80023be <I2C_WaitOnTXISFlagUntilTimeout+0xca>
 80023ba:	465e      	mov	r6, fp
 80023bc:	e7cb      	b.n	8002356 <I2C_WaitOnTXISFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80023be:	0592      	lsls	r2, r2, #22
 80023c0:	d501      	bpl.n	80023c6 <I2C_WaitOnTXISFlagUntilTimeout+0xd2>
 80023c2:	465e      	mov	r6, fp
 80023c4:	e7ce      	b.n	8002364 <I2C_WaitOnTXISFlagUntilTimeout+0x70>
  if (status != HAL_OK)
 80023c6:	2e00      	cmp	r6, #0
 80023c8:	d11d      	bne.n	8002406 <I2C_WaitOnTXISFlagUntilTimeout+0x112>
    if (Timeout != HAL_MAX_DELAY)
 80023ca:	1c7a      	adds	r2, r7, #1
 80023cc:	d0a0      	beq.n	8002310 <I2C_WaitOnTXISFlagUntilTimeout+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ce:	f7fe f97b 	bl	80006c8 <HAL_GetTick>
 80023d2:	465e      	mov	r6, fp
 80023d4:	9b01      	ldr	r3, [sp, #4]
 80023d6:	1ac0      	subs	r0, r0, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80023d8:	6833      	ldr	r3, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023da:	42b8      	cmp	r0, r7
 80023dc:	d801      	bhi.n	80023e2 <I2C_WaitOnTXISFlagUntilTimeout+0xee>
 80023de:	2f00      	cmp	r7, #0
 80023e0:	d194      	bne.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x18>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80023e2:	2102      	movs	r1, #2
 80023e4:	0008      	movs	r0, r1
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	4010      	ands	r0, r2
 80023ea:	4211      	tst	r1, r2
 80023ec:	d000      	beq.n	80023f0 <I2C_WaitOnTXISFlagUntilTimeout+0xfc>
 80023ee:	e78d      	b.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x18>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f0:	2220      	movs	r2, #32
 80023f2:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 80023f4:	4313      	orrs	r3, r2
 80023f6:	6473      	str	r3, [r6, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023f8:	2341      	movs	r3, #65	@ 0x41
 80023fa:	54f2      	strb	r2, [r6, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fc:	3301      	adds	r3, #1
 80023fe:	54f0      	strb	r0, [r6, r3]
          return HAL_ERROR;
 8002400:	e7ce      	b.n	80023a0 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
  return HAL_OK;
 8002402:	2000      	movs	r0, #0
 8002404:	e7d0      	b.n	80023a8 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
 8002406:	465e      	mov	r6, fp
 8002408:	e7b1      	b.n	800236e <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
  uint32_t tickstart = Tickstart;
 800240a:	9901      	ldr	r1, [sp, #4]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800240c:	9200      	str	r2, [sp, #0]
  uint32_t tickstart = Tickstart;
 800240e:	4688      	mov	r8, r1
  HAL_StatusTypeDef status = HAL_OK;
 8002410:	2100      	movs	r1, #0
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002412:	003a      	movs	r2, r7
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	4689      	mov	r9, r1
          tmp2 = hi2c->Mode;
 8002416:	3142      	adds	r1, #66	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002418:	465f      	mov	r7, fp
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800241a:	2620      	movs	r6, #32
          tmp2 = hi2c->Mode;
 800241c:	468a      	mov	sl, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800241e:	4693      	mov	fp, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	4216      	tst	r6, r2
 8002424:	d10f      	bne.n	8002446 <I2C_WaitOnTXISFlagUntilTimeout+0x152>
 8002426:	464a      	mov	r2, r9
 8002428:	2a00      	cmp	r2, #0
 800242a:	d14b      	bne.n	80024c4 <I2C_WaitOnTXISFlagUntilTimeout+0x1d0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800242c:	f7fe f94c 	bl	80006c8 <HAL_GetTick>
 8002430:	4643      	mov	r3, r8
 8002432:	1ac0      	subs	r0, r0, r3
 8002434:	4583      	cmp	fp, r0
 8002436:	d30f      	bcc.n	8002458 <I2C_WaitOnTXISFlagUntilTimeout+0x164>
 8002438:	465b      	mov	r3, fp
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00c      	beq.n	8002458 <I2C_WaitOnTXISFlagUntilTimeout+0x164>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800243e:	683b      	ldr	r3, [r7, #0]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	4216      	tst	r6, r2
 8002444:	d0ef      	beq.n	8002426 <I2C_WaitOnTXISFlagUntilTimeout+0x132>
    if (status == HAL_OK)
 8002446:	4659      	mov	r1, fp
 8002448:	46bb      	mov	fp, r7
 800244a:	000f      	movs	r7, r1
 800244c:	4649      	mov	r1, r9
 800244e:	9a00      	ldr	r2, [sp, #0]
 8002450:	2900      	cmp	r1, #0
 8002452:	d100      	bne.n	8002456 <I2C_WaitOnTXISFlagUntilTimeout+0x162>
 8002454:	e76f      	b.n	8002336 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
 8002456:	e770      	b.n	800233a <I2C_WaitOnTXISFlagUntilTimeout+0x46>
          tmp2 = hi2c->Mode;
 8002458:	4652      	mov	r2, sl
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800245e:	5cba      	ldrb	r2, [r7, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002460:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002466:	2280      	movs	r2, #128	@ 0x80
 8002468:	0212      	lsls	r2, r2, #8
 800246a:	4211      	tst	r1, r2
 800246c:	d01e      	beq.n	80024ac <I2C_WaitOnTXISFlagUntilTimeout+0x1b8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800246e:	2180      	movs	r1, #128	@ 0x80
 8002470:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002472:	4208      	tst	r0, r1
 8002474:	d11a      	bne.n	80024ac <I2C_WaitOnTXISFlagUntilTimeout+0x1b8>
              (tmp1 != I2C_CR2_STOP) && \
 8002476:	4662      	mov	r2, ip
 8002478:	2a20      	cmp	r2, #32
 800247a:	d017      	beq.n	80024ac <I2C_WaitOnTXISFlagUntilTimeout+0x1b8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4311      	orrs	r1, r2
 8002480:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8002482:	f7fe f921 	bl	80006c8 <HAL_GetTick>
 8002486:	003a      	movs	r2, r7
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4690      	mov	r8, r2
 800248c:	0007      	movs	r7, r0
 800248e:	e006      	b.n	800249e <I2C_WaitOnTXISFlagUntilTimeout+0x1aa>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002490:	f7fe f91a 	bl	80006c8 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002494:	4643      	mov	r3, r8
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002496:	1bc0      	subs	r0, r0, r7
 8002498:	2819      	cmp	r0, #25
 800249a:	d80b      	bhi.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x1c0>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800249c:	681b      	ldr	r3, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800249e:	699a      	ldr	r2, [r3, #24]
 80024a0:	4216      	tst	r6, r2
 80024a2:	d0f5      	beq.n	8002490 <I2C_WaitOnTXISFlagUntilTimeout+0x19c>
 80024a4:	4642      	mov	r2, r8
 80024a6:	46b8      	mov	r8, r7
 80024a8:	0017      	movs	r7, r2
 80024aa:	e7b9      	b.n	8002420 <I2C_WaitOnTXISFlagUntilTimeout+0x12c>
 80024ac:	003a      	movs	r2, r7
 80024ae:	4647      	mov	r7, r8
 80024b0:	4690      	mov	r8, r2
 80024b2:	e7f4      	b.n	800249e <I2C_WaitOnTXISFlagUntilTimeout+0x1aa>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024b4:	2220      	movs	r2, #32
 80024b6:	9200      	str	r2, [sp, #0]
              status = HAL_ERROR;
 80024b8:	3a1f      	subs	r2, #31
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024ba:	46b8      	mov	r8, r7
              status = HAL_ERROR;
 80024bc:	4691      	mov	r9, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024be:	001f      	movs	r7, r3
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	e7ad      	b.n	8002420 <I2C_WaitOnTXISFlagUntilTimeout+0x12c>
 80024c4:	4659      	mov	r1, fp
 80024c6:	9a00      	ldr	r2, [sp, #0]
 80024c8:	46bb      	mov	fp, r7
 80024ca:	000f      	movs	r7, r1
 80024cc:	e735      	b.n	800233a <I2C_WaitOnTXISFlagUntilTimeout+0x46>
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	fe00e800 	.word	0xfe00e800

080024d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80024d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d6:	46de      	mov	lr, fp
 80024d8:	4657      	mov	r7, sl
 80024da:	464e      	mov	r6, r9
 80024dc:	4645      	mov	r5, r8
 80024de:	b5e0      	push	{r5, r6, r7, lr}
 80024e0:	000d      	movs	r5, r1
    error_code |= HAL_I2C_ERROR_AF;
 80024e2:	2104      	movs	r1, #4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e4:	6803      	ldr	r3, [r0, #0]
{
 80024e6:	4692      	mov	sl, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e8:	699a      	ldr	r2, [r3, #24]
{
 80024ea:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024ec:	2610      	movs	r6, #16
    error_code |= HAL_I2C_ERROR_AF;
 80024ee:	468b      	mov	fp, r1
{
 80024f0:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024f2:	0692      	lsls	r2, r2, #26
 80024f4:	d464      	bmi.n	80025c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xec>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024f6:	0032      	movs	r2, r6
  uint32_t itflag   = hi2c->Instance->ISR;
 80024f8:	6999      	ldr	r1, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80024fa:	2700      	movs	r7, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024fc:	400a      	ands	r2, r1
 80024fe:	420e      	tst	r6, r1
 8002500:	d00c      	beq.n	800251c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002502:	61de      	str	r6, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002504:	1c6a      	adds	r2, r5, #1
 8002506:	d165      	bne.n	80025d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x100>
 8002508:	2120      	movs	r1, #32
 800250a:	699a      	ldr	r2, [r3, #24]
 800250c:	4211      	tst	r1, r2
 800250e:	d0fc      	beq.n	800250a <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
  uint32_t error_code = 0;
 8002510:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002512:	2120      	movs	r1, #32
 8002514:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002516:	4659      	mov	r1, fp
    status = HAL_ERROR;
 8002518:	2701      	movs	r7, #1
    error_code |= HAL_I2C_ERROR_AF;
 800251a:	430a      	orrs	r2, r1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800251c:	2080      	movs	r0, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 800251e:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002520:	0040      	lsls	r0, r0, #1
 8002522:	4201      	tst	r1, r0
 8002524:	d034      	beq.n	8002590 <I2C_WaitOnSTOPFlagUntilTimeout+0xbc>
    error_code |= HAL_I2C_ERROR_BERR;
 8002526:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002528:	61d8      	str	r0, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 800252a:	432a      	orrs	r2, r5
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800252c:	0548      	lsls	r0, r1, #21
 800252e:	d504      	bpl.n	800253a <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
    error_code |= HAL_I2C_ERROR_OVR;
 8002530:	2008      	movs	r0, #8
 8002532:	4302      	orrs	r2, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002534:	2080      	movs	r0, #128	@ 0x80
 8002536:	00c0      	lsls	r0, r0, #3
 8002538:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800253a:	0589      	lsls	r1, r1, #22
 800253c:	d504      	bpl.n	8002548 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    error_code |= HAL_I2C_ERROR_ARLO;
 800253e:	2102      	movs	r1, #2
 8002540:	430a      	orrs	r2, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002542:	31ff      	adds	r1, #255	@ 0xff
 8002544:	31ff      	adds	r1, #255	@ 0xff
 8002546:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002548:	6999      	ldr	r1, [r3, #24]
 800254a:	0789      	lsls	r1, r1, #30
 800254c:	d501      	bpl.n	8002552 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    hi2c->Instance->TXDR = 0x00U;
 800254e:	2100      	movs	r1, #0
 8002550:	6299      	str	r1, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002552:	2101      	movs	r1, #1
 8002554:	6998      	ldr	r0, [r3, #24]
 8002556:	4201      	tst	r1, r0
 8002558:	d102      	bne.n	8002560 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800255a:	6998      	ldr	r0, [r3, #24]
 800255c:	4301      	orrs	r1, r0
 800255e:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8002560:	6859      	ldr	r1, [r3, #4]
 8002562:	4844      	ldr	r0, [pc, #272]	@ (8002674 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a0>)
 8002564:	4001      	ands	r1, r0
 8002566:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8002568:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800256a:	4313      	orrs	r3, r2
 800256c:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800256e:	2220      	movs	r2, #32
 8002570:	2341      	movs	r3, #65	@ 0x41
 8002572:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002574:	2200      	movs	r2, #0
 8002576:	3301      	adds	r3, #1
 8002578:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 800257a:	2340      	movs	r3, #64	@ 0x40
 800257c:	2200      	movs	r2, #0
      return HAL_ERROR;
 800257e:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 8002580:	54e2      	strb	r2, [r4, r3]
}
 8002582:	b003      	add	sp, #12
 8002584:	bcf0      	pop	{r4, r5, r6, r7}
 8002586:	46bb      	mov	fp, r7
 8002588:	46b2      	mov	sl, r6
 800258a:	46a9      	mov	r9, r5
 800258c:	46a0      	mov	r8, r4
 800258e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002590:	0548      	lsls	r0, r1, #21
 8002592:	d4cd      	bmi.n	8002530 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002594:	0589      	lsls	r1, r1, #22
 8002596:	d4d2      	bmi.n	800253e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
  if (status != HAL_OK)
 8002598:	2f00      	cmp	r7, #0
 800259a:	d1d5      	bne.n	8002548 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259c:	f7fe f894 	bl	80006c8 <HAL_GetTick>
 80025a0:	4653      	mov	r3, sl
 80025a2:	1ac0      	subs	r0, r0, r3
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025a4:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a6:	42a8      	cmp	r0, r5
 80025a8:	d801      	bhi.n	80025ae <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
 80025aa:	2d00      	cmp	r5, #0
 80025ac:	d105      	bne.n	80025ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe6>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025ae:	2220      	movs	r2, #32
 80025b0:	0010      	movs	r0, r2
 80025b2:	6999      	ldr	r1, [r3, #24]
 80025b4:	4008      	ands	r0, r1
 80025b6:	420a      	tst	r2, r1
 80025b8:	d004      	beq.n	80025c4 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	0692      	lsls	r2, r2, #26
 80025be:	d59a      	bpl.n	80024f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
  return HAL_OK;
 80025c0:	2000      	movs	r0, #0
 80025c2:	e7de      	b.n	8002582 <I2C_WaitOnSTOPFlagUntilTimeout+0xae>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025c4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80025c6:	4313      	orrs	r3, r2
 80025c8:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	2341      	movs	r3, #65	@ 0x41
 80025cc:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ce:	3301      	adds	r3, #1
 80025d0:	54e0      	strb	r0, [r4, r3]
        return HAL_ERROR;
 80025d2:	e7d2      	b.n	800257a <I2C_WaitOnSTOPFlagUntilTimeout+0xa6>
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025d4:	0028      	movs	r0, r5
  uint32_t error_code = 0;
 80025d6:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80025d8:	2100      	movs	r1, #0
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025da:	4655      	mov	r5, sl
  HAL_StatusTypeDef status = HAL_OK;
 80025dc:	4689      	mov	r9, r1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025de:	2720      	movs	r7, #32
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025e0:	4692      	mov	sl, r2
 80025e2:	4680      	mov	r8, r0
 80025e4:	9501      	str	r5, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	4217      	tst	r7, r2
 80025ea:	d10e      	bne.n	800260a <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
 80025ec:	464a      	mov	r2, r9
 80025ee:	2a00      	cmp	r2, #0
 80025f0:	d13b      	bne.n	800266a <I2C_WaitOnSTOPFlagUntilTimeout+0x196>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025f2:	f7fe f869 	bl	80006c8 <HAL_GetTick>
 80025f6:	1b40      	subs	r0, r0, r5
 80025f8:	4580      	cmp	r8, r0
 80025fa:	d30f      	bcc.n	800261c <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
 80025fc:	4643      	mov	r3, r8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00c      	beq.n	800261c <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002602:	6823      	ldr	r3, [r4, #0]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	4217      	tst	r7, r2
 8002608:	d0f0      	beq.n	80025ec <I2C_WaitOnSTOPFlagUntilTimeout+0x118>
    if (status == HAL_OK)
 800260a:	9901      	ldr	r1, [sp, #4]
 800260c:	4652      	mov	r2, sl
 800260e:	468a      	mov	sl, r1
 8002610:	4649      	mov	r1, r9
 8002612:	4645      	mov	r5, r8
 8002614:	2900      	cmp	r1, #0
 8002616:	d100      	bne.n	800261a <I2C_WaitOnSTOPFlagUntilTimeout+0x146>
 8002618:	e77b      	b.n	8002512 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
 800261a:	e77c      	b.n	8002516 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
          tmp2 = hi2c->Mode;
 800261c:	2242      	movs	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002622:	5ca2      	ldrb	r2, [r4, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002624:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800262a:	2280      	movs	r2, #128	@ 0x80
 800262c:	0212      	lsls	r2, r2, #8
 800262e:	4211      	tst	r1, r2
 8002630:	d00d      	beq.n	800264e <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002632:	2180      	movs	r1, #128	@ 0x80
 8002634:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002636:	4208      	tst	r0, r1
 8002638:	d109      	bne.n	800264e <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
              (tmp1 != I2C_CR2_STOP) && \
 800263a:	4662      	mov	r2, ip
 800263c:	2a20      	cmp	r2, #32
 800263e:	d006      	beq.n	800264e <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	4311      	orrs	r1, r2
 8002644:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8002646:	f7fe f83f 	bl	80006c8 <HAL_GetTick>
 800264a:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	4217      	tst	r7, r2
 8002652:	d1c8      	bne.n	80025e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x112>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002654:	f7fe f838 	bl	80006c8 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002658:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800265a:	1b40      	subs	r0, r0, r5
 800265c:	2819      	cmp	r0, #25
 800265e:	d9f6      	bls.n	800264e <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002660:	2220      	movs	r2, #32
 8002662:	4692      	mov	sl, r2
              status = HAL_ERROR;
 8002664:	3a1f      	subs	r2, #31
 8002666:	4691      	mov	r9, r2
 8002668:	e7bd      	b.n	80025e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x112>
 800266a:	9901      	ldr	r1, [sp, #4]
 800266c:	4652      	mov	r2, sl
 800266e:	4645      	mov	r5, r8
 8002670:	468a      	mov	sl, r1
 8002672:	e750      	b.n	8002516 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8002674:	fe00e800 	.word	0xfe00e800
}
 8002678:	4770      	bx	lr
 800267a:	46c0      	nop			@ (mov r8, r8)

0800267c <HAL_I2C_Init>:
{
 800267c:	b510      	push	{r4, lr}
 800267e:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8002680:	d04c      	beq.n	800271c <HAL_I2C_Init+0xa0>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002682:	2341      	movs	r3, #65	@ 0x41
 8002684:	5cc3      	ldrb	r3, [r0, r3]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d042      	beq.n	8002712 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800268c:	2341      	movs	r3, #65	@ 0x41
 800268e:	2224      	movs	r2, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002690:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002692:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8002694:	6823      	ldr	r3, [r4, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002696:	68a0      	ldr	r0, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	438a      	bics	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800269e:	4920      	ldr	r1, [pc, #128]	@ (8002720 <HAL_I2C_Init+0xa4>)
 80026a0:	6862      	ldr	r2, [r4, #4]
 80026a2:	400a      	ands	r2, r1
 80026a4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	491e      	ldr	r1, [pc, #120]	@ (8002724 <HAL_I2C_Init+0xa8>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026ae:	68e2      	ldr	r2, [r4, #12]
 80026b0:	2a01      	cmp	r2, #1
 80026b2:	d029      	beq.n	8002708 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026b4:	2184      	movs	r1, #132	@ 0x84
 80026b6:	0209      	lsls	r1, r1, #8
 80026b8:	4301      	orrs	r1, r0
 80026ba:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026bc:	2a02      	cmp	r2, #2
 80026be:	d102      	bne.n	80026c6 <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026c0:	2280      	movs	r2, #128	@ 0x80
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026c6:	6859      	ldr	r1, [r3, #4]
 80026c8:	4a17      	ldr	r2, [pc, #92]	@ (8002728 <HAL_I2C_Init+0xac>)
  return HAL_OK;
 80026ca:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026cc:	430a      	orrs	r2, r1
 80026ce:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	4914      	ldr	r1, [pc, #80]	@ (8002724 <HAL_I2C_Init+0xa8>)
 80026d4:	400a      	ands	r2, r1
 80026d6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026d8:	6961      	ldr	r1, [r4, #20]
 80026da:	6922      	ldr	r2, [r4, #16]
 80026dc:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026de:	69a1      	ldr	r1, [r4, #24]
 80026e0:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026e2:	430a      	orrs	r2, r1
 80026e4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026e6:	6a21      	ldr	r1, [r4, #32]
 80026e8:	69e2      	ldr	r2, [r4, #28]
 80026ea:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 80026ec:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026ee:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f6:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80026f8:	2241      	movs	r2, #65	@ 0x41
 80026fa:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026fc:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026fe:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8002702:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	54a3      	strb	r3, [r4, r2]
}
 8002706:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002708:	2280      	movs	r2, #128	@ 0x80
 800270a:	0212      	lsls	r2, r2, #8
 800270c:	4302      	orrs	r2, r0
 800270e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002710:	e7d9      	b.n	80026c6 <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8002712:	3340      	adds	r3, #64	@ 0x40
 8002714:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8002716:	f7fd fdf7 	bl	8000308 <HAL_I2C_MspInit>
 800271a:	e7b7      	b.n	800268c <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 800271c:	2001      	movs	r0, #1
 800271e:	e7f2      	b.n	8002706 <HAL_I2C_Init+0x8a>
 8002720:	f0ffffff 	.word	0xf0ffffff
 8002724:	ffff7fff 	.word	0xffff7fff
 8002728:	02008000 	.word	0x02008000
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 800272c:	4770      	bx	lr
 800272e:	46c0      	nop			@ (mov r8, r8)

08002730 <HAL_I2C_DeInit>:
{
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8002734:	d013      	beq.n	800275e <HAL_I2C_DeInit+0x2e>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002736:	2541      	movs	r5, #65	@ 0x41
 8002738:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 800273a:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800273c:	5543      	strb	r3, [r0, r5]
  __HAL_I2C_DISABLE(hi2c);
 800273e:	6802      	ldr	r2, [r0, #0]
 8002740:	6813      	ldr	r3, [r2, #0]
 8002742:	438b      	bics	r3, r1
 8002744:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002746:	f7fd fe4d 	bl	80003e4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274a:	2300      	movs	r3, #0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800274c:	2242      	movs	r2, #66	@ 0x42
  return HAL_OK;
 800274e:	2000      	movs	r0, #0
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002750:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002752:	5563      	strb	r3, [r4, r5]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002754:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002756:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hi2c);
 8002758:	3a02      	subs	r2, #2
 800275a:	54a3      	strb	r3, [r4, r2]
}
 800275c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800275e:	2001      	movs	r0, #1
 8002760:	e7fc      	b.n	800275c <HAL_I2C_DeInit+0x2c>
 8002762:	46c0      	nop			@ (mov r8, r8)

08002764 <HAL_I2C_Master_Transmit>:
{
 8002764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002766:	4657      	mov	r7, sl
 8002768:	464e      	mov	r6, r9
 800276a:	4645      	mov	r5, r8
 800276c:	46de      	mov	lr, fp
 800276e:	b5e0      	push	{r5, r6, r7, lr}
 8002770:	b083      	sub	sp, #12
 8002772:	001f      	movs	r7, r3
 8002774:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002776:	0004      	movs	r4, r0
 8002778:	469a      	mov	sl, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800277a:	2341      	movs	r3, #65	@ 0x41
 800277c:	5cc3      	ldrb	r3, [r0, r3]
{
 800277e:	000e      	movs	r6, r1
 8002780:	4690      	mov	r8, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002782:	2b20      	cmp	r3, #32
 8002784:	d000      	beq.n	8002788 <HAL_I2C_Master_Transmit+0x24>
 8002786:	e09e      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8002788:	3320      	adds	r3, #32
 800278a:	5cc2      	ldrb	r2, [r0, r3]
 800278c:	2a01      	cmp	r2, #1
 800278e:	d100      	bne.n	8002792 <HAL_I2C_Master_Transmit+0x2e>
 8002790:	e099      	b.n	80028c6 <HAL_I2C_Master_Transmit+0x162>
 8002792:	2201      	movs	r2, #1
 8002794:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8002796:	f7fd ff97 	bl	80006c8 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800279a:	2580      	movs	r5, #128	@ 0x80
    tickstart = HAL_GetTick();
 800279c:	4683      	mov	fp, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800279e:	6820      	ldr	r0, [r4, #0]
 80027a0:	022d      	lsls	r5, r5, #8
 80027a2:	6983      	ldr	r3, [r0, #24]
 80027a4:	422b      	tst	r3, r5
 80027a6:	d017      	beq.n	80027d8 <HAL_I2C_Master_Transmit+0x74>
 80027a8:	46b1      	mov	r9, r6
 80027aa:	0026      	movs	r6, r4
 80027ac:	465c      	mov	r4, fp
 80027ae:	e007      	b.n	80027c0 <HAL_I2C_Master_Transmit+0x5c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027b0:	6830      	ldr	r0, [r6, #0]
 80027b2:	6983      	ldr	r3, [r0, #24]
 80027b4:	422b      	tst	r3, r5
 80027b6:	d000      	beq.n	80027ba <HAL_I2C_Master_Transmit+0x56>
 80027b8:	e187      	b.n	8002aca <HAL_I2C_Master_Transmit+0x366>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027ba:	6983      	ldr	r3, [r0, #24]
 80027bc:	422b      	tst	r3, r5
 80027be:	d008      	beq.n	80027d2 <HAL_I2C_Master_Transmit+0x6e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c0:	f7fd ff82 	bl	80006c8 <HAL_GetTick>
 80027c4:	1b00      	subs	r0, r0, r4
 80027c6:	2819      	cmp	r0, #25
 80027c8:	d8f2      	bhi.n	80027b0 <HAL_I2C_Master_Transmit+0x4c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027ca:	6830      	ldr	r0, [r6, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027cc:	6983      	ldr	r3, [r0, #24]
 80027ce:	422b      	tst	r3, r5
 80027d0:	d1f6      	bne.n	80027c0 <HAL_I2C_Master_Transmit+0x5c>
 80027d2:	46a3      	mov	fp, r4
 80027d4:	0034      	movs	r4, r6
 80027d6:	464e      	mov	r6, r9
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027d8:	2341      	movs	r3, #65	@ 0x41
 80027da:	2221      	movs	r2, #33	@ 0x21
 80027dc:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027de:	3301      	adds	r3, #1
 80027e0:	3a11      	subs	r2, #17
 80027e2:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e4:	2300      	movs	r3, #0
    hi2c->pBuffPtr  = pData;
 80027e6:	4642      	mov	r2, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e8:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80027ea:	8567      	strh	r7, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027ec:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027ee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027f0:	05b6      	lsls	r6, r6, #22
    hi2c->pBuffPtr  = pData;
 80027f2:	6262      	str	r2, [r4, #36]	@ 0x24
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027f4:	0db7      	lsrs	r7, r6, #22
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f6:	2bff      	cmp	r3, #255	@ 0xff
 80027f8:	d86d      	bhi.n	80028d6 <HAL_I2C_Master_Transmit+0x172>
      hi2c->XferSize = hi2c->XferCount;
 80027fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027fc:	49b6      	ldr	r1, [pc, #728]	@ (8002ad8 <HAL_I2C_Master_Transmit+0x374>)
 80027fe:	6842      	ldr	r2, [r0, #4]
      hi2c->XferSize = hi2c->XferCount;
 8002800:	b29b      	uxth	r3, r3
 8002802:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8002804:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002806:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8002808:	433a      	orrs	r2, r7
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800280a:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800280c:	4313      	orrs	r3, r2
 800280e:	4ab3      	ldr	r2, [pc, #716]	@ (8002adc <HAL_I2C_Master_Transmit+0x378>)
 8002810:	4313      	orrs	r3, r2
 8002812:	6043      	str	r3, [r0, #4]
    while (hi2c->XferCount > 0U)
 8002814:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002816:	2510      	movs	r5, #16
    while (hi2c->XferCount > 0U)
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <HAL_I2C_Master_Transmit+0xba>
 800281c:	e098      	b.n	8002950 <HAL_I2C_Master_Transmit+0x1ec>
 800281e:	4656      	mov	r6, sl
 8002820:	46da      	mov	sl, fp
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002822:	2302      	movs	r3, #2
 8002824:	46b8      	mov	r8, r7
 8002826:	469b      	mov	fp, r3
 8002828:	46a1      	mov	r9, r4
 800282a:	465a      	mov	r2, fp
 800282c:	4659      	mov	r1, fp
 800282e:	6983      	ldr	r3, [r0, #24]
 8002830:	401a      	ands	r2, r3
 8002832:	4219      	tst	r1, r3
 8002834:	d000      	beq.n	8002838 <HAL_I2C_Master_Transmit+0xd4>
 8002836:	e071      	b.n	800291c <HAL_I2C_Master_Transmit+0x1b8>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002838:	002b      	movs	r3, r5
  uint32_t itflag   = hi2c->Instance->ISR;
 800283a:	6981      	ldr	r1, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800283c:	2400      	movs	r4, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800283e:	400b      	ands	r3, r1
 8002840:	420d      	tst	r5, r1
 8002842:	d00c      	beq.n	800285e <HAL_I2C_Master_Transmit+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002844:	61c5      	str	r5, [r0, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002846:	1c73      	adds	r3, r6, #1
 8002848:	d000      	beq.n	800284c <HAL_I2C_Master_Transmit+0xe8>
 800284a:	e0e8      	b.n	8002a1e <HAL_I2C_Master_Transmit+0x2ba>
 800284c:	2120      	movs	r1, #32
 800284e:	6983      	ldr	r3, [r0, #24]
 8002850:	4219      	tst	r1, r3
 8002852:	d0fc      	beq.n	800284e <HAL_I2C_Master_Transmit+0xea>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002854:	2320      	movs	r3, #32
 8002856:	61c3      	str	r3, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002858:	2304      	movs	r3, #4
    status = HAL_ERROR;
 800285a:	2401      	movs	r4, #1
    error_code |= HAL_I2C_ERROR_AF;
 800285c:	4313      	orrs	r3, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800285e:	2180      	movs	r1, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002860:	6982      	ldr	r2, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002862:	0049      	lsls	r1, r1, #1
 8002864:	420a      	tst	r2, r1
 8002866:	d040      	beq.n	80028ea <HAL_I2C_Master_Transmit+0x186>
    error_code |= HAL_I2C_ERROR_BERR;
 8002868:	2501      	movs	r5, #1
 800286a:	464c      	mov	r4, r9
 800286c:	432b      	orrs	r3, r5
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800286e:	61c1      	str	r1, [r0, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002870:	0551      	lsls	r1, r2, #21
 8002872:	d504      	bpl.n	800287e <HAL_I2C_Master_Transmit+0x11a>
    error_code |= HAL_I2C_ERROR_OVR;
 8002874:	2108      	movs	r1, #8
 8002876:	430b      	orrs	r3, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002878:	2180      	movs	r1, #128	@ 0x80
 800287a:	00c9      	lsls	r1, r1, #3
 800287c:	61c1      	str	r1, [r0, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800287e:	0592      	lsls	r2, r2, #22
 8002880:	d504      	bpl.n	800288c <HAL_I2C_Master_Transmit+0x128>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002882:	2202      	movs	r2, #2
 8002884:	4313      	orrs	r3, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002886:	32ff      	adds	r2, #255	@ 0xff
 8002888:	32ff      	adds	r2, #255	@ 0xff
 800288a:	61c2      	str	r2, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800288c:	6982      	ldr	r2, [r0, #24]
 800288e:	0792      	lsls	r2, r2, #30
 8002890:	d501      	bpl.n	8002896 <HAL_I2C_Master_Transmit+0x132>
    hi2c->Instance->TXDR = 0x00U;
 8002892:	2200      	movs	r2, #0
 8002894:	6282      	str	r2, [r0, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002896:	2201      	movs	r2, #1
 8002898:	6981      	ldr	r1, [r0, #24]
 800289a:	420a      	tst	r2, r1
 800289c:	d102      	bne.n	80028a4 <HAL_I2C_Master_Transmit+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800289e:	6981      	ldr	r1, [r0, #24]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	6182      	str	r2, [r0, #24]
    I2C_RESET_CR2(hi2c);
 80028a4:	6842      	ldr	r2, [r0, #4]
 80028a6:	498e      	ldr	r1, [pc, #568]	@ (8002ae0 <HAL_I2C_Master_Transmit+0x37c>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	6042      	str	r2, [r0, #4]
    hi2c->ErrorCode |= error_code;
 80028ac:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80028ae:	4313      	orrs	r3, r2
 80028b0:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	2220      	movs	r2, #32
 80028b4:	2341      	movs	r3, #65	@ 0x41
 80028b6:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	3222      	adds	r2, #34	@ 0x22
 80028bc:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80028be:	3a02      	subs	r2, #2
 80028c0:	54a3      	strb	r3, [r4, r2]
      return HAL_ERROR;
 80028c2:	2001      	movs	r0, #1
 80028c4:	e000      	b.n	80028c8 <HAL_I2C_Master_Transmit+0x164>
    __HAL_LOCK(hi2c);
 80028c6:	2002      	movs	r0, #2
}
 80028c8:	b003      	add	sp, #12
 80028ca:	bcf0      	pop	{r4, r5, r6, r7}
 80028cc:	46bb      	mov	fp, r7
 80028ce:	46b2      	mov	sl, r6
 80028d0:	46a9      	mov	r9, r5
 80028d2:	46a0      	mov	r8, r4
 80028d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d6:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80028d8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ad8 <HAL_I2C_Master_Transmit+0x374>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028da:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80028dc:	6843      	ldr	r3, [r0, #4]
 80028de:	4013      	ands	r3, r2
 80028e0:	4a80      	ldr	r2, [pc, #512]	@ (8002ae4 <HAL_I2C_Master_Transmit+0x380>)
 80028e2:	433b      	orrs	r3, r7
 80028e4:	4313      	orrs	r3, r2
 80028e6:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028e8:	e794      	b.n	8002814 <HAL_I2C_Master_Transmit+0xb0>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028ea:	0551      	lsls	r1, r2, #21
 80028ec:	d501      	bpl.n	80028f2 <HAL_I2C_Master_Transmit+0x18e>
 80028ee:	464c      	mov	r4, r9
 80028f0:	e7c0      	b.n	8002874 <HAL_I2C_Master_Transmit+0x110>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028f2:	0592      	lsls	r2, r2, #22
 80028f4:	d501      	bpl.n	80028fa <HAL_I2C_Master_Transmit+0x196>
 80028f6:	464c      	mov	r4, r9
 80028f8:	e7c3      	b.n	8002882 <HAL_I2C_Master_Transmit+0x11e>
  if (status != HAL_OK)
 80028fa:	2c00      	cmp	r4, #0
 80028fc:	d000      	beq.n	8002900 <HAL_I2C_Master_Transmit+0x19c>
 80028fe:	e07b      	b.n	80029f8 <HAL_I2C_Master_Transmit+0x294>
    if (Timeout != HAL_MAX_DELAY)
 8002900:	1c73      	adds	r3, r6, #1
 8002902:	d092      	beq.n	800282a <HAL_I2C_Master_Transmit+0xc6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002904:	f7fd fee0 	bl	80006c8 <HAL_GetTick>
 8002908:	4653      	mov	r3, sl
 800290a:	4647      	mov	r7, r8
 800290c:	464c      	mov	r4, r9
 800290e:	1ac0      	subs	r0, r0, r3
 8002910:	4286      	cmp	r6, r0
 8002912:	d332      	bcc.n	800297a <HAL_I2C_Master_Transmit+0x216>
 8002914:	2e00      	cmp	r6, #0
 8002916:	d030      	beq.n	800297a <HAL_I2C_Master_Transmit+0x216>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002918:	6820      	ldr	r0, [r4, #0]
 800291a:	e782      	b.n	8002822 <HAL_I2C_Master_Transmit+0xbe>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800291c:	464c      	mov	r4, r9
 800291e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002920:	4647      	mov	r7, r8
 8002922:	781a      	ldrb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002924:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002926:	6282      	str	r2, [r0, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002928:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800292a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800292c:	3b01      	subs	r3, #1
 800292e:	b29b      	uxth	r3, r3
 8002930:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002932:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002934:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002936:	3b01      	subs	r3, #1
 8002938:	b29b      	uxth	r3, r3
 800293a:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800293c:	2a00      	cmp	r2, #0
 800293e:	d001      	beq.n	8002944 <HAL_I2C_Master_Transmit+0x1e0>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d02e      	beq.n	80029a2 <HAL_I2C_Master_Transmit+0x23e>
    while (hi2c->XferCount > 0U)
 8002944:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002946:	2b00      	cmp	r3, #0
 8002948:	d000      	beq.n	800294c <HAL_I2C_Master_Transmit+0x1e8>
 800294a:	e76a      	b.n	8002822 <HAL_I2C_Master_Transmit+0xbe>
 800294c:	46d3      	mov	fp, sl
 800294e:	46b2      	mov	sl, r6
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002950:	465a      	mov	r2, fp
 8002952:	4651      	mov	r1, sl
 8002954:	0020      	movs	r0, r4
 8002956:	f7ff fdbd 	bl	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800295a:	2800      	cmp	r0, #0
 800295c:	d1b1      	bne.n	80028c2 <HAL_I2C_Master_Transmit+0x15e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800295e:	2120      	movs	r1, #32
 8002960:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002962:	4d5f      	ldr	r5, [pc, #380]	@ (8002ae0 <HAL_I2C_Master_Transmit+0x37c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002964:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	402a      	ands	r2, r5
 800296a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800296c:	2341      	movs	r3, #65	@ 0x41
 800296e:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002970:	3301      	adds	r3, #1
 8002972:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8002974:	3b02      	subs	r3, #2
 8002976:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8002978:	e7a6      	b.n	80028c8 <HAL_I2C_Master_Transmit+0x164>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800297a:	2202      	movs	r2, #2
 800297c:	0011      	movs	r1, r2
 800297e:	6820      	ldr	r0, [r4, #0]
 8002980:	6983      	ldr	r3, [r0, #24]
 8002982:	4019      	ands	r1, r3
 8002984:	421a      	tst	r2, r3
 8002986:	d000      	beq.n	800298a <HAL_I2C_Master_Transmit+0x226>
 8002988:	e74b      	b.n	8002822 <HAL_I2C_Master_Transmit+0xbe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800298a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800298c:	321e      	adds	r2, #30
 800298e:	4313      	orrs	r3, r2
 8002990:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002992:	2341      	movs	r3, #65	@ 0x41
 8002994:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002996:	3301      	adds	r3, #1
 8002998:	54e1      	strb	r1, [r4, r3]
          __HAL_UNLOCK(hi2c);
 800299a:	3b02      	subs	r3, #2
      return HAL_ERROR;
 800299c:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800299e:	54e1      	strb	r1, [r4, r3]
          return HAL_ERROR;
 80029a0:	e792      	b.n	80028c8 <HAL_I2C_Master_Transmit+0x164>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a2:	2280      	movs	r2, #128	@ 0x80
 80029a4:	4690      	mov	r8, r2
 80029a6:	1c73      	adds	r3, r6, #1
 80029a8:	d10f      	bne.n	80029ca <HAL_I2C_Master_Transmit+0x266>
 80029aa:	6983      	ldr	r3, [r0, #24]
 80029ac:	421a      	tst	r2, r3
 80029ae:	d0fc      	beq.n	80029aa <HAL_I2C_Master_Transmit+0x246>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80029b2:	2bff      	cmp	r3, #255	@ 0xff
 80029b4:	d924      	bls.n	8002a00 <HAL_I2C_Master_Transmit+0x29c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b6:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80029b8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ae8 <HAL_I2C_Master_Transmit+0x384>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ba:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80029bc:	6843      	ldr	r3, [r0, #4]
 80029be:	4013      	ands	r3, r2
 80029c0:	4a4a      	ldr	r2, [pc, #296]	@ (8002aec <HAL_I2C_Master_Transmit+0x388>)
 80029c2:	433b      	orrs	r3, r7
 80029c4:	4313      	orrs	r3, r2
 80029c6:	6043      	str	r3, [r0, #4]
}
 80029c8:	e7bc      	b.n	8002944 <HAL_I2C_Master_Transmit+0x1e0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ca:	4642      	mov	r2, r8
 80029cc:	6983      	ldr	r3, [r0, #24]
 80029ce:	421a      	tst	r2, r3
 80029d0:	d1ee      	bne.n	80029b0 <HAL_I2C_Master_Transmit+0x24c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d2:	f7fd fe79 	bl	80006c8 <HAL_GetTick>
 80029d6:	4653      	mov	r3, sl
 80029d8:	1ac0      	subs	r0, r0, r3
 80029da:	4286      	cmp	r6, r0
 80029dc:	d30e      	bcc.n	80029fc <HAL_I2C_Master_Transmit+0x298>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029de:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e0:	2e00      	cmp	r6, #0
 80029e2:	d1f2      	bne.n	80029ca <HAL_I2C_Master_Transmit+0x266>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029e4:	4642      	mov	r2, r8
 80029e6:	6983      	ldr	r3, [r0, #24]
 80029e8:	421a      	tst	r2, r3
 80029ea:	d1ee      	bne.n	80029ca <HAL_I2C_Master_Transmit+0x266>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ec:	2220      	movs	r2, #32
 80029ee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80029f0:	4313      	orrs	r3, r2
 80029f2:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029f4:	2341      	movs	r3, #65	@ 0x41
 80029f6:	e75e      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x152>
 80029f8:	464c      	mov	r4, r9
 80029fa:	e747      	b.n	800288c <HAL_I2C_Master_Transmit+0x128>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029fc:	6820      	ldr	r0, [r4, #0]
 80029fe:	e7f1      	b.n	80029e4 <HAL_I2C_Master_Transmit+0x280>
          hi2c->XferSize = hi2c->XferCount;
 8002a00:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a02:	4939      	ldr	r1, [pc, #228]	@ (8002ae8 <HAL_I2C_Master_Transmit+0x384>)
 8002a04:	6842      	ldr	r2, [r0, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a0a:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a0c:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a0e:	433a      	orrs	r2, r7
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a10:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a12:	4313      	orrs	r3, r2
 8002a14:	2280      	movs	r2, #128	@ 0x80
 8002a16:	0492      	lsls	r2, r2, #18
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	6043      	str	r3, [r0, #4]
}
 8002a1c:	e792      	b.n	8002944 <HAL_I2C_Master_Transmit+0x1e0>
  HAL_StatusTypeDef status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9300      	str	r3, [sp, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a22:	4643      	mov	r3, r8
  uint32_t tickstart = Tickstart;
 8002a24:	4654      	mov	r4, sl
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	0033      	movs	r3, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a2a:	2720      	movs	r7, #32
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a2c:	0026      	movs	r6, r4
 8002a2e:	4690      	mov	r8, r2
 8002a30:	464c      	mov	r4, r9
 8002a32:	4699      	mov	r9, r3
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a34:	6983      	ldr	r3, [r0, #24]
 8002a36:	421f      	tst	r7, r3
 8002a38:	d10e      	bne.n	8002a58 <HAL_I2C_Master_Transmit+0x2f4>
 8002a3a:	9b00      	ldr	r3, [sp, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d13e      	bne.n	8002abe <HAL_I2C_Master_Transmit+0x35a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a40:	f7fd fe42 	bl	80006c8 <HAL_GetTick>
 8002a44:	1b80      	subs	r0, r0, r6
 8002a46:	4581      	cmp	r9, r0
 8002a48:	d310      	bcc.n	8002a6c <HAL_I2C_Master_Transmit+0x308>
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <HAL_I2C_Master_Transmit+0x308>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a50:	6820      	ldr	r0, [r4, #0]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a52:	6983      	ldr	r3, [r0, #24]
 8002a54:	421f      	tst	r7, r3
 8002a56:	d0f0      	beq.n	8002a3a <HAL_I2C_Master_Transmit+0x2d6>
    if (status == HAL_OK)
 8002a58:	9b01      	ldr	r3, [sp, #4]
 8002a5a:	4642      	mov	r2, r8
 8002a5c:	4698      	mov	r8, r3
 8002a5e:	9b00      	ldr	r3, [sp, #0]
 8002a60:	464e      	mov	r6, r9
 8002a62:	46a1      	mov	r9, r4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d100      	bne.n	8002a6a <HAL_I2C_Master_Transmit+0x306>
 8002a68:	e6f4      	b.n	8002854 <HAL_I2C_Master_Transmit+0xf0>
 8002a6a:	e6f5      	b.n	8002858 <HAL_I2C_Master_Transmit+0xf4>
          tmp2 = hi2c->Mode;
 8002a6c:	2342      	movs	r3, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a6e:	6820      	ldr	r0, [r4, #0]
 8002a70:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 8002a72:	5ce3      	ldrb	r3, [r4, r3]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a74:	6982      	ldr	r2, [r0, #24]
          tmp2 = hi2c->Mode;
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	469c      	mov	ip, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a7a:	2380      	movs	r3, #128	@ 0x80
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	421a      	tst	r2, r3
 8002a80:	d00f      	beq.n	8002aa2 <HAL_I2C_Master_Transmit+0x33e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a82:	2280      	movs	r2, #128	@ 0x80
 8002a84:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a86:	4211      	tst	r1, r2
 8002a88:	d10b      	bne.n	8002aa2 <HAL_I2C_Master_Transmit+0x33e>
              (tmp1 != I2C_CR2_STOP) && \
 8002a8a:	4663      	mov	r3, ip
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d008      	beq.n	8002aa2 <HAL_I2C_Master_Transmit+0x33e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a90:	6843      	ldr	r3, [r0, #4]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	6042      	str	r2, [r0, #4]
            tickstart = HAL_GetTick();
 8002a96:	f7fd fe17 	bl	80006c8 <HAL_GetTick>
 8002a9a:	0006      	movs	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a9c:	6820      	ldr	r0, [r4, #0]
 8002a9e:	e000      	b.n	8002aa2 <HAL_I2C_Master_Transmit+0x33e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002aa0:	6820      	ldr	r0, [r4, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aa2:	6983      	ldr	r3, [r0, #24]
 8002aa4:	421f      	tst	r7, r3
 8002aa6:	d1c5      	bne.n	8002a34 <HAL_I2C_Master_Transmit+0x2d0>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002aa8:	f7fd fe0e 	bl	80006c8 <HAL_GetTick>
 8002aac:	1b80      	subs	r0, r0, r6
 8002aae:	2819      	cmp	r0, #25
 8002ab0:	d9f6      	bls.n	8002aa0 <HAL_I2C_Master_Transmit+0x33c>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	4698      	mov	r8, r3
              status = HAL_ERROR;
 8002ab6:	3b1f      	subs	r3, #31
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ab8:	6820      	ldr	r0, [r4, #0]
              status = HAL_ERROR;
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	e7ba      	b.n	8002a34 <HAL_I2C_Master_Transmit+0x2d0>
 8002abe:	9b01      	ldr	r3, [sp, #4]
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	464e      	mov	r6, r9
 8002ac4:	4698      	mov	r8, r3
 8002ac6:	46a1      	mov	r9, r4
 8002ac8:	e6c6      	b.n	8002858 <HAL_I2C_Master_Transmit+0xf4>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aca:	0034      	movs	r4, r6
 8002acc:	2220      	movs	r2, #32
 8002ace:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ad4:	2341      	movs	r3, #65	@ 0x41
 8002ad6:	e6ee      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x152>
 8002ad8:	fc009800 	.word	0xfc009800
 8002adc:	02002000 	.word	0x02002000
 8002ae0:	fe00e800 	.word	0xfe00e800
 8002ae4:	01ff2000 	.word	0x01ff2000
 8002ae8:	fc009c00 	.word	0xfc009c00
 8002aec:	01ff0000 	.word	0x01ff0000

08002af0 <HAL_I2C_Master_Receive>:
{
 8002af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af2:	464f      	mov	r7, r9
 8002af4:	46d6      	mov	lr, sl
 8002af6:	4646      	mov	r6, r8
 8002af8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002afa:	2341      	movs	r3, #65	@ 0x41
{
 8002afc:	b5c0      	push	{r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002afe:	5cc3      	ldrb	r3, [r0, r3]
{
 8002b00:	0004      	movs	r4, r0
 8002b02:	4688      	mov	r8, r1
 8002b04:	4692      	mov	sl, r2
 8002b06:	9f08      	ldr	r7, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d000      	beq.n	8002b0e <HAL_I2C_Master_Receive+0x1e>
 8002b0c:	e08f      	b.n	8002c2e <HAL_I2C_Master_Receive+0x13e>
    __HAL_LOCK(hi2c);
 8002b0e:	3320      	adds	r3, #32
 8002b10:	5cc2      	ldrb	r2, [r0, r3]
 8002b12:	2a01      	cmp	r2, #1
 8002b14:	d100      	bne.n	8002b18 <HAL_I2C_Master_Receive+0x28>
 8002b16:	e08a      	b.n	8002c2e <HAL_I2C_Master_Receive+0x13e>
 8002b18:	2201      	movs	r2, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b1a:	2680      	movs	r6, #128	@ 0x80
    __HAL_LOCK(hi2c);
 8002b1c:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8002b1e:	f7fd fdd3 	bl	80006c8 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	0236      	lsls	r6, r6, #8
 8002b26:	699a      	ldr	r2, [r3, #24]
    tickstart = HAL_GetTick();
 8002b28:	0005      	movs	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b2a:	4232      	tst	r2, r6
 8002b2c:	d00c      	beq.n	8002b48 <HAL_I2C_Master_Receive+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2e:	f7fd fdcb 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b32:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b34:	1b40      	subs	r0, r0, r5
 8002b36:	2819      	cmp	r0, #25
 8002b38:	d903      	bls.n	8002b42 <HAL_I2C_Master_Receive+0x52>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	4232      	tst	r2, r6
 8002b3e:	d000      	beq.n	8002b42 <HAL_I2C_Master_Receive+0x52>
 8002b40:	e08b      	b.n	8002c5a <HAL_I2C_Master_Receive+0x16a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b42:	699a      	ldr	r2, [r3, #24]
 8002b44:	4232      	tst	r2, r6
 8002b46:	d1f2      	bne.n	8002b2e <HAL_I2C_Master_Receive+0x3e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b48:	2241      	movs	r2, #65	@ 0x41
 8002b4a:	2122      	movs	r1, #34	@ 0x22
 8002b4c:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b4e:	3201      	adds	r2, #1
 8002b50:	3912      	subs	r1, #18
 8002b52:	54a1      	strb	r1, [r4, r2]
    hi2c->pBuffPtr  = pData;
 8002b54:	4651      	mov	r1, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b56:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8002b58:	6261      	str	r1, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b5a:	4649      	mov	r1, r9
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b5c:	6462      	str	r2, [r4, #68]	@ 0x44
    hi2c->XferISR   = NULL;
 8002b5e:	6362      	str	r2, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b60:	4642      	mov	r2, r8
    hi2c->XferCount = Size;
 8002b62:	8561      	strh	r1, [r4, #42]	@ 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b64:	0592      	lsls	r2, r2, #22
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b66:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b68:	0d92      	lsrs	r2, r2, #22
 8002b6a:	4690      	mov	r8, r2
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b6c:	29ff      	cmp	r1, #255	@ 0xff
 8002b6e:	d900      	bls.n	8002b72 <HAL_I2C_Master_Receive+0x82>
 8002b70:	e080      	b.n	8002c74 <HAL_I2C_Master_Receive+0x184>
      hi2c->XferSize = hi2c->XferCount;
 8002b72:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b74:	484d      	ldr	r0, [pc, #308]	@ (8002cac <HAL_I2C_Master_Receive+0x1bc>)
 8002b76:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 8002b78:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b7a:	4001      	ands	r1, r0
 8002b7c:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 8002b7e:	8522      	strh	r2, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b80:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b82:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b84:	0412      	lsls	r2, r2, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b86:	430a      	orrs	r2, r1
 8002b88:	4949      	ldr	r1, [pc, #292]	@ (8002cb0 <HAL_I2C_Master_Receive+0x1c0>)
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 8002b8e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b90:	2680      	movs	r6, #128	@ 0x80
    while (hi2c->XferCount > 0U)
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d103      	bne.n	8002b9e <HAL_I2C_Master_Receive+0xae>
 8002b96:	e035      	b.n	8002c04 <HAL_I2C_Master_Receive+0x114>
 8002b98:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d032      	beq.n	8002c04 <HAL_I2C_Master_Receive+0x114>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b9e:	002a      	movs	r2, r5
 8002ba0:	0039      	movs	r1, r7
 8002ba2:	0020      	movs	r0, r4
 8002ba4:	f7ff fab2 	bl	800210c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ba8:	2800      	cmp	r0, #0
 8002baa:	d161      	bne.n	8002c70 <HAL_I2C_Master_Receive+0x180>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bb0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002bb2:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8002bb4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8002bb6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002bb8:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8002bba:	3301      	adds	r3, #1
      hi2c->XferCount--;
 8002bbc:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8002bbe:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002bc0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002bc2:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bc4:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bc6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bcc:	2a00      	cmp	r2, #0
 8002bce:	d0e3      	beq.n	8002b98 <HAL_I2C_Master_Receive+0xa8>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e1      	bne.n	8002b98 <HAL_I2C_Master_Receive+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bd4:	2380      	movs	r3, #128	@ 0x80
 8002bd6:	6822      	ldr	r2, [r4, #0]
 8002bd8:	4699      	mov	r9, r3
 8002bda:	1c7b      	adds	r3, r7, #1
 8002bdc:	d12d      	bne.n	8002c3a <HAL_I2C_Master_Receive+0x14a>
 8002bde:	6993      	ldr	r3, [r2, #24]
 8002be0:	421e      	tst	r6, r3
 8002be2:	d0fc      	beq.n	8002bde <HAL_I2C_Master_Receive+0xee>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002be6:	2bff      	cmp	r3, #255	@ 0xff
 8002be8:	d94f      	bls.n	8002c8a <HAL_I2C_Master_Receive+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bea:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bec:	4931      	ldr	r1, [pc, #196]	@ (8002cb4 <HAL_I2C_Master_Receive+0x1c4>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bee:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bf0:	6853      	ldr	r3, [r2, #4]
 8002bf2:	400b      	ands	r3, r1
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	430b      	orrs	r3, r1
 8002bf8:	492f      	ldr	r1, [pc, #188]	@ (8002cb8 <HAL_I2C_Master_Receive+0x1c8>)
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8002bfe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1cc      	bne.n	8002b9e <HAL_I2C_Master_Receive+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c04:	002a      	movs	r2, r5
 8002c06:	0039      	movs	r1, r7
 8002c08:	0020      	movs	r0, r4
 8002c0a:	f7ff fc63 	bl	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c0e:	2800      	cmp	r0, #0
 8002c10:	d12e      	bne.n	8002c70 <HAL_I2C_Master_Receive+0x180>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c12:	2120      	movs	r1, #32
 8002c14:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002c16:	4d29      	ldr	r5, [pc, #164]	@ (8002cbc <HAL_I2C_Master_Receive+0x1cc>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c18:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	402a      	ands	r2, r5
 8002c1e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	2341      	movs	r3, #65	@ 0x41
 8002c22:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c24:	3301      	adds	r3, #1
 8002c26:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8002c28:	3b02      	subs	r3, #2
 8002c2a:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8002c2c:	e000      	b.n	8002c30 <HAL_I2C_Master_Receive+0x140>
    __HAL_LOCK(hi2c);
 8002c2e:	2002      	movs	r0, #2
}
 8002c30:	bce0      	pop	{r5, r6, r7}
 8002c32:	46ba      	mov	sl, r7
 8002c34:	46b1      	mov	r9, r6
 8002c36:	46a8      	mov	r8, r5
 8002c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	6993      	ldr	r3, [r2, #24]
 8002c3e:	4219      	tst	r1, r3
 8002c40:	d1d0      	bne.n	8002be4 <HAL_I2C_Master_Receive+0xf4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c42:	f7fd fd41 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c46:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c48:	1b40      	subs	r0, r0, r5
 8002c4a:	4287      	cmp	r7, r0
 8002c4c:	d301      	bcc.n	8002c52 <HAL_I2C_Master_Receive+0x162>
 8002c4e:	2f00      	cmp	r7, #0
 8002c50:	d1f3      	bne.n	8002c3a <HAL_I2C_Master_Receive+0x14a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c52:	4649      	mov	r1, r9
 8002c54:	6993      	ldr	r3, [r2, #24]
 8002c56:	4219      	tst	r1, r3
 8002c58:	d1ef      	bne.n	8002c3a <HAL_I2C_Master_Receive+0x14a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c62:	2341      	movs	r3, #65	@ 0x41
 8002c64:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	3222      	adds	r2, #34	@ 0x22
 8002c6a:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8002c6c:	3a02      	subs	r2, #2
 8002c6e:	54a3      	strb	r3, [r4, r2]
      return HAL_ERROR;
 8002c70:	2001      	movs	r0, #1
 8002c72:	e7dd      	b.n	8002c30 <HAL_I2C_Master_Receive+0x140>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c74:	22ff      	movs	r2, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c76:	490d      	ldr	r1, [pc, #52]	@ (8002cac <HAL_I2C_Master_Receive+0x1bc>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c78:	8522      	strh	r2, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	4641      	mov	r1, r8
 8002c80:	430a      	orrs	r2, r1
 8002c82:	490f      	ldr	r1, [pc, #60]	@ (8002cc0 <HAL_I2C_Master_Receive+0x1d0>)
 8002c84:	430a      	orrs	r2, r1
 8002c86:	605a      	str	r2, [r3, #4]
}
 8002c88:	e781      	b.n	8002b8e <HAL_I2C_Master_Receive+0x9e>
          hi2c->XferSize = hi2c->XferCount;
 8002c8a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c8c:	4809      	ldr	r0, [pc, #36]	@ (8002cb4 <HAL_I2C_Master_Receive+0x1c4>)
 8002c8e:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002c90:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c92:	4001      	ands	r1, r0
 8002c94:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8002c96:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c98:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c9a:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c9c:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	2180      	movs	r1, #128	@ 0x80
 8002ca2:	0489      	lsls	r1, r1, #18
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	6053      	str	r3, [r2, #4]
}
 8002ca8:	e776      	b.n	8002b98 <HAL_I2C_Master_Receive+0xa8>
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	fc009800 	.word	0xfc009800
 8002cb0:	02002400 	.word	0x02002400
 8002cb4:	fc009c00 	.word	0xfc009c00
 8002cb8:	01ff0000 	.word	0x01ff0000
 8002cbc:	fe00e800 	.word	0xfe00e800
 8002cc0:	01ff2400 	.word	0x01ff2400

08002cc4 <HAL_I2C_Slave_Transmit>:
{
 8002cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc6:	464f      	mov	r7, r9
 8002cc8:	46d6      	mov	lr, sl
 8002cca:	4646      	mov	r6, r8
 8002ccc:	001d      	movs	r5, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cce:	2341      	movs	r3, #65	@ 0x41
{
 8002cd0:	b5c0      	push	{r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd2:	4698      	mov	r8, r3
 8002cd4:	5cc3      	ldrb	r3, [r0, r3]
{
 8002cd6:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cd8:	b2da      	uxtb	r2, r3
{
 8002cda:	0004      	movs	r4, r0
 8002cdc:	000f      	movs	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cde:	4692      	mov	sl, r2
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d000      	beq.n	8002ce6 <HAL_I2C_Slave_Transmit+0x22>
 8002ce4:	e0a3      	b.n	8002e2e <HAL_I2C_Slave_Transmit+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8002ce6:	2900      	cmp	r1, #0
 8002ce8:	d100      	bne.n	8002cec <HAL_I2C_Slave_Transmit+0x28>
 8002cea:	e089      	b.n	8002e00 <HAL_I2C_Slave_Transmit+0x13c>
 8002cec:	464b      	mov	r3, r9
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d100      	bne.n	8002cf4 <HAL_I2C_Slave_Transmit+0x30>
 8002cf2:	e085      	b.n	8002e00 <HAL_I2C_Slave_Transmit+0x13c>
    __HAL_LOCK(hi2c);
 8002cf4:	2340      	movs	r3, #64	@ 0x40
 8002cf6:	5cc2      	ldrb	r2, [r0, r3]
 8002cf8:	2a01      	cmp	r2, #1
 8002cfa:	d100      	bne.n	8002cfe <HAL_I2C_Slave_Transmit+0x3a>
 8002cfc:	e097      	b.n	8002e2e <HAL_I2C_Slave_Transmit+0x16a>
 8002cfe:	2201      	movs	r2, #1
 8002d00:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8002d02:	f7fd fce1 	bl	80006c8 <HAL_GetTick>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d06:	2321      	movs	r3, #33	@ 0x21
 8002d08:	4642      	mov	r2, r8
 8002d0a:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002d0c:	4652      	mov	r2, sl
 8002d0e:	3321      	adds	r3, #33	@ 0x21
 8002d10:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d12:	2300      	movs	r3, #0
    hi2c->XferCount = Size;
 8002d14:	464a      	mov	r2, r9
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d16:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8002d18:	8562      	strh	r2, [r4, #42]	@ 0x2a
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002d1a:	6822      	ldr	r2, [r4, #0]
    hi2c->XferISR   = NULL;
 8002d1c:	6363      	str	r3, [r4, #52]	@ 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002d1e:	497d      	ldr	r1, [pc, #500]	@ (8002f14 <HAL_I2C_Slave_Transmit+0x250>)
 8002d20:	6853      	ldr	r3, [r2, #4]
    hi2c->pBuffPtr  = pData;
 8002d22:	6267      	str	r7, [r4, #36]	@ 0x24
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002d24:	400b      	ands	r3, r1
    tickstart = HAL_GetTick();
 8002d26:	0006      	movs	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d28:	2708      	movs	r7, #8
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002d2a:	6053      	str	r3, [r2, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d2c:	1c6b      	adds	r3, r5, #1
 8002d2e:	d171      	bne.n	8002e14 <HAL_I2C_Slave_Transmit+0x150>
 8002d30:	2308      	movs	r3, #8
 8002d32:	6991      	ldr	r1, [r2, #24]
 8002d34:	420b      	tst	r3, r1
 8002d36:	d0fc      	beq.n	8002d32 <HAL_I2C_Slave_Transmit+0x6e>
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8002d38:	2380      	movs	r3, #128	@ 0x80
 8002d3a:	6a21      	ldr	r1, [r4, #32]
 8002d3c:	029b      	lsls	r3, r3, #10
 8002d3e:	4299      	cmp	r1, r3
 8002d40:	d100      	bne.n	8002d44 <HAL_I2C_Slave_Transmit+0x80>
 8002d42:	e08a      	b.n	8002e5a <HAL_I2C_Slave_Transmit+0x196>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d44:	2308      	movs	r3, #8
 8002d46:	61d3      	str	r3, [r2, #28]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d48:	68e3      	ldr	r3, [r4, #12]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d100      	bne.n	8002d50 <HAL_I2C_Slave_Transmit+0x8c>
 8002d4e:	e0bf      	b.n	8002ed0 <HAL_I2C_Slave_Transmit+0x20c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d50:	2780      	movs	r7, #128	@ 0x80
 8002d52:	027f      	lsls	r7, r7, #9
 8002d54:	1c6b      	adds	r3, r5, #1
 8002d56:	d000      	beq.n	8002d5a <HAL_I2C_Slave_Transmit+0x96>
 8002d58:	e073      	b.n	8002e42 <HAL_I2C_Slave_Transmit+0x17e>
 8002d5a:	2180      	movs	r1, #128	@ 0x80
 8002d5c:	0249      	lsls	r1, r1, #9
 8002d5e:	6993      	ldr	r3, [r2, #24]
 8002d60:	420b      	tst	r3, r1
 8002d62:	d0fc      	beq.n	8002d5e <HAL_I2C_Slave_Transmit+0x9a>
    while (hi2c->XferCount > 0U)
 8002d64:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d014      	beq.n	8002d94 <HAL_I2C_Slave_Transmit+0xd0>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6a:	0032      	movs	r2, r6
 8002d6c:	0029      	movs	r1, r5
 8002d6e:	0020      	movs	r0, r4
 8002d70:	f7ff fac0 	bl	80022f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d000      	beq.n	8002d7a <HAL_I2C_Slave_Transmit+0xb6>
 8002d78:	e0a8      	b.n	8002ecc <HAL_I2C_Slave_Transmit+0x208>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d7a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002d7c:	6822      	ldr	r2, [r4, #0]
 8002d7e:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002d80:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d82:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002d84:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002d86:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferCount > 0U)
 8002d8e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ea      	bne.n	8002d6a <HAL_I2C_Slave_Transmit+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d94:	2710      	movs	r7, #16
 8002d96:	1c6b      	adds	r3, r5, #1
 8002d98:	d000      	beq.n	8002d9c <HAL_I2C_Slave_Transmit+0xd8>
 8002d9a:	e073      	b.n	8002e84 <HAL_I2C_Slave_Transmit+0x1c0>
 8002d9c:	2110      	movs	r1, #16
 8002d9e:	6993      	ldr	r3, [r2, #24]
 8002da0:	4219      	tst	r1, r3
 8002da2:	d0fc      	beq.n	8002d9e <HAL_I2C_Slave_Transmit+0xda>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002da4:	6993      	ldr	r3, [r2, #24]
 8002da6:	079b      	lsls	r3, r3, #30
 8002da8:	d500      	bpl.n	8002dac <HAL_I2C_Slave_Transmit+0xe8>
 8002daa:	e09b      	b.n	8002ee4 <HAL_I2C_Slave_Transmit+0x220>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dac:	2301      	movs	r3, #1
 8002dae:	6991      	ldr	r1, [r2, #24]
 8002db0:	420b      	tst	r3, r1
 8002db2:	d102      	bne.n	8002dba <HAL_I2C_Slave_Transmit+0xf6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002db4:	6991      	ldr	r1, [r2, #24]
 8002db6:	430b      	orrs	r3, r1
 8002db8:	6193      	str	r3, [r2, #24]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dba:	2310      	movs	r3, #16
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dbc:	0029      	movs	r1, r5
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dbe:	61d3      	str	r3, [r2, #28]
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dc0:	0020      	movs	r0, r4
 8002dc2:	0032      	movs	r2, r6
 8002dc4:	f7ff fb86 	bl	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dc8:	1e07      	subs	r7, r0, #0
 8002dca:	d000      	beq.n	8002dce <HAL_I2C_Slave_Transmit+0x10a>
 8002dcc:	e07e      	b.n	8002ecc <HAL_I2C_Slave_Transmit+0x208>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dce:	2320      	movs	r3, #32
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd0:	2180      	movs	r1, #128	@ 0x80
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd2:	6822      	ldr	r2, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd4:	0209      	lsls	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dd6:	61d3      	str	r3, [r2, #28]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd8:	1c6b      	adds	r3, r5, #1
 8002dda:	d000      	beq.n	8002dde <HAL_I2C_Slave_Transmit+0x11a>
 8002ddc:	e085      	b.n	8002eea <HAL_I2C_Slave_Transmit+0x226>
 8002dde:	6993      	ldr	r3, [r2, #24]
 8002de0:	420b      	tst	r3, r1
 8002de2:	d1fc      	bne.n	8002dde <HAL_I2C_Slave_Transmit+0x11a>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	6851      	ldr	r1, [r2, #4]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	430b      	orrs	r3, r1
 8002dec:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002dee:	2341      	movs	r3, #65	@ 0x41
 8002df0:	2220      	movs	r2, #32
 8002df2:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	3222      	adds	r2, #34	@ 0x22
 8002df8:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8002dfa:	3a02      	subs	r2, #2
 8002dfc:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8002dfe:	e017      	b.n	8002e30 <HAL_I2C_Slave_Transmit+0x16c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	009b      	lsls	r3, r3, #2
      return  HAL_ERROR;
 8002e04:	2701      	movs	r7, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e06:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8002e08:	e012      	b.n	8002e30 <HAL_I2C_Slave_Transmit+0x16c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0a:	2d00      	cmp	r5, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_I2C_Slave_Transmit+0x150>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e0e:	6993      	ldr	r3, [r2, #24]
 8002e10:	421f      	tst	r7, r3
 8002e12:	d049      	beq.n	8002ea8 <HAL_I2C_Slave_Transmit+0x1e4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e14:	6993      	ldr	r3, [r2, #24]
 8002e16:	421f      	tst	r7, r3
 8002e18:	d18e      	bne.n	8002d38 <HAL_I2C_Slave_Transmit+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1a:	f7fd fc55 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e1e:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e20:	1b80      	subs	r0, r0, r6
 8002e22:	4285      	cmp	r5, r0
 8002e24:	d2f1      	bcs.n	8002e0a <HAL_I2C_Slave_Transmit+0x146>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e26:	6993      	ldr	r3, [r2, #24]
 8002e28:	421f      	tst	r7, r3
 8002e2a:	d1f3      	bne.n	8002e14 <HAL_I2C_Slave_Transmit+0x150>
 8002e2c:	e03c      	b.n	8002ea8 <HAL_I2C_Slave_Transmit+0x1e4>
    __HAL_LOCK(hi2c);
 8002e2e:	2702      	movs	r7, #2
}
 8002e30:	0038      	movs	r0, r7
 8002e32:	bce0      	pop	{r5, r6, r7}
 8002e34:	46ba      	mov	sl, r7
 8002e36:	46b1      	mov	r9, r6
 8002e38:	46a8      	mov	r8, r5
 8002e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e3c:	6993      	ldr	r3, [r2, #24]
 8002e3e:	423b      	tst	r3, r7
 8002e40:	d032      	beq.n	8002ea8 <HAL_I2C_Slave_Transmit+0x1e4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e42:	6993      	ldr	r3, [r2, #24]
 8002e44:	423b      	tst	r3, r7
 8002e46:	d1a2      	bne.n	8002d8e <HAL_I2C_Slave_Transmit+0xca>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e48:	f7fd fc3e 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e4c:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e4e:	1b80      	subs	r0, r0, r6
 8002e50:	4285      	cmp	r5, r0
 8002e52:	d3f3      	bcc.n	8002e3c <HAL_I2C_Slave_Transmit+0x178>
 8002e54:	2d00      	cmp	r5, #0
 8002e56:	d1f4      	bne.n	8002e42 <HAL_I2C_Slave_Transmit+0x17e>
 8002e58:	e7f0      	b.n	8002e3c <HAL_I2C_Slave_Transmit+0x178>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e5a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e5c:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002e5e:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e60:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002e62:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002e64:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002e6c:	e76a      	b.n	8002d44 <HAL_I2C_Slave_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e6e:	f7fd fc2b 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e72:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e74:	1b80      	subs	r0, r0, r6
 8002e76:	4285      	cmp	r5, r0
 8002e78:	d301      	bcc.n	8002e7e <HAL_I2C_Slave_Transmit+0x1ba>
 8002e7a:	2d00      	cmp	r5, #0
 8002e7c:	d102      	bne.n	8002e84 <HAL_I2C_Slave_Transmit+0x1c0>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e7e:	6993      	ldr	r3, [r2, #24]
 8002e80:	421f      	tst	r7, r3
 8002e82:	d011      	beq.n	8002ea8 <HAL_I2C_Slave_Transmit+0x1e4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e84:	6993      	ldr	r3, [r2, #24]
 8002e86:	421f      	tst	r7, r3
 8002e88:	d0f1      	beq.n	8002e6e <HAL_I2C_Slave_Transmit+0x1aa>
 8002e8a:	e78b      	b.n	8002da4 <HAL_I2C_Slave_Transmit+0xe0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8c:	2d00      	cmp	r5, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_I2C_Slave_Transmit+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e90:	6993      	ldr	r3, [r2, #24]
 8002e92:	421f      	tst	r7, r3
 8002e94:	d123      	bne.n	8002ede <HAL_I2C_Slave_Transmit+0x21a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	f7fd fc17 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e9a:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9c:	1b80      	subs	r0, r0, r6
 8002e9e:	4285      	cmp	r5, r0
 8002ea0:	d2f4      	bcs.n	8002e8c <HAL_I2C_Slave_Transmit+0x1c8>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ea2:	6993      	ldr	r3, [r2, #24]
 8002ea4:	421f      	tst	r7, r3
 8002ea6:	d1f3      	bne.n	8002e90 <HAL_I2C_Slave_Transmit+0x1cc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea8:	2120      	movs	r1, #32
 8002eaa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002eac:	430b      	orrs	r3, r1
 8002eae:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eb0:	2341      	movs	r3, #65	@ 0x41
 8002eb2:	54e1      	strb	r1, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	3122      	adds	r1, #34	@ 0x22
 8002eb8:	5463      	strb	r3, [r4, r1]
          __HAL_UNLOCK(hi2c);
 8002eba:	3902      	subs	r1, #2
 8002ebc:	5463      	strb	r3, [r4, r1]
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ebe:	2380      	movs	r3, #128	@ 0x80
 8002ec0:	6851      	ldr	r1, [r2, #4]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	430b      	orrs	r3, r1
      return  HAL_ERROR;
 8002ec6:	2701      	movs	r7, #1
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ec8:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8002eca:	e7b1      	b.n	8002e30 <HAL_I2C_Slave_Transmit+0x16c>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ecc:	6822      	ldr	r2, [r4, #0]
 8002ece:	e7f6      	b.n	8002ebe <HAL_I2C_Slave_Transmit+0x1fa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed0:	2108      	movs	r1, #8
 8002ed2:	000f      	movs	r7, r1
 8002ed4:	1c6b      	adds	r3, r5, #1
 8002ed6:	d1db      	bne.n	8002e90 <HAL_I2C_Slave_Transmit+0x1cc>
 8002ed8:	6993      	ldr	r3, [r2, #24]
 8002eda:	4219      	tst	r1, r3
 8002edc:	d0fc      	beq.n	8002ed8 <HAL_I2C_Slave_Transmit+0x214>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ede:	2308      	movs	r3, #8
 8002ee0:	61d3      	str	r3, [r2, #28]
 8002ee2:	e735      	b.n	8002d50 <HAL_I2C_Slave_Transmit+0x8c>
    hi2c->Instance->TXDR = 0x00U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	6293      	str	r3, [r2, #40]	@ 0x28
 8002ee8:	e760      	b.n	8002dac <HAL_I2C_Slave_Transmit+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eea:	2380      	movs	r3, #128	@ 0x80
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	4698      	mov	r8, r3
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	6993      	ldr	r3, [r2, #24]
 8002ef4:	420b      	tst	r3, r1
 8002ef6:	d100      	bne.n	8002efa <HAL_I2C_Slave_Transmit+0x236>
 8002ef8:	e774      	b.n	8002de4 <HAL_I2C_Slave_Transmit+0x120>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efa:	f7fd fbe5 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002efe:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f00:	1b80      	subs	r0, r0, r6
 8002f02:	4285      	cmp	r5, r0
 8002f04:	d301      	bcc.n	8002f0a <HAL_I2C_Slave_Transmit+0x246>
 8002f06:	2d00      	cmp	r5, #0
 8002f08:	d1f2      	bne.n	8002ef0 <HAL_I2C_Slave_Transmit+0x22c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	6993      	ldr	r3, [r2, #24]
 8002f0e:	420b      	tst	r3, r1
 8002f10:	d0ee      	beq.n	8002ef0 <HAL_I2C_Slave_Transmit+0x22c>
 8002f12:	e7c9      	b.n	8002ea8 <HAL_I2C_Slave_Transmit+0x1e4>
 8002f14:	ffff7fff 	.word	0xffff7fff

08002f18 <HAL_I2C_Slave_Receive>:
{
 8002f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1a:	464f      	mov	r7, r9
 8002f1c:	46d6      	mov	lr, sl
 8002f1e:	4646      	mov	r6, r8
 8002f20:	001d      	movs	r5, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f22:	2341      	movs	r3, #65	@ 0x41
{
 8002f24:	b5c0      	push	{r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f26:	4698      	mov	r8, r3
 8002f28:	5cc3      	ldrb	r3, [r0, r3]
{
 8002f2a:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2c:	b2da      	uxtb	r2, r3
{
 8002f2e:	0004      	movs	r4, r0
 8002f30:	000f      	movs	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f32:	4692      	mov	sl, r2
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d16d      	bne.n	8003014 <HAL_I2C_Slave_Receive+0xfc>
    if ((pData == NULL) || (Size == 0U))
 8002f38:	2900      	cmp	r1, #0
 8002f3a:	d054      	beq.n	8002fe6 <HAL_I2C_Slave_Receive+0xce>
 8002f3c:	464b      	mov	r3, r9
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d051      	beq.n	8002fe6 <HAL_I2C_Slave_Receive+0xce>
    __HAL_LOCK(hi2c);
 8002f42:	2340      	movs	r3, #64	@ 0x40
 8002f44:	5cc2      	ldrb	r2, [r0, r3]
 8002f46:	2a01      	cmp	r2, #1
 8002f48:	d064      	beq.n	8003014 <HAL_I2C_Slave_Receive+0xfc>
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8002f4e:	f7fd fbbb 	bl	80006c8 <HAL_GetTick>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f52:	2322      	movs	r3, #34	@ 0x22
 8002f54:	4642      	mov	r2, r8
 8002f56:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002f58:	4652      	mov	r2, sl
 8002f5a:	3320      	adds	r3, #32
 8002f5c:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5e:	2300      	movs	r3, #0
    hi2c->XferCount = Size;
 8002f60:	464a      	mov	r2, r9
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f62:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8002f64:	8562      	strh	r2, [r4, #42]	@ 0x2a
    hi2c->XferSize = hi2c->XferCount;
 8002f66:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f68:	6363      	str	r3, [r4, #52]	@ 0x34
    hi2c->XferSize = hi2c->XferCount;
 8002f6a:	8522      	strh	r2, [r4, #40]	@ 0x28
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002f6c:	6822      	ldr	r2, [r4, #0]
 8002f6e:	495e      	ldr	r1, [pc, #376]	@ (80030e8 <HAL_I2C_Slave_Receive+0x1d0>)
 8002f70:	6853      	ldr	r3, [r2, #4]
    hi2c->pBuffPtr  = pData;
 8002f72:	6267      	str	r7, [r4, #36]	@ 0x24
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002f74:	400b      	ands	r3, r1
    tickstart = HAL_GetTick();
 8002f76:	0006      	movs	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f78:	2708      	movs	r7, #8
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002f7a:	6053      	str	r3, [r2, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7c:	1c6b      	adds	r3, r5, #1
 8002f7e:	d13c      	bne.n	8002ffa <HAL_I2C_Slave_Receive+0xe2>
 8002f80:	2308      	movs	r3, #8
 8002f82:	6991      	ldr	r1, [r2, #24]
 8002f84:	420b      	tst	r3, r1
 8002f86:	d0fc      	beq.n	8002f82 <HAL_I2C_Slave_Receive+0x6a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f88:	2308      	movs	r3, #8
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f8a:	2780      	movs	r7, #128	@ 0x80
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f8c:	61d3      	str	r3, [r2, #28]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f8e:	027f      	lsls	r7, r7, #9
 8002f90:	1c6b      	adds	r3, r5, #1
 8002f92:	d149      	bne.n	8003028 <HAL_I2C_Slave_Receive+0x110>
 8002f94:	2180      	movs	r1, #128	@ 0x80
 8002f96:	0249      	lsls	r1, r1, #9
 8002f98:	6993      	ldr	r3, [r2, #24]
 8002f9a:	420b      	tst	r3, r1
 8002f9c:	d1fc      	bne.n	8002f98 <HAL_I2C_Slave_Receive+0x80>
    while (hi2c->XferCount > 0U)
 8002f9e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d017      	beq.n	8002fd4 <HAL_I2C_Slave_Receive+0xbc>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa4:	0032      	movs	r2, r6
 8002fa6:	0029      	movs	r1, r5
 8002fa8:	0020      	movs	r0, r4
 8002faa:	f7ff f8af 	bl	800210c <I2C_WaitOnRXNEFlagUntilTimeout>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002fae:	6823      	ldr	r3, [r4, #0]
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	d16a      	bne.n	800308a <HAL_I2C_Slave_Receive+0x172>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fb6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002fb8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002fba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002fc0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fc8:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	8523      	strh	r3, [r4, #40]	@ 0x28
    while (hi2c->XferCount > 0U)
 8002fce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e7      	bne.n	8002fa4 <HAL_I2C_Slave_Receive+0x8c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd4:	0032      	movs	r2, r6
 8002fd6:	0029      	movs	r1, r5
 8002fd8:	0020      	movs	r0, r4
 8002fda:	f7ff fa7b 	bl	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fde:	1e07      	subs	r7, r0, #0
 8002fe0:	d06a      	beq.n	80030b8 <HAL_I2C_Slave_Receive+0x1a0>
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	e04a      	b.n	800307c <HAL_I2C_Slave_Receive+0x164>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8002fec:	2701      	movs	r7, #1
 8002fee:	e012      	b.n	8003016 <HAL_I2C_Slave_Receive+0xfe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff0:	2d00      	cmp	r5, #0
 8002ff2:	d102      	bne.n	8002ffa <HAL_I2C_Slave_Receive+0xe2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ff4:	6993      	ldr	r3, [r2, #24]
 8002ff6:	421f      	tst	r7, r3
 8002ff8:	d035      	beq.n	8003066 <HAL_I2C_Slave_Receive+0x14e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ffa:	6993      	ldr	r3, [r2, #24]
 8002ffc:	421f      	tst	r7, r3
 8002ffe:	d1c3      	bne.n	8002f88 <HAL_I2C_Slave_Receive+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003000:	f7fd fb62 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003004:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003006:	1b80      	subs	r0, r0, r6
 8003008:	4285      	cmp	r5, r0
 800300a:	d2f1      	bcs.n	8002ff0 <HAL_I2C_Slave_Receive+0xd8>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800300c:	6993      	ldr	r3, [r2, #24]
 800300e:	421f      	tst	r7, r3
 8003010:	d1f3      	bne.n	8002ffa <HAL_I2C_Slave_Receive+0xe2>
 8003012:	e028      	b.n	8003066 <HAL_I2C_Slave_Receive+0x14e>
    __HAL_LOCK(hi2c);
 8003014:	2702      	movs	r7, #2
}
 8003016:	0038      	movs	r0, r7
 8003018:	bce0      	pop	{r5, r6, r7}
 800301a:	46ba      	mov	sl, r7
 800301c:	46b1      	mov	r9, r6
 800301e:	46a8      	mov	r8, r5
 8003020:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003022:	6993      	ldr	r3, [r2, #24]
 8003024:	423b      	tst	r3, r7
 8003026:	d11e      	bne.n	8003066 <HAL_I2C_Slave_Receive+0x14e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003028:	6993      	ldr	r3, [r2, #24]
 800302a:	423b      	tst	r3, r7
 800302c:	d0cf      	beq.n	8002fce <HAL_I2C_Slave_Receive+0xb6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fd fb4b 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003032:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003034:	1b80      	subs	r0, r0, r6
 8003036:	4285      	cmp	r5, r0
 8003038:	d3f3      	bcc.n	8003022 <HAL_I2C_Slave_Receive+0x10a>
 800303a:	2d00      	cmp	r5, #0
 800303c:	d1f4      	bne.n	8003028 <HAL_I2C_Slave_Receive+0x110>
 800303e:	e7f0      	b.n	8003022 <HAL_I2C_Slave_Receive+0x10a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003040:	2380      	movs	r3, #128	@ 0x80
 8003042:	021b      	lsls	r3, r3, #8
 8003044:	4698      	mov	r8, r3
 8003046:	4641      	mov	r1, r8
 8003048:	6993      	ldr	r3, [r2, #24]
 800304a:	420b      	tst	r3, r1
 800304c:	d03e      	beq.n	80030cc <HAL_I2C_Slave_Receive+0x1b4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7fd fb3b 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003052:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003054:	1b80      	subs	r0, r0, r6
 8003056:	4285      	cmp	r5, r0
 8003058:	d301      	bcc.n	800305e <HAL_I2C_Slave_Receive+0x146>
 800305a:	2d00      	cmp	r5, #0
 800305c:	d1f3      	bne.n	8003046 <HAL_I2C_Slave_Receive+0x12e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800305e:	4641      	mov	r1, r8
 8003060:	6993      	ldr	r3, [r2, #24]
 8003062:	420b      	tst	r3, r1
 8003064:	d0ef      	beq.n	8003046 <HAL_I2C_Slave_Receive+0x12e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003066:	2120      	movs	r1, #32
 8003068:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800306a:	430b      	orrs	r3, r1
 800306c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800306e:	2341      	movs	r3, #65	@ 0x41
 8003070:	54e1      	strb	r1, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003072:	2300      	movs	r3, #0
 8003074:	3122      	adds	r1, #34	@ 0x22
 8003076:	5463      	strb	r3, [r4, r1]
          __HAL_UNLOCK(hi2c);
 8003078:	3902      	subs	r1, #2
 800307a:	5463      	strb	r3, [r4, r1]
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800307c:	2380      	movs	r3, #128	@ 0x80
 800307e:	6851      	ldr	r1, [r2, #4]
 8003080:	021b      	lsls	r3, r3, #8
 8003082:	430b      	orrs	r3, r1
      return  HAL_ERROR;
 8003084:	2701      	movs	r7, #1
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003086:	6053      	str	r3, [r2, #4]
      return HAL_ERROR;
 8003088:	e7c5      	b.n	8003016 <HAL_I2C_Slave_Receive+0xfe>
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800308a:	2280      	movs	r2, #128	@ 0x80
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	0212      	lsls	r2, r2, #8
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	0752      	lsls	r2, r2, #29
 8003098:	d5a8      	bpl.n	8002fec <HAL_I2C_Slave_Receive+0xd4>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800309a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800309c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      return  HAL_ERROR;
 800309e:	2701      	movs	r7, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030a0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80030a2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030a4:	3301      	adds	r3, #1
 80030a6:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 80030a8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	8563      	strh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 80030b0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80030b2:	3b01      	subs	r3, #1
 80030b4:	8523      	strh	r3, [r4, #40]	@ 0x28
 80030b6:	e7ae      	b.n	8003016 <HAL_I2C_Slave_Receive+0xfe>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b8:	2320      	movs	r3, #32
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ba:	2180      	movs	r1, #128	@ 0x80
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030bc:	6822      	ldr	r2, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030be:	0209      	lsls	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c0:	61d3      	str	r3, [r2, #28]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030c2:	1c6b      	adds	r3, r5, #1
 80030c4:	d1bc      	bne.n	8003040 <HAL_I2C_Slave_Receive+0x128>
 80030c6:	6993      	ldr	r3, [r2, #24]
 80030c8:	420b      	tst	r3, r1
 80030ca:	d1fc      	bne.n	80030c6 <HAL_I2C_Slave_Receive+0x1ae>
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80030cc:	2380      	movs	r3, #128	@ 0x80
 80030ce:	6851      	ldr	r1, [r2, #4]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	430b      	orrs	r3, r1
 80030d4:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	2341      	movs	r3, #65	@ 0x41
 80030d8:	2220      	movs	r2, #32
 80030da:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030dc:	2300      	movs	r3, #0
 80030de:	3222      	adds	r2, #34	@ 0x22
 80030e0:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 80030e2:	3a02      	subs	r2, #2
 80030e4:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 80030e6:	e796      	b.n	8003016 <HAL_I2C_Slave_Receive+0xfe>
 80030e8:	ffff7fff 	.word	0xffff7fff

080030ec <HAL_I2C_Master_Transmit_IT>:
{
 80030ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ee:	46c6      	mov	lr, r8
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f0:	2441      	movs	r4, #65	@ 0x41
{
 80030f2:	b500      	push	{lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f4:	5d05      	ldrb	r5, [r0, r4]
{
 80030f6:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f8:	2d20      	cmp	r5, #32
 80030fa:	d137      	bne.n	800316c <HAL_I2C_Master_Transmit_IT+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80030fc:	6805      	ldr	r5, [r0, #0]
 80030fe:	2680      	movs	r6, #128	@ 0x80
 8003100:	69af      	ldr	r7, [r5, #24]
 8003102:	0236      	lsls	r6, r6, #8
 8003104:	003b      	movs	r3, r7
 8003106:	4033      	ands	r3, r6
 8003108:	4237      	tst	r7, r6
 800310a:	d12f      	bne.n	800316c <HAL_I2C_Master_Transmit_IT+0x80>
    __HAL_LOCK(hi2c);
 800310c:	2640      	movs	r6, #64	@ 0x40
 800310e:	5d86      	ldrb	r6, [r0, r6]
 8003110:	2e01      	cmp	r6, #1
 8003112:	d02b      	beq.n	800316c <HAL_I2C_Master_Transmit_IT+0x80>
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003114:	2621      	movs	r6, #33	@ 0x21
 8003116:	5506      	strb	r6, [r0, r4]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003118:	3401      	adds	r4, #1
 800311a:	3e11      	subs	r6, #17
 800311c:	5506      	strb	r6, [r0, r4]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800311e:	6443      	str	r3, [r0, #68]	@ 0x44
    hi2c->XferCount   = Size;
 8003120:	4643      	mov	r3, r8
 8003122:	8543      	strh	r3, [r0, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003124:	4b16      	ldr	r3, [pc, #88]	@ (8003180 <HAL_I2C_Master_Transmit_IT+0x94>)
    hi2c->pBuffPtr    = pData;
 8003126:	6242      	str	r2, [r0, #36]	@ 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003128:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800312a:	4b16      	ldr	r3, [pc, #88]	@ (8003184 <HAL_I2C_Master_Transmit_IT+0x98>)
 800312c:	6343      	str	r3, [r0, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800312e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003130:	2bff      	cmp	r3, #255	@ 0xff
 8003132:	d81f      	bhi.n	8003174 <HAL_I2C_Master_Transmit_IT+0x88>
      xfermode = I2C_AUTOEND_MODE;
 8003134:	2680      	movs	r6, #128	@ 0x80
      hi2c->XferSize = hi2c->XferCount;
 8003136:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
      xfermode = I2C_AUTOEND_MODE;
 8003138:	04b6      	lsls	r6, r6, #18
      hi2c->XferSize = hi2c->XferCount;
 800313a:	b293      	uxth	r3, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	0412      	lsls	r2, r2, #16
 8003140:	8503      	strh	r3, [r0, #40]	@ 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003142:	058b      	lsls	r3, r1, #22
 8003144:	0d9b      	lsrs	r3, r3, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003146:	686c      	ldr	r4, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003148:	4313      	orrs	r3, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 800314a:	4a0f      	ldr	r2, [pc, #60]	@ (8003188 <HAL_I2C_Master_Transmit_IT+0x9c>)
 800314c:	4022      	ands	r2, r4
 800314e:	4313      	orrs	r3, r2
 8003150:	2280      	movs	r2, #128	@ 0x80
 8003152:	4333      	orrs	r3, r6
 8003154:	0192      	lsls	r2, r2, #6
 8003156:	4313      	orrs	r3, r2
 8003158:	606b      	str	r3, [r5, #4]
    __HAL_UNLOCK(hi2c);
 800315a:	2200      	movs	r2, #0
 800315c:	2340      	movs	r3, #64	@ 0x40
 800315e:	54c2      	strb	r2, [r0, r3]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	32f2      	adds	r2, #242	@ 0xf2
 8003164:	4313      	orrs	r3, r2
    return HAL_OK;
 8003166:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003168:	602b      	str	r3, [r5, #0]
    return HAL_OK;
 800316a:	e000      	b.n	800316e <HAL_I2C_Master_Transmit_IT+0x82>
      return HAL_BUSY;
 800316c:	2002      	movs	r0, #2
}
 800316e:	bc80      	pop	{r7}
 8003170:	46b8      	mov	r8, r7
 8003172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003174:	22ff      	movs	r2, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 8003176:	2680      	movs	r6, #128	@ 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003178:	23ff      	movs	r3, #255	@ 0xff
 800317a:	0412      	lsls	r2, r2, #16
      xfermode = I2C_RELOAD_MODE;
 800317c:	0476      	lsls	r6, r6, #17
 800317e:	e7df      	b.n	8003140 <HAL_I2C_Master_Transmit_IT+0x54>
 8003180:	ffff0000 	.word	0xffff0000
 8003184:	08005481 	.word	0x08005481
 8003188:	fc009800 	.word	0xfc009800

0800318c <HAL_I2C_Master_Receive_IT>:
{
 800318c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800318e:	46c6      	mov	lr, r8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003190:	2441      	movs	r4, #65	@ 0x41
{
 8003192:	b500      	push	{lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003194:	5d05      	ldrb	r5, [r0, r4]
{
 8003196:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003198:	2d20      	cmp	r5, #32
 800319a:	d137      	bne.n	800320c <HAL_I2C_Master_Receive_IT+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800319c:	6805      	ldr	r5, [r0, #0]
 800319e:	2680      	movs	r6, #128	@ 0x80
 80031a0:	69af      	ldr	r7, [r5, #24]
 80031a2:	0236      	lsls	r6, r6, #8
 80031a4:	003b      	movs	r3, r7
 80031a6:	4033      	ands	r3, r6
 80031a8:	4237      	tst	r7, r6
 80031aa:	d12f      	bne.n	800320c <HAL_I2C_Master_Receive_IT+0x80>
    __HAL_LOCK(hi2c);
 80031ac:	2640      	movs	r6, #64	@ 0x40
 80031ae:	5d86      	ldrb	r6, [r0, r6]
 80031b0:	2e01      	cmp	r6, #1
 80031b2:	d02b      	beq.n	800320c <HAL_I2C_Master_Receive_IT+0x80>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80031b4:	2622      	movs	r6, #34	@ 0x22
 80031b6:	5506      	strb	r6, [r0, r4]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80031b8:	3401      	adds	r4, #1
 80031ba:	3e12      	subs	r6, #18
 80031bc:	5506      	strb	r6, [r0, r4]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031be:	6443      	str	r3, [r0, #68]	@ 0x44
    hi2c->XferCount   = Size;
 80031c0:	4643      	mov	r3, r8
 80031c2:	8543      	strh	r3, [r0, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c4:	4b16      	ldr	r3, [pc, #88]	@ (8003220 <HAL_I2C_Master_Receive_IT+0x94>)
    hi2c->pBuffPtr    = pData;
 80031c6:	6242      	str	r2, [r0, #36]	@ 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c8:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80031ca:	4b16      	ldr	r3, [pc, #88]	@ (8003224 <HAL_I2C_Master_Receive_IT+0x98>)
 80031cc:	6343      	str	r3, [r0, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ce:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80031d0:	2bff      	cmp	r3, #255	@ 0xff
 80031d2:	d81f      	bhi.n	8003214 <HAL_I2C_Master_Receive_IT+0x88>
      xfermode = I2C_AUTOEND_MODE;
 80031d4:	2680      	movs	r6, #128	@ 0x80
      hi2c->XferSize = hi2c->XferCount;
 80031d6:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
      xfermode = I2C_AUTOEND_MODE;
 80031d8:	04b6      	lsls	r6, r6, #18
      hi2c->XferSize = hi2c->XferCount;
 80031da:	b293      	uxth	r3, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	0412      	lsls	r2, r2, #16
 80031e0:	8503      	strh	r3, [r0, #40]	@ 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031e2:	058b      	lsls	r3, r1, #22
 80031e4:	0d9b      	lsrs	r3, r3, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80031e6:	686c      	ldr	r4, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031e8:	4313      	orrs	r3, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 80031ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003228 <HAL_I2C_Master_Receive_IT+0x9c>)
 80031ec:	4022      	ands	r2, r4
 80031ee:	4313      	orrs	r3, r2
 80031f0:	2290      	movs	r2, #144	@ 0x90
 80031f2:	4333      	orrs	r3, r6
 80031f4:	0192      	lsls	r2, r2, #6
 80031f6:	4313      	orrs	r3, r2
 80031f8:	606b      	str	r3, [r5, #4]
    __HAL_UNLOCK(hi2c);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2340      	movs	r3, #64	@ 0x40
 80031fe:	54c2      	strb	r2, [r0, r3]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003200:	682b      	ldr	r3, [r5, #0]
 8003202:	32f4      	adds	r2, #244	@ 0xf4
 8003204:	4313      	orrs	r3, r2
    return HAL_OK;
 8003206:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003208:	602b      	str	r3, [r5, #0]
    return HAL_OK;
 800320a:	e000      	b.n	800320e <HAL_I2C_Master_Receive_IT+0x82>
      return HAL_BUSY;
 800320c:	2002      	movs	r0, #2
}
 800320e:	bc80      	pop	{r7}
 8003210:	46b8      	mov	r8, r7
 8003212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003214:	22ff      	movs	r2, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 8003216:	2680      	movs	r6, #128	@ 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003218:	23ff      	movs	r3, #255	@ 0xff
 800321a:	0412      	lsls	r2, r2, #16
      xfermode = I2C_RELOAD_MODE;
 800321c:	0476      	lsls	r6, r6, #17
 800321e:	e7df      	b.n	80031e0 <HAL_I2C_Master_Receive_IT+0x54>
 8003220:	ffff0000 	.word	0xffff0000
 8003224:	08005481 	.word	0x08005481
 8003228:	fc009800 	.word	0xfc009800

0800322c <HAL_I2C_Slave_Transmit_IT>:
{
 800322c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800322e:	2441      	movs	r4, #65	@ 0x41
 8003230:	5d03      	ldrb	r3, [r0, r4]
 8003232:	b2dd      	uxtb	r5, r3
 8003234:	2b20      	cmp	r3, #32
 8003236:	d127      	bne.n	8003288 <HAL_I2C_Slave_Transmit_IT+0x5c>
    __HAL_LOCK(hi2c);
 8003238:	3320      	adds	r3, #32
 800323a:	5cc6      	ldrb	r6, [r0, r3]
 800323c:	2e01      	cmp	r6, #1
 800323e:	d023      	beq.n	8003288 <HAL_I2C_Slave_Transmit_IT+0x5c>
 8003240:	2601      	movs	r6, #1
 8003242:	54c6      	strb	r6, [r0, r3]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003244:	3b1f      	subs	r3, #31
 8003246:	5503      	strb	r3, [r0, r4]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8003248:	3321      	adds	r3, #33	@ 0x21
 800324a:	54c5      	strb	r5, [r0, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800324c:	2300      	movs	r3, #0
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800324e:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003250:	6443      	str	r3, [r0, #68]	@ 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003252:	6863      	ldr	r3, [r4, #4]
 8003254:	4d13      	ldr	r5, [pc, #76]	@ (80032a4 <HAL_I2C_Slave_Transmit_IT+0x78>)
 8003256:	402b      	ands	r3, r5
 8003258:	6063      	str	r3, [r4, #4]
    hi2c->XferCount   = Size;
 800325a:	8542      	strh	r2, [r0, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800325c:	4a12      	ldr	r2, [pc, #72]	@ (80032a8 <HAL_I2C_Slave_Transmit_IT+0x7c>)
    hi2c->XferSize    = hi2c->XferCount;
 800325e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003260:	62c2      	str	r2, [r0, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003262:	4a12      	ldr	r2, [pc, #72]	@ (80032ac <HAL_I2C_Slave_Transmit_IT+0x80>)
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8003264:	6a05      	ldr	r5, [r0, #32]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003266:	6342      	str	r2, [r0, #52]	@ 0x34
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8003268:	2280      	movs	r2, #128	@ 0x80
    hi2c->XferSize    = hi2c->XferCount;
 800326a:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr    = pData;
 800326c:	6241      	str	r1, [r0, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800326e:	8503      	strh	r3, [r0, #40]	@ 0x28
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8003270:	0292      	lsls	r2, r2, #10
 8003272:	4295      	cmp	r5, r2
 8003274:	d00a      	beq.n	800328c <HAL_I2C_Slave_Transmit_IT+0x60>
    __HAL_UNLOCK(hi2c);
 8003276:	2340      	movs	r3, #64	@ 0x40
 8003278:	2200      	movs	r2, #0
 800327a:	54c2      	strb	r2, [r0, r3]
    return HAL_OK;
 800327c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	32fa      	adds	r2, #250	@ 0xfa
 8003282:	4313      	orrs	r3, r2
 8003284:	6023      	str	r3, [r4, #0]
}
 8003286:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hi2c);
 8003288:	2002      	movs	r0, #2
 800328a:	e7fc      	b.n	8003286 <HAL_I2C_Slave_Transmit_IT+0x5a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800328c:	780a      	ldrb	r2, [r1, #0]
      hi2c->XferSize--;
 800328e:	3b01      	subs	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003290:	62a2      	str	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003292:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8003294:	3101      	adds	r1, #1
      hi2c->XferCount--;
 8003296:	3a01      	subs	r2, #1
 8003298:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800329a:	6241      	str	r1, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 800329c:	8542      	strh	r2, [r0, #42]	@ 0x2a
      hi2c->XferSize--;
 800329e:	8503      	strh	r3, [r0, #40]	@ 0x28
 80032a0:	e7e9      	b.n	8003276 <HAL_I2C_Slave_Transmit_IT+0x4a>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	ffff7fff 	.word	0xffff7fff
 80032a8:	ffff0000 	.word	0xffff0000
 80032ac:	08006159 	.word	0x08006159

080032b0 <HAL_I2C_Slave_Receive_IT>:
{
 80032b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b2:	2441      	movs	r4, #65	@ 0x41
 80032b4:	5d03      	ldrb	r3, [r0, r4]
 80032b6:	b2de      	uxtb	r6, r3
 80032b8:	2b20      	cmp	r3, #32
 80032ba:	d11d      	bne.n	80032f8 <HAL_I2C_Slave_Receive_IT+0x48>
    __HAL_LOCK(hi2c);
 80032bc:	2540      	movs	r5, #64	@ 0x40
 80032be:	5d43      	ldrb	r3, [r0, r5]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d019      	beq.n	80032f8 <HAL_I2C_Slave_Receive_IT+0x48>
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80032c4:	2322      	movs	r3, #34	@ 0x22
 80032c6:	5503      	strb	r3, [r0, r4]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80032c8:	3320      	adds	r3, #32
 80032ca:	54c6      	strb	r6, [r0, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032cc:	2600      	movs	r6, #0
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80032ce:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032d0:	6446      	str	r6, [r0, #68]	@ 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80032d2:	6863      	ldr	r3, [r4, #4]
 80032d4:	4f09      	ldr	r7, [pc, #36]	@ (80032fc <HAL_I2C_Slave_Receive_IT+0x4c>)
 80032d6:	403b      	ands	r3, r7
 80032d8:	6063      	str	r3, [r4, #4]
    hi2c->XferCount   = Size;
 80032da:	8542      	strh	r2, [r0, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032dc:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80032de:	22fc      	movs	r2, #252	@ 0xfc
    hi2c->XferSize    = hi2c->XferCount;
 80032e0:	8503      	strh	r3, [r0, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e2:	4b07      	ldr	r3, [pc, #28]	@ (8003300 <HAL_I2C_Slave_Receive_IT+0x50>)
    hi2c->pBuffPtr    = pData;
 80032e4:	6241      	str	r1, [r0, #36]	@ 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e6:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80032e8:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <HAL_I2C_Slave_Receive_IT+0x54>)
 80032ea:	6343      	str	r3, [r0, #52]	@ 0x34
    __HAL_UNLOCK(hi2c);
 80032ec:	5546      	strb	r6, [r0, r5]
    return HAL_OK;
 80032ee:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	6023      	str	r3, [r4, #0]
}
 80032f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80032f8:	2002      	movs	r0, #2
 80032fa:	e7fc      	b.n	80032f6 <HAL_I2C_Slave_Receive_IT+0x46>
 80032fc:	ffff7fff 	.word	0xffff7fff
 8003300:	ffff0000 	.word	0xffff0000
 8003304:	08006159 	.word	0x08006159

08003308 <HAL_I2C_Master_Transmit_DMA>:
{
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	46ce      	mov	lr, r9
 800330c:	4647      	mov	r7, r8
 800330e:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003310:	2041      	movs	r0, #65	@ 0x41
{
 8003312:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003314:	5c26      	ldrb	r6, [r4, r0]
{
 8003316:	4689      	mov	r9, r1
 8003318:	0011      	movs	r1, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800331a:	2e20      	cmp	r6, #32
 800331c:	d134      	bne.n	8003388 <HAL_I2C_Master_Transmit_DMA+0x80>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800331e:	6826      	ldr	r6, [r4, #0]
 8003320:	2280      	movs	r2, #128	@ 0x80
 8003322:	69b7      	ldr	r7, [r6, #24]
 8003324:	0212      	lsls	r2, r2, #8
 8003326:	003d      	movs	r5, r7
 8003328:	4015      	ands	r5, r2
 800332a:	4217      	tst	r7, r2
 800332c:	d12c      	bne.n	8003388 <HAL_I2C_Master_Transmit_DMA+0x80>
    __HAL_LOCK(hi2c);
 800332e:	2240      	movs	r2, #64	@ 0x40
 8003330:	5ca7      	ldrb	r7, [r4, r2]
 8003332:	2f01      	cmp	r7, #1
 8003334:	d028      	beq.n	8003388 <HAL_I2C_Master_Transmit_DMA+0x80>
 8003336:	2701      	movs	r7, #1
 8003338:	54a7      	strb	r7, [r4, r2]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800333a:	3720      	adds	r7, #32
 800333c:	5427      	strb	r7, [r4, r0]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800333e:	3001      	adds	r0, #1
 8003340:	3f11      	subs	r7, #17
 8003342:	5427      	strb	r7, [r4, r0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003344:	6465      	str	r5, [r4, #68]	@ 0x44
    hi2c->XferCount   = Size;
 8003346:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003348:	4b3b      	ldr	r3, [pc, #236]	@ (8003438 <HAL_I2C_Master_Transmit_DMA+0x130>)
    hi2c->pBuffPtr    = pData;
 800334a:	6261      	str	r1, [r4, #36]	@ 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800334c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800334e:	4b3b      	ldr	r3, [pc, #236]	@ (800343c <HAL_I2C_Master_Transmit_DMA+0x134>)
 8003350:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003352:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003354:	2bff      	cmp	r3, #255	@ 0xff
 8003356:	d81c      	bhi.n	8003392 <HAL_I2C_Master_Transmit_DMA+0x8a>
      hi2c->XferSize = hi2c->XferCount;
 8003358:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800335a:	b29b      	uxth	r3, r3
      xfermode = I2C_AUTOEND_MODE;
 800335c:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 800335e:	2b00      	cmp	r3, #0
 8003360:	d15d      	bne.n	800341e <HAL_I2C_Master_Transmit_DMA+0x116>
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003362:	4648      	mov	r0, r9
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003364:	4936      	ldr	r1, [pc, #216]	@ (8003440 <HAL_I2C_Master_Transmit_DMA+0x138>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003366:	0585      	lsls	r5, r0, #22
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003368:	6361      	str	r1, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 800336a:	4836      	ldr	r0, [pc, #216]	@ (8003444 <HAL_I2C_Master_Transmit_DMA+0x13c>)
 800336c:	6871      	ldr	r1, [r6, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800336e:	0dad      	lsrs	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003370:	4001      	ands	r1, r0
 8003372:	430d      	orrs	r5, r1
 8003374:	4934      	ldr	r1, [pc, #208]	@ (8003448 <HAL_I2C_Master_Transmit_DMA+0x140>)
    return HAL_OK;
 8003376:	2000      	movs	r0, #0
  MODIFY_REG(hi2c->Instance->CR2, \
 8003378:	4329      	orrs	r1, r5
 800337a:	6071      	str	r1, [r6, #4]
      __HAL_UNLOCK(hi2c);
 800337c:	54a3      	strb	r3, [r4, r2]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800337e:	22f2      	movs	r2, #242	@ 0xf2
 8003380:	6833      	ldr	r3, [r6, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	6033      	str	r3, [r6, #0]
 8003386:	e000      	b.n	800338a <HAL_I2C_Master_Transmit_DMA+0x82>
      return HAL_BUSY;
 8003388:	2002      	movs	r0, #2
}
 800338a:	bcc0      	pop	{r6, r7}
 800338c:	46b9      	mov	r9, r7
 800338e:	46b0      	mov	r8, r6
 8003390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003392:	23ff      	movs	r3, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 8003394:	2780      	movs	r7, #128	@ 0x80
 8003396:	8523      	strh	r3, [r4, #40]	@ 0x28
 8003398:	047f      	lsls	r7, r7, #17
      if (hi2c->hdmatx != NULL)
 800339a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800339c:	2800      	cmp	r0, #0
 800339e:	d041      	beq.n	8003424 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80033a0:	4a2a      	ldr	r2, [pc, #168]	@ (800344c <HAL_I2C_Master_Transmit_DMA+0x144>)
 80033a2:	62c2      	str	r2, [r0, #44]	@ 0x2c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80033a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003450 <HAL_I2C_Master_Transmit_DMA+0x148>)
 80033a6:	6342      	str	r2, [r0, #52]	@ 0x34
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80033a8:	2200      	movs	r2, #0
 80033aa:	4690      	mov	r8, r2
 80033ac:	6302      	str	r2, [r0, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80033ae:	6382      	str	r2, [r0, #56]	@ 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80033b0:	0032      	movs	r2, r6
 80033b2:	3228      	adds	r2, #40	@ 0x28
 80033b4:	f7fe fa28 	bl	8001808 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d00e      	beq.n	80033da <HAL_I2C_Master_Transmit_DMA+0xd2>
        hi2c->State     = HAL_I2C_STATE_READY;
 80033bc:	2341      	movs	r3, #65	@ 0x41
 80033be:	2220      	movs	r2, #32
 80033c0:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80033c2:	4642      	mov	r2, r8
 80033c4:	3301      	adds	r3, #1
 80033c6:	54e2      	strb	r2, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80033c8:	2210      	movs	r2, #16
 80033ca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80033cc:	4313      	orrs	r3, r2
 80033ce:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80033d0:	2340      	movs	r3, #64	@ 0x40
 80033d2:	2200      	movs	r2, #0
        return HAL_ERROR;
 80033d4:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 80033d6:	54e2      	strb	r2, [r4, r3]
 80033d8:	e7d7      	b.n	800338a <HAL_I2C_Master_Transmit_DMA+0x82>
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033da:	464d      	mov	r5, r9
  MODIFY_REG(hi2c->Instance->CR2, \
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	4e19      	ldr	r6, [pc, #100]	@ (8003444 <HAL_I2C_Master_Transmit_DMA+0x13c>)
 80033e0:	685a      	ldr	r2, [r3, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033e2:	05ad      	lsls	r5, r5, #22
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80033e4:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033e6:	0dad      	lsrs	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80033e8:	4032      	ands	r2, r6
 80033ea:	433d      	orrs	r5, r7
 80033ec:	4315      	orrs	r5, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033ee:	b2ca      	uxtb	r2, r1
 80033f0:	0412      	lsls	r2, r2, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80033f2:	4315      	orrs	r5, r2
 80033f4:	2280      	movs	r2, #128	@ 0x80
 80033f6:	0192      	lsls	r2, r2, #6
 80033f8:	432a      	orrs	r2, r5
 80033fa:	605a      	str	r2, [r3, #4]
        hi2c->XferCount -= hi2c->XferSize;
 80033fc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80033fe:	1a52      	subs	r2, r2, r1
 8003400:	b292      	uxth	r2, r2
 8003402:	8562      	strh	r2, [r4, #42]	@ 0x2a
        __HAL_UNLOCK(hi2c);
 8003404:	2240      	movs	r2, #64	@ 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003406:	2190      	movs	r1, #144	@ 0x90
        __HAL_UNLOCK(hi2c);
 8003408:	54a0      	strb	r0, [r4, r2]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800340a:	681a      	ldr	r2, [r3, #0]
    return HAL_OK;
 800340c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800340e:	430a      	orrs	r2, r1
 8003410:	601a      	str	r2, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003412:	2280      	movs	r2, #128	@ 0x80
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	01d2      	lsls	r2, r2, #7
 8003418:	430a      	orrs	r2, r1
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	e7b5      	b.n	800338a <HAL_I2C_Master_Transmit_DMA+0x82>
      xfermode = I2C_AUTOEND_MODE;
 800341e:	2780      	movs	r7, #128	@ 0x80
 8003420:	04bf      	lsls	r7, r7, #18
 8003422:	e7ba      	b.n	800339a <HAL_I2C_Master_Transmit_DMA+0x92>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003424:	2341      	movs	r3, #65	@ 0x41
 8003426:	2220      	movs	r2, #32
 8003428:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800342a:	3301      	adds	r3, #1
 800342c:	54e0      	strb	r0, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800342e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003430:	3260      	adds	r2, #96	@ 0x60
 8003432:	4313      	orrs	r3, r2
 8003434:	6463      	str	r3, [r4, #68]	@ 0x44
        return HAL_ERROR;
 8003436:	e7cb      	b.n	80033d0 <HAL_I2C_Master_Transmit_DMA+0xc8>
 8003438:	ffff0000 	.word	0xffff0000
 800343c:	080058ad 	.word	0x080058ad
 8003440:	08005481 	.word	0x08005481
 8003444:	fc009800 	.word	0xfc009800
 8003448:	02002000 	.word	0x02002000
 800344c:	08005af1 	.word	0x08005af1
 8003450:	08006309 	.word	0x08006309

08003454 <HAL_I2C_Master_Receive_DMA>:
{
 8003454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003456:	46c6      	mov	lr, r8
 8003458:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800345a:	2041      	movs	r0, #65	@ 0x41
{
 800345c:	b500      	push	{lr}
 800345e:	4688      	mov	r8, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003460:	5c21      	ldrb	r1, [r4, r0]
 8003462:	2920      	cmp	r1, #32
 8003464:	d134      	bne.n	80034d0 <HAL_I2C_Master_Receive_DMA+0x7c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003466:	6821      	ldr	r1, [r4, #0]
 8003468:	2680      	movs	r6, #128	@ 0x80
 800346a:	698f      	ldr	r7, [r1, #24]
 800346c:	0236      	lsls	r6, r6, #8
 800346e:	003d      	movs	r5, r7
 8003470:	4035      	ands	r5, r6
 8003472:	4237      	tst	r7, r6
 8003474:	d12c      	bne.n	80034d0 <HAL_I2C_Master_Receive_DMA+0x7c>
    __HAL_LOCK(hi2c);
 8003476:	2640      	movs	r6, #64	@ 0x40
 8003478:	5da7      	ldrb	r7, [r4, r6]
 800347a:	2f01      	cmp	r7, #1
 800347c:	d028      	beq.n	80034d0 <HAL_I2C_Master_Receive_DMA+0x7c>
 800347e:	2701      	movs	r7, #1
 8003480:	55a7      	strb	r7, [r4, r6]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003482:	3721      	adds	r7, #33	@ 0x21
 8003484:	5427      	strb	r7, [r4, r0]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003486:	3001      	adds	r0, #1
 8003488:	3f12      	subs	r7, #18
 800348a:	5427      	strb	r7, [r4, r0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800348c:	6465      	str	r5, [r4, #68]	@ 0x44
    hi2c->XferCount   = Size;
 800348e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003490:	4b39      	ldr	r3, [pc, #228]	@ (8003578 <HAL_I2C_Master_Receive_DMA+0x124>)
    hi2c->pBuffPtr    = pData;
 8003492:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003494:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003496:	4b39      	ldr	r3, [pc, #228]	@ (800357c <HAL_I2C_Master_Receive_DMA+0x128>)
 8003498:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800349a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800349c:	2bff      	cmp	r3, #255	@ 0xff
 800349e:	d81b      	bhi.n	80034d8 <HAL_I2C_Master_Receive_DMA+0x84>
      hi2c->XferSize = hi2c->XferCount;
 80034a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80034a2:	b29b      	uxth	r3, r3
      xfermode = I2C_AUTOEND_MODE;
 80034a4:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->XferSize > 0U)
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d159      	bne.n	800355e <HAL_I2C_Master_Receive_DMA+0x10a>
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034aa:	4640      	mov	r0, r8
      hi2c->XferISR = I2C_Master_ISR_IT;
 80034ac:	4a34      	ldr	r2, [pc, #208]	@ (8003580 <HAL_I2C_Master_Receive_DMA+0x12c>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034ae:	0585      	lsls	r5, r0, #22
      hi2c->XferISR = I2C_Master_ISR_IT;
 80034b0:	6362      	str	r2, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 80034b2:	4834      	ldr	r0, [pc, #208]	@ (8003584 <HAL_I2C_Master_Receive_DMA+0x130>)
 80034b4:	684a      	ldr	r2, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034b6:	0dad      	lsrs	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80034b8:	4002      	ands	r2, r0
 80034ba:	4315      	orrs	r5, r2
 80034bc:	4a32      	ldr	r2, [pc, #200]	@ (8003588 <HAL_I2C_Master_Receive_DMA+0x134>)
    return HAL_OK;
 80034be:	2000      	movs	r0, #0
  MODIFY_REG(hi2c->Instance->CR2, \
 80034c0:	432a      	orrs	r2, r5
 80034c2:	604a      	str	r2, [r1, #4]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80034c4:	22f2      	movs	r2, #242	@ 0xf2
      __HAL_UNLOCK(hi2c);
 80034c6:	55a3      	strb	r3, [r4, r6]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80034c8:	680b      	ldr	r3, [r1, #0]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	600b      	str	r3, [r1, #0]
 80034ce:	e000      	b.n	80034d2 <HAL_I2C_Master_Receive_DMA+0x7e>
      return HAL_BUSY;
 80034d0:	2002      	movs	r0, #2
}
 80034d2:	bc80      	pop	{r7}
 80034d4:	46b8      	mov	r8, r7
 80034d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d8:	23ff      	movs	r3, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 80034da:	2680      	movs	r6, #128	@ 0x80
 80034dc:	8523      	strh	r3, [r4, #40]	@ 0x28
 80034de:	0476      	lsls	r6, r6, #17
      if (hi2c->hdmarx != NULL)
 80034e0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80034e2:	2800      	cmp	r0, #0
 80034e4:	d03e      	beq.n	8003564 <HAL_I2C_Master_Receive_DMA+0x110>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80034e6:	4f29      	ldr	r7, [pc, #164]	@ (800358c <HAL_I2C_Master_Receive_DMA+0x138>)
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80034e8:	3124      	adds	r1, #36	@ 0x24
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80034ea:	62c7      	str	r7, [r0, #44]	@ 0x2c
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80034ec:	4f28      	ldr	r7, [pc, #160]	@ (8003590 <HAL_I2C_Master_Receive_DMA+0x13c>)
 80034ee:	6347      	str	r7, [r0, #52]	@ 0x34
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80034f0:	2700      	movs	r7, #0
 80034f2:	6307      	str	r7, [r0, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80034f4:	6387      	str	r7, [r0, #56]	@ 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80034f6:	f7fe f987 	bl	8001808 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d00d      	beq.n	800351a <HAL_I2C_Master_Receive_DMA+0xc6>
        hi2c->State     = HAL_I2C_STATE_READY;
 80034fe:	2341      	movs	r3, #65	@ 0x41
 8003500:	2220      	movs	r2, #32
 8003502:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003504:	3301      	adds	r3, #1
 8003506:	54e7      	strb	r7, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003508:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800350a:	3a10      	subs	r2, #16
 800350c:	4313      	orrs	r3, r2
 800350e:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003510:	2340      	movs	r3, #64	@ 0x40
 8003512:	2200      	movs	r2, #0
        return HAL_ERROR;
 8003514:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 8003516:	54e2      	strb	r2, [r4, r3]
 8003518:	e7db      	b.n	80034d2 <HAL_I2C_Master_Receive_DMA+0x7e>
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800351a:	4645      	mov	r5, r8
  MODIFY_REG(hi2c->Instance->CR2, \
 800351c:	6823      	ldr	r3, [r4, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800351e:	05ad      	lsls	r5, r5, #22
 8003520:	0dad      	lsrs	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	4335      	orrs	r5, r6
 8003526:	4e17      	ldr	r6, [pc, #92]	@ (8003584 <HAL_I2C_Master_Receive_DMA+0x130>)
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8003528:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800352a:	4032      	ands	r2, r6
 800352c:	4315      	orrs	r5, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800352e:	b2ca      	uxtb	r2, r1
 8003530:	0412      	lsls	r2, r2, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003532:	4315      	orrs	r5, r2
 8003534:	2290      	movs	r2, #144	@ 0x90
 8003536:	0192      	lsls	r2, r2, #6
 8003538:	432a      	orrs	r2, r5
 800353a:	605a      	str	r2, [r3, #4]
        hi2c->XferCount -= hi2c->XferSize;
 800353c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800353e:	1a52      	subs	r2, r2, r1
 8003540:	b292      	uxth	r2, r2
 8003542:	8562      	strh	r2, [r4, #42]	@ 0x2a
        __HAL_UNLOCK(hi2c);
 8003544:	2240      	movs	r2, #64	@ 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003546:	2190      	movs	r1, #144	@ 0x90
        __HAL_UNLOCK(hi2c);
 8003548:	54a0      	strb	r0, [r4, r2]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800354a:	681a      	ldr	r2, [r3, #0]
    return HAL_OK;
 800354c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800354e:	430a      	orrs	r2, r1
 8003550:	601a      	str	r2, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003552:	2280      	movs	r2, #128	@ 0x80
 8003554:	6819      	ldr	r1, [r3, #0]
 8003556:	0212      	lsls	r2, r2, #8
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	e7b9      	b.n	80034d2 <HAL_I2C_Master_Receive_DMA+0x7e>
      xfermode = I2C_AUTOEND_MODE;
 800355e:	2680      	movs	r6, #128	@ 0x80
 8003560:	04b6      	lsls	r6, r6, #18
 8003562:	e7bd      	b.n	80034e0 <HAL_I2C_Master_Receive_DMA+0x8c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003564:	2341      	movs	r3, #65	@ 0x41
 8003566:	2220      	movs	r2, #32
 8003568:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800356a:	3301      	adds	r3, #1
 800356c:	54e0      	strb	r0, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800356e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003570:	3260      	adds	r2, #96	@ 0x60
 8003572:	4313      	orrs	r3, r2
 8003574:	6463      	str	r3, [r4, #68]	@ 0x44
        return HAL_ERROR;
 8003576:	e7cb      	b.n	8003510 <HAL_I2C_Master_Receive_DMA+0xbc>
 8003578:	ffff0000 	.word	0xffff0000
 800357c:	080058ad 	.word	0x080058ad
 8003580:	08005481 	.word	0x08005481
 8003584:	fc009800 	.word	0xfc009800
 8003588:	02002400 	.word	0x02002400
 800358c:	08005ba5 	.word	0x08005ba5
 8003590:	08006309 	.word	0x08006309

08003594 <HAL_I2C_Slave_Transmit_DMA>:
{
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003598:	2041      	movs	r0, #65	@ 0x41
 800359a:	5c23      	ldrb	r3, [r4, r0]
 800359c:	b2dd      	uxtb	r5, r3
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d154      	bne.n	800364c <HAL_I2C_Slave_Transmit_DMA+0xb8>
    if ((pData == NULL) || (Size == 0U))
 80035a2:	2900      	cmp	r1, #0
 80035a4:	d04d      	beq.n	8003642 <HAL_I2C_Slave_Transmit_DMA+0xae>
 80035a6:	2a00      	cmp	r2, #0
 80035a8:	d04b      	beq.n	8003642 <HAL_I2C_Slave_Transmit_DMA+0xae>
    __HAL_LOCK(hi2c);
 80035aa:	2340      	movs	r3, #64	@ 0x40
 80035ac:	5ce6      	ldrb	r6, [r4, r3]
 80035ae:	2e01      	cmp	r6, #1
 80035b0:	d04c      	beq.n	800364c <HAL_I2C_Slave_Transmit_DMA+0xb8>
 80035b2:	2601      	movs	r6, #1
 80035b4:	54e6      	strb	r6, [r4, r3]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035b6:	3b1f      	subs	r3, #31
 80035b8:	5423      	strb	r3, [r4, r0]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80035ba:	3321      	adds	r3, #33	@ 0x21
 80035bc:	54e5      	strb	r5, [r4, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035be:	2300      	movs	r3, #0
 80035c0:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->XferCount   = Size;
 80035c2:	8562      	strh	r2, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c4:	4a36      	ldr	r2, [pc, #216]	@ (80036a0 <HAL_I2C_Slave_Transmit_DMA+0x10c>)
    hi2c->XferSize    = hi2c->XferCount;
 80035c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c8:	62e2      	str	r2, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80035ca:	4a36      	ldr	r2, [pc, #216]	@ (80036a4 <HAL_I2C_Slave_Transmit_DMA+0x110>)
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80035cc:	6a20      	ldr	r0, [r4, #32]
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80035ce:	6362      	str	r2, [r4, #52]	@ 0x34
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80035d0:	2280      	movs	r2, #128	@ 0x80
    hi2c->XferSize    = hi2c->XferCount;
 80035d2:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr    = pData;
 80035d4:	6261      	str	r1, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80035d6:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80035d8:	0292      	lsls	r2, r2, #10
 80035da:	4290      	cmp	r0, r2
 80035dc:	d10b      	bne.n	80035f6 <HAL_I2C_Slave_Transmit_DMA+0x62>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035de:	7808      	ldrb	r0, [r1, #0]
 80035e0:	6822      	ldr	r2, [r4, #0]
      hi2c->XferSize--;
 80035e2:	3b01      	subs	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035e4:	6290      	str	r0, [r2, #40]	@ 0x28
      hi2c->XferCount--;
 80035e6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 80035e8:	3101      	adds	r1, #1
      hi2c->XferCount--;
 80035ea:	3a01      	subs	r2, #1
 80035ec:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 80035ee:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 80035f0:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80035f2:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80035f4:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (hi2c->XferCount != 0U)
 80035f6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80035f8:	b290      	uxth	r0, r2
 80035fa:	2a00      	cmp	r2, #0
 80035fc:	d035      	beq.n	800366a <HAL_I2C_Slave_Transmit_DMA+0xd6>
      if (hi2c->hdmatx != NULL)
 80035fe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003600:	2800      	cmp	r0, #0
 8003602:	d025      	beq.n	8003650 <HAL_I2C_Slave_Transmit_DMA+0xbc>
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003604:	2500      	movs	r5, #0
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8003606:	4a28      	ldr	r2, [pc, #160]	@ (80036a8 <HAL_I2C_Slave_Transmit_DMA+0x114>)
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003608:	6305      	str	r5, [r0, #48]	@ 0x30
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 800360a:	62c2      	str	r2, [r0, #44]	@ 0x2c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800360c:	4a27      	ldr	r2, [pc, #156]	@ (80036ac <HAL_I2C_Slave_Transmit_DMA+0x118>)
        hi2c->hdmatx->XferAbortCallback = NULL;
 800360e:	6385      	str	r5, [r0, #56]	@ 0x38
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003610:	6342      	str	r2, [r0, #52]	@ 0x34
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	3228      	adds	r2, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8003616:	f7fe f8f7 	bl	8001808 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 800361a:	2800      	cmp	r0, #0
 800361c:	d132      	bne.n	8003684 <HAL_I2C_Slave_Transmit_DMA+0xf0>
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	4923      	ldr	r1, [pc, #140]	@ (80036b0 <HAL_I2C_Slave_Transmit_DMA+0x11c>)
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	400a      	ands	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
        __HAL_UNLOCK(hi2c);
 8003628:	2240      	movs	r2, #64	@ 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800362a:	21b8      	movs	r1, #184	@ 0xb8
        __HAL_UNLOCK(hi2c);
 800362c:	54a0      	strb	r0, [r4, r2]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800362e:	681a      	ldr	r2, [r3, #0]
    return HAL_OK;
 8003630:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003632:	430a      	orrs	r2, r1
 8003634:	601a      	str	r2, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003636:	2280      	movs	r2, #128	@ 0x80
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	01d2      	lsls	r2, r2, #7
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e005      	b.n	800364e <HAL_I2C_Slave_Transmit_DMA+0xba>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003642:	2380      	movs	r3, #128	@ 0x80
 8003644:	009b      	lsls	r3, r3, #2
      return  HAL_ERROR;
 8003646:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003648:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800364a:	e000      	b.n	800364e <HAL_I2C_Slave_Transmit_DMA+0xba>
    __HAL_LOCK(hi2c);
 800364c:	2002      	movs	r0, #2
}
 800364e:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8003650:	2341      	movs	r3, #65	@ 0x41
 8003652:	2228      	movs	r2, #40	@ 0x28
 8003654:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003656:	3301      	adds	r3, #1
 8003658:	54e0      	strb	r0, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800365a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800365c:	3258      	adds	r2, #88	@ 0x58
 800365e:	4313      	orrs	r3, r2
 8003660:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003662:	2340      	movs	r3, #64	@ 0x40
 8003664:	54e0      	strb	r0, [r4, r3]
      return  HAL_ERROR;
 8003666:	2001      	movs	r0, #1
 8003668:	e7f1      	b.n	800364e <HAL_I2C_Slave_Transmit_DMA+0xba>
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	4910      	ldr	r1, [pc, #64]	@ (80036b0 <HAL_I2C_Slave_Transmit_DMA+0x11c>)
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	400a      	ands	r2, r1
 8003672:	605a      	str	r2, [r3, #4]
      __HAL_UNLOCK(hi2c);
 8003674:	2240      	movs	r2, #64	@ 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003676:	21b8      	movs	r1, #184	@ 0xb8
      __HAL_UNLOCK(hi2c);
 8003678:	54a0      	strb	r0, [r4, r2]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800367a:	681a      	ldr	r2, [r3, #0]
    return HAL_OK;
 800367c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800367e:	430a      	orrs	r2, r1
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	e7e4      	b.n	800364e <HAL_I2C_Slave_Transmit_DMA+0xba>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8003684:	2341      	movs	r3, #65	@ 0x41
 8003686:	2228      	movs	r2, #40	@ 0x28
 8003688:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800368a:	3301      	adds	r3, #1
 800368c:	54e5      	strb	r5, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800368e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003690:	3a18      	subs	r2, #24
 8003692:	4313      	orrs	r3, r2
 8003694:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8003696:	2340      	movs	r3, #64	@ 0x40
      return  HAL_ERROR;
 8003698:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 800369a:	54e5      	strb	r5, [r4, r3]
        return HAL_ERROR;
 800369c:	e7d7      	b.n	800364e <HAL_I2C_Slave_Transmit_DMA+0xba>
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	ffff0000 	.word	0xffff0000
 80036a4:	08005fd5 	.word	0x08005fd5
 80036a8:	08004fb1 	.word	0x08004fb1
 80036ac:	08006309 	.word	0x08006309
 80036b0:	ffff7fff 	.word	0xffff7fff

080036b4 <HAL_I2C_Slave_Receive_DMA>:
{
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b6:	46ce      	mov	lr, r9
 80036b8:	4647      	mov	r7, r8
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ba:	2641      	movs	r6, #65	@ 0x41
{
 80036bc:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036be:	5d83      	ldrb	r3, [r0, r6]
{
 80036c0:	000d      	movs	r5, r1
 80036c2:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c4:	b2d9      	uxtb	r1, r3
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d140      	bne.n	800374c <HAL_I2C_Slave_Receive_DMA+0x98>
    if ((pData == NULL) || (Size == 0U))
 80036ca:	2d00      	cmp	r5, #0
 80036cc:	d039      	beq.n	8003742 <HAL_I2C_Slave_Receive_DMA+0x8e>
 80036ce:	2a00      	cmp	r2, #0
 80036d0:	d037      	beq.n	8003742 <HAL_I2C_Slave_Receive_DMA+0x8e>
    __HAL_LOCK(hi2c);
 80036d2:	2740      	movs	r7, #64	@ 0x40
 80036d4:	5dc3      	ldrb	r3, [r0, r7]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d038      	beq.n	800374c <HAL_I2C_Slave_Receive_DMA+0x98>
 80036da:	2301      	movs	r3, #1
 80036dc:	55c3      	strb	r3, [r0, r7]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036de:	3321      	adds	r3, #33	@ 0x21
 80036e0:	5583      	strb	r3, [r0, r6]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80036e2:	3320      	adds	r3, #32
 80036e4:	54c1      	strb	r1, [r0, r3]
 80036e6:	4698      	mov	r8, r3
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	6443      	str	r3, [r0, #68]	@ 0x44
    hi2c->XferCount   = Size;
 80036ec:	8542      	strh	r2, [r0, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ee:	4a26      	ldr	r2, [pc, #152]	@ (8003788 <HAL_I2C_Slave_Receive_DMA+0xd4>)
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036f0:	4699      	mov	r9, r3
    hi2c->XferSize    = hi2c->XferCount;
 80036f2:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f4:	62c2      	str	r2, [r0, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80036f6:	4a25      	ldr	r2, [pc, #148]	@ (800378c <HAL_I2C_Slave_Receive_DMA+0xd8>)
    hi2c->XferSize    = hi2c->XferCount;
 80036f8:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr    = pData;
 80036fa:	6245      	str	r5, [r0, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80036fc:	8503      	strh	r3, [r0, #40]	@ 0x28
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80036fe:	6342      	str	r2, [r0, #52]	@ 0x34
    if (hi2c->hdmarx != NULL)
 8003700:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003702:	2800      	cmp	r0, #0
 8003704:	d034      	beq.n	8003770 <HAL_I2C_Slave_Receive_DMA+0xbc>
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8003706:	4a22      	ldr	r2, [pc, #136]	@ (8003790 <HAL_I2C_Slave_Receive_DMA+0xdc>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003708:	6821      	ldr	r1, [r4, #0]
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 800370a:	62c2      	str	r2, [r0, #44]	@ 0x2c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800370c:	4a21      	ldr	r2, [pc, #132]	@ (8003794 <HAL_I2C_Slave_Receive_DMA+0xe0>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800370e:	3124      	adds	r1, #36	@ 0x24
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003710:	6342      	str	r2, [r0, #52]	@ 0x34
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003712:	464a      	mov	r2, r9
 8003714:	6302      	str	r2, [r0, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8003716:	6382      	str	r2, [r0, #56]	@ 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003718:	002a      	movs	r2, r5
 800371a:	f7fe f875 	bl	8001808 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 800371e:	2800      	cmp	r0, #0
 8003720:	d119      	bne.n	8003756 <HAL_I2C_Slave_Receive_DMA+0xa2>
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	491c      	ldr	r1, [pc, #112]	@ (8003798 <HAL_I2C_Slave_Receive_DMA+0xe4>)
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	400a      	ands	r2, r1
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800372a:	21b8      	movs	r1, #184	@ 0xb8
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800372c:	605a      	str	r2, [r3, #4]
      __HAL_UNLOCK(hi2c);
 800372e:	55e0      	strb	r0, [r4, r7]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	601a      	str	r2, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003736:	2280      	movs	r2, #128	@ 0x80
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	0212      	lsls	r2, r2, #8
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8003740:	e005      	b.n	800374e <HAL_I2C_Slave_Receive_DMA+0x9a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003742:	2380      	movs	r3, #128	@ 0x80
 8003744:	009b      	lsls	r3, r3, #2
      return  HAL_ERROR;
 8003746:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003748:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800374a:	e000      	b.n	800374e <HAL_I2C_Slave_Receive_DMA+0x9a>
    __HAL_LOCK(hi2c);
 800374c:	2002      	movs	r0, #2
}
 800374e:	bcc0      	pop	{r6, r7}
 8003750:	46b9      	mov	r9, r7
 8003752:	46b0      	mov	r8, r6
 8003754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8003756:	2328      	movs	r3, #40	@ 0x28
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003758:	464a      	mov	r2, r9
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800375a:	55a3      	strb	r3, [r4, r6]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800375c:	4643      	mov	r3, r8
 800375e:	54e2      	strb	r2, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003760:	2210      	movs	r2, #16
 8003762:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003764:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003766:	4313      	orrs	r3, r2
 8003768:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800376a:	464b      	mov	r3, r9
 800376c:	55e3      	strb	r3, [r4, r7]
      return HAL_ERROR;
 800376e:	e7ee      	b.n	800374e <HAL_I2C_Slave_Receive_DMA+0x9a>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8003770:	2328      	movs	r3, #40	@ 0x28
 8003772:	55a3      	strb	r3, [r4, r6]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003774:	4643      	mov	r3, r8
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003776:	2280      	movs	r2, #128	@ 0x80
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003778:	54e0      	strb	r0, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800377a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800377c:	4313      	orrs	r3, r2
 800377e:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8003780:	55e0      	strb	r0, [r4, r7]
      return  HAL_ERROR;
 8003782:	2001      	movs	r0, #1
 8003784:	e7e3      	b.n	800374e <HAL_I2C_Slave_Receive_DMA+0x9a>
 8003786:	46c0      	nop			@ (mov r8, r8)
 8003788:	ffff0000 	.word	0xffff0000
 800378c:	08005fd5 	.word	0x08005fd5
 8003790:	08005065 	.word	0x08005065
 8003794:	08006309 	.word	0x08006309
 8003798:	ffff7fff 	.word	0xffff7fff

0800379c <HAL_I2C_Mem_Write>:
{
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	4657      	mov	r7, sl
 80037a0:	46de      	mov	lr, fp
 80037a2:	464e      	mov	r6, r9
 80037a4:	4645      	mov	r5, r8
 80037a6:	b5e0      	push	{r5, r6, r7, lr}
 80037a8:	4698      	mov	r8, r3
 80037aa:	ab0a      	add	r3, sp, #40	@ 0x28
 80037ac:	4691      	mov	r9, r2
 80037ae:	cb04      	ldmia	r3!, {r2}
 80037b0:	0004      	movs	r4, r0
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	000f      	movs	r7, r1
 80037b6:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b8:	2341      	movs	r3, #65	@ 0x41
 80037ba:	5cc3      	ldrb	r3, [r0, r3]
{
 80037bc:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d000      	beq.n	80037c4 <HAL_I2C_Mem_Write+0x28>
 80037c2:	e09b      	b.n	80038fc <HAL_I2C_Mem_Write+0x160>
    if ((pData == NULL) || (Size == 0U))
 80037c4:	2a00      	cmp	r2, #0
 80037c6:	d100      	bne.n	80037ca <HAL_I2C_Mem_Write+0x2e>
 80037c8:	e093      	b.n	80038f2 <HAL_I2C_Mem_Write+0x156>
 80037ca:	465b      	mov	r3, fp
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d100      	bne.n	80037d2 <HAL_I2C_Mem_Write+0x36>
 80037d0:	e08f      	b.n	80038f2 <HAL_I2C_Mem_Write+0x156>
    __HAL_LOCK(hi2c);
 80037d2:	2340      	movs	r3, #64	@ 0x40
 80037d4:	5cc2      	ldrb	r2, [r0, r3]
 80037d6:	2a01      	cmp	r2, #1
 80037d8:	d100      	bne.n	80037dc <HAL_I2C_Mem_Write+0x40>
 80037da:	e08f      	b.n	80038fc <HAL_I2C_Mem_Write+0x160>
 80037dc:	2201      	movs	r2, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037de:	2680      	movs	r6, #128	@ 0x80
    __HAL_LOCK(hi2c);
 80037e0:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 80037e2:	f7fc ff71 	bl	80006c8 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	0236      	lsls	r6, r6, #8
 80037ea:	699a      	ldr	r2, [r3, #24]
    tickstart = HAL_GetTick();
 80037ec:	0005      	movs	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ee:	4232      	tst	r2, r6
 80037f0:	d00c      	beq.n	800380c <HAL_I2C_Mem_Write+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f2:	f7fc ff69 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037f6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f8:	1b40      	subs	r0, r0, r5
 80037fa:	2819      	cmp	r0, #25
 80037fc:	d903      	bls.n	8003806 <HAL_I2C_Mem_Write+0x6a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037fe:	699a      	ldr	r2, [r3, #24]
 8003800:	4232      	tst	r2, r6
 8003802:	d000      	beq.n	8003806 <HAL_I2C_Mem_Write+0x6a>
 8003804:	e094      	b.n	8003930 <HAL_I2C_Mem_Write+0x194>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003806:	699a      	ldr	r2, [r3, #24]
 8003808:	4232      	tst	r2, r6
 800380a:	d1f2      	bne.n	80037f2 <HAL_I2C_Mem_Write+0x56>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800380c:	2241      	movs	r2, #65	@ 0x41
 800380e:	2121      	movs	r1, #33	@ 0x21
 8003810:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003812:	3201      	adds	r2, #1
 8003814:	311f      	adds	r1, #31
 8003816:	54a1      	strb	r1, [r4, r2]
    hi2c->pBuffPtr  = pData;
 8003818:	4651      	mov	r1, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800381a:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 800381c:	6261      	str	r1, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800381e:	4659      	mov	r1, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003820:	6462      	str	r2, [r4, #68]	@ 0x44
    hi2c->XferISR   = NULL;
 8003822:	6362      	str	r2, [r4, #52]	@ 0x34
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003824:	4642      	mov	r2, r8
    hi2c->XferCount = Size;
 8003826:	8561      	strh	r1, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003828:	6859      	ldr	r1, [r3, #4]
 800382a:	4878      	ldr	r0, [pc, #480]	@ (8003a0c <HAL_I2C_Mem_Write+0x270>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800382c:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 800382e:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003830:	05bf      	lsls	r7, r7, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003832:	0412      	lsls	r2, r2, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003834:	430a      	orrs	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003836:	0dbf      	lsrs	r7, r7, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003838:	4975      	ldr	r1, [pc, #468]	@ (8003a10 <HAL_I2C_Mem_Write+0x274>)
 800383a:	433a      	orrs	r2, r7
 800383c:	430a      	orrs	r2, r1
 800383e:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003840:	0020      	movs	r0, r4
 8003842:	002a      	movs	r2, r5
 8003844:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003846:	f7fe fd55 	bl	80022f4 <I2C_WaitOnTXISFlagUntilTimeout>
 800384a:	2800      	cmp	r0, #0
 800384c:	d000      	beq.n	8003850 <HAL_I2C_Mem_Write+0xb4>
 800384e:	e095      	b.n	800397c <HAL_I2C_Mem_Write+0x1e0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003850:	4643      	mov	r3, r8
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003852:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003854:	2b01      	cmp	r3, #1
 8003856:	d000      	beq.n	800385a <HAL_I2C_Mem_Write+0xbe>
 8003858:	e095      	b.n	8003986 <HAL_I2C_Mem_Write+0x1ea>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800385a:	464b      	mov	r3, r9
 800385c:	b2db      	uxtb	r3, r3
 800385e:	6293      	str	r3, [r2, #40]	@ 0x28
 8003860:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003862:	2680      	movs	r6, #128	@ 0x80
 8003864:	3301      	adds	r3, #1
 8003866:	d000      	beq.n	800386a <HAL_I2C_Mem_Write+0xce>
 8003868:	e06f      	b.n	800394a <HAL_I2C_Mem_Write+0x1ae>
 800386a:	2180      	movs	r1, #128	@ 0x80
 800386c:	6993      	ldr	r3, [r2, #24]
 800386e:	4219      	tst	r1, r3
 8003870:	d0fc      	beq.n	800386c <HAL_I2C_Mem_Write+0xd0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003872:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003874:	2bff      	cmp	r3, #255	@ 0xff
 8003876:	d800      	bhi.n	800387a <HAL_I2C_Mem_Write+0xde>
 8003878:	e0a3      	b.n	80039c2 <HAL_I2C_Mem_Write+0x226>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800387a:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800387c:	4965      	ldr	r1, [pc, #404]	@ (8003a14 <HAL_I2C_Mem_Write+0x278>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800387e:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003880:	6853      	ldr	r3, [r2, #4]
 8003882:	400b      	ands	r3, r1
 8003884:	4964      	ldr	r1, [pc, #400]	@ (8003a18 <HAL_I2C_Mem_Write+0x27c>)
 8003886:	433b      	orrs	r3, r7
 8003888:	430b      	orrs	r3, r1
 800388a:	6053      	str	r3, [r2, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800388c:	2680      	movs	r6, #128	@ 0x80
 800388e:	e003      	b.n	8003898 <HAL_I2C_Mem_Write+0xfc>
    } while (hi2c->XferCount > 0U);
 8003890:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003892:	2b00      	cmp	r3, #0
 8003894:	d100      	bne.n	8003898 <HAL_I2C_Mem_Write+0xfc>
 8003896:	e0a3      	b.n	80039e0 <HAL_I2C_Mem_Write+0x244>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003898:	002a      	movs	r2, r5
 800389a:	0020      	movs	r0, r4
 800389c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800389e:	f7fe fd29 	bl	80022f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80038a2:	2800      	cmp	r0, #0
 80038a4:	d128      	bne.n	80038f8 <HAL_I2C_Mem_Write+0x15c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80038a8:	6822      	ldr	r2, [r4, #0]
 80038aa:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80038ac:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038ae:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80038b0:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80038b2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80038ba:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038bc:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038c4:	2900      	cmp	r1, #0
 80038c6:	d0e3      	beq.n	8003890 <HAL_I2C_Mem_Write+0xf4>
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1e1      	bne.n	8003890 <HAL_I2C_Mem_Write+0xf4>
 80038cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80038ce:	3301      	adds	r3, #1
 80038d0:	d11b      	bne.n	800390a <HAL_I2C_Mem_Write+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038d2:	6993      	ldr	r3, [r2, #24]
 80038d4:	421e      	tst	r6, r3
 80038d6:	d0fc      	beq.n	80038d2 <HAL_I2C_Mem_Write+0x136>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038d8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80038da:	2bff      	cmp	r3, #255	@ 0xff
 80038dc:	d962      	bls.n	80039a4 <HAL_I2C_Mem_Write+0x208>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038de:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80038e0:	494c      	ldr	r1, [pc, #304]	@ (8003a14 <HAL_I2C_Mem_Write+0x278>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038e2:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80038e4:	6853      	ldr	r3, [r2, #4]
 80038e6:	400b      	ands	r3, r1
 80038e8:	494b      	ldr	r1, [pc, #300]	@ (8003a18 <HAL_I2C_Mem_Write+0x27c>)
 80038ea:	433b      	orrs	r3, r7
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6053      	str	r3, [r2, #4]
}
 80038f0:	e7ce      	b.n	8003890 <HAL_I2C_Mem_Write+0xf4>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038f2:	2380      	movs	r3, #128	@ 0x80
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80038f8:	2001      	movs	r0, #1
 80038fa:	e000      	b.n	80038fe <HAL_I2C_Mem_Write+0x162>
    __HAL_LOCK(hi2c);
 80038fc:	2002      	movs	r0, #2
}
 80038fe:	bcf0      	pop	{r4, r5, r6, r7}
 8003900:	46bb      	mov	fp, r7
 8003902:	46b2      	mov	sl, r6
 8003904:	46a9      	mov	r9, r5
 8003906:	46a0      	mov	r8, r4
 8003908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800390a:	2380      	movs	r3, #128	@ 0x80
 800390c:	4698      	mov	r8, r3
 800390e:	4641      	mov	r1, r8
 8003910:	6993      	ldr	r3, [r2, #24]
 8003912:	4219      	tst	r1, r3
 8003914:	d1e0      	bne.n	80038d8 <HAL_I2C_Mem_Write+0x13c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fc fed7 	bl	80006c8 <HAL_GetTick>
 800391a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800391c:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391e:	1b40      	subs	r0, r0, r5
 8003920:	4283      	cmp	r3, r0
 8003922:	d301      	bcc.n	8003928 <HAL_I2C_Mem_Write+0x18c>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1f2      	bne.n	800390e <HAL_I2C_Mem_Write+0x172>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003928:	4641      	mov	r1, r8
 800392a:	6993      	ldr	r3, [r2, #24]
 800392c:	4219      	tst	r1, r3
 800392e:	d1ee      	bne.n	800390e <HAL_I2C_Mem_Write+0x172>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003930:	2220      	movs	r2, #32
 8003932:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003934:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003936:	4313      	orrs	r3, r2
 8003938:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800393a:	2341      	movs	r3, #65	@ 0x41
 800393c:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800393e:	2300      	movs	r3, #0
 8003940:	3222      	adds	r2, #34	@ 0x22
 8003942:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8003944:	3a02      	subs	r2, #2
 8003946:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8003948:	e7d9      	b.n	80038fe <HAL_I2C_Mem_Write+0x162>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800394a:	6993      	ldr	r3, [r2, #24]
 800394c:	421e      	tst	r6, r3
 800394e:	d000      	beq.n	8003952 <HAL_I2C_Mem_Write+0x1b6>
 8003950:	e78f      	b.n	8003872 <HAL_I2C_Mem_Write+0xd6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003952:	f7fc feb9 	bl	80006c8 <HAL_GetTick>
 8003956:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003958:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395a:	1b40      	subs	r0, r0, r5
 800395c:	4283      	cmp	r3, r0
 800395e:	d301      	bcc.n	8003964 <HAL_I2C_Mem_Write+0x1c8>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f2      	bne.n	800394a <HAL_I2C_Mem_Write+0x1ae>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003964:	6993      	ldr	r3, [r2, #24]
 8003966:	421e      	tst	r6, r3
 8003968:	d1ef      	bne.n	800394a <HAL_I2C_Mem_Write+0x1ae>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800396a:	2220      	movs	r2, #32
 800396c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800396e:	4313      	orrs	r3, r2
 8003970:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003972:	2341      	movs	r3, #65	@ 0x41
 8003974:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003976:	2200      	movs	r2, #0
 8003978:	3301      	adds	r3, #1
 800397a:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hi2c);
 800397c:	2340      	movs	r3, #64	@ 0x40
 800397e:	2200      	movs	r2, #0
      return  HAL_ERROR;
 8003980:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8003982:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8003984:	e7bb      	b.n	80038fe <HAL_I2C_Mem_Write+0x162>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003986:	464b      	mov	r3, r9
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800398c:	0020      	movs	r0, r4
 800398e:	002a      	movs	r2, r5
 8003990:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003992:	f7fe fcaf 	bl	80022f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003996:	2800      	cmp	r0, #0
 8003998:	d1f0      	bne.n	800397c <HAL_I2C_Mem_Write+0x1e0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800399a:	464b      	mov	r3, r9
 800399c:	6822      	ldr	r2, [r4, #0]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	6293      	str	r3, [r2, #40]	@ 0x28
 80039a2:	e75d      	b.n	8003860 <HAL_I2C_Mem_Write+0xc4>
          hi2c->XferSize = hi2c->XferCount;
 80039a4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80039a6:	481b      	ldr	r0, [pc, #108]	@ (8003a14 <HAL_I2C_Mem_Write+0x278>)
 80039a8:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80039ae:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039b0:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80039b2:	4339      	orrs	r1, r7
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039b4:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80039b6:	430b      	orrs	r3, r1
 80039b8:	2180      	movs	r1, #128	@ 0x80
 80039ba:	0489      	lsls	r1, r1, #18
 80039bc:	430b      	orrs	r3, r1
 80039be:	6053      	str	r3, [r2, #4]
}
 80039c0:	e766      	b.n	8003890 <HAL_I2C_Mem_Write+0xf4>
      hi2c->XferSize = hi2c->XferCount;
 80039c2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80039c4:	4813      	ldr	r0, [pc, #76]	@ (8003a14 <HAL_I2C_Mem_Write+0x278>)
 80039c6:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80039cc:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039ce:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80039d0:	4339      	orrs	r1, r7
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039d2:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80039d4:	430b      	orrs	r3, r1
 80039d6:	2180      	movs	r1, #128	@ 0x80
 80039d8:	0489      	lsls	r1, r1, #18
 80039da:	430b      	orrs	r3, r1
 80039dc:	6053      	str	r3, [r2, #4]
}
 80039de:	e755      	b.n	800388c <HAL_I2C_Mem_Write+0xf0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e0:	002a      	movs	r2, r5
 80039e2:	0020      	movs	r0, r4
 80039e4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80039e6:	f7fe fd75 	bl	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d000      	beq.n	80039f0 <HAL_I2C_Mem_Write+0x254>
 80039ee:	e783      	b.n	80038f8 <HAL_I2C_Mem_Write+0x15c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039f0:	2120      	movs	r1, #32
 80039f2:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80039f4:	4d09      	ldr	r5, [pc, #36]	@ (8003a1c <HAL_I2C_Mem_Write+0x280>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039f6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	402a      	ands	r2, r5
 80039fc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80039fe:	2341      	movs	r3, #65	@ 0x41
 8003a00:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a02:	3301      	adds	r3, #1
 8003a04:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8003a06:	3b02      	subs	r3, #2
 8003a08:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8003a0a:	e778      	b.n	80038fe <HAL_I2C_Mem_Write+0x162>
 8003a0c:	fc009800 	.word	0xfc009800
 8003a10:	01002000 	.word	0x01002000
 8003a14:	fc009c00 	.word	0xfc009c00
 8003a18:	01ff0000 	.word	0x01ff0000
 8003a1c:	fe00e800 	.word	0xfe00e800

08003a20 <HAL_I2C_Mem_Read>:
{
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	4657      	mov	r7, sl
 8003a24:	46de      	mov	lr, fp
 8003a26:	464e      	mov	r6, r9
 8003a28:	4645      	mov	r5, r8
 8003a2a:	b5e0      	push	{r5, r6, r7, lr}
 8003a2c:	4699      	mov	r9, r3
 8003a2e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003a30:	0017      	movs	r7, r2
 8003a32:	cb04      	ldmia	r3!, {r2}
 8003a34:	0004      	movs	r4, r0
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	4688      	mov	r8, r1
 8003a3a:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a3c:	2341      	movs	r3, #65	@ 0x41
 8003a3e:	5cc3      	ldrb	r3, [r0, r3]
{
 8003a40:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d000      	beq.n	8003a48 <HAL_I2C_Mem_Read+0x28>
 8003a46:	e08c      	b.n	8003b62 <HAL_I2C_Mem_Read+0x142>
    if ((pData == NULL) || (Size == 0U))
 8003a48:	2a00      	cmp	r2, #0
 8003a4a:	d100      	bne.n	8003a4e <HAL_I2C_Mem_Read+0x2e>
 8003a4c:	e084      	b.n	8003b58 <HAL_I2C_Mem_Read+0x138>
 8003a4e:	465b      	mov	r3, fp
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d100      	bne.n	8003a56 <HAL_I2C_Mem_Read+0x36>
 8003a54:	e080      	b.n	8003b58 <HAL_I2C_Mem_Read+0x138>
    __HAL_LOCK(hi2c);
 8003a56:	2340      	movs	r3, #64	@ 0x40
 8003a58:	5cc2      	ldrb	r2, [r0, r3]
 8003a5a:	2a01      	cmp	r2, #1
 8003a5c:	d100      	bne.n	8003a60 <HAL_I2C_Mem_Read+0x40>
 8003a5e:	e080      	b.n	8003b62 <HAL_I2C_Mem_Read+0x142>
 8003a60:	2201      	movs	r2, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a62:	2680      	movs	r6, #128	@ 0x80
    __HAL_LOCK(hi2c);
 8003a64:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8003a66:	f7fc fe2f 	bl	80006c8 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	0236      	lsls	r6, r6, #8
 8003a6e:	699a      	ldr	r2, [r3, #24]
    tickstart = HAL_GetTick();
 8003a70:	0005      	movs	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a72:	4232      	tst	r2, r6
 8003a74:	d00c      	beq.n	8003a90 <HAL_I2C_Mem_Read+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a76:	f7fc fe27 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a7a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7c:	1b40      	subs	r0, r0, r5
 8003a7e:	2819      	cmp	r0, #25
 8003a80:	d903      	bls.n	8003a8a <HAL_I2C_Mem_Read+0x6a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a82:	699a      	ldr	r2, [r3, #24]
 8003a84:	4232      	tst	r2, r6
 8003a86:	d000      	beq.n	8003a8a <HAL_I2C_Mem_Read+0x6a>
 8003a88:	e085      	b.n	8003b96 <HAL_I2C_Mem_Read+0x176>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	4232      	tst	r2, r6
 8003a8e:	d1f2      	bne.n	8003a76 <HAL_I2C_Mem_Read+0x56>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a90:	2241      	movs	r2, #65	@ 0x41
 8003a92:	2122      	movs	r1, #34	@ 0x22
 8003a94:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a96:	3201      	adds	r2, #1
 8003a98:	311e      	adds	r1, #30
 8003a9a:	54a1      	strb	r1, [r4, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a9c:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8003a9e:	4651      	mov	r1, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa0:	6462      	str	r2, [r4, #68]	@ 0x44
    hi2c->XferISR   = NULL;
 8003aa2:	6362      	str	r2, [r4, #52]	@ 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aa4:	4642      	mov	r2, r8
    hi2c->pBuffPtr  = pData;
 8003aa6:	6261      	str	r1, [r4, #36]	@ 0x24
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aa8:	0596      	lsls	r6, r2, #22
    hi2c->XferCount = Size;
 8003aaa:	4659      	mov	r1, fp
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aac:	0db2      	lsrs	r2, r6, #22
 8003aae:	4690      	mov	r8, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ab0:	464a      	mov	r2, r9
    hi2c->XferCount = Size;
 8003ab2:	8561      	strh	r1, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	4882      	ldr	r0, [pc, #520]	@ (8003cc0 <HAL_I2C_Mem_Read+0x2a0>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ab8:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8003aba:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003abc:	0412      	lsls	r2, r2, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	4641      	mov	r1, r8
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	2180      	movs	r1, #128	@ 0x80
 8003ac6:	0189      	lsls	r1, r1, #6
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003acc:	0020      	movs	r0, r4
 8003ace:	002a      	movs	r2, r5
 8003ad0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003ad2:	f7fe fc0f 	bl	80022f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ad6:	2800      	cmp	r0, #0
 8003ad8:	d000      	beq.n	8003adc <HAL_I2C_Mem_Read+0xbc>
 8003ada:	e081      	b.n	8003be0 <HAL_I2C_Mem_Read+0x1c0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003adc:	464b      	mov	r3, r9
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ade:	6822      	ldr	r2, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d000      	beq.n	8003ae6 <HAL_I2C_Mem_Read+0xc6>
 8003ae4:	e081      	b.n	8003bea <HAL_I2C_Mem_Read+0x1ca>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae6:	b2ff      	uxtb	r7, r7
 8003ae8:	6297      	str	r7, [r2, #40]	@ 0x28
 8003aea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aec:	2640      	movs	r6, #64	@ 0x40
 8003aee:	3301      	adds	r3, #1
 8003af0:	d15e      	bne.n	8003bb0 <HAL_I2C_Mem_Read+0x190>
 8003af2:	2140      	movs	r1, #64	@ 0x40
 8003af4:	6993      	ldr	r3, [r2, #24]
 8003af6:	4219      	tst	r1, r3
 8003af8:	d0fc      	beq.n	8003af4 <HAL_I2C_Mem_Read+0xd4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003afa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003afc:	2bff      	cmp	r3, #255	@ 0xff
 8003afe:	d800      	bhi.n	8003b02 <HAL_I2C_Mem_Read+0xe2>
 8003b00:	e0a5      	b.n	8003c4e <HAL_I2C_Mem_Read+0x22e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b02:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b04:	496e      	ldr	r1, [pc, #440]	@ (8003cc0 <HAL_I2C_Mem_Read+0x2a0>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b06:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b08:	6853      	ldr	r3, [r2, #4]
 8003b0a:	400b      	ands	r3, r1
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	496c      	ldr	r1, [pc, #432]	@ (8003cc4 <HAL_I2C_Mem_Read+0x2a4>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	6053      	str	r3, [r2, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b16:	2704      	movs	r7, #4
 8003b18:	2680      	movs	r6, #128	@ 0x80
 8003b1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	d127      	bne.n	8003b70 <HAL_I2C_Mem_Read+0x150>
 8003b20:	6993      	ldr	r3, [r2, #24]
 8003b22:	421f      	tst	r7, r3
 8003b24:	d0fc      	beq.n	8003b20 <HAL_I2C_Mem_Read+0x100>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b26:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b28:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003b2a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003b2c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8003b2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003b30:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8003b32:	3301      	adds	r3, #1
      hi2c->XferCount--;
 8003b34:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8003b36:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8003b38:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003b3a:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b3c:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b3e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b44:	2a00      	cmp	r2, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_I2C_Mem_Read+0x12c>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d05b      	beq.n	8003c04 <HAL_I2C_Mem_Read+0x1e4>
    } while (hi2c->XferCount > 0U);
 8003b4c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d100      	bne.n	8003b54 <HAL_I2C_Mem_Read+0x134>
 8003b52:	e08b      	b.n	8003c6c <HAL_I2C_Mem_Read+0x24c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b54:	6822      	ldr	r2, [r4, #0]
 8003b56:	e7e0      	b.n	8003b1a <HAL_I2C_Mem_Read+0xfa>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b58:	2380      	movs	r3, #128	@ 0x80
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003b5e:	2001      	movs	r0, #1
 8003b60:	e000      	b.n	8003b64 <HAL_I2C_Mem_Read+0x144>
    __HAL_LOCK(hi2c);
 8003b62:	2002      	movs	r0, #2
}
 8003b64:	bcf0      	pop	{r4, r5, r6, r7}
 8003b66:	46bb      	mov	fp, r7
 8003b68:	46b2      	mov	sl, r6
 8003b6a:	46a9      	mov	r9, r5
 8003b6c:	46a0      	mov	r8, r4
 8003b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b70:	2304      	movs	r3, #4
 8003b72:	469a      	mov	sl, r3
 8003b74:	4651      	mov	r1, sl
 8003b76:	6993      	ldr	r3, [r2, #24]
 8003b78:	4219      	tst	r1, r3
 8003b7a:	d1d4      	bne.n	8003b26 <HAL_I2C_Mem_Read+0x106>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7c:	f7fc fda4 	bl	80006c8 <HAL_GetTick>
 8003b80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b82:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b84:	1b40      	subs	r0, r0, r5
 8003b86:	4283      	cmp	r3, r0
 8003b88:	d301      	bcc.n	8003b8e <HAL_I2C_Mem_Read+0x16e>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f2      	bne.n	8003b74 <HAL_I2C_Mem_Read+0x154>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b8e:	4651      	mov	r1, sl
 8003b90:	6993      	ldr	r3, [r2, #24]
 8003b92:	4219      	tst	r1, r3
 8003b94:	d1ee      	bne.n	8003b74 <HAL_I2C_Mem_Read+0x154>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b96:	2220      	movs	r2, #32
 8003b98:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003b9a:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	2341      	movs	r3, #65	@ 0x41
 8003ba2:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	3222      	adds	r2, #34	@ 0x22
 8003ba8:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8003baa:	3a02      	subs	r2, #2
 8003bac:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8003bae:	e7d9      	b.n	8003b64 <HAL_I2C_Mem_Read+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb0:	6993      	ldr	r3, [r2, #24]
 8003bb2:	421e      	tst	r6, r3
 8003bb4:	d1a1      	bne.n	8003afa <HAL_I2C_Mem_Read+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb6:	f7fc fd87 	bl	80006c8 <HAL_GetTick>
 8003bba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bbc:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbe:	1b40      	subs	r0, r0, r5
 8003bc0:	4283      	cmp	r3, r0
 8003bc2:	d301      	bcc.n	8003bc8 <HAL_I2C_Mem_Read+0x1a8>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f3      	bne.n	8003bb0 <HAL_I2C_Mem_Read+0x190>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bc8:	6993      	ldr	r3, [r2, #24]
 8003bca:	421e      	tst	r6, r3
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_I2C_Mem_Read+0x190>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bce:	2220      	movs	r2, #32
 8003bd0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	2341      	movs	r3, #65	@ 0x41
 8003bd8:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bda:	2200      	movs	r2, #0
 8003bdc:	3301      	adds	r3, #1
 8003bde:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hi2c);
 8003be0:	2340      	movs	r3, #64	@ 0x40
 8003be2:	2200      	movs	r2, #0
      return  HAL_ERROR;
 8003be4:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8003be6:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8003be8:	e7bc      	b.n	8003b64 <HAL_I2C_Mem_Read+0x144>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bea:	0a3b      	lsrs	r3, r7, #8
 8003bec:	6293      	str	r3, [r2, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bee:	0020      	movs	r0, r4
 8003bf0:	002a      	movs	r2, r5
 8003bf2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003bf4:	f7fe fb7e 	bl	80022f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d1f1      	bne.n	8003be0 <HAL_I2C_Mem_Read+0x1c0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bfc:	6822      	ldr	r2, [r4, #0]
 8003bfe:	b2fb      	uxtb	r3, r7
 8003c00:	6293      	str	r3, [r2, #40]	@ 0x28
 8003c02:	e772      	b.n	8003aea <HAL_I2C_Mem_Read+0xca>
 8003c04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c06:	6822      	ldr	r2, [r4, #0]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	d145      	bne.n	8003c98 <HAL_I2C_Mem_Read+0x278>
 8003c0c:	6993      	ldr	r3, [r2, #24]
 8003c0e:	421e      	tst	r6, r3
 8003c10:	d0fc      	beq.n	8003c0c <HAL_I2C_Mem_Read+0x1ec>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c12:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003c14:	2bff      	cmp	r3, #255	@ 0xff
 8003c16:	d90a      	bls.n	8003c2e <HAL_I2C_Mem_Read+0x20e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c18:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c1a:	492b      	ldr	r1, [pc, #172]	@ (8003cc8 <HAL_I2C_Mem_Read+0x2a8>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c1c:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c1e:	6853      	ldr	r3, [r2, #4]
 8003c20:	400b      	ands	r3, r1
 8003c22:	4641      	mov	r1, r8
 8003c24:	430b      	orrs	r3, r1
 8003c26:	4929      	ldr	r1, [pc, #164]	@ (8003ccc <HAL_I2C_Mem_Read+0x2ac>)
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	6053      	str	r3, [r2, #4]
}
 8003c2c:	e78e      	b.n	8003b4c <HAL_I2C_Mem_Read+0x12c>
          hi2c->XferSize = hi2c->XferCount;
 8003c2e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c30:	4825      	ldr	r0, [pc, #148]	@ (8003cc8 <HAL_I2C_Mem_Read+0x2a8>)
 8003c32:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8003c34:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c36:	4001      	ands	r1, r0
 8003c38:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8003c3a:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c3c:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c3e:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c40:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c42:	430b      	orrs	r3, r1
 8003c44:	2180      	movs	r1, #128	@ 0x80
 8003c46:	0489      	lsls	r1, r1, #18
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	6053      	str	r3, [r2, #4]
}
 8003c4c:	e77e      	b.n	8003b4c <HAL_I2C_Mem_Read+0x12c>
      hi2c->XferSize = hi2c->XferCount;
 8003c4e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c50:	481b      	ldr	r0, [pc, #108]	@ (8003cc0 <HAL_I2C_Mem_Read+0x2a0>)
 8003c52:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8003c54:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c56:	4001      	ands	r1, r0
 8003c58:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 8003c5a:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c5c:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c5e:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c60:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c62:	430b      	orrs	r3, r1
 8003c64:	491a      	ldr	r1, [pc, #104]	@ (8003cd0 <HAL_I2C_Mem_Read+0x2b0>)
 8003c66:	430b      	orrs	r3, r1
 8003c68:	6053      	str	r3, [r2, #4]
}
 8003c6a:	e754      	b.n	8003b16 <HAL_I2C_Mem_Read+0xf6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c6c:	002a      	movs	r2, r5
 8003c6e:	0020      	movs	r0, r4
 8003c70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003c72:	f7fe fc2f 	bl	80024d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d000      	beq.n	8003c7c <HAL_I2C_Mem_Read+0x25c>
 8003c7a:	e770      	b.n	8003b5e <HAL_I2C_Mem_Read+0x13e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c7c:	2120      	movs	r1, #32
 8003c7e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003c80:	4d14      	ldr	r5, [pc, #80]	@ (8003cd4 <HAL_I2C_Mem_Read+0x2b4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c82:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	402a      	ands	r2, r5
 8003c88:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c8a:	2341      	movs	r3, #65	@ 0x41
 8003c8c:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c8e:	3301      	adds	r3, #1
 8003c90:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8003c92:	3b02      	subs	r3, #2
 8003c94:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8003c96:	e765      	b.n	8003b64 <HAL_I2C_Mem_Read+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c98:	2380      	movs	r3, #128	@ 0x80
 8003c9a:	469a      	mov	sl, r3
 8003c9c:	4651      	mov	r1, sl
 8003c9e:	6993      	ldr	r3, [r2, #24]
 8003ca0:	4219      	tst	r1, r3
 8003ca2:	d1b6      	bne.n	8003c12 <HAL_I2C_Mem_Read+0x1f2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca4:	f7fc fd10 	bl	80006c8 <HAL_GetTick>
 8003ca8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003caa:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cac:	1b40      	subs	r0, r0, r5
 8003cae:	4283      	cmp	r3, r0
 8003cb0:	d301      	bcc.n	8003cb6 <HAL_I2C_Mem_Read+0x296>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f2      	bne.n	8003c9c <HAL_I2C_Mem_Read+0x27c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cb6:	4651      	mov	r1, sl
 8003cb8:	6993      	ldr	r3, [r2, #24]
 8003cba:	4219      	tst	r1, r3
 8003cbc:	d1ee      	bne.n	8003c9c <HAL_I2C_Mem_Read+0x27c>
 8003cbe:	e76a      	b.n	8003b96 <HAL_I2C_Mem_Read+0x176>
 8003cc0:	fc009800 	.word	0xfc009800
 8003cc4:	01ff2400 	.word	0x01ff2400
 8003cc8:	fc009c00 	.word	0xfc009c00
 8003ccc:	01ff0000 	.word	0x01ff0000
 8003cd0:	02002400 	.word	0x02002400
 8003cd4:	fe00e800 	.word	0xfe00e800

08003cd8 <HAL_I2C_Mem_Write_IT>:
{
 8003cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cda:	4657      	mov	r7, sl
 8003cdc:	46de      	mov	lr, fp
 8003cde:	464e      	mov	r6, r9
 8003ce0:	4645      	mov	r5, r8
 8003ce2:	4693      	mov	fp, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce4:	2241      	movs	r2, #65	@ 0x41
{
 8003ce6:	b5e0      	push	{r5, r6, r7, lr}
 8003ce8:	ac09      	add	r4, sp, #36	@ 0x24
 8003cea:	001e      	movs	r6, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cec:	5c85      	ldrb	r5, [r0, r2]
{
 8003cee:	cc08      	ldmia	r4!, {r3}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf0:	4692      	mov	sl, r2
{
 8003cf2:	8827      	ldrh	r7, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf4:	2d20      	cmp	r5, #32
 8003cf6:	d150      	bne.n	8003d9a <HAL_I2C_Mem_Write_IT+0xc2>
    if ((pData == NULL) || (Size == 0U))
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d044      	beq.n	8003d86 <HAL_I2C_Mem_Write_IT+0xae>
 8003cfc:	2f00      	cmp	r7, #0
 8003cfe:	d042      	beq.n	8003d86 <HAL_I2C_Mem_Write_IT+0xae>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003d00:	6805      	ldr	r5, [r0, #0]
 8003d02:	69aa      	ldr	r2, [r5, #24]
 8003d04:	4690      	mov	r8, r2
 8003d06:	2280      	movs	r2, #128	@ 0x80
 8003d08:	0212      	lsls	r2, r2, #8
 8003d0a:	4694      	mov	ip, r2
 8003d0c:	4642      	mov	r2, r8
 8003d0e:	4664      	mov	r4, ip
 8003d10:	4022      	ands	r2, r4
 8003d12:	4691      	mov	r9, r2
 8003d14:	4642      	mov	r2, r8
 8003d16:	4222      	tst	r2, r4
 8003d18:	d13f      	bne.n	8003d9a <HAL_I2C_Mem_Write_IT+0xc2>
    __HAL_LOCK(hi2c);
 8003d1a:	2240      	movs	r2, #64	@ 0x40
 8003d1c:	4694      	mov	ip, r2
 8003d1e:	5c82      	ldrb	r2, [r0, r2]
 8003d20:	2a01      	cmp	r2, #1
 8003d22:	d03a      	beq.n	8003d9a <HAL_I2C_Mem_Write_IT+0xc2>
 8003d24:	2201      	movs	r2, #1
 8003d26:	4690      	mov	r8, r2
 8003d28:	4662      	mov	r2, ip
 8003d2a:	4644      	mov	r4, r8
 8003d2c:	5484      	strb	r4, [r0, r2]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d2e:	4654      	mov	r4, sl
 8003d30:	3a1f      	subs	r2, #31
 8003d32:	5502      	strb	r2, [r0, r4]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003d34:	4662      	mov	r2, ip
 8003d36:	2442      	movs	r4, #66	@ 0x42
 8003d38:	5502      	strb	r2, [r0, r4]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d3a:	464a      	mov	r2, r9
    hi2c->pBuffPtr    = pData;
 8003d3c:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003da8 <HAL_I2C_Mem_Write_IT+0xd0>)
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d40:	6442      	str	r2, [r0, #68]	@ 0x44
    hi2c->XferCount   = Size;
 8003d42:	8547      	strh	r7, [r0, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d44:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8003d46:	4b19      	ldr	r3, [pc, #100]	@ (8003dac <HAL_I2C_Mem_Write_IT+0xd4>)
    hi2c->Devaddress  = DevAddress;
 8003d48:	64c1      	str	r1, [r0, #76]	@ 0x4c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8003d4a:	6343      	str	r3, [r0, #52]	@ 0x34
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d4c:	465b      	mov	r3, fp
 8003d4e:	b2db      	uxtb	r3, r3
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d50:	2e01      	cmp	r6, #1
 8003d52:	d024      	beq.n	8003d9e <HAL_I2C_Mem_Write_IT+0xc6>
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d54:	465a      	mov	r2, fp
 8003d56:	0a12      	lsrs	r2, r2, #8
 8003d58:	62aa      	str	r2, [r5, #40]	@ 0x28
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003d5a:	6503      	str	r3, [r0, #80]	@ 0x50
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d5c:	058b      	lsls	r3, r1, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d5e:	b2f2      	uxtb	r2, r6
 8003d60:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d62:	0d9b      	lsrs	r3, r3, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d64:	686c      	ldr	r4, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d66:	4313      	orrs	r3, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d68:	4a11      	ldr	r2, [pc, #68]	@ (8003db0 <HAL_I2C_Mem_Write_IT+0xd8>)
 8003d6a:	4022      	ands	r2, r4
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	4a11      	ldr	r2, [pc, #68]	@ (8003db4 <HAL_I2C_Mem_Write_IT+0xdc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	606b      	str	r3, [r5, #4]
    __HAL_UNLOCK(hi2c);
 8003d74:	2200      	movs	r2, #0
 8003d76:	2340      	movs	r3, #64	@ 0x40
 8003d78:	54c2      	strb	r2, [r0, r3]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003d7a:	682b      	ldr	r3, [r5, #0]
 8003d7c:	32f2      	adds	r2, #242	@ 0xf2
 8003d7e:	4313      	orrs	r3, r2
    return HAL_OK;
 8003d80:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003d82:	602b      	str	r3, [r5, #0]
    return HAL_OK;
 8003d84:	e003      	b.n	8003d8e <HAL_I2C_Mem_Write_IT+0xb6>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d86:	2380      	movs	r3, #128	@ 0x80
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 8003d8c:	2001      	movs	r0, #1
}
 8003d8e:	bcf0      	pop	{r4, r5, r6, r7}
 8003d90:	46bb      	mov	fp, r7
 8003d92:	46b2      	mov	sl, r6
 8003d94:	46a9      	mov	r9, r5
 8003d96:	46a0      	mov	r8, r4
 8003d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8003d9a:	2002      	movs	r0, #2
 8003d9c:	e7f7      	b.n	8003d8e <HAL_I2C_Mem_Write_IT+0xb6>
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d9e:	62ab      	str	r3, [r5, #40]	@ 0x28
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003da0:	2301      	movs	r3, #1
 8003da2:	425b      	negs	r3, r3
 8003da4:	6503      	str	r3, [r0, #80]	@ 0x50
 8003da6:	e7d9      	b.n	8003d5c <HAL_I2C_Mem_Write_IT+0x84>
 8003da8:	ffff0000 	.word	0xffff0000
 8003dac:	08005c59 	.word	0x08005c59
 8003db0:	fc009800 	.word	0xfc009800
 8003db4:	01002000 	.word	0x01002000

08003db8 <HAL_I2C_Mem_Read_IT>:
{
 8003db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dba:	4657      	mov	r7, sl
 8003dbc:	46de      	mov	lr, fp
 8003dbe:	464e      	mov	r6, r9
 8003dc0:	4645      	mov	r5, r8
 8003dc2:	4693      	mov	fp, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc4:	2241      	movs	r2, #65	@ 0x41
{
 8003dc6:	b5e0      	push	{r5, r6, r7, lr}
 8003dc8:	ac09      	add	r4, sp, #36	@ 0x24
 8003dca:	001e      	movs	r6, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dcc:	5c85      	ldrb	r5, [r0, r2]
{
 8003dce:	cc08      	ldmia	r4!, {r3}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd0:	4692      	mov	sl, r2
{
 8003dd2:	8827      	ldrh	r7, [r4, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dd4:	2d20      	cmp	r5, #32
 8003dd6:	d151      	bne.n	8003e7c <HAL_I2C_Mem_Read_IT+0xc4>
    if ((pData == NULL) || (Size == 0U))
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d045      	beq.n	8003e68 <HAL_I2C_Mem_Read_IT+0xb0>
 8003ddc:	2f00      	cmp	r7, #0
 8003dde:	d043      	beq.n	8003e68 <HAL_I2C_Mem_Read_IT+0xb0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003de0:	6805      	ldr	r5, [r0, #0]
 8003de2:	69aa      	ldr	r2, [r5, #24]
 8003de4:	4690      	mov	r8, r2
 8003de6:	2280      	movs	r2, #128	@ 0x80
 8003de8:	0212      	lsls	r2, r2, #8
 8003dea:	4694      	mov	ip, r2
 8003dec:	4642      	mov	r2, r8
 8003dee:	4664      	mov	r4, ip
 8003df0:	4022      	ands	r2, r4
 8003df2:	4691      	mov	r9, r2
 8003df4:	4642      	mov	r2, r8
 8003df6:	4222      	tst	r2, r4
 8003df8:	d140      	bne.n	8003e7c <HAL_I2C_Mem_Read_IT+0xc4>
    __HAL_LOCK(hi2c);
 8003dfa:	2240      	movs	r2, #64	@ 0x40
 8003dfc:	4694      	mov	ip, r2
 8003dfe:	5c82      	ldrb	r2, [r0, r2]
 8003e00:	2a01      	cmp	r2, #1
 8003e02:	d03b      	beq.n	8003e7c <HAL_I2C_Mem_Read_IT+0xc4>
 8003e04:	2201      	movs	r2, #1
 8003e06:	4690      	mov	r8, r2
 8003e08:	4662      	mov	r2, ip
 8003e0a:	4644      	mov	r4, r8
 8003e0c:	5484      	strb	r4, [r0, r2]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e0e:	4654      	mov	r4, sl
 8003e10:	3a1e      	subs	r2, #30
 8003e12:	5502      	strb	r2, [r0, r4]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003e14:	4662      	mov	r2, ip
 8003e16:	2442      	movs	r4, #66	@ 0x42
 8003e18:	5502      	strb	r2, [r0, r4]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e1a:	464a      	mov	r2, r9
    hi2c->pBuffPtr    = pData;
 8003e1c:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e8c <HAL_I2C_Mem_Read_IT+0xd4>)
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e20:	6442      	str	r2, [r0, #68]	@ 0x44
    hi2c->XferCount   = Size;
 8003e22:	8547      	strh	r7, [r0, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e24:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8003e26:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <HAL_I2C_Mem_Read_IT+0xd8>)
    hi2c->Devaddress  = DevAddress;
 8003e28:	64c1      	str	r1, [r0, #76]	@ 0x4c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8003e2a:	6343      	str	r3, [r0, #52]	@ 0x34
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e2c:	465b      	mov	r3, fp
 8003e2e:	b2db      	uxtb	r3, r3
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e30:	2e01      	cmp	r6, #1
 8003e32:	d025      	beq.n	8003e80 <HAL_I2C_Mem_Read_IT+0xc8>
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e34:	465a      	mov	r2, fp
 8003e36:	0a12      	lsrs	r2, r2, #8
 8003e38:	62aa      	str	r2, [r5, #40]	@ 0x28
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003e3a:	6503      	str	r3, [r0, #80]	@ 0x50
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e3c:	058b      	lsls	r3, r1, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e3e:	b2f2      	uxtb	r2, r6
 8003e40:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e42:	0d9b      	lsrs	r3, r3, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e44:	686c      	ldr	r4, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e46:	4313      	orrs	r3, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e48:	4a12      	ldr	r2, [pc, #72]	@ (8003e94 <HAL_I2C_Mem_Read_IT+0xdc>)
 8003e4a:	4022      	ands	r2, r4
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	2280      	movs	r2, #128	@ 0x80
 8003e50:	0192      	lsls	r2, r2, #6
 8003e52:	4313      	orrs	r3, r2
 8003e54:	606b      	str	r3, [r5, #4]
    __HAL_UNLOCK(hi2c);
 8003e56:	2200      	movs	r2, #0
 8003e58:	2340      	movs	r3, #64	@ 0x40
 8003e5a:	54c2      	strb	r2, [r0, r3]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	32f6      	adds	r2, #246	@ 0xf6
 8003e60:	4313      	orrs	r3, r2
    return HAL_OK;
 8003e62:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003e64:	602b      	str	r3, [r5, #0]
    return HAL_OK;
 8003e66:	e003      	b.n	8003e70 <HAL_I2C_Mem_Read_IT+0xb8>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	6443      	str	r3, [r0, #68]	@ 0x44
      return  HAL_ERROR;
 8003e6e:	2001      	movs	r0, #1
}
 8003e70:	bcf0      	pop	{r4, r5, r6, r7}
 8003e72:	46bb      	mov	fp, r7
 8003e74:	46b2      	mov	sl, r6
 8003e76:	46a9      	mov	r9, r5
 8003e78:	46a0      	mov	r8, r4
 8003e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8003e7c:	2002      	movs	r0, #2
 8003e7e:	e7f7      	b.n	8003e70 <HAL_I2C_Mem_Read_IT+0xb8>
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e80:	62ab      	str	r3, [r5, #40]	@ 0x28
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003e82:	2301      	movs	r3, #1
 8003e84:	425b      	negs	r3, r3
 8003e86:	6503      	str	r3, [r0, #80]	@ 0x50
 8003e88:	e7d8      	b.n	8003e3c <HAL_I2C_Mem_Read_IT+0x84>
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	ffff0000 	.word	0xffff0000
 8003e90:	08005c59 	.word	0x08005c59
 8003e94:	fc009800 	.word	0xfc009800

08003e98 <HAL_I2C_Mem_Write_DMA>:
{
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	4657      	mov	r7, sl
 8003e9c:	464e      	mov	r6, r9
 8003e9e:	4645      	mov	r5, r8
 8003ea0:	46de      	mov	lr, fp
 8003ea2:	b5e0      	push	{r5, r6, r7, lr}
 8003ea4:	0004      	movs	r4, r0
 8003ea6:	a80a      	add	r0, sp, #40	@ 0x28
 8003ea8:	000d      	movs	r5, r1
 8003eaa:	c802      	ldmia	r0!, {r1}
 8003eac:	001f      	movs	r7, r3
 8003eae:	8803      	ldrh	r3, [r0, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb0:	2041      	movs	r0, #65	@ 0x41
 8003eb2:	5c26      	ldrb	r6, [r4, r0]
 8003eb4:	4682      	mov	sl, r0
 8003eb6:	2e20      	cmp	r6, #32
 8003eb8:	d163      	bne.n	8003f82 <HAL_I2C_Mem_Write_DMA+0xea>
    if ((pData == NULL) || (Size == 0U))
 8003eba:	2900      	cmp	r1, #0
 8003ebc:	d05c      	beq.n	8003f78 <HAL_I2C_Mem_Write_DMA+0xe0>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d05a      	beq.n	8003f78 <HAL_I2C_Mem_Write_DMA+0xe0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003ec2:	6820      	ldr	r0, [r4, #0]
 8003ec4:	6986      	ldr	r6, [r0, #24]
 8003ec6:	4683      	mov	fp, r0
 8003ec8:	46b0      	mov	r8, r6
 8003eca:	2680      	movs	r6, #128	@ 0x80
 8003ecc:	0236      	lsls	r6, r6, #8
 8003ece:	46b4      	mov	ip, r6
 8003ed0:	4646      	mov	r6, r8
 8003ed2:	4660      	mov	r0, ip
 8003ed4:	4006      	ands	r6, r0
 8003ed6:	46b1      	mov	r9, r6
 8003ed8:	4640      	mov	r0, r8
 8003eda:	4666      	mov	r6, ip
 8003edc:	4230      	tst	r0, r6
 8003ede:	d150      	bne.n	8003f82 <HAL_I2C_Mem_Write_DMA+0xea>
    __HAL_LOCK(hi2c);
 8003ee0:	2040      	movs	r0, #64	@ 0x40
 8003ee2:	4684      	mov	ip, r0
 8003ee4:	5c20      	ldrb	r0, [r4, r0]
 8003ee6:	2801      	cmp	r0, #1
 8003ee8:	d04b      	beq.n	8003f82 <HAL_I2C_Mem_Write_DMA+0xea>
 8003eea:	2001      	movs	r0, #1
 8003eec:	4680      	mov	r8, r0
 8003eee:	4660      	mov	r0, ip
 8003ef0:	4646      	mov	r6, r8
 8003ef2:	5426      	strb	r6, [r4, r0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ef4:	4656      	mov	r6, sl
 8003ef6:	381f      	subs	r0, #31
 8003ef8:	55a0      	strb	r0, [r4, r6]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003efa:	4666      	mov	r6, ip
 8003efc:	3021      	adds	r0, #33	@ 0x21
 8003efe:	5426      	strb	r6, [r4, r0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f00:	4648      	mov	r0, r9
 8003f02:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount   = Size;
 8003f04:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f06:	4b37      	ldr	r3, [pc, #220]	@ (8003fe4 <HAL_I2C_Mem_Write_DMA+0x14c>)
    hi2c->pBuffPtr    = pData;
 8003f08:	6261      	str	r1, [r4, #36]	@ 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003f0c:	64e5      	str	r5, [r4, #76]	@ 0x4c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8003f0e:	4b36      	ldr	r3, [pc, #216]	@ (8003fe8 <HAL_I2C_Mem_Write_DMA+0x150>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f10:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8003f12:	6363      	str	r3, [r4, #52]	@ 0x34
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f14:	23ff      	movs	r3, #255	@ 0xff
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f16:	28ff      	cmp	r0, #255	@ 0xff
 8003f18:	d93a      	bls.n	8003f90 <HAL_I2C_Mem_Write_DMA+0xf8>
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f1a:	b2d0      	uxtb	r0, r2
 8003f1c:	4684      	mov	ip, r0
 8003f1e:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f20:	2f01      	cmp	r7, #1
 8003f22:	d03c      	beq.n	8003f9e <HAL_I2C_Mem_Write_DMA+0x106>
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f24:	4658      	mov	r0, fp
 8003f26:	0a12      	lsrs	r2, r2, #8
 8003f28:	6282      	str	r2, [r0, #40]	@ 0x28
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003f2a:	4662      	mov	r2, ip
 8003f2c:	6522      	str	r2, [r4, #80]	@ 0x50
    if (hi2c->hdmatx != NULL)
 8003f2e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d04a      	beq.n	8003fca <HAL_I2C_Mem_Write_DMA+0x132>
      hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003f34:	4a2d      	ldr	r2, [pc, #180]	@ (8003fec <HAL_I2C_Mem_Write_DMA+0x154>)
 8003f36:	62c2      	str	r2, [r0, #44]	@ 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003f38:	4a2d      	ldr	r2, [pc, #180]	@ (8003ff0 <HAL_I2C_Mem_Write_DMA+0x158>)
 8003f3a:	6342      	str	r2, [r0, #52]	@ 0x34
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	4690      	mov	r8, r2
 8003f40:	6302      	str	r2, [r0, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003f42:	6382      	str	r2, [r0, #56]	@ 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003f44:	465a      	mov	r2, fp
 8003f46:	3228      	adds	r2, #40	@ 0x28
 8003f48:	f7fd fc5e 	bl	8001808 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d12d      	bne.n	8003fac <HAL_I2C_Mem_Write_DMA+0x114>
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f50:	6822      	ldr	r2, [r4, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f52:	05ad      	lsls	r5, r5, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f54:	b2fb      	uxtb	r3, r7
 8003f56:	041b      	lsls	r3, r3, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f58:	0dad      	lsrs	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f5a:	6851      	ldr	r1, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f5c:	431d      	orrs	r5, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f5e:	4b25      	ldr	r3, [pc, #148]	@ (8003ff4 <HAL_I2C_Mem_Write_DMA+0x15c>)
 8003f60:	400b      	ands	r3, r1
 8003f62:	431d      	orrs	r5, r3
 8003f64:	4b24      	ldr	r3, [pc, #144]	@ (8003ff8 <HAL_I2C_Mem_Write_DMA+0x160>)
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003f66:	21f2      	movs	r1, #242	@ 0xf2
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f68:	432b      	orrs	r3, r5
 8003f6a:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hi2c);
 8003f6c:	2340      	movs	r3, #64	@ 0x40
 8003f6e:	54e0      	strb	r0, [r4, r3]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003f70:	6813      	ldr	r3, [r2, #0]
 8003f72:	430b      	orrs	r3, r1
 8003f74:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8003f76:	e005      	b.n	8003f84 <HAL_I2C_Mem_Write_DMA+0xec>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f78:	2380      	movs	r3, #128	@ 0x80
 8003f7a:	009b      	lsls	r3, r3, #2
      return  HAL_ERROR;
 8003f7c:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f7e:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003f80:	e000      	b.n	8003f84 <HAL_I2C_Mem_Write_DMA+0xec>
      return HAL_BUSY;
 8003f82:	2002      	movs	r0, #2
}
 8003f84:	bcf0      	pop	{r4, r5, r6, r7}
 8003f86:	46bb      	mov	fp, r7
 8003f88:	46b2      	mov	sl, r6
 8003f8a:	46a9      	mov	r9, r5
 8003f8c:	46a0      	mov	r8, r4
 8003f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferSize = hi2c->XferCount;
 8003f90:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f92:	b2d0      	uxtb	r0, r2
      hi2c->XferSize = hi2c->XferCount;
 8003f94:	b29b      	uxth	r3, r3
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f96:	4684      	mov	ip, r0
 8003f98:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f9a:	2f01      	cmp	r7, #1
 8003f9c:	d1c2      	bne.n	8003f24 <HAL_I2C_Mem_Write_DMA+0x8c>
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f9e:	0002      	movs	r2, r0
 8003fa0:	4658      	mov	r0, fp
 8003fa2:	6282      	str	r2, [r0, #40]	@ 0x28
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	4252      	negs	r2, r2
 8003fa8:	6522      	str	r2, [r4, #80]	@ 0x50
 8003faa:	e7c0      	b.n	8003f2e <HAL_I2C_Mem_Write_DMA+0x96>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003fac:	2341      	movs	r3, #65	@ 0x41
 8003fae:	2220      	movs	r2, #32
 8003fb0:	54e2      	strb	r2, [r4, r3]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003fb2:	4642      	mov	r2, r8
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	54e2      	strb	r2, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003fb8:	2210      	movs	r2, #16
 8003fba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003fbc:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8003fc2:	4642      	mov	r2, r8
 8003fc4:	2340      	movs	r3, #64	@ 0x40
 8003fc6:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8003fc8:	e7dc      	b.n	8003f84 <HAL_I2C_Mem_Write_DMA+0xec>
      hi2c->State     = HAL_I2C_STATE_READY;
 8003fca:	2341      	movs	r3, #65	@ 0x41
 8003fcc:	2220      	movs	r2, #32
 8003fce:	54e2      	strb	r2, [r4, r3]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	54e0      	strb	r0, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003fd4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003fd6:	3260      	adds	r2, #96	@ 0x60
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8003fdc:	2340      	movs	r3, #64	@ 0x40
 8003fde:	54e0      	strb	r0, [r4, r3]
      return  HAL_ERROR;
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	e7cf      	b.n	8003f84 <HAL_I2C_Mem_Write_DMA+0xec>
 8003fe4:	ffff0000 	.word	0xffff0000
 8003fe8:	080056cd 	.word	0x080056cd
 8003fec:	08005af1 	.word	0x08005af1
 8003ff0:	08006309 	.word	0x08006309
 8003ff4:	fc009800 	.word	0xfc009800
 8003ff8:	01002000 	.word	0x01002000

08003ffc <HAL_I2C_Mem_Read_DMA>:
{
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	4657      	mov	r7, sl
 8004000:	464e      	mov	r6, r9
 8004002:	4645      	mov	r5, r8
 8004004:	46de      	mov	lr, fp
 8004006:	0004      	movs	r4, r0
 8004008:	b5e0      	push	{r5, r6, r7, lr}
 800400a:	000d      	movs	r5, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800400c:	2141      	movs	r1, #65	@ 0x41
{
 800400e:	a80a      	add	r0, sp, #40	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004010:	468a      	mov	sl, r1
{
 8004012:	c880      	ldmia	r0!, {r7}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004014:	5c61      	ldrb	r1, [r4, r1]
{
 8004016:	001e      	movs	r6, r3
 8004018:	8803      	ldrh	r3, [r0, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800401a:	2920      	cmp	r1, #32
 800401c:	d164      	bne.n	80040e8 <HAL_I2C_Mem_Read_DMA+0xec>
    if ((pData == NULL) || (Size == 0U))
 800401e:	2f00      	cmp	r7, #0
 8004020:	d05d      	beq.n	80040de <HAL_I2C_Mem_Read_DMA+0xe2>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d05b      	beq.n	80040de <HAL_I2C_Mem_Read_DMA+0xe2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004026:	6821      	ldr	r1, [r4, #0]
 8004028:	468b      	mov	fp, r1
 800402a:	6989      	ldr	r1, [r1, #24]
 800402c:	4688      	mov	r8, r1
 800402e:	2180      	movs	r1, #128	@ 0x80
 8004030:	0209      	lsls	r1, r1, #8
 8004032:	468c      	mov	ip, r1
 8004034:	4641      	mov	r1, r8
 8004036:	4660      	mov	r0, ip
 8004038:	4001      	ands	r1, r0
 800403a:	4689      	mov	r9, r1
 800403c:	4641      	mov	r1, r8
 800403e:	4201      	tst	r1, r0
 8004040:	d152      	bne.n	80040e8 <HAL_I2C_Mem_Read_DMA+0xec>
    __HAL_LOCK(hi2c);
 8004042:	2140      	movs	r1, #64	@ 0x40
 8004044:	468c      	mov	ip, r1
 8004046:	5c61      	ldrb	r1, [r4, r1]
 8004048:	2901      	cmp	r1, #1
 800404a:	d04d      	beq.n	80040e8 <HAL_I2C_Mem_Read_DMA+0xec>
 800404c:	2101      	movs	r1, #1
 800404e:	4688      	mov	r8, r1
 8004050:	4661      	mov	r1, ip
 8004052:	4640      	mov	r0, r8
 8004054:	5460      	strb	r0, [r4, r1]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004056:	4650      	mov	r0, sl
 8004058:	391e      	subs	r1, #30
 800405a:	5421      	strb	r1, [r4, r0]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800405c:	2042      	movs	r0, #66	@ 0x42
 800405e:	4661      	mov	r1, ip
 8004060:	5421      	strb	r1, [r4, r0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004062:	4649      	mov	r1, r9
 8004064:	6461      	str	r1, [r4, #68]	@ 0x44
    hi2c->XferCount   = Size;
 8004066:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004068:	4b38      	ldr	r3, [pc, #224]	@ (800414c <HAL_I2C_Mem_Read_DMA+0x150>)
    hi2c->pBuffPtr    = pData;
 800406a:	6267      	str	r7, [r4, #36]	@ 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800406c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800406e:	64e5      	str	r5, [r4, #76]	@ 0x4c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8004070:	4b37      	ldr	r3, [pc, #220]	@ (8004150 <HAL_I2C_Mem_Read_DMA+0x154>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004072:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8004074:	6363      	str	r3, [r4, #52]	@ 0x34
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004076:	23ff      	movs	r3, #255	@ 0xff
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004078:	28ff      	cmp	r0, #255	@ 0xff
 800407a:	d93c      	bls.n	80040f6 <HAL_I2C_Mem_Read_DMA+0xfa>
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800407c:	b2d1      	uxtb	r1, r2
 800407e:	468c      	mov	ip, r1
 8004080:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004082:	2e01      	cmp	r6, #1
 8004084:	d03e      	beq.n	8004104 <HAL_I2C_Mem_Read_DMA+0x108>
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004086:	4659      	mov	r1, fp
 8004088:	0a12      	lsrs	r2, r2, #8
 800408a:	628a      	str	r2, [r1, #40]	@ 0x28
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800408c:	4662      	mov	r2, ip
 800408e:	6522      	str	r2, [r4, #80]	@ 0x50
    if (hi2c->hdmarx != NULL)
 8004090:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004092:	2800      	cmp	r0, #0
 8004094:	d04c      	beq.n	8004130 <HAL_I2C_Mem_Read_DMA+0x134>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004096:	4a2f      	ldr	r2, [pc, #188]	@ (8004154 <HAL_I2C_Mem_Read_DMA+0x158>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004098:	4659      	mov	r1, fp
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800409a:	62c2      	str	r2, [r0, #44]	@ 0x2c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800409c:	4a2e      	ldr	r2, [pc, #184]	@ (8004158 <HAL_I2C_Mem_Read_DMA+0x15c>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800409e:	3124      	adds	r1, #36	@ 0x24
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80040a0:	6342      	str	r2, [r0, #52]	@ 0x34
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80040a2:	2200      	movs	r2, #0
 80040a4:	4690      	mov	r8, r2
 80040a6:	6302      	str	r2, [r0, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 80040a8:	6382      	str	r2, [r0, #56]	@ 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80040aa:	003a      	movs	r2, r7
 80040ac:	f7fd fbac 	bl	8001808 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d12e      	bne.n	8004112 <HAL_I2C_Mem_Read_DMA+0x116>
  MODIFY_REG(hi2c->Instance->CR2, \
 80040b4:	6822      	ldr	r2, [r4, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040b6:	05ad      	lsls	r5, r5, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040b8:	b2f3      	uxtb	r3, r6
 80040ba:	041b      	lsls	r3, r3, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040bc:	0dad      	lsrs	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80040be:	6851      	ldr	r1, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040c0:	431d      	orrs	r5, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80040c2:	4b26      	ldr	r3, [pc, #152]	@ (800415c <HAL_I2C_Mem_Read_DMA+0x160>)
 80040c4:	400b      	ands	r3, r1
 80040c6:	431d      	orrs	r5, r3
 80040c8:	2380      	movs	r3, #128	@ 0x80
 80040ca:	019b      	lsls	r3, r3, #6
 80040cc:	432b      	orrs	r3, r5
 80040ce:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hi2c);
 80040d0:	2340      	movs	r3, #64	@ 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80040d2:	21f2      	movs	r1, #242	@ 0xf2
      __HAL_UNLOCK(hi2c);
 80040d4:	54e0      	strb	r0, [r4, r3]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80040d6:	6813      	ldr	r3, [r2, #0]
 80040d8:	430b      	orrs	r3, r1
 80040da:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80040dc:	e005      	b.n	80040ea <HAL_I2C_Mem_Read_DMA+0xee>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040de:	2380      	movs	r3, #128	@ 0x80
 80040e0:	009b      	lsls	r3, r3, #2
      return  HAL_ERROR;
 80040e2:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040e4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80040e6:	e000      	b.n	80040ea <HAL_I2C_Mem_Read_DMA+0xee>
      return HAL_BUSY;
 80040e8:	2002      	movs	r0, #2
}
 80040ea:	bcf0      	pop	{r4, r5, r6, r7}
 80040ec:	46bb      	mov	fp, r7
 80040ee:	46b2      	mov	sl, r6
 80040f0:	46a9      	mov	r9, r5
 80040f2:	46a0      	mov	r8, r4
 80040f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferSize = hi2c->XferCount;
 80040f6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040f8:	b2d1      	uxtb	r1, r2
      hi2c->XferSize = hi2c->XferCount;
 80040fa:	b29b      	uxth	r3, r3
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040fc:	468c      	mov	ip, r1
 80040fe:	8523      	strh	r3, [r4, #40]	@ 0x28
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004100:	2e01      	cmp	r6, #1
 8004102:	d1c0      	bne.n	8004086 <HAL_I2C_Mem_Read_DMA+0x8a>
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004104:	000a      	movs	r2, r1
 8004106:	4659      	mov	r1, fp
 8004108:	628a      	str	r2, [r1, #40]	@ 0x28
      hi2c->Memaddress = 0xFFFFFFFFU;
 800410a:	2201      	movs	r2, #1
 800410c:	4252      	negs	r2, r2
 800410e:	6522      	str	r2, [r4, #80]	@ 0x50
 8004110:	e7be      	b.n	8004090 <HAL_I2C_Mem_Read_DMA+0x94>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004112:	2341      	movs	r3, #65	@ 0x41
 8004114:	2220      	movs	r2, #32
 8004116:	54e2      	strb	r2, [r4, r3]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004118:	4642      	mov	r2, r8
 800411a:	3301      	adds	r3, #1
 800411c:	54e2      	strb	r2, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800411e:	2210      	movs	r2, #16
 8004120:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8004122:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004124:	4313      	orrs	r3, r2
 8004126:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004128:	4642      	mov	r2, r8
 800412a:	2340      	movs	r3, #64	@ 0x40
 800412c:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 800412e:	e7dc      	b.n	80040ea <HAL_I2C_Mem_Read_DMA+0xee>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004130:	2341      	movs	r3, #65	@ 0x41
 8004132:	2220      	movs	r2, #32
 8004134:	54e2      	strb	r2, [r4, r3]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004136:	3301      	adds	r3, #1
 8004138:	54e0      	strb	r0, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800413a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800413c:	3260      	adds	r2, #96	@ 0x60
 800413e:	4313      	orrs	r3, r2
 8004140:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004142:	2340      	movs	r3, #64	@ 0x40
 8004144:	54e0      	strb	r0, [r4, r3]
      return  HAL_ERROR;
 8004146:	2001      	movs	r0, #1
 8004148:	e7cf      	b.n	80040ea <HAL_I2C_Mem_Read_DMA+0xee>
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	ffff0000 	.word	0xffff0000
 8004150:	080056cd 	.word	0x080056cd
 8004154:	08005ba5 	.word	0x08005ba5
 8004158:	08006309 	.word	0x08006309
 800415c:	fc009800 	.word	0xfc009800

08004160 <HAL_I2C_IsDeviceReady>:
{
 8004160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004162:	4657      	mov	r7, sl
 8004164:	4645      	mov	r5, r8
 8004166:	46de      	mov	lr, fp
 8004168:	464e      	mov	r6, r9
 800416a:	b5e0      	push	{r5, r6, r7, lr}
 800416c:	001d      	movs	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 800416e:	2300      	movs	r3, #0
{
 8004170:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004172:	2241      	movs	r2, #65	@ 0x41
{
 8004174:	b083      	sub	sp, #12
  __IO uint32_t I2C_Trials = 0UL;
 8004176:	9301      	str	r3, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004178:	5c83      	ldrb	r3, [r0, r2]
{
 800417a:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800417c:	2b20      	cmp	r3, #32
 800417e:	d155      	bne.n	800422c <HAL_I2C_IsDeviceReady+0xcc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004180:	6803      	ldr	r3, [r0, #0]
 8004182:	2080      	movs	r0, #128	@ 0x80
 8004184:	699e      	ldr	r6, [r3, #24]
 8004186:	0200      	lsls	r0, r0, #8
 8004188:	0037      	movs	r7, r6
 800418a:	4007      	ands	r7, r0
 800418c:	4206      	tst	r6, r0
 800418e:	d14d      	bne.n	800422c <HAL_I2C_IsDeviceReady+0xcc>
    __HAL_LOCK(hi2c);
 8004190:	2040      	movs	r0, #64	@ 0x40
 8004192:	5c26      	ldrb	r6, [r4, r0]
 8004194:	2e01      	cmp	r6, #1
 8004196:	d049      	beq.n	800422c <HAL_I2C_IsDeviceReady+0xcc>
 8004198:	2601      	movs	r6, #1
 800419a:	0589      	lsls	r1, r1, #22
 800419c:	5426      	strb	r6, [r4, r0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800419e:	381c      	subs	r0, #28
 80041a0:	54a0      	strb	r0, [r4, r2]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80041a2:	0d8a      	lsrs	r2, r1, #22
 80041a4:	4691      	mov	r9, r2
 80041a6:	4649      	mov	r1, r9
 80041a8:	4a5d      	ldr	r2, [pc, #372]	@ (8004320 <HAL_I2C_IsDeviceReady+0x1c0>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041aa:	6467      	str	r7, [r4, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80041ac:	4311      	orrs	r1, r2
 80041ae:	468b      	mov	fp, r1
 80041b0:	68e1      	ldr	r1, [r4, #12]
 80041b2:	465a      	mov	r2, fp
 80041b4:	2901      	cmp	r1, #1
 80041b6:	d102      	bne.n	80041be <HAL_I2C_IsDeviceReady+0x5e>
 80041b8:	4649      	mov	r1, r9
 80041ba:	4a5a      	ldr	r2, [pc, #360]	@ (8004324 <HAL_I2C_IsDeviceReady+0x1c4>)
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
      tickstart = HAL_GetTick();
 80041c0:	f7fc fa82 	bl	80006c8 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041c4:	2220      	movs	r2, #32
 80041c6:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80041c8:	0006      	movs	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ca:	6999      	ldr	r1, [r3, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041cc:	6998      	ldr	r0, [r3, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ce:	400a      	ands	r2, r1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041d0:	2110      	movs	r1, #16
 80041d2:	4001      	ands	r1, r0
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80041d4:	430a      	orrs	r2, r1
 80041d6:	d145      	bne.n	8004264 <HAL_I2C_IsDeviceReady+0x104>
 80041d8:	1c6a      	adds	r2, r5, #1
 80041da:	d12f      	bne.n	800423c <HAL_I2C_IsDeviceReady+0xdc>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041dc:	2720      	movs	r7, #32
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041de:	2010      	movs	r0, #16
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041e0:	699a      	ldr	r2, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041e2:	6999      	ldr	r1, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041e4:	403a      	ands	r2, r7
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041e6:	4001      	ands	r1, r0
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80041e8:	430a      	orrs	r2, r1
 80041ea:	d0f9      	beq.n	80041e0 <HAL_I2C_IsDeviceReady+0x80>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	4210      	tst	r0, r2
 80041f0:	d100      	bne.n	80041f4 <HAL_I2C_IsDeviceReady+0x94>
 80041f2:	e076      	b.n	80042e2 <HAL_I2C_IsDeviceReady+0x182>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041f4:	2120      	movs	r1, #32
 80041f6:	699a      	ldr	r2, [r3, #24]
 80041f8:	4211      	tst	r1, r2
 80041fa:	d0fc      	beq.n	80041f6 <HAL_I2C_IsDeviceReady+0x96>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041fc:	2210      	movs	r2, #16
 80041fe:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004200:	3210      	adds	r2, #16
 8004202:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 8004204:	9a01      	ldr	r2, [sp, #4]
 8004206:	4552      	cmp	r2, sl
 8004208:	d04d      	beq.n	80042a6 <HAL_I2C_IsDeviceReady+0x146>
      I2C_Trials++;
 800420a:	9a01      	ldr	r2, [sp, #4]
 800420c:	3201      	adds	r2, #1
 800420e:	9201      	str	r2, [sp, #4]
    } while (I2C_Trials < Trials);
 8004210:	9a01      	ldr	r2, [sp, #4]
 8004212:	4552      	cmp	r2, sl
 8004214:	d3cc      	bcc.n	80041b0 <HAL_I2C_IsDeviceReady+0x50>
    hi2c->State = HAL_I2C_STATE_READY;
 8004216:	2220      	movs	r2, #32
 8004218:	2341      	movs	r3, #65	@ 0x41
 800421a:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800421c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800421e:	4313      	orrs	r3, r2
 8004220:	6463      	str	r3, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8004222:	2340      	movs	r3, #64	@ 0x40
 8004224:	2200      	movs	r2, #0
            return HAL_ERROR;
 8004226:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8004228:	54e2      	strb	r2, [r4, r3]
 800422a:	e000      	b.n	800422e <HAL_I2C_IsDeviceReady+0xce>
      return HAL_BUSY;
 800422c:	2002      	movs	r0, #2
}
 800422e:	b003      	add	sp, #12
 8004230:	bcf0      	pop	{r4, r5, r6, r7}
 8004232:	46bb      	mov	fp, r7
 8004234:	46b2      	mov	sl, r6
 8004236:	46a9      	mov	r9, r5
 8004238:	46a0      	mov	r8, r4
 800423a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423c:	2d00      	cmp	r5, #0
 800423e:	d02f      	beq.n	80042a0 <HAL_I2C_IsDeviceReady+0x140>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004240:	2320      	movs	r3, #32
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004242:	2710      	movs	r7, #16
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004244:	4698      	mov	r8, r3
 8004246:	e007      	b.n	8004258 <HAL_I2C_IsDeviceReady+0xf8>
 8004248:	4640      	mov	r0, r8
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800424e:	6999      	ldr	r1, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004250:	4002      	ands	r2, r0
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004252:	4039      	ands	r1, r7
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004254:	430a      	orrs	r2, r1
 8004256:	d105      	bne.n	8004264 <HAL_I2C_IsDeviceReady+0x104>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004258:	f7fc fa36 	bl	80006c8 <HAL_GetTick>
 800425c:	1b80      	subs	r0, r0, r6
 800425e:	42a8      	cmp	r0, r5
 8004260:	d9f2      	bls.n	8004248 <HAL_I2C_IsDeviceReady+0xe8>
 8004262:	e7d8      	b.n	8004216 <HAL_I2C_IsDeviceReady+0xb6>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	06d2      	lsls	r2, r2, #27
 8004268:	d548      	bpl.n	80042fc <HAL_I2C_IsDeviceReady+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800426a:	2720      	movs	r7, #32
 800426c:	1c6a      	adds	r2, r5, #1
 800426e:	d0c1      	beq.n	80041f4 <HAL_I2C_IsDeviceReady+0x94>
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	4217      	tst	r7, r2
 8004274:	d1c2      	bne.n	80041fc <HAL_I2C_IsDeviceReady+0x9c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004276:	f7fc fa27 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800427a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427c:	1b80      	subs	r0, r0, r6
 800427e:	4285      	cmp	r5, r0
 8004280:	d301      	bcc.n	8004286 <HAL_I2C_IsDeviceReady+0x126>
 8004282:	2d00      	cmp	r5, #0
 8004284:	d1f4      	bne.n	8004270 <HAL_I2C_IsDeviceReady+0x110>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004286:	699a      	ldr	r2, [r3, #24]
 8004288:	4217      	tst	r7, r2
 800428a:	d1f1      	bne.n	8004270 <HAL_I2C_IsDeviceReady+0x110>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800428c:	2220      	movs	r2, #32
 800428e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004290:	4313      	orrs	r3, r2
 8004292:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004294:	2341      	movs	r3, #65	@ 0x41
 8004296:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004298:	2200      	movs	r2, #0
 800429a:	3301      	adds	r3, #1
 800429c:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 800429e:	e7c0      	b.n	8004222 <HAL_I2C_IsDeviceReady+0xc2>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042a0:	f7fc fa12 	bl	80006c8 <HAL_GetTick>
            hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	e7b7      	b.n	8004216 <HAL_I2C_IsDeviceReady+0xb6>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042a6:	2280      	movs	r2, #128	@ 0x80
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	01d2      	lsls	r2, r2, #7
 80042ac:	430a      	orrs	r2, r1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ae:	2720      	movs	r7, #32
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042b0:	605a      	str	r2, [r3, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b2:	1c6a      	adds	r2, r5, #1
 80042b4:	d10b      	bne.n	80042ce <HAL_I2C_IsDeviceReady+0x16e>
 80042b6:	2120      	movs	r1, #32
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	4211      	tst	r1, r2
 80042bc:	d0fc      	beq.n	80042b8 <HAL_I2C_IsDeviceReady+0x158>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042be:	2220      	movs	r2, #32
 80042c0:	61da      	str	r2, [r3, #28]
 80042c2:	e7a2      	b.n	800420a <HAL_I2C_IsDeviceReady+0xaa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c4:	2d00      	cmp	r5, #0
 80042c6:	d102      	bne.n	80042ce <HAL_I2C_IsDeviceReady+0x16e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	4217      	tst	r7, r2
 80042cc:	d0de      	beq.n	800428c <HAL_I2C_IsDeviceReady+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ce:	699a      	ldr	r2, [r3, #24]
 80042d0:	4217      	tst	r7, r2
 80042d2:	d1f4      	bne.n	80042be <HAL_I2C_IsDeviceReady+0x15e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d4:	f7fc f9f8 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042d8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042da:	1b80      	subs	r0, r0, r6
 80042dc:	4285      	cmp	r5, r0
 80042de:	d2f1      	bcs.n	80042c4 <HAL_I2C_IsDeviceReady+0x164>
 80042e0:	e7f2      	b.n	80042c8 <HAL_I2C_IsDeviceReady+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042e2:	2120      	movs	r1, #32
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	4211      	tst	r1, r2
 80042e8:	d0fc      	beq.n	80042e4 <HAL_I2C_IsDeviceReady+0x184>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ea:	2220      	movs	r2, #32
 80042ec:	61da      	str	r2, [r3, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80042ee:	2341      	movs	r3, #65	@ 0x41
 80042f0:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 80042f2:	2200      	movs	r2, #0
 80042f4:	3b01      	subs	r3, #1
        return HAL_OK;
 80042f6:	2000      	movs	r0, #0
        __HAL_UNLOCK(hi2c);
 80042f8:	54e2      	strb	r2, [r4, r3]
        return HAL_OK;
 80042fa:	e798      	b.n	800422e <HAL_I2C_IsDeviceReady+0xce>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042fc:	2720      	movs	r7, #32
 80042fe:	1c6a      	adds	r2, r5, #1
 8004300:	d0ef      	beq.n	80042e2 <HAL_I2C_IsDeviceReady+0x182>
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	4217      	tst	r7, r2
 8004306:	d1f0      	bne.n	80042ea <HAL_I2C_IsDeviceReady+0x18a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004308:	f7fc f9de 	bl	80006c8 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800430c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800430e:	1b80      	subs	r0, r0, r6
 8004310:	4285      	cmp	r5, r0
 8004312:	d301      	bcc.n	8004318 <HAL_I2C_IsDeviceReady+0x1b8>
 8004314:	2d00      	cmp	r5, #0
 8004316:	d1f4      	bne.n	8004302 <HAL_I2C_IsDeviceReady+0x1a2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	4217      	tst	r7, r2
 800431c:	d1f1      	bne.n	8004302 <HAL_I2C_IsDeviceReady+0x1a2>
 800431e:	e7b5      	b.n	800428c <HAL_I2C_IsDeviceReady+0x12c>
 8004320:	02002800 	.word	0x02002800
 8004324:	02002000 	.word	0x02002000

08004328 <HAL_I2C_Master_Seq_Transmit_IT>:
{
 8004328:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800432a:	2441      	movs	r4, #65	@ 0x41
 800432c:	5d05      	ldrb	r5, [r0, r4]
 800432e:	2d20      	cmp	r5, #32
 8004330:	d158      	bne.n	80043e4 <HAL_I2C_Master_Seq_Transmit_IT+0xbc>
    __HAL_LOCK(hi2c);
 8004332:	3520      	adds	r5, #32
 8004334:	5d46      	ldrb	r6, [r0, r5]
 8004336:	2e01      	cmp	r6, #1
 8004338:	d054      	beq.n	80043e4 <HAL_I2C_Master_Seq_Transmit_IT+0xbc>
 800433a:	2601      	movs	r6, #1
 800433c:	5546      	strb	r6, [r0, r5]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800433e:	3d1f      	subs	r5, #31
 8004340:	5505      	strb	r5, [r0, r4]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004342:	3401      	adds	r4, #1
 8004344:	3d11      	subs	r5, #17
 8004346:	5505      	strb	r5, [r0, r4]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004348:	2400      	movs	r4, #0
 800434a:	6444      	str	r4, [r0, #68]	@ 0x44
    hi2c->XferCount   = Size;
 800434c:	8543      	strh	r3, [r0, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 800434e:	9b05      	ldr	r3, [sp, #20]
    hi2c->pBuffPtr    = pData;
 8004350:	6242      	str	r2, [r0, #36]	@ 0x24
    hi2c->XferOptions = XferOptions;
 8004352:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004354:	4b2a      	ldr	r3, [pc, #168]	@ (8004400 <HAL_I2C_Master_Seq_Transmit_IT+0xd8>)
 8004356:	6343      	str	r3, [r0, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004358:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800435a:	2bff      	cmp	r3, #255	@ 0xff
 800435c:	d82d      	bhi.n	80043ba <HAL_I2C_Master_Seq_Transmit_IT+0x92>
      hi2c->XferSize = hi2c->XferCount;
 800435e:	8d44      	ldrh	r4, [r0, #42]	@ 0x2a
      xfermode = hi2c->XferOptions;
 8004360:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
      hi2c->XferSize = hi2c->XferCount;
 8004362:	b2a3      	uxth	r3, r4
      xfermode = hi2c->XferOptions;
 8004364:	8503      	strh	r3, [r0, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 8004366:	6b03      	ldr	r3, [r0, #48]	@ 0x30
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004368:	b2e4      	uxtb	r4, r4
 800436a:	0424      	lsls	r4, r4, #16
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 800436c:	2b11      	cmp	r3, #17
 800436e:	d02d      	beq.n	80043cc <HAL_I2C_Master_Seq_Transmit_IT+0xa4>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004370:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004372:	2baa      	cmp	r3, #170	@ 0xaa
 8004374:	d040      	beq.n	80043f8 <HAL_I2C_Master_Seq_Transmit_IT+0xd0>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004376:	23aa      	movs	r3, #170	@ 0xaa
 8004378:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	429a      	cmp	r2, r3
 800437e:	d037      	beq.n	80043f0 <HAL_I2C_Master_Seq_Transmit_IT+0xc8>
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8004380:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8004382:	2bff      	cmp	r3, #255	@ 0xff
 8004384:	d830      	bhi.n	80043e8 <HAL_I2C_Master_Seq_Transmit_IT+0xc0>
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8004386:	4b1f      	ldr	r3, [pc, #124]	@ (8004404 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>)
        xfermode = hi2c->XferOptions;
 8004388:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 800438a:	469c      	mov	ip, r3
        xfermode = hi2c->XferOptions;
 800438c:	4d1e      	ldr	r5, [pc, #120]	@ (8004408 <HAL_I2C_Master_Seq_Transmit_IT+0xe0>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800438e:	058b      	lsls	r3, r1, #22
 8004390:	4661      	mov	r1, ip
 8004392:	0d9b      	lsrs	r3, r3, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8004394:	6802      	ldr	r2, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004396:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004398:	433b      	orrs	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 800439a:	6856      	ldr	r6, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800439c:	430b      	orrs	r3, r1
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	085b      	lsrs	r3, r3, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80043a2:	4035      	ands	r5, r6
 80043a4:	432b      	orrs	r3, r5
 80043a6:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hi2c);
 80043a8:	2100      	movs	r1, #0
 80043aa:	2340      	movs	r3, #64	@ 0x40
 80043ac:	54c1      	strb	r1, [r0, r3]
    return HAL_OK;
 80043ae:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80043b0:	6813      	ldr	r3, [r2, #0]
 80043b2:	31f2      	adds	r1, #242	@ 0xf2
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6013      	str	r3, [r2, #0]
}
 80043b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ba:	23ff      	movs	r3, #255	@ 0xff
 80043bc:	24ff      	movs	r4, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 80043be:	2780      	movs	r7, #128	@ 0x80
 80043c0:	8503      	strh	r3, [r0, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 80043c2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80043c4:	0424      	lsls	r4, r4, #16
      xfermode = I2C_RELOAD_MODE;
 80043c6:	047f      	lsls	r7, r7, #17
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 80043c8:	2b11      	cmp	r3, #17
 80043ca:	d1d1      	bne.n	8004370 <HAL_I2C_Master_Seq_Transmit_IT+0x48>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 80043cc:	9b05      	ldr	r3, [sp, #20]
 80043ce:	2baa      	cmp	r3, #170	@ 0xaa
 80043d0:	d0ce      	beq.n	8004370 <HAL_I2C_Master_Seq_Transmit_IT+0x48>
 80043d2:	001a      	movs	r2, r3
 80043d4:	23aa      	movs	r3, #170	@ 0xaa
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	429a      	cmp	r2, r3
 80043da:	d0c9      	beq.n	8004370 <HAL_I2C_Master_Seq_Transmit_IT+0x48>
      xferrequest = I2C_NO_STARTSTOP;
 80043dc:	2300      	movs	r3, #0
 80043de:	4d0b      	ldr	r5, [pc, #44]	@ (800440c <HAL_I2C_Master_Seq_Transmit_IT+0xe4>)
 80043e0:	469c      	mov	ip, r3
 80043e2:	e7d4      	b.n	800438e <HAL_I2C_Master_Seq_Transmit_IT+0x66>
    __HAL_LOCK(hi2c);
 80043e4:	2002      	movs	r0, #2
 80043e6:	e7e7      	b.n	80043b8 <HAL_I2C_Master_Seq_Transmit_IT+0x90>
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 80043e8:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>)
 80043ea:	4d07      	ldr	r5, [pc, #28]	@ (8004408 <HAL_I2C_Master_Seq_Transmit_IT+0xe0>)
 80043ec:	469c      	mov	ip, r3
 80043ee:	e7ce      	b.n	800438e <HAL_I2C_Master_Seq_Transmit_IT+0x66>
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80043f0:	2380      	movs	r3, #128	@ 0x80
 80043f2:	049b      	lsls	r3, r3, #18
 80043f4:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80043f6:	e7c3      	b.n	8004380 <HAL_I2C_Master_Seq_Transmit_IT+0x58>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80043f8:	2300      	movs	r3, #0
 80043fa:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80043fc:	e7c0      	b.n	8004380 <HAL_I2C_Master_Seq_Transmit_IT+0x58>
 80043fe:	46c0      	nop			@ (mov r8, r8)
 8004400:	08005481 	.word	0x08005481
 8004404:	80002000 	.word	0x80002000
 8004408:	fc009800 	.word	0xfc009800
 800440c:	fc009c00 	.word	0xfc009c00

08004410 <HAL_I2C_Master_Seq_Transmit_DMA>:
{
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004412:	46ce      	mov	lr, r9
 8004414:	4647      	mov	r7, r8
 8004416:	000d      	movs	r5, r1
 8004418:	0011      	movs	r1, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800441a:	2241      	movs	r2, #65	@ 0x41
{
 800441c:	b580      	push	{r7, lr}
 800441e:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004420:	5c80      	ldrb	r0, [r0, r2]
 8004422:	2820      	cmp	r0, #32
 8004424:	d165      	bne.n	80044f2 <HAL_I2C_Master_Seq_Transmit_DMA+0xe2>
    __HAL_LOCK(hi2c);
 8004426:	3020      	adds	r0, #32
 8004428:	5c26      	ldrb	r6, [r4, r0]
 800442a:	2e01      	cmp	r6, #1
 800442c:	d061      	beq.n	80044f2 <HAL_I2C_Master_Seq_Transmit_DMA+0xe2>
 800442e:	2601      	movs	r6, #1
 8004430:	5426      	strb	r6, [r4, r0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004432:	381f      	subs	r0, #31
 8004434:	54a0      	strb	r0, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004436:	3201      	adds	r2, #1
 8004438:	3811      	subs	r0, #17
 800443a:	54a0      	strb	r0, [r4, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800443c:	2200      	movs	r2, #0
 800443e:	6462      	str	r2, [r4, #68]	@ 0x44
    hi2c->XferCount   = Size;
 8004440:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 8004442:	9b08      	ldr	r3, [sp, #32]
    hi2c->pBuffPtr    = pData;
 8004444:	6261      	str	r1, [r4, #36]	@ 0x24
    hi2c->XferOptions = XferOptions;
 8004446:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004448:	4b51      	ldr	r3, [pc, #324]	@ (8004590 <HAL_I2C_Master_Seq_Transmit_DMA+0x180>)
 800444a:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800444c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800444e:	2bff      	cmp	r3, #255	@ 0xff
 8004450:	d83b      	bhi.n	80044ca <HAL_I2C_Master_Seq_Transmit_DMA+0xba>
      hi2c->XferSize = hi2c->XferCount;
 8004452:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      xfermode = hi2c->XferOptions;
 8004454:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 8004456:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      hi2c->XferSize = hi2c->XferCount;
 8004458:	b29b      	uxth	r3, r3
      xfermode = hi2c->XferOptions;
 800445a:	8523      	strh	r3, [r4, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 800445c:	2a11      	cmp	r2, #17
 800445e:	d03b      	beq.n	80044d8 <HAL_I2C_Master_Seq_Transmit_DMA+0xc8>
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004460:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004462:	2aaa      	cmp	r2, #170	@ 0xaa
 8004464:	d100      	bne.n	8004468 <HAL_I2C_Master_Seq_Transmit_DMA+0x58>
 8004466:	e085      	b.n	8004574 <HAL_I2C_Master_Seq_Transmit_DMA+0x164>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004468:	22aa      	movs	r2, #170	@ 0xaa
 800446a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800446c:	0212      	lsls	r2, r2, #8
 800446e:	4290      	cmp	r0, r2
 8004470:	d102      	bne.n	8004478 <HAL_I2C_Master_Seq_Transmit_DMA+0x68>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004472:	2280      	movs	r2, #128	@ 0x80
 8004474:	0492      	lsls	r2, r2, #18
 8004476:	62e2      	str	r2, [r4, #44]	@ 0x2c
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8004478:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800447a:	2aff      	cmp	r2, #255	@ 0xff
 800447c:	d83e      	bhi.n	80044fc <HAL_I2C_Master_Seq_Transmit_DMA+0xec>
        xfermode = hi2c->XferOptions;
 800447e:	4a45      	ldr	r2, [pc, #276]	@ (8004594 <HAL_I2C_Master_Seq_Transmit_DMA+0x184>)
 8004480:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004482:	4690      	mov	r8, r2
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8004484:	4a44      	ldr	r2, [pc, #272]	@ (8004598 <HAL_I2C_Master_Seq_Transmit_DMA+0x188>)
 8004486:	4691      	mov	r9, r2
    if (hi2c->XferSize > 0U)
 8004488:	2b00      	cmp	r3, #0
 800448a:	d03d      	beq.n	8004508 <HAL_I2C_Master_Seq_Transmit_DMA+0xf8>
      if (hi2c->hdmatx != NULL)
 800448c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800448e:	2800      	cmp	r0, #0
 8004490:	d100      	bne.n	8004494 <HAL_I2C_Master_Seq_Transmit_DMA+0x84>
 8004492:	e072      	b.n	800457a <HAL_I2C_Master_Seq_Transmit_DMA+0x16a>
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004494:	2700      	movs	r7, #0
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004496:	4a41      	ldr	r2, [pc, #260]	@ (800459c <HAL_I2C_Master_Seq_Transmit_DMA+0x18c>)
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004498:	6307      	str	r7, [r0, #48]	@ 0x30
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800449a:	62c2      	str	r2, [r0, #44]	@ 0x2c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800449c:	4a40      	ldr	r2, [pc, #256]	@ (80045a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x190>)
        hi2c->hdmatx->XferAbortCallback = NULL;
 800449e:	6387      	str	r7, [r0, #56]	@ 0x38
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80044a0:	6342      	str	r2, [r0, #52]	@ 0x34
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80044a2:	6822      	ldr	r2, [r4, #0]
 80044a4:	3228      	adds	r2, #40	@ 0x28
 80044a6:	f7fd f9af 	bl	8001808 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d040      	beq.n	8004530 <HAL_I2C_Master_Seq_Transmit_DMA+0x120>
        hi2c->State     = HAL_I2C_STATE_READY;
 80044ae:	2341      	movs	r3, #65	@ 0x41
 80044b0:	2220      	movs	r2, #32
 80044b2:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80044b4:	3301      	adds	r3, #1
 80044b6:	54e7      	strb	r7, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80044b8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80044ba:	3a10      	subs	r2, #16
 80044bc:	4313      	orrs	r3, r2
 80044be:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80044c0:	2340      	movs	r3, #64	@ 0x40
 80044c2:	2200      	movs	r2, #0
        return HAL_ERROR;
 80044c4:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 80044c6:	54e2      	strb	r2, [r4, r3]
 80044c8:	e014      	b.n	80044f4 <HAL_I2C_Master_Seq_Transmit_DMA+0xe4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ca:	23ff      	movs	r3, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 80044cc:	2680      	movs	r6, #128	@ 0x80
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 80044ce:	6b22      	ldr	r2, [r4, #48]	@ 0x30
      xfermode = I2C_RELOAD_MODE;
 80044d0:	0476      	lsls	r6, r6, #17
 80044d2:	8523      	strh	r3, [r4, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX) && \
 80044d4:	2a11      	cmp	r2, #17
 80044d6:	d1c3      	bne.n	8004460 <HAL_I2C_Master_Seq_Transmit_DMA+0x50>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 80044d8:	9a08      	ldr	r2, [sp, #32]
 80044da:	2aaa      	cmp	r2, #170	@ 0xaa
 80044dc:	d0c0      	beq.n	8004460 <HAL_I2C_Master_Seq_Transmit_DMA+0x50>
 80044de:	0010      	movs	r0, r2
 80044e0:	22aa      	movs	r2, #170	@ 0xaa
 80044e2:	0212      	lsls	r2, r2, #8
 80044e4:	4290      	cmp	r0, r2
 80044e6:	d0bb      	beq.n	8004460 <HAL_I2C_Master_Seq_Transmit_DMA+0x50>
 80044e8:	4a2e      	ldr	r2, [pc, #184]	@ (80045a4 <HAL_I2C_Master_Seq_Transmit_DMA+0x194>)
 80044ea:	4690      	mov	r8, r2
      xferrequest = I2C_NO_STARTSTOP;
 80044ec:	2200      	movs	r2, #0
 80044ee:	4691      	mov	r9, r2
 80044f0:	e7ca      	b.n	8004488 <HAL_I2C_Master_Seq_Transmit_DMA+0x78>
    __HAL_LOCK(hi2c);
 80044f2:	2002      	movs	r0, #2
}
 80044f4:	bcc0      	pop	{r6, r7}
 80044f6:	46b9      	mov	r9, r7
 80044f8:	46b0      	mov	r8, r6
 80044fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044fc:	4a25      	ldr	r2, [pc, #148]	@ (8004594 <HAL_I2C_Master_Seq_Transmit_DMA+0x184>)
 80044fe:	4690      	mov	r8, r2
  uint32_t xferrequest = I2C_GENERATE_START_WRITE;
 8004500:	4a25      	ldr	r2, [pc, #148]	@ (8004598 <HAL_I2C_Master_Seq_Transmit_DMA+0x188>)
 8004502:	4691      	mov	r9, r2
    if (hi2c->XferSize > 0U)
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1c1      	bne.n	800448c <HAL_I2C_Master_Seq_Transmit_DMA+0x7c>
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004508:	4a27      	ldr	r2, [pc, #156]	@ (80045a8 <HAL_I2C_Master_Seq_Transmit_DMA+0x198>)
  MODIFY_REG(hi2c->Instance->CR2, \
 800450a:	4822      	ldr	r0, [pc, #136]	@ (8004594 <HAL_I2C_Master_Seq_Transmit_DMA+0x184>)
      hi2c->XferISR = I2C_Master_ISR_IT;
 800450c:	6362      	str	r2, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 800450e:	6822      	ldr	r2, [r4, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004510:	05ad      	lsls	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8004512:	6851      	ldr	r1, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004514:	0dad      	lsrs	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8004516:	4001      	ands	r1, r0
 8004518:	430d      	orrs	r5, r1
 800451a:	4924      	ldr	r1, [pc, #144]	@ (80045ac <HAL_I2C_Master_Seq_Transmit_DMA+0x19c>)
    return HAL_OK;
 800451c:	2000      	movs	r0, #0
  MODIFY_REG(hi2c->Instance->CR2, \
 800451e:	4329      	orrs	r1, r5
 8004520:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hi2c);
 8004522:	2140      	movs	r1, #64	@ 0x40
 8004524:	5463      	strb	r3, [r4, r1]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004526:	6813      	ldr	r3, [r2, #0]
 8004528:	31b2      	adds	r1, #178	@ 0xb2
 800452a:	430b      	orrs	r3, r1
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e7e1      	b.n	80044f4 <HAL_I2C_Master_Seq_Transmit_DMA+0xe4>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 8004530:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004532:	05ab      	lsls	r3, r5, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004534:	b2cd      	uxtb	r5, r1
 8004536:	042d      	lsls	r5, r5, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004538:	0d9b      	lsrs	r3, r3, #22
 800453a:	432b      	orrs	r3, r5
 800453c:	464d      	mov	r5, r9
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800453e:	4333      	orrs	r3, r6
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004540:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8004542:	4645      	mov	r5, r8
 8004544:	6822      	ldr	r2, [r4, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004546:	005b      	lsls	r3, r3, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8004548:	6857      	ldr	r7, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800454a:	085b      	lsrs	r3, r3, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800454c:	402f      	ands	r7, r5
 800454e:	433b      	orrs	r3, r7
 8004550:	6053      	str	r3, [r2, #4]
        hi2c->XferCount -= hi2c->XferSize;
 8004552:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004554:	1a5b      	subs	r3, r3, r1
 8004556:	b29b      	uxth	r3, r3
 8004558:	8563      	strh	r3, [r4, #42]	@ 0x2a
        __HAL_UNLOCK(hi2c);
 800455a:	2340      	movs	r3, #64	@ 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800455c:	2190      	movs	r1, #144	@ 0x90
        __HAL_UNLOCK(hi2c);
 800455e:	54e0      	strb	r0, [r4, r3]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004560:	6813      	ldr	r3, [r2, #0]
    return HAL_OK;
 8004562:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004564:	430b      	orrs	r3, r1
 8004566:	6013      	str	r3, [r2, #0]
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004568:	2380      	movs	r3, #128	@ 0x80
 800456a:	6811      	ldr	r1, [r2, #0]
 800456c:	01db      	lsls	r3, r3, #7
 800456e:	430b      	orrs	r3, r1
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e7bf      	b.n	80044f4 <HAL_I2C_Master_Seq_Transmit_DMA+0xe4>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004574:	2200      	movs	r2, #0
 8004576:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8004578:	e77e      	b.n	8004478 <HAL_I2C_Master_Seq_Transmit_DMA+0x68>
        hi2c->State     = HAL_I2C_STATE_READY;
 800457a:	2341      	movs	r3, #65	@ 0x41
 800457c:	2220      	movs	r2, #32
 800457e:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004580:	3301      	adds	r3, #1
 8004582:	54e0      	strb	r0, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004584:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004586:	3260      	adds	r2, #96	@ 0x60
 8004588:	4313      	orrs	r3, r2
 800458a:	6463      	str	r3, [r4, #68]	@ 0x44
        return HAL_ERROR;
 800458c:	e798      	b.n	80044c0 <HAL_I2C_Master_Seq_Transmit_DMA+0xb0>
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	080058ad 	.word	0x080058ad
 8004594:	fc009800 	.word	0xfc009800
 8004598:	80002000 	.word	0x80002000
 800459c:	08005af1 	.word	0x08005af1
 80045a0:	08006309 	.word	0x08006309
 80045a4:	fc009c00 	.word	0xfc009c00
 80045a8:	08005481 	.word	0x08005481
 80045ac:	02002000 	.word	0x02002000

080045b0 <HAL_I2C_Master_Seq_Receive_IT>:
{
 80045b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b2:	2441      	movs	r4, #65	@ 0x41
 80045b4:	5d05      	ldrb	r5, [r0, r4]
 80045b6:	2d20      	cmp	r5, #32
 80045b8:	d158      	bne.n	800466c <HAL_I2C_Master_Seq_Receive_IT+0xbc>
    __HAL_LOCK(hi2c);
 80045ba:	3520      	adds	r5, #32
 80045bc:	5d46      	ldrb	r6, [r0, r5]
 80045be:	2e01      	cmp	r6, #1
 80045c0:	d054      	beq.n	800466c <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 80045c2:	2601      	movs	r6, #1
 80045c4:	5546      	strb	r6, [r0, r5]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045c6:	3d1e      	subs	r5, #30
 80045c8:	5505      	strb	r5, [r0, r4]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045ca:	3401      	adds	r4, #1
 80045cc:	3d12      	subs	r5, #18
 80045ce:	5505      	strb	r5, [r0, r4]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d0:	2400      	movs	r4, #0
 80045d2:	6444      	str	r4, [r0, #68]	@ 0x44
    hi2c->XferCount   = Size;
 80045d4:	8543      	strh	r3, [r0, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 80045d6:	9b05      	ldr	r3, [sp, #20]
    hi2c->pBuffPtr    = pData;
 80045d8:	6242      	str	r2, [r0, #36]	@ 0x24
    hi2c->XferOptions = XferOptions;
 80045da:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80045dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004688 <HAL_I2C_Master_Seq_Receive_IT+0xd8>)
 80045de:	6343      	str	r3, [r0, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045e0:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80045e2:	2bff      	cmp	r3, #255	@ 0xff
 80045e4:	d82d      	bhi.n	8004642 <HAL_I2C_Master_Seq_Receive_IT+0x92>
      hi2c->XferSize = hi2c->XferCount;
 80045e6:	8d44      	ldrh	r4, [r0, #42]	@ 0x2a
      xfermode = hi2c->XferOptions;
 80045e8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
      hi2c->XferSize = hi2c->XferCount;
 80045ea:	b2a3      	uxth	r3, r4
      xfermode = hi2c->XferOptions;
 80045ec:	8503      	strh	r3, [r0, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 80045ee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045f0:	b2e4      	uxtb	r4, r4
 80045f2:	0424      	lsls	r4, r4, #16
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 80045f4:	2b12      	cmp	r3, #18
 80045f6:	d02d      	beq.n	8004654 <HAL_I2C_Master_Seq_Receive_IT+0xa4>
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80045f8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80045fa:	2baa      	cmp	r3, #170	@ 0xaa
 80045fc:	d040      	beq.n	8004680 <HAL_I2C_Master_Seq_Receive_IT+0xd0>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80045fe:	23aa      	movs	r3, #170	@ 0xaa
 8004600:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	429a      	cmp	r2, r3
 8004606:	d037      	beq.n	8004678 <HAL_I2C_Master_Seq_Receive_IT+0xc8>
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 8004608:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800460a:	2bff      	cmp	r3, #255	@ 0xff
 800460c:	d830      	bhi.n	8004670 <HAL_I2C_Master_Seq_Receive_IT+0xc0>
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 800460e:	4b1f      	ldr	r3, [pc, #124]	@ (800468c <HAL_I2C_Master_Seq_Receive_IT+0xdc>)
        xfermode = hi2c->XferOptions;
 8004610:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8004612:	469c      	mov	ip, r3
        xfermode = hi2c->XferOptions;
 8004614:	4d1e      	ldr	r5, [pc, #120]	@ (8004690 <HAL_I2C_Master_Seq_Receive_IT+0xe0>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004616:	058b      	lsls	r3, r1, #22
 8004618:	4661      	mov	r1, ip
 800461a:	0d9b      	lsrs	r3, r3, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 800461c:	6802      	ldr	r2, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800461e:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004620:	433b      	orrs	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 8004622:	6856      	ldr	r6, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004624:	430b      	orrs	r3, r1
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	085b      	lsrs	r3, r3, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800462a:	4035      	ands	r5, r6
 800462c:	432b      	orrs	r3, r5
 800462e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hi2c);
 8004630:	2100      	movs	r1, #0
 8004632:	2340      	movs	r3, #64	@ 0x40
 8004634:	54c1      	strb	r1, [r0, r3]
    return HAL_OK;
 8004636:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004638:	6813      	ldr	r3, [r2, #0]
 800463a:	31f4      	adds	r1, #244	@ 0xf4
 800463c:	430b      	orrs	r3, r1
 800463e:	6013      	str	r3, [r2, #0]
}
 8004640:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004642:	23ff      	movs	r3, #255	@ 0xff
 8004644:	24ff      	movs	r4, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 8004646:	2780      	movs	r7, #128	@ 0x80
 8004648:	8503      	strh	r3, [r0, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 800464a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800464c:	0424      	lsls	r4, r4, #16
      xfermode = I2C_RELOAD_MODE;
 800464e:	047f      	lsls	r7, r7, #17
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 8004650:	2b12      	cmp	r3, #18
 8004652:	d1d1      	bne.n	80045f8 <HAL_I2C_Master_Seq_Receive_IT+0x48>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 8004654:	9b05      	ldr	r3, [sp, #20]
 8004656:	2baa      	cmp	r3, #170	@ 0xaa
 8004658:	d0ce      	beq.n	80045f8 <HAL_I2C_Master_Seq_Receive_IT+0x48>
 800465a:	001a      	movs	r2, r3
 800465c:	23aa      	movs	r3, #170	@ 0xaa
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	429a      	cmp	r2, r3
 8004662:	d0c9      	beq.n	80045f8 <HAL_I2C_Master_Seq_Receive_IT+0x48>
      xferrequest = I2C_NO_STARTSTOP;
 8004664:	2300      	movs	r3, #0
 8004666:	4d0b      	ldr	r5, [pc, #44]	@ (8004694 <HAL_I2C_Master_Seq_Receive_IT+0xe4>)
 8004668:	469c      	mov	ip, r3
 800466a:	e7d4      	b.n	8004616 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    __HAL_LOCK(hi2c);
 800466c:	2002      	movs	r0, #2
 800466e:	e7e7      	b.n	8004640 <HAL_I2C_Master_Seq_Receive_IT+0x90>
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8004670:	4b06      	ldr	r3, [pc, #24]	@ (800468c <HAL_I2C_Master_Seq_Receive_IT+0xdc>)
 8004672:	4d07      	ldr	r5, [pc, #28]	@ (8004690 <HAL_I2C_Master_Seq_Receive_IT+0xe0>)
 8004674:	469c      	mov	ip, r3
 8004676:	e7ce      	b.n	8004616 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004678:	2380      	movs	r3, #128	@ 0x80
 800467a:	049b      	lsls	r3, r3, #18
 800467c:	62c3      	str	r3, [r0, #44]	@ 0x2c
 800467e:	e7c3      	b.n	8004608 <HAL_I2C_Master_Seq_Receive_IT+0x58>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004680:	2300      	movs	r3, #0
 8004682:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8004684:	e7c0      	b.n	8004608 <HAL_I2C_Master_Seq_Receive_IT+0x58>
 8004686:	46c0      	nop			@ (mov r8, r8)
 8004688:	08005481 	.word	0x08005481
 800468c:	80002400 	.word	0x80002400
 8004690:	fc009800 	.word	0xfc009800
 8004694:	fc009c00 	.word	0xfc009c00

08004698 <HAL_I2C_Master_Seq_Receive_DMA>:
{
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	46ce      	mov	lr, r9
 800469c:	4647      	mov	r7, r8
 800469e:	000d      	movs	r5, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a0:	2141      	movs	r1, #65	@ 0x41
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a6:	5c40      	ldrb	r0, [r0, r1]
 80046a8:	2820      	cmp	r0, #32
 80046aa:	d165      	bne.n	8004778 <HAL_I2C_Master_Seq_Receive_DMA+0xe0>
    __HAL_LOCK(hi2c);
 80046ac:	3020      	adds	r0, #32
 80046ae:	5c26      	ldrb	r6, [r4, r0]
 80046b0:	2e01      	cmp	r6, #1
 80046b2:	d061      	beq.n	8004778 <HAL_I2C_Master_Seq_Receive_DMA+0xe0>
 80046b4:	2601      	movs	r6, #1
 80046b6:	5426      	strb	r6, [r4, r0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046b8:	381e      	subs	r0, #30
 80046ba:	5460      	strb	r0, [r4, r1]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80046bc:	3101      	adds	r1, #1
 80046be:	3812      	subs	r0, #18
 80046c0:	5460      	strb	r0, [r4, r1]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c2:	2100      	movs	r1, #0
 80046c4:	6461      	str	r1, [r4, #68]	@ 0x44
    hi2c->XferCount   = Size;
 80046c6:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 80046c8:	9b08      	ldr	r3, [sp, #32]
    hi2c->pBuffPtr    = pData;
 80046ca:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferOptions = XferOptions;
 80046cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80046ce:	4b51      	ldr	r3, [pc, #324]	@ (8004814 <HAL_I2C_Master_Seq_Receive_DMA+0x17c>)
 80046d0:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046d2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80046d4:	2bff      	cmp	r3, #255	@ 0xff
 80046d6:	d83b      	bhi.n	8004750 <HAL_I2C_Master_Seq_Receive_DMA+0xb8>
      hi2c->XferSize = hi2c->XferCount;
 80046d8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      xfermode = hi2c->XferOptions;
 80046da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 80046dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
      hi2c->XferSize = hi2c->XferCount;
 80046de:	b29b      	uxth	r3, r3
      xfermode = hi2c->XferOptions;
 80046e0:	8523      	strh	r3, [r4, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 80046e2:	2912      	cmp	r1, #18
 80046e4:	d03b      	beq.n	800475e <HAL_I2C_Master_Seq_Receive_DMA+0xc6>
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80046e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80046e8:	29aa      	cmp	r1, #170	@ 0xaa
 80046ea:	d100      	bne.n	80046ee <HAL_I2C_Master_Seq_Receive_DMA+0x56>
 80046ec:	e085      	b.n	80047fa <HAL_I2C_Master_Seq_Receive_DMA+0x162>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80046ee:	21aa      	movs	r1, #170	@ 0xaa
 80046f0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80046f2:	0209      	lsls	r1, r1, #8
 80046f4:	4288      	cmp	r0, r1
 80046f6:	d102      	bne.n	80046fe <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80046f8:	2180      	movs	r1, #128	@ 0x80
 80046fa:	0489      	lsls	r1, r1, #18
 80046fc:	62e1      	str	r1, [r4, #44]	@ 0x2c
      if (hi2c->XferCount <= MAX_NBYTE_SIZE)
 80046fe:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8004700:	29ff      	cmp	r1, #255	@ 0xff
 8004702:	d83e      	bhi.n	8004782 <HAL_I2C_Master_Seq_Receive_DMA+0xea>
        xfermode = hi2c->XferOptions;
 8004704:	4944      	ldr	r1, [pc, #272]	@ (8004818 <HAL_I2C_Master_Seq_Receive_DMA+0x180>)
 8004706:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004708:	4688      	mov	r8, r1
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 800470a:	4944      	ldr	r1, [pc, #272]	@ (800481c <HAL_I2C_Master_Seq_Receive_DMA+0x184>)
 800470c:	4689      	mov	r9, r1
    if (hi2c->XferSize > 0U)
 800470e:	2b00      	cmp	r3, #0
 8004710:	d03d      	beq.n	800478e <HAL_I2C_Master_Seq_Receive_DMA+0xf6>
      if (hi2c->hdmarx != NULL)
 8004712:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004714:	2800      	cmp	r0, #0
 8004716:	d100      	bne.n	800471a <HAL_I2C_Master_Seq_Receive_DMA+0x82>
 8004718:	e072      	b.n	8004800 <HAL_I2C_Master_Seq_Receive_DMA+0x168>
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800471a:	2700      	movs	r7, #0
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800471c:	4940      	ldr	r1, [pc, #256]	@ (8004820 <HAL_I2C_Master_Seq_Receive_DMA+0x188>)
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800471e:	6307      	str	r7, [r0, #48]	@ 0x30
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004720:	62c1      	str	r1, [r0, #44]	@ 0x2c
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004722:	4940      	ldr	r1, [pc, #256]	@ (8004824 <HAL_I2C_Master_Seq_Receive_DMA+0x18c>)
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004724:	6387      	str	r7, [r0, #56]	@ 0x38
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004726:	6341      	str	r1, [r0, #52]	@ 0x34
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004728:	6821      	ldr	r1, [r4, #0]
 800472a:	3124      	adds	r1, #36	@ 0x24
 800472c:	f7fd f86c 	bl	8001808 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8004730:	2800      	cmp	r0, #0
 8004732:	d040      	beq.n	80047b6 <HAL_I2C_Master_Seq_Receive_DMA+0x11e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004734:	2341      	movs	r3, #65	@ 0x41
 8004736:	2220      	movs	r2, #32
 8004738:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800473a:	3301      	adds	r3, #1
 800473c:	54e7      	strb	r7, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800473e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004740:	3a10      	subs	r2, #16
 8004742:	4313      	orrs	r3, r2
 8004744:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8004746:	2340      	movs	r3, #64	@ 0x40
 8004748:	2200      	movs	r2, #0
        return HAL_ERROR;
 800474a:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 800474c:	54e2      	strb	r2, [r4, r3]
 800474e:	e014      	b.n	800477a <HAL_I2C_Master_Seq_Receive_DMA+0xe2>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004750:	23ff      	movs	r3, #255	@ 0xff
      xfermode = I2C_RELOAD_MODE;
 8004752:	2680      	movs	r6, #128	@ 0x80
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 8004754:	6b21      	ldr	r1, [r4, #48]	@ 0x30
      xfermode = I2C_RELOAD_MODE;
 8004756:	0476      	lsls	r6, r6, #17
 8004758:	8523      	strh	r3, [r4, #40]	@ 0x28
    if ((hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX) && \
 800475a:	2912      	cmp	r1, #18
 800475c:	d1c3      	bne.n	80046e6 <HAL_I2C_Master_Seq_Receive_DMA+0x4e>
        (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 0))
 800475e:	9908      	ldr	r1, [sp, #32]
 8004760:	29aa      	cmp	r1, #170	@ 0xaa
 8004762:	d0c0      	beq.n	80046e6 <HAL_I2C_Master_Seq_Receive_DMA+0x4e>
 8004764:	0008      	movs	r0, r1
 8004766:	21aa      	movs	r1, #170	@ 0xaa
 8004768:	0209      	lsls	r1, r1, #8
 800476a:	4288      	cmp	r0, r1
 800476c:	d0bb      	beq.n	80046e6 <HAL_I2C_Master_Seq_Receive_DMA+0x4e>
 800476e:	492e      	ldr	r1, [pc, #184]	@ (8004828 <HAL_I2C_Master_Seq_Receive_DMA+0x190>)
 8004770:	4688      	mov	r8, r1
      xferrequest = I2C_NO_STARTSTOP;
 8004772:	2100      	movs	r1, #0
 8004774:	4689      	mov	r9, r1
 8004776:	e7ca      	b.n	800470e <HAL_I2C_Master_Seq_Receive_DMA+0x76>
    __HAL_LOCK(hi2c);
 8004778:	2002      	movs	r0, #2
}
 800477a:	bcc0      	pop	{r6, r7}
 800477c:	46b9      	mov	r9, r7
 800477e:	46b0      	mov	r8, r6
 8004780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004782:	4925      	ldr	r1, [pc, #148]	@ (8004818 <HAL_I2C_Master_Seq_Receive_DMA+0x180>)
 8004784:	4688      	mov	r8, r1
  uint32_t xferrequest = I2C_GENERATE_START_READ;
 8004786:	4925      	ldr	r1, [pc, #148]	@ (800481c <HAL_I2C_Master_Seq_Receive_DMA+0x184>)
 8004788:	4689      	mov	r9, r1
    if (hi2c->XferSize > 0U)
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1c1      	bne.n	8004712 <HAL_I2C_Master_Seq_Receive_DMA+0x7a>
      hi2c->XferISR = I2C_Master_ISR_IT;
 800478e:	4a27      	ldr	r2, [pc, #156]	@ (800482c <HAL_I2C_Master_Seq_Receive_DMA+0x194>)
  MODIFY_REG(hi2c->Instance->CR2, \
 8004790:	4821      	ldr	r0, [pc, #132]	@ (8004818 <HAL_I2C_Master_Seq_Receive_DMA+0x180>)
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004792:	6362      	str	r2, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 8004794:	6822      	ldr	r2, [r4, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004796:	05ad      	lsls	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8004798:	6851      	ldr	r1, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800479a:	0dad      	lsrs	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 800479c:	4001      	ands	r1, r0
 800479e:	430d      	orrs	r5, r1
 80047a0:	4923      	ldr	r1, [pc, #140]	@ (8004830 <HAL_I2C_Master_Seq_Receive_DMA+0x198>)
    return HAL_OK;
 80047a2:	2000      	movs	r0, #0
  MODIFY_REG(hi2c->Instance->CR2, \
 80047a4:	4329      	orrs	r1, r5
 80047a6:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hi2c);
 80047a8:	2140      	movs	r1, #64	@ 0x40
 80047aa:	5463      	strb	r3, [r4, r1]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80047ac:	6813      	ldr	r3, [r2, #0]
 80047ae:	31b2      	adds	r1, #178	@ 0xb2
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	e7e1      	b.n	800477a <HAL_I2C_Master_Seq_Receive_DMA+0xe2>
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, xferrequest);
 80047b6:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047b8:	05ab      	lsls	r3, r5, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047ba:	b2cd      	uxtb	r5, r1
 80047bc:	042d      	lsls	r5, r5, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047be:	0d9b      	lsrs	r3, r3, #22
 80047c0:	432b      	orrs	r3, r5
 80047c2:	464d      	mov	r5, r9
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80047c4:	4333      	orrs	r3, r6
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047c6:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80047c8:	4645      	mov	r5, r8
 80047ca:	6822      	ldr	r2, [r4, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047cc:	005b      	lsls	r3, r3, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80047ce:	6857      	ldr	r7, [r2, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80047d0:	085b      	lsrs	r3, r3, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80047d2:	402f      	ands	r7, r5
 80047d4:	433b      	orrs	r3, r7
 80047d6:	6053      	str	r3, [r2, #4]
        hi2c->XferCount -= hi2c->XferSize;
 80047d8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80047da:	1a5b      	subs	r3, r3, r1
 80047dc:	b29b      	uxth	r3, r3
 80047de:	8563      	strh	r3, [r4, #42]	@ 0x2a
        __HAL_UNLOCK(hi2c);
 80047e0:	2340      	movs	r3, #64	@ 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80047e2:	2190      	movs	r1, #144	@ 0x90
        __HAL_UNLOCK(hi2c);
 80047e4:	54e0      	strb	r0, [r4, r3]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80047e6:	6813      	ldr	r3, [r2, #0]
    return HAL_OK;
 80047e8:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80047ea:	430b      	orrs	r3, r1
 80047ec:	6013      	str	r3, [r2, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80047ee:	2380      	movs	r3, #128	@ 0x80
 80047f0:	6811      	ldr	r1, [r2, #0]
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6013      	str	r3, [r2, #0]
 80047f8:	e7bf      	b.n	800477a <HAL_I2C_Master_Seq_Receive_DMA+0xe2>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80047fa:	2100      	movs	r1, #0
 80047fc:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80047fe:	e77e      	b.n	80046fe <HAL_I2C_Master_Seq_Receive_DMA+0x66>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004800:	2341      	movs	r3, #65	@ 0x41
 8004802:	2220      	movs	r2, #32
 8004804:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004806:	3301      	adds	r3, #1
 8004808:	54e0      	strb	r0, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800480a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800480c:	3260      	adds	r2, #96	@ 0x60
 800480e:	4313      	orrs	r3, r2
 8004810:	6463      	str	r3, [r4, #68]	@ 0x44
        return HAL_ERROR;
 8004812:	e798      	b.n	8004746 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
 8004814:	080058ad 	.word	0x080058ad
 8004818:	fc009800 	.word	0xfc009800
 800481c:	80002400 	.word	0x80002400
 8004820:	08005ba5 	.word	0x08005ba5
 8004824:	08006309 	.word	0x08006309
 8004828:	fc009c00 	.word	0xfc009c00
 800482c:	08005481 	.word	0x08005481
 8004830:	02002400 	.word	0x02002400

08004834 <HAL_I2C_Slave_Seq_Transmit_IT>:
{
 8004834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004836:	46c6      	mov	lr, r8
 8004838:	0016      	movs	r6, r2
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800483a:	2241      	movs	r2, #65	@ 0x41
{
 800483c:	b500      	push	{lr}
 800483e:	0004      	movs	r4, r0
 8004840:	4698      	mov	r8, r3
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004842:	5c83      	ldrb	r3, [r0, r2]
 8004844:	2028      	movs	r0, #40	@ 0x28
{
 8004846:	000d      	movs	r5, r1
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004848:	4018      	ands	r0, r3
 800484a:	2828      	cmp	r0, #40	@ 0x28
 800484c:	d003      	beq.n	8004856 <HAL_I2C_Slave_Seq_Transmit_IT+0x22>
      return  HAL_ERROR;
 800484e:	2001      	movs	r0, #1
}
 8004850:	bc80      	pop	{r7}
 8004852:	46b8      	mov	r8, r7
 8004854:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8004856:	2900      	cmp	r1, #0
 8004858:	d035      	beq.n	80048c6 <HAL_I2C_Slave_Seq_Transmit_IT+0x92>
 800485a:	2e00      	cmp	r6, #0
 800485c:	d033      	beq.n	80048c6 <HAL_I2C_Slave_Seq_Transmit_IT+0x92>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800485e:	27fa      	movs	r7, #250	@ 0xfa
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004860:	5ca3      	ldrb	r3, [r4, r2]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	6819      	ldr	r1, [r3, #0]
 8004866:	43b9      	bics	r1, r7
 8004868:	6019      	str	r1, [r3, #0]
    __HAL_LOCK(hi2c);
 800486a:	2140      	movs	r1, #64	@ 0x40
 800486c:	5c67      	ldrb	r7, [r4, r1]
 800486e:	2f01      	cmp	r7, #1
 8004870:	d04e      	beq.n	8004910 <HAL_I2C_Slave_Seq_Transmit_IT+0xdc>
 8004872:	2701      	movs	r7, #1
 8004874:	5467      	strb	r7, [r4, r1]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004876:	5ca1      	ldrb	r1, [r4, r2]
 8004878:	292a      	cmp	r1, #42	@ 0x2a
 800487a:	d028      	beq.n	80048ce <HAL_I2C_Slave_Seq_Transmit_IT+0x9a>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800487c:	2241      	movs	r2, #65	@ 0x41
 800487e:	2129      	movs	r1, #41	@ 0x29
 8004880:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004882:	3201      	adds	r2, #1
 8004884:	3909      	subs	r1, #9
 8004886:	54a1      	strb	r1, [r4, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004888:	2200      	movs	r2, #0
 800488a:	6462      	str	r2, [r4, #68]	@ 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	4921      	ldr	r1, [pc, #132]	@ (8004914 <HAL_I2C_Slave_Seq_Transmit_IT+0xe0>)
 8004890:	400a      	ands	r2, r1
 8004892:	605a      	str	r2, [r3, #4]
    hi2c->XferCount   = Size;
 8004894:	8566      	strh	r6, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004896:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr    = pData;
 8004898:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800489a:	8522      	strh	r2, [r4, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800489c:	4642      	mov	r2, r8
 800489e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80048a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004918 <HAL_I2C_Slave_Seq_Transmit_IT+0xe4>)
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048a2:	6999      	ldr	r1, [r3, #24]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80048a4:	6362      	str	r2, [r4, #52]	@ 0x34
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	03d2      	lsls	r2, r2, #15
 80048aa:	d503      	bpl.n	80048b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x80>
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048ac:	2208      	movs	r2, #8
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 80048ae:	420a      	tst	r2, r1
 80048b0:	d000      	beq.n	80048b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x80>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80048b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80048b4:	2240      	movs	r2, #64	@ 0x40
 80048b6:	2100      	movs	r1, #0
 80048b8:	54a1      	strb	r1, [r4, r2]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	31fa      	adds	r1, #250	@ 0xfa
 80048be:	430a      	orrs	r2, r1
    return HAL_OK;
 80048c0:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80048c2:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 80048c4:	e7c4      	b.n	8004850 <HAL_I2C_Slave_Seq_Transmit_IT+0x1c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048c6:	2380      	movs	r3, #128	@ 0x80
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80048cc:	e7bf      	b.n	800484e <HAL_I2C_Slave_Seq_Transmit_IT+0x1a>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048ce:	5ca2      	ldrb	r2, [r4, r2]
 80048d0:	4010      	ands	r0, r2
 80048d2:	3828      	subs	r0, #40	@ 0x28
 80048d4:	1e42      	subs	r2, r0, #1
 80048d6:	4190      	sbcs	r0, r2
 80048d8:	22af      	movs	r2, #175	@ 0xaf
 80048da:	4240      	negs	r0, r0
 80048dc:	4390      	bics	r0, r2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80048de:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048e0:	3845      	subs	r0, #69	@ 0x45
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80048e2:	4010      	ands	r0, r2
 80048e4:	6018      	str	r0, [r3, #0]
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	0412      	lsls	r2, r2, #16
 80048ea:	d5c7      	bpl.n	800487c <HAL_I2C_Slave_Seq_Transmit_IT+0x48>
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4909      	ldr	r1, [pc, #36]	@ (8004914 <HAL_I2C_Slave_Seq_Transmit_IT+0xe0>)
        if (hi2c->hdmarx != NULL)
 80048f0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80048f2:	400a      	ands	r2, r1
 80048f4:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmarx != NULL)
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d0c0      	beq.n	800487c <HAL_I2C_Slave_Seq_Transmit_IT+0x48>
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048fa:	4b08      	ldr	r3, [pc, #32]	@ (800491c <HAL_I2C_Slave_Seq_Transmit_IT+0xe8>)
 80048fc:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048fe:	f7fc ffed 	bl	80018dc <HAL_DMA_Abort_IT>
 8004902:	2800      	cmp	r0, #0
 8004904:	d002      	beq.n	800490c <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004906:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004908:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800490a:	4798      	blx	r3
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	e7b5      	b.n	800487c <HAL_I2C_Slave_Seq_Transmit_IT+0x48>
    __HAL_LOCK(hi2c);
 8004910:	2002      	movs	r0, #2
 8004912:	e79d      	b.n	8004850 <HAL_I2C_Slave_Seq_Transmit_IT+0x1c>
 8004914:	ffff7fff 	.word	0xffff7fff
 8004918:	08006159 	.word	0x08006159
 800491c:	080051bd 	.word	0x080051bd

08004920 <HAL_I2C_Slave_Seq_Transmit_DMA>:
{
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	46de      	mov	lr, fp
 8004924:	464e      	mov	r6, r9
 8004926:	4645      	mov	r5, r8
 8004928:	4657      	mov	r7, sl
 800492a:	b5e0      	push	{r5, r6, r7, lr}
 800492c:	000d      	movs	r5, r1
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800492e:	2141      	movs	r1, #65	@ 0x41
{
 8004930:	0004      	movs	r4, r0
 8004932:	469b      	mov	fp, r3
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004934:	5c43      	ldrb	r3, [r0, r1]
 8004936:	2028      	movs	r0, #40	@ 0x28
{
 8004938:	0016      	movs	r6, r2
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800493a:	4018      	ands	r0, r3
 800493c:	2828      	cmp	r0, #40	@ 0x28
 800493e:	d006      	beq.n	800494e <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
      return  HAL_ERROR;
 8004940:	2001      	movs	r0, #1
}
 8004942:	bcf0      	pop	{r4, r5, r6, r7}
 8004944:	46bb      	mov	fp, r7
 8004946:	46b2      	mov	sl, r6
 8004948:	46a9      	mov	r9, r5
 800494a:	46a0      	mov	r8, r4
 800494c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 800494e:	2d00      	cmp	r5, #0
 8004950:	d05f      	beq.n	8004a12 <HAL_I2C_Slave_Seq_Transmit_DMA+0xf2>
 8004952:	2a00      	cmp	r2, #0
 8004954:	d05d      	beq.n	8004a12 <HAL_I2C_Slave_Seq_Transmit_DMA+0xf2>
    __HAL_LOCK(hi2c);
 8004956:	2340      	movs	r3, #64	@ 0x40
 8004958:	5ce2      	ldrb	r2, [r4, r3]
 800495a:	2a01      	cmp	r2, #1
 800495c:	d100      	bne.n	8004960 <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 800495e:	e0c2      	b.n	8004ae6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1c6>
 8004960:	2201      	movs	r2, #1
 8004962:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004964:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004966:	5c63      	ldrb	r3, [r4, r1]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004968:	6813      	ldr	r3, [r2, #0]
 800496a:	4698      	mov	r8, r3
 800496c:	23fa      	movs	r3, #250	@ 0xfa
 800496e:	4647      	mov	r7, r8
 8004970:	439f      	bics	r7, r3
 8004972:	6017      	str	r7, [r2, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004974:	5c63      	ldrb	r3, [r4, r1]
 8004976:	2b2a      	cmp	r3, #42	@ 0x2a
 8004978:	d04f      	beq.n	8004a1a <HAL_I2C_Slave_Seq_Transmit_DMA+0xfa>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800497a:	5c63      	ldrb	r3, [r4, r1]
 800497c:	b2d8      	uxtb	r0, r3
 800497e:	4684      	mov	ip, r0
        if (hi2c->hdmatx != NULL)
 8004980:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004982:	2b29      	cmp	r3, #41	@ 0x29
 8004984:	d06b      	beq.n	8004a5e <HAL_I2C_Slave_Seq_Transmit_DMA+0x13e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8004986:	2341      	movs	r3, #65	@ 0x41
 8004988:	469a      	mov	sl, r3
 800498a:	4651      	mov	r1, sl
 800498c:	3b18      	subs	r3, #24
 800498e:	5463      	strb	r3, [r4, r1]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004990:	3319      	adds	r3, #25
 8004992:	4699      	mov	r9, r3
 8004994:	4649      	mov	r1, r9
 8004996:	3b22      	subs	r3, #34	@ 0x22
 8004998:	5463      	strb	r3, [r4, r1]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499a:	2300      	movs	r3, #0
 800499c:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800499e:	4953      	ldr	r1, [pc, #332]	@ (8004aec <HAL_I2C_Slave_Seq_Transmit_DMA+0x1cc>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a0:	4698      	mov	r8, r3
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80049a2:	6853      	ldr	r3, [r2, #4]
 80049a4:	400b      	ands	r3, r1
    hi2c->XferOptions = XferOptions;
 80049a6:	4659      	mov	r1, fp
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80049a8:	6053      	str	r3, [r2, #4]
    hi2c->XferCount   = Size;
 80049aa:	8566      	strh	r6, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 80049ae:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80049b0:	494f      	ldr	r1, [pc, #316]	@ (8004af0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1d0>)
    hi2c->XferSize    = hi2c->XferCount;
 80049b2:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr    = pData;
 80049b4:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80049b6:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80049b8:	6361      	str	r1, [r4, #52]	@ 0x34
    if (hi2c->hdmatx != NULL)
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d100      	bne.n	80049c0 <HAL_I2C_Slave_Seq_Transmit_DMA+0xa0>
 80049be:	e085      	b.n	8004acc <HAL_I2C_Slave_Seq_Transmit_DMA+0x1ac>
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 80049c0:	494c      	ldr	r1, [pc, #304]	@ (8004af4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1d4>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80049c2:	3228      	adds	r2, #40	@ 0x28
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 80049c4:	62c1      	str	r1, [r0, #44]	@ 0x2c
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80049c6:	494c      	ldr	r1, [pc, #304]	@ (8004af8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1d8>)
 80049c8:	6341      	str	r1, [r0, #52]	@ 0x34
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80049ca:	4641      	mov	r1, r8
 80049cc:	6301      	str	r1, [r0, #48]	@ 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 80049ce:	6381      	str	r1, [r0, #56]	@ 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80049d0:	0029      	movs	r1, r5
 80049d2:	f7fc ff19 	bl	8001808 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d158      	bne.n	8004a8c <HAL_I2C_Slave_Seq_Transmit_DMA+0x16c>
      hi2c->XferCount -= hi2c->XferSize;
 80049da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80049dc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferSize = 0;
 80049de:	8520      	strh	r0, [r4, #40]	@ 0x28
      hi2c->XferCount -= hi2c->XferSize;
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	6999      	ldr	r1, [r3, #24]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 80049ea:	699a      	ldr	r2, [r3, #24]
 80049ec:	03d2      	lsls	r2, r2, #15
 80049ee:	d503      	bpl.n	80049f8 <HAL_I2C_Slave_Seq_Transmit_DMA+0xd8>
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80049f0:	2208      	movs	r2, #8
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 80049f2:	420a      	tst	r2, r1
 80049f4:	d000      	beq.n	80049f8 <HAL_I2C_Slave_Seq_Transmit_DMA+0xd8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80049f6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80049f8:	2240      	movs	r2, #64	@ 0x40
 80049fa:	2100      	movs	r1, #0
 80049fc:	54a1      	strb	r1, [r4, r2]
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80049fe:	2280      	movs	r2, #128	@ 0x80
 8004a00:	6819      	ldr	r1, [r3, #0]
 8004a02:	01d2      	lsls	r2, r2, #7
 8004a04:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004a06:	21b8      	movs	r1, #184	@ 0xb8
    hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004a08:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8004a10:	e797      	b.n	8004942 <HAL_I2C_Slave_Seq_Transmit_DMA+0x22>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a12:	2380      	movs	r3, #128	@ 0x80
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8004a18:	e792      	b.n	8004940 <HAL_I2C_Slave_Seq_Transmit_DMA+0x20>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a1a:	5c63      	ldrb	r3, [r4, r1]
 8004a1c:	4018      	ands	r0, r3
 8004a1e:	3828      	subs	r0, #40	@ 0x28
 8004a20:	1e43      	subs	r3, r0, #1
 8004a22:	4198      	sbcs	r0, r3
 8004a24:	23af      	movs	r3, #175	@ 0xaf
 8004a26:	4240      	negs	r0, r0
 8004a28:	4398      	bics	r0, r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004a2a:	6813      	ldr	r3, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a2c:	3845      	subs	r0, #69	@ 0x45
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004a2e:	4018      	ands	r0, r3
 8004a30:	6010      	str	r0, [r2, #0]
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	d527      	bpl.n	8004a88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x168>
        if (hi2c->hdmarx != NULL)
 8004a38:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d024      	beq.n	8004a88 <HAL_I2C_Slave_Seq_Transmit_DMA+0x168>
          hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a3e:	6813      	ldr	r3, [r2, #0]
 8004a40:	492a      	ldr	r1, [pc, #168]	@ (8004aec <HAL_I2C_Slave_Seq_Transmit_DMA+0x1cc>)
 8004a42:	400b      	ands	r3, r1
 8004a44:	6013      	str	r3, [r2, #0]
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a46:	4b2d      	ldr	r3, [pc, #180]	@ (8004afc <HAL_I2C_Slave_Seq_Transmit_DMA+0x1dc>)
 8004a48:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a4a:	f7fc ff47 	bl	80018dc <HAL_DMA_Abort_IT>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	d019      	beq.n	8004a86 <HAL_I2C_Slave_Seq_Transmit_DMA+0x166>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a52:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a54:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004a56:	4798      	blx	r3
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004a58:	6822      	ldr	r2, [r4, #0]
    if (hi2c->hdmatx != NULL)
 8004a5a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004a5c:	e793      	b.n	8004986 <HAL_I2C_Slave_Seq_Transmit_DMA+0x66>
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a5e:	6813      	ldr	r3, [r2, #0]
 8004a60:	045b      	lsls	r3, r3, #17
 8004a62:	d590      	bpl.n	8004986 <HAL_I2C_Slave_Seq_Transmit_DMA+0x66>
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a64:	6813      	ldr	r3, [r2, #0]
 8004a66:	4699      	mov	r9, r3
 8004a68:	464f      	mov	r7, r9
 8004a6a:	4b25      	ldr	r3, [pc, #148]	@ (8004b00 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e0>)
 8004a6c:	401f      	ands	r7, r3
 8004a6e:	6017      	str	r7, [r2, #0]
        if (hi2c->hdmatx != NULL)
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d019      	beq.n	8004aa8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x188>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a74:	4b21      	ldr	r3, [pc, #132]	@ (8004afc <HAL_I2C_Slave_Seq_Transmit_DMA+0x1dc>)
 8004a76:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a78:	f7fc ff30 	bl	80018dc <HAL_DMA_Abort_IT>
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_I2C_Slave_Seq_Transmit_DMA+0x166>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a80:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004a82:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004a84:	4798      	blx	r3
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004a86:	6822      	ldr	r2, [r4, #0]
    if (hi2c->hdmatx != NULL)
 8004a88:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004a8a:	e77c      	b.n	8004986 <HAL_I2C_Slave_Seq_Transmit_DMA+0x66>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004a8c:	2328      	movs	r3, #40	@ 0x28
 8004a8e:	4652      	mov	r2, sl
 8004a90:	54a3      	strb	r3, [r4, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a92:	464b      	mov	r3, r9
 8004a94:	4642      	mov	r2, r8
 8004a96:	54e2      	strb	r2, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a98:	2210      	movs	r2, #16
 8004a9a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	2340      	movs	r3, #64	@ 0x40
 8004aa4:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8004aa6:	e74b      	b.n	8004940 <HAL_I2C_Slave_Seq_Transmit_DMA+0x20>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8004aa8:	4663      	mov	r3, ip
 8004aaa:	5463      	strb	r3, [r4, r1]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004aac:	2342      	movs	r3, #66	@ 0x42
 8004aae:	2120      	movs	r1, #32
 8004ab0:	54e1      	strb	r1, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab2:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004ab4:	6853      	ldr	r3, [r2, #4]
 8004ab6:	490d      	ldr	r1, [pc, #52]	@ (8004aec <HAL_I2C_Slave_Seq_Transmit_DMA+0x1cc>)
 8004ab8:	400b      	ands	r3, r1
 8004aba:	6053      	str	r3, [r2, #4]
    hi2c->XferCount   = Size;
 8004abc:	8566      	strh	r6, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004abe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr    = pData;
 8004ac0:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8004ac2:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8004ac4:	465b      	mov	r3, fp
 8004ac6:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004ac8:	4b09      	ldr	r3, [pc, #36]	@ (8004af0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1d0>)
 8004aca:	6363      	str	r3, [r4, #52]	@ 0x34
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004acc:	2341      	movs	r3, #65	@ 0x41
 8004ace:	2228      	movs	r2, #40	@ 0x28
 8004ad0:	54e2      	strb	r2, [r4, r3]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004ad2:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004ad4:	2180      	movs	r1, #128	@ 0x80
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	54e2      	strb	r2, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004ada:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004ae0:	2340      	movs	r3, #64	@ 0x40
 8004ae2:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8004ae4:	e72c      	b.n	8004940 <HAL_I2C_Slave_Seq_Transmit_DMA+0x20>
    __HAL_LOCK(hi2c);
 8004ae6:	2002      	movs	r0, #2
 8004ae8:	e72b      	b.n	8004942 <HAL_I2C_Slave_Seq_Transmit_DMA+0x22>
 8004aea:	46c0      	nop			@ (mov r8, r8)
 8004aec:	ffff7fff 	.word	0xffff7fff
 8004af0:	08005fd5 	.word	0x08005fd5
 8004af4:	08004fb1 	.word	0x08004fb1
 8004af8:	08006309 	.word	0x08006309
 8004afc:	080051bd 	.word	0x080051bd
 8004b00:	ffffbfff 	.word	0xffffbfff

08004b04 <HAL_I2C_Slave_Seq_Receive_IT>:
{
 8004b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b06:	46c6      	mov	lr, r8
 8004b08:	0016      	movs	r6, r2
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b0a:	2241      	movs	r2, #65	@ 0x41
{
 8004b0c:	b500      	push	{lr}
 8004b0e:	0004      	movs	r4, r0
 8004b10:	4698      	mov	r8, r3
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b12:	5c83      	ldrb	r3, [r0, r2]
 8004b14:	2028      	movs	r0, #40	@ 0x28
{
 8004b16:	000d      	movs	r5, r1
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b18:	4018      	ands	r0, r3
 8004b1a:	2828      	cmp	r0, #40	@ 0x28
 8004b1c:	d003      	beq.n	8004b26 <HAL_I2C_Slave_Seq_Receive_IT+0x22>
      return  HAL_ERROR;
 8004b1e:	2001      	movs	r0, #1
}
 8004b20:	bc80      	pop	{r7}
 8004b22:	46b8      	mov	r8, r7
 8004b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8004b26:	2900      	cmp	r1, #0
 8004b28:	d035      	beq.n	8004b96 <HAL_I2C_Slave_Seq_Receive_IT+0x92>
 8004b2a:	2e00      	cmp	r6, #0
 8004b2c:	d033      	beq.n	8004b96 <HAL_I2C_Slave_Seq_Receive_IT+0x92>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004b2e:	27fc      	movs	r7, #252	@ 0xfc
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b30:	5ca3      	ldrb	r3, [r4, r2]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	6819      	ldr	r1, [r3, #0]
 8004b36:	43b9      	bics	r1, r7
 8004b38:	6019      	str	r1, [r3, #0]
    __HAL_LOCK(hi2c);
 8004b3a:	2140      	movs	r1, #64	@ 0x40
 8004b3c:	5c67      	ldrb	r7, [r4, r1]
 8004b3e:	2f01      	cmp	r7, #1
 8004b40:	d04e      	beq.n	8004be0 <HAL_I2C_Slave_Seq_Receive_IT+0xdc>
 8004b42:	2701      	movs	r7, #1
 8004b44:	5467      	strb	r7, [r4, r1]
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004b46:	5ca1      	ldrb	r1, [r4, r2]
 8004b48:	2929      	cmp	r1, #41	@ 0x29
 8004b4a:	d028      	beq.n	8004b9e <HAL_I2C_Slave_Seq_Receive_IT+0x9a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8004b4c:	2241      	movs	r2, #65	@ 0x41
 8004b4e:	212a      	movs	r1, #42	@ 0x2a
 8004b50:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004b52:	3201      	adds	r2, #1
 8004b54:	390a      	subs	r1, #10
 8004b56:	54a1      	strb	r1, [r4, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b58:	2200      	movs	r2, #0
 8004b5a:	6462      	str	r2, [r4, #68]	@ 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	4921      	ldr	r1, [pc, #132]	@ (8004be4 <HAL_I2C_Slave_Seq_Receive_IT+0xe0>)
 8004b60:	400a      	ands	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]
    hi2c->XferCount   = Size;
 8004b64:	8566      	strh	r6, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b66:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr    = pData;
 8004b68:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8004b6a:	8522      	strh	r2, [r4, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8004b6c:	4642      	mov	r2, r8
 8004b6e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8004b70:	4a1d      	ldr	r2, [pc, #116]	@ (8004be8 <HAL_I2C_Slave_Seq_Receive_IT+0xe4>)
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b72:	6999      	ldr	r1, [r3, #24]
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8004b74:	6362      	str	r2, [r4, #52]	@ 0x34
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8004b76:	699a      	ldr	r2, [r3, #24]
 8004b78:	03d2      	lsls	r2, r2, #15
 8004b7a:	d403      	bmi.n	8004b84 <HAL_I2C_Slave_Seq_Receive_IT+0x80>
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b7c:	2208      	movs	r2, #8
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8004b7e:	420a      	tst	r2, r1
 8004b80:	d000      	beq.n	8004b84 <HAL_I2C_Slave_Seq_Receive_IT+0x80>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b82:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004b84:	2240      	movs	r2, #64	@ 0x40
 8004b86:	2100      	movs	r1, #0
 8004b88:	54a1      	strb	r1, [r4, r2]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	31fc      	adds	r1, #252	@ 0xfc
 8004b8e:	430a      	orrs	r2, r1
    return HAL_OK;
 8004b90:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004b92:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8004b94:	e7c4      	b.n	8004b20 <HAL_I2C_Slave_Seq_Receive_IT+0x1c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b96:	2380      	movs	r3, #128	@ 0x80
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8004b9c:	e7bf      	b.n	8004b1e <HAL_I2C_Slave_Seq_Receive_IT+0x1a>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b9e:	5ca2      	ldrb	r2, [r4, r2]
 8004ba0:	4010      	ands	r0, r2
 8004ba2:	3828      	subs	r0, #40	@ 0x28
 8004ba4:	1e42      	subs	r2, r0, #1
 8004ba6:	4190      	sbcs	r0, r2
 8004ba8:	22af      	movs	r2, #175	@ 0xaf
 8004baa:	4240      	negs	r0, r0
 8004bac:	4390      	bics	r0, r2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004bae:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bb0:	3843      	subs	r0, #67	@ 0x43
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004bb2:	4010      	ands	r0, r2
 8004bb4:	6018      	str	r0, [r3, #0]
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	0452      	lsls	r2, r2, #17
 8004bba:	d5c7      	bpl.n	8004b4c <HAL_I2C_Slave_Seq_Receive_IT+0x48>
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	490b      	ldr	r1, [pc, #44]	@ (8004bec <HAL_I2C_Slave_Seq_Receive_IT+0xe8>)
        if (hi2c->hdmatx != NULL)
 8004bc0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bc2:	400a      	ands	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]
        if (hi2c->hdmatx != NULL)
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d0c0      	beq.n	8004b4c <HAL_I2C_Slave_Seq_Receive_IT+0x48>
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004bca:	4b09      	ldr	r3, [pc, #36]	@ (8004bf0 <HAL_I2C_Slave_Seq_Receive_IT+0xec>)
 8004bcc:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004bce:	f7fc fe85 	bl	80018dc <HAL_DMA_Abort_IT>
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004bd6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004bd8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004bda:	4798      	blx	r3
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	e7b5      	b.n	8004b4c <HAL_I2C_Slave_Seq_Receive_IT+0x48>
    __HAL_LOCK(hi2c);
 8004be0:	2002      	movs	r0, #2
 8004be2:	e79d      	b.n	8004b20 <HAL_I2C_Slave_Seq_Receive_IT+0x1c>
 8004be4:	ffff7fff 	.word	0xffff7fff
 8004be8:	08006159 	.word	0x08006159
 8004bec:	ffffbfff 	.word	0xffffbfff
 8004bf0:	080051bd 	.word	0x080051bd

08004bf4 <HAL_I2C_Slave_Seq_Receive_DMA>:
{
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	46de      	mov	lr, fp
 8004bf8:	464e      	mov	r6, r9
 8004bfa:	4645      	mov	r5, r8
 8004bfc:	4657      	mov	r7, sl
 8004bfe:	b5e0      	push	{r5, r6, r7, lr}
 8004c00:	0016      	movs	r6, r2
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c02:	2241      	movs	r2, #65	@ 0x41
{
 8004c04:	0004      	movs	r4, r0
 8004c06:	469b      	mov	fp, r3
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c08:	5c83      	ldrb	r3, [r0, r2]
 8004c0a:	2028      	movs	r0, #40	@ 0x28
{
 8004c0c:	000d      	movs	r5, r1
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c0e:	4018      	ands	r0, r3
 8004c10:	2828      	cmp	r0, #40	@ 0x28
 8004c12:	d006      	beq.n	8004c22 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
      return  HAL_ERROR;
 8004c14:	2001      	movs	r0, #1
}
 8004c16:	bcf0      	pop	{r4, r5, r6, r7}
 8004c18:	46bb      	mov	fp, r7
 8004c1a:	46b2      	mov	sl, r6
 8004c1c:	46a9      	mov	r9, r5
 8004c1e:	46a0      	mov	r8, r4
 8004c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((pData == NULL) || (Size == 0U))
 8004c22:	2900      	cmp	r1, #0
 8004c24:	d05d      	beq.n	8004ce2 <HAL_I2C_Slave_Seq_Receive_DMA+0xee>
 8004c26:	2e00      	cmp	r6, #0
 8004c28:	d05b      	beq.n	8004ce2 <HAL_I2C_Slave_Seq_Receive_DMA+0xee>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c2a:	27fc      	movs	r7, #252	@ 0xfc
 8004c2c:	6821      	ldr	r1, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c2e:	5ca3      	ldrb	r3, [r4, r2]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c30:	680b      	ldr	r3, [r1, #0]
 8004c32:	43bb      	bics	r3, r7
 8004c34:	600b      	str	r3, [r1, #0]
    __HAL_LOCK(hi2c);
 8004c36:	2340      	movs	r3, #64	@ 0x40
 8004c38:	5ce7      	ldrb	r7, [r4, r3]
 8004c3a:	2f01      	cmp	r7, #1
 8004c3c:	d100      	bne.n	8004c40 <HAL_I2C_Slave_Seq_Receive_DMA+0x4c>
 8004c3e:	e0b7      	b.n	8004db0 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
 8004c40:	2701      	movs	r7, #1
 8004c42:	54e7      	strb	r7, [r4, r3]
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c44:	5ca3      	ldrb	r3, [r4, r2]
 8004c46:	2b29      	cmp	r3, #41	@ 0x29
 8004c48:	d04f      	beq.n	8004cea <HAL_I2C_Slave_Seq_Receive_DMA+0xf6>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c4a:	5ca3      	ldrb	r3, [r4, r2]
 8004c4c:	b2d8      	uxtb	r0, r3
 8004c4e:	4684      	mov	ip, r0
        if (hi2c->hdmarx != NULL)
 8004c50:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c52:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c54:	d06b      	beq.n	8004d2e <HAL_I2C_Slave_Seq_Receive_DMA+0x13a>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8004c56:	2341      	movs	r3, #65	@ 0x41
 8004c58:	469a      	mov	sl, r3
 8004c5a:	4652      	mov	r2, sl
 8004c5c:	3b17      	subs	r3, #23
 8004c5e:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004c60:	3318      	adds	r3, #24
 8004c62:	4699      	mov	r9, r3
 8004c64:	464a      	mov	r2, r9
 8004c66:	3b22      	subs	r3, #34	@ 0x22
 8004c68:	54a3      	strb	r3, [r4, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004c6e:	4a51      	ldr	r2, [pc, #324]	@ (8004db4 <HAL_I2C_Slave_Seq_Receive_DMA+0x1c0>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c70:	4698      	mov	r8, r3
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004c72:	684b      	ldr	r3, [r1, #4]
 8004c74:	4013      	ands	r3, r2
    hi2c->XferOptions = XferOptions;
 8004c76:	465a      	mov	r2, fp
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004c78:	604b      	str	r3, [r1, #4]
    hi2c->XferCount   = Size;
 8004c7a:	8566      	strh	r6, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c7c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = XferOptions;
 8004c7e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004c80:	4a4d      	ldr	r2, [pc, #308]	@ (8004db8 <HAL_I2C_Slave_Seq_Receive_DMA+0x1c4>)
    hi2c->XferSize    = hi2c->XferCount;
 8004c82:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr    = pData;
 8004c84:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8004c86:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004c88:	6362      	str	r2, [r4, #52]	@ 0x34
    if (hi2c->hdmarx != NULL)
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d100      	bne.n	8004c90 <HAL_I2C_Slave_Seq_Receive_DMA+0x9c>
 8004c8e:	e082      	b.n	8004d96 <HAL_I2C_Slave_Seq_Receive_DMA+0x1a2>
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8004c90:	4a4a      	ldr	r2, [pc, #296]	@ (8004dbc <HAL_I2C_Slave_Seq_Receive_DMA+0x1c8>)
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
 8004c92:	3124      	adds	r1, #36	@ 0x24
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8004c94:	62c2      	str	r2, [r0, #44]	@ 0x2c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004c96:	4a4a      	ldr	r2, [pc, #296]	@ (8004dc0 <HAL_I2C_Slave_Seq_Receive_DMA+0x1cc>)
 8004c98:	6342      	str	r2, [r0, #52]	@ 0x34
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004c9a:	4642      	mov	r2, r8
 8004c9c:	6302      	str	r2, [r0, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004c9e:	6382      	str	r2, [r0, #56]	@ 0x38
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR,
 8004ca0:	002a      	movs	r2, r5
 8004ca2:	f7fc fdb1 	bl	8001808 <HAL_DMA_Start_IT>
    if (dmaxferstatus == HAL_OK)
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	d156      	bne.n	8004d58 <HAL_I2C_Slave_Seq_Receive_DMA+0x164>
      hi2c->XferCount -= hi2c->XferSize;
 8004caa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004cac:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferSize = 0;
 8004cae:	8520      	strh	r0, [r4, #40]	@ 0x28
      hi2c->XferCount -= hi2c->XferSize;
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	6999      	ldr	r1, [r3, #24]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8004cba:	699a      	ldr	r2, [r3, #24]
 8004cbc:	03d2      	lsls	r2, r2, #15
 8004cbe:	d403      	bmi.n	8004cc8 <HAL_I2C_Slave_Seq_Receive_DMA+0xd4>
    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cc0:	2208      	movs	r2, #8
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8004cc2:	420a      	tst	r2, r1
 8004cc4:	d000      	beq.n	8004cc8 <HAL_I2C_Slave_Seq_Receive_DMA+0xd4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004cc6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004cc8:	2240      	movs	r2, #64	@ 0x40
 8004cca:	2100      	movs	r1, #0
 8004ccc:	54a1      	strb	r1, [r4, r2]
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004cce:	2280      	movs	r2, #128	@ 0x80
 8004cd0:	6819      	ldr	r1, [r3, #0]
 8004cd2:	0212      	lsls	r2, r2, #8
 8004cd4:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004cd6:	21fc      	movs	r1, #252	@ 0xfc
    hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004cd8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8004ce0:	e799      	b.n	8004c16 <HAL_I2C_Slave_Seq_Receive_DMA+0x22>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ce2:	2380      	movs	r3, #128	@ 0x80
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8004ce8:	e794      	b.n	8004c14 <HAL_I2C_Slave_Seq_Receive_DMA+0x20>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cea:	5ca3      	ldrb	r3, [r4, r2]
 8004cec:	4018      	ands	r0, r3
 8004cee:	3828      	subs	r0, #40	@ 0x28
 8004cf0:	1e43      	subs	r3, r0, #1
 8004cf2:	4198      	sbcs	r0, r3
 8004cf4:	23af      	movs	r3, #175	@ 0xaf
 8004cf6:	4240      	negs	r0, r0
 8004cf8:	4398      	bics	r0, r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004cfa:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cfc:	3843      	subs	r0, #67	@ 0x43
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004cfe:	4018      	ands	r0, r3
 8004d00:	6008      	str	r0, [r1, #0]
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004d02:	680b      	ldr	r3, [r1, #0]
 8004d04:	045b      	lsls	r3, r3, #17
 8004d06:	d525      	bpl.n	8004d54 <HAL_I2C_Slave_Seq_Receive_DMA+0x160>
        if (hi2c->hdmatx != NULL)
 8004d08:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	d022      	beq.n	8004d54 <HAL_I2C_Slave_Seq_Receive_DMA+0x160>
          hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d0e:	680b      	ldr	r3, [r1, #0]
 8004d10:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc4 <HAL_I2C_Slave_Seq_Receive_DMA+0x1d0>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d16:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc8 <HAL_I2C_Slave_Seq_Receive_DMA+0x1d4>)
 8004d18:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d1a:	f7fc fddf 	bl	80018dc <HAL_DMA_Abort_IT>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d017      	beq.n	8004d52 <HAL_I2C_Slave_Seq_Receive_DMA+0x15e>
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d22:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004d24:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004d26:	4798      	blx	r3
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004d28:	6821      	ldr	r1, [r4, #0]
    if (hi2c->hdmarx != NULL)
 8004d2a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d2c:	e793      	b.n	8004c56 <HAL_I2C_Slave_Seq_Receive_DMA+0x62>
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004d2e:	680b      	ldr	r3, [r1, #0]
 8004d30:	041b      	lsls	r3, r3, #16
 8004d32:	d590      	bpl.n	8004c56 <HAL_I2C_Slave_Seq_Receive_DMA+0x62>
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d34:	680b      	ldr	r3, [r1, #0]
 8004d36:	4f1f      	ldr	r7, [pc, #124]	@ (8004db4 <HAL_I2C_Slave_Seq_Receive_DMA+0x1c0>)
 8004d38:	403b      	ands	r3, r7
 8004d3a:	600b      	str	r3, [r1, #0]
        if (hi2c->hdmarx != NULL)
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d019      	beq.n	8004d74 <HAL_I2C_Slave_Seq_Receive_DMA+0x180>
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d40:	4b21      	ldr	r3, [pc, #132]	@ (8004dc8 <HAL_I2C_Slave_Seq_Receive_DMA+0x1d4>)
 8004d42:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d44:	f7fc fdca 	bl	80018dc <HAL_DMA_Abort_IT>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_I2C_Slave_Seq_Receive_DMA+0x15e>
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d4c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d4e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8004d50:	4798      	blx	r3
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004d52:	6821      	ldr	r1, [r4, #0]
    if (hi2c->hdmarx != NULL)
 8004d54:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004d56:	e77e      	b.n	8004c56 <HAL_I2C_Slave_Seq_Receive_DMA+0x62>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004d58:	2328      	movs	r3, #40	@ 0x28
 8004d5a:	4652      	mov	r2, sl
 8004d5c:	54a3      	strb	r3, [r4, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d5e:	464b      	mov	r3, r9
 8004d60:	4642      	mov	r2, r8
 8004d62:	54e2      	strb	r2, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004d64:	2210      	movs	r2, #16
 8004d66:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	2340      	movs	r3, #64	@ 0x40
 8004d70:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8004d72:	e74f      	b.n	8004c14 <HAL_I2C_Slave_Seq_Receive_DMA+0x20>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8004d74:	4663      	mov	r3, ip
 8004d76:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004d78:	2342      	movs	r3, #66	@ 0x42
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d7e:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004d80:	684b      	ldr	r3, [r1, #4]
 8004d82:	403b      	ands	r3, r7
 8004d84:	604b      	str	r3, [r1, #4]
    hi2c->XferCount   = Size;
 8004d86:	8566      	strh	r6, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d88:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr    = pData;
 8004d8a:	6265      	str	r5, [r4, #36]	@ 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8004d8c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8004d8e:	465b      	mov	r3, fp
 8004d90:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004d92:	4b09      	ldr	r3, [pc, #36]	@ (8004db8 <HAL_I2C_Slave_Seq_Receive_DMA+0x1c4>)
 8004d94:	6363      	str	r3, [r4, #52]	@ 0x34
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004d96:	2341      	movs	r3, #65	@ 0x41
 8004d98:	2228      	movs	r2, #40	@ 0x28
 8004d9a:	54e2      	strb	r2, [r4, r3]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d9c:	2200      	movs	r2, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004d9e:	2180      	movs	r1, #128	@ 0x80
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004da0:	3301      	adds	r3, #1
 8004da2:	54e2      	strb	r2, [r4, r3]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004da4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004da6:	430b      	orrs	r3, r1
 8004da8:	6463      	str	r3, [r4, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004daa:	2340      	movs	r3, #64	@ 0x40
 8004dac:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8004dae:	e731      	b.n	8004c14 <HAL_I2C_Slave_Seq_Receive_DMA+0x20>
    __HAL_LOCK(hi2c);
 8004db0:	2002      	movs	r0, #2
 8004db2:	e730      	b.n	8004c16 <HAL_I2C_Slave_Seq_Receive_DMA+0x22>
 8004db4:	ffff7fff 	.word	0xffff7fff
 8004db8:	08005fd5 	.word	0x08005fd5
 8004dbc:	08005065 	.word	0x08005065
 8004dc0:	08006309 	.word	0x08006309
 8004dc4:	ffffbfff 	.word	0xffffbfff
 8004dc8:	080051bd 	.word	0x080051bd

08004dcc <HAL_I2C_EnableListen_IT>:
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dcc:	2241      	movs	r2, #65	@ 0x41
 8004dce:	5c81      	ldrb	r1, [r0, r2]
{
 8004dd0:	0003      	movs	r3, r0
    return HAL_BUSY;
 8004dd2:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dd4:	2920      	cmp	r1, #32
 8004dd6:	d109      	bne.n	8004dec <HAL_I2C_EnableListen_IT+0x20>
    return HAL_OK;
 8004dd8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dda:	3108      	adds	r1, #8
 8004ddc:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8004dde:	4a04      	ldr	r2, [pc, #16]	@ (8004df0 <HAL_I2C_EnableListen_IT+0x24>)
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004de0:	3190      	adds	r1, #144	@ 0x90
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8004de2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	6813      	ldr	r3, [r2, #0]
 8004de8:	430b      	orrs	r3, r1
 8004dea:	6013      	str	r3, [r2, #0]
}
 8004dec:	4770      	bx	lr
 8004dee:	46c0      	nop			@ (mov r8, r8)
 8004df0:	08006159 	.word	0x08006159

08004df4 <HAL_I2C_DisableListen_IT>:
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004df4:	2241      	movs	r2, #65	@ 0x41
{
 8004df6:	b530      	push	{r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004df8:	5c81      	ldrb	r1, [r0, r2]
{
 8004dfa:	0003      	movs	r3, r0
    return HAL_BUSY;
 8004dfc:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004dfe:	2928      	cmp	r1, #40	@ 0x28
 8004e00:	d111      	bne.n	8004e26 <HAL_I2C_DisableListen_IT+0x32>
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 8004e02:	2442      	movs	r4, #66	@ 0x42
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 8004e04:	5c9d      	ldrb	r5, [r3, r2]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 8004e06:	3001      	adds	r0, #1
 8004e08:	5d19      	ldrb	r1, [r3, r4]
 8004e0a:	4028      	ands	r0, r5
 8004e0c:	4301      	orrs	r1, r0
 8004e0e:	6319      	str	r1, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8004e10:	2120      	movs	r1, #32
 8004e12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e14:	2200      	movs	r2, #0
    return HAL_OK;
 8004e16:	2000      	movs	r0, #0
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e18:	551a      	strb	r2, [r3, r4]
    hi2c->XferISR = NULL;
 8004e1a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	3198      	adds	r1, #152	@ 0x98
 8004e20:	6813      	ldr	r3, [r2, #0]
 8004e22:	438b      	bics	r3, r1
 8004e24:	6013      	str	r3, [r2, #0]
}
 8004e26:	bd30      	pop	{r4, r5, pc}

08004e28 <HAL_I2C_Master_Abort_IT>:
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8004e28:	2242      	movs	r2, #66	@ 0x42
{
 8004e2a:	b510      	push	{r4, lr}
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8004e2c:	5c82      	ldrb	r2, [r0, r2]
{
 8004e2e:	0003      	movs	r3, r0
    return HAL_ERROR;
 8004e30:	2001      	movs	r0, #1
  if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8004e32:	2a10      	cmp	r2, #16
 8004e34:	d12d      	bne.n	8004e92 <HAL_I2C_Master_Abort_IT+0x6a>
    __HAL_LOCK(hi2c);
 8004e36:	3230      	adds	r2, #48	@ 0x30
 8004e38:	5c9c      	ldrb	r4, [r3, r2]
 8004e3a:	2c01      	cmp	r4, #1
 8004e3c:	d02a      	beq.n	8004e94 <HAL_I2C_Master_Abort_IT+0x6c>
 8004e3e:	5498      	strb	r0, [r3, r2]
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e40:	3040      	adds	r0, #64	@ 0x40
 8004e42:	5c1c      	ldrb	r4, [r3, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004e44:	681a      	ldr	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e46:	2c21      	cmp	r4, #33	@ 0x21
 8004e48:	d038      	beq.n	8004ebc <HAL_I2C_Master_Abort_IT+0x94>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e4a:	5c1c      	ldrb	r4, [r3, r0]
 8004e4c:	2c22      	cmp	r4, #34	@ 0x22
 8004e4e:	d023      	beq.n	8004e98 <HAL_I2C_Master_Abort_IT+0x70>
    hi2c->State = HAL_I2C_STATE_ABORT;
 8004e50:	2041      	movs	r0, #65	@ 0x41
 8004e52:	2460      	movs	r4, #96	@ 0x60
 8004e54:	541c      	strb	r4, [r3, r0]
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e56:	6850      	ldr	r0, [r2, #4]
 8004e58:	4c20      	ldr	r4, [pc, #128]	@ (8004edc <HAL_I2C_Master_Abort_IT+0xb4>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e5a:	0589      	lsls	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e5c:	4020      	ands	r0, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e5e:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e60:	4301      	orrs	r1, r0
 8004e62:	481f      	ldr	r0, [pc, #124]	@ (8004ee0 <HAL_I2C_Master_Abort_IT+0xb8>)
 8004e64:	4301      	orrs	r1, r0
 8004e66:	6051      	str	r1, [r2, #4]
    __HAL_UNLOCK(hi2c);
 8004e68:	2000      	movs	r0, #0
 8004e6a:	2140      	movs	r1, #64	@ 0x40
 8004e6c:	5458      	strb	r0, [r3, r1]
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e70:	481c      	ldr	r0, [pc, #112]	@ (8004ee4 <HAL_I2C_Master_Abort_IT+0xbc>)
 8004e72:	4283      	cmp	r3, r0
 8004e74:	d020      	beq.n	8004eb8 <HAL_I2C_Master_Abort_IT+0x90>
 8004e76:	481c      	ldr	r0, [pc, #112]	@ (8004ee8 <HAL_I2C_Master_Abort_IT+0xc0>)
 8004e78:	4283      	cmp	r3, r0
 8004e7a:	d01d      	beq.n	8004eb8 <HAL_I2C_Master_Abort_IT+0x90>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004e7c:	481b      	ldr	r0, [pc, #108]	@ (8004eec <HAL_I2C_Master_Abort_IT+0xc4>)
      tmpisr |= I2C_IT_STOPI;
 8004e7e:	1a1b      	subs	r3, r3, r0
 8004e80:	4258      	negs	r0, r3
 8004e82:	4143      	adcs	r3, r0
 8004e84:	425b      	negs	r3, r3
 8004e86:	400b      	ands	r3, r1
 8004e88:	3320      	adds	r3, #32
    return HAL_OK;
 8004e8a:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004e8c:	6811      	ldr	r1, [r2, #0]
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	6013      	str	r3, [r2, #0]
}
 8004e92:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8004e94:	2002      	movs	r0, #2
 8004e96:	e7fc      	b.n	8004e92 <HAL_I2C_Master_Abort_IT+0x6a>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e98:	5c1c      	ldrb	r4, [r3, r0]
 8004e9a:	2028      	movs	r0, #40	@ 0x28
 8004e9c:	4020      	ands	r0, r4
 8004e9e:	3828      	subs	r0, #40	@ 0x28
 8004ea0:	1e44      	subs	r4, r0, #1
 8004ea2:	41a0      	sbcs	r0, r4
 8004ea4:	24af      	movs	r4, #175	@ 0xaf
 8004ea6:	4240      	negs	r0, r0
 8004ea8:	43a0      	bics	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004eaa:	6814      	ldr	r4, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004eac:	3845      	subs	r0, #69	@ 0x45
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004eae:	4020      	ands	r0, r4
 8004eb0:	6010      	str	r0, [r2, #0]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004eb2:	2012      	movs	r0, #18
 8004eb4:	6318      	str	r0, [r3, #48]	@ 0x30
 8004eb6:	e7cb      	b.n	8004e50 <HAL_I2C_Master_Abort_IT+0x28>
 8004eb8:	2360      	movs	r3, #96	@ 0x60
 8004eba:	e7e6      	b.n	8004e8a <HAL_I2C_Master_Abort_IT+0x62>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ebc:	5c1c      	ldrb	r4, [r3, r0]
 8004ebe:	3819      	subs	r0, #25
 8004ec0:	4020      	ands	r0, r4
 8004ec2:	3828      	subs	r0, #40	@ 0x28
 8004ec4:	1e44      	subs	r4, r0, #1
 8004ec6:	41a0      	sbcs	r0, r4
 8004ec8:	24af      	movs	r4, #175	@ 0xaf
 8004eca:	4240      	negs	r0, r0
 8004ecc:	43a0      	bics	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004ece:	6814      	ldr	r4, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ed0:	3843      	subs	r0, #67	@ 0x43
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004ed2:	4020      	ands	r0, r4
 8004ed4:	6010      	str	r0, [r2, #0]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ed6:	2011      	movs	r0, #17
 8004ed8:	6318      	str	r0, [r3, #48]	@ 0x30
 8004eda:	e7b9      	b.n	8004e50 <HAL_I2C_Master_Abort_IT+0x28>
 8004edc:	fc009800 	.word	0xfc009800
 8004ee0:	02014000 	.word	0x02014000
 8004ee4:	080058ad 	.word	0x080058ad
 8004ee8:	08005fd5 	.word	0x08005fd5
 8004eec:	080056cd 	.word	0x080056cd

08004ef0 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ef0:	6803      	ldr	r3, [r0, #0]
{
 8004ef2:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ef4:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004ef6:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004ef8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d000      	beq.n	8004f00 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 8004efe:	4798      	blx	r3
}
 8004f00:	bd10      	pop	{r4, pc}
 8004f02:	46c0      	nop			@ (mov r8, r8)

08004f04 <HAL_I2C_MasterTxCpltCallback>:
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8004f04:	4770      	bx	lr
 8004f06:	46c0      	nop			@ (mov r8, r8)

08004f08 <HAL_I2C_MasterRxCpltCallback>:
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8004f08:	4770      	bx	lr
 8004f0a:	46c0      	nop			@ (mov r8, r8)

08004f0c <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8004f0c:	4770      	bx	lr
 8004f0e:	46c0      	nop			@ (mov r8, r8)

08004f10 <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8004f10:	4770      	bx	lr
 8004f12:	46c0      	nop			@ (mov r8, r8)

08004f14 <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f14:	2142      	movs	r1, #66	@ 0x42
{
 8004f16:	b510      	push	{r4, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f18:	2400      	movs	r4, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004f1a:	6802      	ldr	r2, [r0, #0]
 8004f1c:	6813      	ldr	r3, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1e:	5444      	strb	r4, [r0, r1]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004f20:	0459      	lsls	r1, r3, #17
 8004f22:	d521      	bpl.n	8004f68 <I2C_ITSlaveSeqCplt+0x54>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f24:	6813      	ldr	r3, [r2, #0]
 8004f26:	4920      	ldr	r1, [pc, #128]	@ (8004fa8 <I2C_ITSlaveSeqCplt+0x94>)
 8004f28:	400b      	ands	r3, r1
 8004f2a:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004f2c:	2141      	movs	r1, #65	@ 0x41
 8004f2e:	5c43      	ldrb	r3, [r0, r1]
 8004f30:	2b29      	cmp	r3, #41	@ 0x29
 8004f32:	d023      	beq.n	8004f7c <I2C_ITSlaveSeqCplt+0x68>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f34:	5c43      	ldrb	r3, [r0, r1]
 8004f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f38:	d000      	beq.n	8004f3c <I2C_ITSlaveSeqCplt+0x28>
}
 8004f3a:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f3c:	2422      	movs	r4, #34	@ 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f3e:	3b02      	subs	r3, #2
 8004f40:	5443      	strb	r3, [r0, r1]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f42:	6304      	str	r4, [r0, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f44:	5c41      	ldrb	r1, [r0, r1]
 8004f46:	400b      	ands	r3, r1
 8004f48:	3b28      	subs	r3, #40	@ 0x28
 8004f4a:	1e59      	subs	r1, r3, #1
 8004f4c:	418b      	sbcs	r3, r1
 8004f4e:	21af      	movs	r1, #175	@ 0xaf
 8004f50:	425b      	negs	r3, r3
 8004f52:	438b      	bics	r3, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004f54:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f56:	3b45      	subs	r3, #69	@ 0x45
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004f58:	400b      	ands	r3, r1
 8004f5a:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8004f5c:	2340      	movs	r3, #64	@ 0x40
 8004f5e:	2200      	movs	r2, #0
 8004f60:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f62:	f7ff ffd5 	bl	8004f10 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f66:	e7e8      	b.n	8004f3a <I2C_ITSlaveSeqCplt+0x26>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f68:	041b      	lsls	r3, r3, #16
 8004f6a:	d5df      	bpl.n	8004f2c <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f6c:	6813      	ldr	r3, [r2, #0]
 8004f6e:	490f      	ldr	r1, [pc, #60]	@ (8004fac <I2C_ITSlaveSeqCplt+0x98>)
 8004f70:	400b      	ands	r3, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004f72:	2141      	movs	r1, #65	@ 0x41
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f74:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004f76:	5c43      	ldrb	r3, [r0, r1]
 8004f78:	2b29      	cmp	r3, #41	@ 0x29
 8004f7a:	d1db      	bne.n	8004f34 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f7c:	2421      	movs	r4, #33	@ 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	5443      	strb	r3, [r0, r1]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f82:	6304      	str	r4, [r0, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f84:	5c41      	ldrb	r1, [r0, r1]
 8004f86:	400b      	ands	r3, r1
 8004f88:	3b28      	subs	r3, #40	@ 0x28
 8004f8a:	1e59      	subs	r1, r3, #1
 8004f8c:	418b      	sbcs	r3, r1
 8004f8e:	21af      	movs	r1, #175	@ 0xaf
 8004f90:	425b      	negs	r3, r3
 8004f92:	438b      	bics	r3, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004f94:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f96:	3b43      	subs	r3, #67	@ 0x43
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004f98:	400b      	ands	r3, r1
 8004f9a:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8004f9c:	2340      	movs	r3, #64	@ 0x40
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004fa2:	f7ff ffb3 	bl	8004f0c <HAL_I2C_SlaveTxCpltCallback>
 8004fa6:	e7c8      	b.n	8004f3a <I2C_ITSlaveSeqCplt+0x26>
 8004fa8:	ffffbfff 	.word	0xffffbfff
 8004fac:	ffff7fff 	.word	0xffff7fff

08004fb0 <I2C_DMASlaveTransmitCplt>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004fb0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004fb2:	4b29      	ldr	r3, [pc, #164]	@ (8005058 <I2C_DMASlaveTransmitCplt+0xa8>)
  uint32_t tmpoptions = hi2c->XferOptions;
 8004fb4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
{
 8004fb6:	b570      	push	{r4, r5, r6, lr}
  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004fb8:	0011      	movs	r1, r2
 8004fba:	4019      	ands	r1, r3
 8004fbc:	421a      	tst	r2, r3
 8004fbe:	d000      	beq.n	8004fc2 <I2C_DMASlaveTransmitCplt+0x12>
}
 8004fc0:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc2:	2542      	movs	r5, #66	@ 0x42
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004fc4:	6803      	ldr	r3, [r0, #0]
 8004fc6:	4c25      	ldr	r4, [pc, #148]	@ (800505c <I2C_DMASlaveTransmitCplt+0xac>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4022      	ands	r2, r4
 8004fcc:	601a      	str	r2, [r3, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004fce:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd0:	5541      	strb	r1, [r0, r5]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004fd2:	0451      	lsls	r1, r2, #17
 8004fd4:	d51f      	bpl.n	8005016 <I2C_DMASlaveTransmitCplt+0x66>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4022      	ands	r2, r4
 8004fda:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004fdc:	2141      	movs	r1, #65	@ 0x41
 8004fde:	5c42      	ldrb	r2, [r0, r1]
 8004fe0:	2a29      	cmp	r2, #41	@ 0x29
 8004fe2:	d022      	beq.n	800502a <I2C_DMASlaveTransmitCplt+0x7a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004fe4:	5c42      	ldrb	r2, [r0, r1]
 8004fe6:	2a2a      	cmp	r2, #42	@ 0x2a
 8004fe8:	d1ea      	bne.n	8004fc0 <I2C_DMASlaveTransmitCplt+0x10>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fea:	2422      	movs	r4, #34	@ 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004fec:	3a02      	subs	r2, #2
 8004fee:	5442      	strb	r2, [r0, r1]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ff0:	6304      	str	r4, [r0, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ff2:	5c41      	ldrb	r1, [r0, r1]
 8004ff4:	400a      	ands	r2, r1
 8004ff6:	3a28      	subs	r2, #40	@ 0x28
 8004ff8:	1e51      	subs	r1, r2, #1
 8004ffa:	418a      	sbcs	r2, r1
 8004ffc:	21af      	movs	r1, #175	@ 0xaf
 8004ffe:	4252      	negs	r2, r2
 8005000:	438a      	bics	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005002:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005004:	3a45      	subs	r2, #69	@ 0x45
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005006:	400a      	ands	r2, r1
 8005008:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800500a:	2340      	movs	r3, #64	@ 0x40
 800500c:	2200      	movs	r2, #0
 800500e:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005010:	f7ff ff7e 	bl	8004f10 <HAL_I2C_SlaveRxCpltCallback>
}
 8005014:	e7d4      	b.n	8004fc0 <I2C_DMASlaveTransmitCplt+0x10>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005016:	0412      	lsls	r2, r2, #16
 8005018:	d5e0      	bpl.n	8004fdc <I2C_DMASlaveTransmitCplt+0x2c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4910      	ldr	r1, [pc, #64]	@ (8005060 <I2C_DMASlaveTransmitCplt+0xb0>)
 800501e:	400a      	ands	r2, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005020:	2141      	movs	r1, #65	@ 0x41
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005022:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005024:	5c42      	ldrb	r2, [r0, r1]
 8005026:	2a29      	cmp	r2, #41	@ 0x29
 8005028:	d1dc      	bne.n	8004fe4 <I2C_DMASlaveTransmitCplt+0x34>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800502a:	2421      	movs	r4, #33	@ 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800502c:	3a01      	subs	r2, #1
 800502e:	5442      	strb	r2, [r0, r1]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005030:	6304      	str	r4, [r0, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005032:	5c41      	ldrb	r1, [r0, r1]
 8005034:	400a      	ands	r2, r1
 8005036:	3a28      	subs	r2, #40	@ 0x28
 8005038:	1e51      	subs	r1, r2, #1
 800503a:	418a      	sbcs	r2, r1
 800503c:	21af      	movs	r1, #175	@ 0xaf
 800503e:	4252      	negs	r2, r2
 8005040:	438a      	bics	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005042:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005044:	3a43      	subs	r2, #67	@ 0x43
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005046:	400a      	ands	r2, r1
 8005048:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800504a:	2340      	movs	r3, #64	@ 0x40
 800504c:	2200      	movs	r2, #0
 800504e:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005050:	f7ff ff5c 	bl	8004f0c <HAL_I2C_SlaveTxCpltCallback>
 8005054:	e7b4      	b.n	8004fc0 <I2C_DMASlaveTransmitCplt+0x10>
 8005056:	46c0      	nop			@ (mov r8, r8)
 8005058:	feffffff 	.word	0xfeffffff
 800505c:	ffffbfff 	.word	0xffffbfff
 8005060:	ffff7fff 	.word	0xffff7fff

08005064 <I2C_DMASlaveReceiveCplt>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005064:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8005066:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8005068:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
  uint32_t tmpoptions = hi2c->XferOptions;
 800506a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <I2C_DMASlaveReceiveCplt+0x16>
 8005074:	4925      	ldr	r1, [pc, #148]	@ (800510c <I2C_DMASlaveReceiveCplt+0xa8>)
 8005076:	428a      	cmp	r2, r1
 8005078:	d100      	bne.n	800507c <I2C_DMASlaveReceiveCplt+0x18>
}
 800507a:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800507c:	2542      	movs	r5, #66	@ 0x42
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800507e:	6802      	ldr	r2, [r0, #0]
 8005080:	4c23      	ldr	r4, [pc, #140]	@ (8005110 <I2C_DMASlaveReceiveCplt+0xac>)
 8005082:	6811      	ldr	r1, [r2, #0]
 8005084:	4021      	ands	r1, r4
 8005086:	6011      	str	r1, [r2, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005088:	6811      	ldr	r1, [r2, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800508a:	5543      	strb	r3, [r0, r5]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800508c:	044b      	lsls	r3, r1, #17
 800508e:	d421      	bmi.n	80050d4 <I2C_DMASlaveReceiveCplt+0x70>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005090:	0409      	lsls	r1, r1, #16
 8005092:	d502      	bpl.n	800509a <I2C_DMASlaveReceiveCplt+0x36>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005094:	6813      	ldr	r3, [r2, #0]
 8005096:	4023      	ands	r3, r4
 8005098:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800509a:	2141      	movs	r1, #65	@ 0x41
 800509c:	5c43      	ldrb	r3, [r0, r1]
 800509e:	2b29      	cmp	r3, #41	@ 0x29
 80050a0:	d01d      	beq.n	80050de <I2C_DMASlaveReceiveCplt+0x7a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80050a2:	5c43      	ldrb	r3, [r0, r1]
 80050a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80050a6:	d1e8      	bne.n	800507a <I2C_DMASlaveReceiveCplt+0x16>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050a8:	2422      	movs	r4, #34	@ 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80050aa:	3b02      	subs	r3, #2
 80050ac:	5443      	strb	r3, [r0, r1]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050ae:	6304      	str	r4, [r0, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050b0:	5c41      	ldrb	r1, [r0, r1]
 80050b2:	400b      	ands	r3, r1
 80050b4:	3b28      	subs	r3, #40	@ 0x28
 80050b6:	1e59      	subs	r1, r3, #1
 80050b8:	418b      	sbcs	r3, r1
 80050ba:	21af      	movs	r1, #175	@ 0xaf
 80050bc:	425b      	negs	r3, r3
 80050be:	438b      	bics	r3, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80050c0:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050c2:	3b45      	subs	r3, #69	@ 0x45
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80050c4:	400b      	ands	r3, r1
 80050c6:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80050c8:	2340      	movs	r3, #64	@ 0x40
 80050ca:	2200      	movs	r2, #0
 80050cc:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050ce:	f7ff ff1f 	bl	8004f10 <HAL_I2C_SlaveRxCpltCallback>
}
 80050d2:	e7d2      	b.n	800507a <I2C_DMASlaveReceiveCplt+0x16>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80050d4:	6813      	ldr	r3, [r2, #0]
 80050d6:	490f      	ldr	r1, [pc, #60]	@ (8005114 <I2C_DMASlaveReceiveCplt+0xb0>)
 80050d8:	400b      	ands	r3, r1
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	e7dd      	b.n	800509a <I2C_DMASlaveReceiveCplt+0x36>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80050de:	2421      	movs	r4, #33	@ 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80050e0:	3b01      	subs	r3, #1
 80050e2:	5443      	strb	r3, [r0, r1]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80050e4:	6304      	str	r4, [r0, #48]	@ 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050e6:	5c41      	ldrb	r1, [r0, r1]
 80050e8:	400b      	ands	r3, r1
 80050ea:	3b28      	subs	r3, #40	@ 0x28
 80050ec:	1e59      	subs	r1, r3, #1
 80050ee:	418b      	sbcs	r3, r1
 80050f0:	21af      	movs	r1, #175	@ 0xaf
 80050f2:	425b      	negs	r3, r3
 80050f4:	438b      	bics	r3, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80050f6:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050f8:	3b43      	subs	r3, #67	@ 0x43
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80050fa:	400b      	ands	r3, r1
 80050fc:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80050fe:	2340      	movs	r3, #64	@ 0x40
 8005100:	2200      	movs	r2, #0
 8005102:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005104:	f7ff ff02 	bl	8004f0c <HAL_I2C_SlaveTxCpltCallback>
 8005108:	e7b7      	b.n	800507a <I2C_DMASlaveReceiveCplt+0x16>
 800510a:	46c0      	nop			@ (mov r8, r8)
 800510c:	ffff0000 	.word	0xffff0000
 8005110:	ffff7fff 	.word	0xffff7fff
 8005114:	ffffbfff 	.word	0xffffbfff

08005118 <HAL_I2C_AddrCallback>:
}
 8005118:	4770      	bx	lr
 800511a:	46c0      	nop			@ (mov r8, r8)

0800511c <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800511c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800511e:	46c6      	mov	lr, r8
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005120:	25fe      	movs	r5, #254	@ 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 8005122:	6803      	ldr	r3, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005124:	68c6      	ldr	r6, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8005126:	6999      	ldr	r1, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005128:	699a      	ldr	r2, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 800512a:	03c9      	lsls	r1, r1, #15
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800512c:	0c12      	lsrs	r2, r2, #16
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800512e:	689c      	ldr	r4, [r3, #8]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8005130:	b500      	push	{lr}
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005132:	68df      	ldr	r7, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8005134:	0fc9      	lsrs	r1, r1, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005136:	402a      	ands	r2, r5
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005138:	2e02      	cmp	r6, #2
 800513a:	d113      	bne.n	8005164 <I2C_ITAddrCplt.part.0+0x48>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800513c:	05a4      	lsls	r4, r4, #22
 800513e:	0da6      	lsrs	r6, r4, #22
 8005140:	46b4      	mov	ip, r6
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005142:	2606      	movs	r6, #6
 8005144:	0f64      	lsrs	r4, r4, #29
 8005146:	4054      	eors	r4, r2
 8005148:	0032      	movs	r2, r6
 800514a:	4022      	ands	r2, r4
 800514c:	4690      	mov	r8, r2
 800514e:	4226      	tst	r6, r4
 8005150:	d112      	bne.n	8005178 <I2C_ITAddrCplt.part.0+0x5c>
        hi2c->AddrEventCount++;
 8005152:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8005154:	3401      	adds	r4, #1
 8005156:	6484      	str	r4, [r0, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005158:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800515a:	2a02      	cmp	r2, #2
 800515c:	d018      	beq.n	8005190 <I2C_ITAddrCplt.part.0+0x74>
}
 800515e:	bc80      	pop	{r7}
 8005160:	46b8      	mov	r8, r7
 8005162:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005164:	25b8      	movs	r5, #184	@ 0xb8
 8005166:	681c      	ldr	r4, [r3, #0]
 8005168:	43ac      	bics	r4, r5
 800516a:	601c      	str	r4, [r3, #0]
      __HAL_UNLOCK(hi2c);
 800516c:	2340      	movs	r3, #64	@ 0x40
 800516e:	2400      	movs	r4, #0
 8005170:	54c4      	strb	r4, [r0, r3]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005172:	f7ff ffd1 	bl	8005118 <HAL_I2C_AddrCallback>
}
 8005176:	e7f2      	b.n	800515e <I2C_ITAddrCplt.part.0+0x42>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005178:	24b8      	movs	r4, #184	@ 0xb8
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	43a2      	bics	r2, r4
 800517e:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 8005180:	2340      	movs	r3, #64	@ 0x40
 8005182:	2200      	movs	r2, #0
 8005184:	54c2      	strb	r2, [r0, r3]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005186:	002a      	movs	r2, r5
 8005188:	403a      	ands	r2, r7
 800518a:	f7ff ffc5 	bl	8005118 <HAL_I2C_AddrCallback>
 800518e:	e7e6      	b.n	800515e <I2C_ITAddrCplt.part.0+0x42>
          hi2c->AddrEventCount = 0U;
 8005190:	4642      	mov	r2, r8
 8005192:	6482      	str	r2, [r0, #72]	@ 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005194:	2208      	movs	r2, #8
 8005196:	61da      	str	r2, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8005198:	4642      	mov	r2, r8
 800519a:	2340      	movs	r3, #64	@ 0x40
 800519c:	54c2      	strb	r2, [r0, r3]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800519e:	4662      	mov	r2, ip
 80051a0:	f7ff ffba 	bl	8005118 <HAL_I2C_AddrCallback>
 80051a4:	e7db      	b.n	800515e <I2C_ITAddrCplt.part.0+0x42>
 80051a6:	46c0      	nop			@ (mov r8, r8)

080051a8 <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 80051a8:	4770      	bx	lr
 80051aa:	46c0      	nop			@ (mov r8, r8)

080051ac <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 80051ac:	4770      	bx	lr
 80051ae:	46c0      	nop			@ (mov r8, r8)

080051b0 <HAL_I2C_MemRxCpltCallback>:
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
 80051b0:	4770      	bx	lr
 80051b2:	46c0      	nop			@ (mov r8, r8)

080051b4 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 80051b4:	4770      	bx	lr
 80051b6:	46c0      	nop			@ (mov r8, r8)

080051b8 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 80051b8:	4770      	bx	lr
 80051ba:	46c0      	nop			@ (mov r8, r8)

080051bc <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80051bc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80051be:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 80051c0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051c6:	2200      	movs	r2, #0
 80051c8:	639a      	str	r2, [r3, #56]	@ 0x38
  if (hi2c->hdmarx != NULL)
 80051ca:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051d0:	2200      	movs	r2, #0
 80051d2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051d4:	2341      	movs	r3, #65	@ 0x41
 80051d6:	5cc2      	ldrb	r2, [r0, r3]
 80051d8:	2a60      	cmp	r2, #96	@ 0x60
 80051da:	d006      	beq.n	80051ea <I2C_DMAAbort+0x2e>
    hi2c->PreviousState = I2C_STATE_NONE;
 80051dc:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 80051de:	2240      	movs	r2, #64	@ 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80051e0:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80051e2:	5483      	strb	r3, [r0, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80051e4:	f7ff ffe6 	bl	80051b4 <HAL_I2C_ErrorCallback>
}
 80051e8:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80051ea:	3a40      	subs	r2, #64	@ 0x40
 80051ec:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 80051ee:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 80051f0:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80051f2:	6303      	str	r3, [r0, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80051f4:	5483      	strb	r3, [r0, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 80051f6:	f7ff ffdf 	bl	80051b8 <HAL_I2C_AbortCpltCallback>
}
 80051fa:	e7f5      	b.n	80051e8 <I2C_DMAAbort+0x2c>

080051fc <I2C_ITError>:
{
 80051fc:	b570      	push	{r4, r5, r6, lr}
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051fe:	2242      	movs	r2, #66	@ 0x42
{
 8005200:	0004      	movs	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005202:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005204:	2041      	movs	r0, #65	@ 0x41
 8005206:	5c23      	ldrb	r3, [r4, r0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005208:	54a5      	strb	r5, [r4, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800520a:	4a51      	ldr	r2, [pc, #324]	@ (8005350 <I2C_ITError+0x154>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800520c:	3b28      	subs	r3, #40	@ 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800520e:	62e2      	str	r2, [r4, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005210:	8565      	strh	r5, [r4, #42]	@ 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8005212:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005214:	430a      	orrs	r2, r1
 8005216:	6462      	str	r2, [r4, #68]	@ 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005218:	6822      	ldr	r2, [r4, #0]
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800521a:	2b02      	cmp	r3, #2
 800521c:	d833      	bhi.n	8005286 <I2C_ITError+0x8a>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800521e:	2128      	movs	r1, #40	@ 0x28
 8005220:	5c23      	ldrb	r3, [r4, r0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005222:	5c20      	ldrb	r0, [r4, r0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005224:	400b      	ands	r3, r1
 8005226:	3b28      	subs	r3, #40	@ 0x28
 8005228:	1e5d      	subs	r5, r3, #1
 800522a:	41ab      	sbcs	r3, r5
 800522c:	25af      	movs	r5, #175	@ 0xaf
 800522e:	425b      	negs	r3, r3
 8005230:	43ab      	bics	r3, r5
 8005232:	3b47      	subs	r3, #71	@ 0x47
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005234:	4001      	ands	r1, r0
 8005236:	2928      	cmp	r1, #40	@ 0x28
 8005238:	d001      	beq.n	800523e <I2C_ITError+0x42>
 800523a:	23f7      	movs	r3, #247	@ 0xf7
 800523c:	425b      	negs	r3, r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800523e:	6811      	ldr	r1, [r2, #0]
 8005240:	400b      	ands	r3, r1
 8005242:	6013      	str	r3, [r2, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005244:	2128      	movs	r1, #40	@ 0x28
 8005246:	2341      	movs	r3, #65	@ 0x41
 8005248:	54e1      	strb	r1, [r4, r3]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800524a:	4b42      	ldr	r3, [pc, #264]	@ (8005354 <I2C_ITError+0x158>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800524c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800524e:	6363      	str	r3, [r4, #52]	@ 0x34
  tmppreviousstate = hi2c->PreviousState;
 8005250:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005252:	2800      	cmp	r0, #0
 8005254:	d004      	beq.n	8005260 <I2C_ITError+0x64>
 8005256:	0019      	movs	r1, r3
 8005258:	2510      	movs	r5, #16
 800525a:	3911      	subs	r1, #17
 800525c:	43a9      	bics	r1, r5
 800525e:	d039      	beq.n	80052d4 <I2C_ITError+0xd8>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005260:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005262:	2800      	cmp	r0, #0
 8005264:	d003      	beq.n	800526e <I2C_ITError+0x72>
 8005266:	2110      	movs	r1, #16
 8005268:	3b12      	subs	r3, #18
 800526a:	438b      	bics	r3, r1
 800526c:	d047      	beq.n	80052fe <I2C_ITError+0x102>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800526e:	2341      	movs	r3, #65	@ 0x41
 8005270:	5ce2      	ldrb	r2, [r4, r3]
 8005272:	2a60      	cmp	r2, #96	@ 0x60
 8005274:	d061      	beq.n	800533a <I2C_ITError+0x13e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005276:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8005278:	2240      	movs	r2, #64	@ 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800527a:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_I2C_ErrorCallback(hi2c);
 800527c:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800527e:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8005280:	f7ff ff98 	bl	80051b4 <HAL_I2C_ErrorCallback>
}
 8005284:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005286:	21fe      	movs	r1, #254	@ 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005288:	5c23      	ldrb	r3, [r4, r0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800528a:	5c23      	ldrb	r3, [r4, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800528c:	6813      	ldr	r3, [r2, #0]
 800528e:	438b      	bics	r3, r1
 8005290:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005292:	6993      	ldr	r3, [r2, #24]
 8005294:	079b      	lsls	r3, r3, #30
 8005296:	d500      	bpl.n	800529a <I2C_ITError+0x9e>
    hi2c->Instance->TXDR = 0x00U;
 8005298:	6295      	str	r5, [r2, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800529a:	2301      	movs	r3, #1
 800529c:	6991      	ldr	r1, [r2, #24]
 800529e:	420b      	tst	r3, r1
 80052a0:	d102      	bne.n	80052a8 <I2C_ITError+0xac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052a2:	6991      	ldr	r1, [r2, #24]
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6193      	str	r3, [r2, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80052a8:	2341      	movs	r3, #65	@ 0x41
 80052aa:	5ce1      	ldrb	r1, [r4, r3]
 80052ac:	2960      	cmp	r1, #96	@ 0x60
 80052ae:	d00f      	beq.n	80052d0 <I2C_ITError+0xd4>
      hi2c->State         = HAL_I2C_STATE_READY;
 80052b0:	2120      	movs	r1, #32
 80052b2:	54e1      	strb	r1, [r4, r3]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052b4:	6993      	ldr	r3, [r2, #24]
 80052b6:	4219      	tst	r1, r3
 80052b8:	d00a      	beq.n	80052d0 <I2C_ITError+0xd4>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052ba:	2310      	movs	r3, #16
 80052bc:	6991      	ldr	r1, [r2, #24]
 80052be:	420b      	tst	r3, r1
 80052c0:	d004      	beq.n	80052cc <I2C_ITError+0xd0>
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052c2:	2104      	movs	r1, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052c4:	61d3      	str	r3, [r2, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80052c8:	430b      	orrs	r3, r1
 80052ca:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052cc:	2320      	movs	r3, #32
 80052ce:	61d3      	str	r3, [r2, #28]
    hi2c->XferISR       = NULL;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e7bb      	b.n	800524c <I2C_ITError+0x50>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80052d4:	6813      	ldr	r3, [r2, #0]
 80052d6:	045b      	lsls	r3, r3, #17
 80052d8:	d42a      	bmi.n	8005330 <I2C_ITError+0x134>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052da:	f7fc fc45 	bl	8001b68 <HAL_DMA_GetState>
 80052de:	2801      	cmp	r0, #1
 80052e0:	d0c5      	beq.n	800526e <I2C_ITError+0x72>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80052e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005358 <I2C_ITError+0x15c>)
      __HAL_UNLOCK(hi2c);
 80052e6:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052e8:	6383      	str	r3, [r0, #56]	@ 0x38
      __HAL_UNLOCK(hi2c);
 80052ea:	2340      	movs	r3, #64	@ 0x40
 80052ec:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052ee:	f7fc faf5 	bl	80018dc <HAL_DMA_Abort_IT>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d0c6      	beq.n	8005284 <I2C_ITError+0x88>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052f6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80052f8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80052fa:	4798      	blx	r3
 80052fc:	e7c2      	b.n	8005284 <I2C_ITError+0x88>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80052fe:	6813      	ldr	r3, [r2, #0]
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	d503      	bpl.n	800530c <I2C_ITError+0x110>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005304:	6813      	ldr	r3, [r2, #0]
 8005306:	4915      	ldr	r1, [pc, #84]	@ (800535c <I2C_ITError+0x160>)
 8005308:	400b      	ands	r3, r1
 800530a:	6013      	str	r3, [r2, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800530c:	f7fc fc2c 	bl	8001b68 <HAL_DMA_GetState>
 8005310:	2801      	cmp	r0, #1
 8005312:	d0ac      	beq.n	800526e <I2C_ITError+0x72>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005314:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005316:	4b10      	ldr	r3, [pc, #64]	@ (8005358 <I2C_ITError+0x15c>)
      __HAL_UNLOCK(hi2c);
 8005318:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800531a:	6383      	str	r3, [r0, #56]	@ 0x38
      __HAL_UNLOCK(hi2c);
 800531c:	2340      	movs	r3, #64	@ 0x40
 800531e:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005320:	f7fc fadc 	bl	80018dc <HAL_DMA_Abort_IT>
 8005324:	2800      	cmp	r0, #0
 8005326:	d0ad      	beq.n	8005284 <I2C_ITError+0x88>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005328:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800532a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800532c:	4798      	blx	r3
 800532e:	e7a9      	b.n	8005284 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005330:	6813      	ldr	r3, [r2, #0]
 8005332:	490b      	ldr	r1, [pc, #44]	@ (8005360 <I2C_ITError+0x164>)
 8005334:	400b      	ands	r3, r1
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	e7cf      	b.n	80052da <I2C_ITError+0xde>
    hi2c->State = HAL_I2C_STATE_READY;
 800533a:	3a40      	subs	r2, #64	@ 0x40
 800533c:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800533e:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8005340:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8005342:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8005344:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8005346:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8005348:	f7ff ff36 	bl	80051b8 <HAL_I2C_AbortCpltCallback>
}
 800534c:	e79a      	b.n	8005284 <I2C_ITError+0x88>
 800534e:	46c0      	nop			@ (mov r8, r8)
 8005350:	ffff0000 	.word	0xffff0000
 8005354:	08006159 	.word	0x08006159
 8005358:	080051bd 	.word	0x080051bd
 800535c:	ffff7fff 	.word	0xffff7fff
 8005360:	ffffbfff 	.word	0xffffbfff

08005364 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005364:	2220      	movs	r2, #32
{
 8005366:	b510      	push	{r4, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005368:	6803      	ldr	r3, [r0, #0]
{
 800536a:	b082      	sub	sp, #8
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800536c:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800536e:	3221      	adds	r2, #33	@ 0x21
 8005370:	5c84      	ldrb	r4, [r0, r2]
 8005372:	2c21      	cmp	r4, #33	@ 0x21
 8005374:	d05a      	beq.n	800542c <I2C_ITMasterCplt+0xc8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005376:	5c84      	ldrb	r4, [r0, r2]
 8005378:	2c22      	cmp	r4, #34	@ 0x22
 800537a:	d03f      	beq.n	80053fc <I2C_ITMasterCplt+0x98>
  I2C_RESET_CR2(hi2c);
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	4c3e      	ldr	r4, [pc, #248]	@ (8005478 <I2C_ITMasterCplt+0x114>)
 8005380:	4022      	ands	r2, r4
 8005382:	605a      	str	r2, [r3, #4]
  hi2c->XferISR       = NULL;
 8005384:	2200      	movs	r2, #0
 8005386:	6342      	str	r2, [r0, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005388:	4a3c      	ldr	r2, [pc, #240]	@ (800547c <I2C_ITMasterCplt+0x118>)
 800538a:	62c2      	str	r2, [r0, #44]	@ 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800538c:	2210      	movs	r2, #16
 800538e:	420a      	tst	r2, r1
 8005390:	d004      	beq.n	800539c <I2C_ITMasterCplt+0x38>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005392:	2404      	movs	r4, #4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005394:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005396:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8005398:	4322      	orrs	r2, r4
 800539a:	6442      	str	r2, [r0, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800539c:	2241      	movs	r2, #65	@ 0x41
 800539e:	5c82      	ldrb	r2, [r0, r2]
 80053a0:	2a60      	cmp	r2, #96	@ 0x60
 80053a2:	d03b      	beq.n	800541c <I2C_ITMasterCplt+0xb8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	0792      	lsls	r2, r2, #30
 80053a8:	d501      	bpl.n	80053ae <I2C_ITMasterCplt+0x4a>
    hi2c->Instance->TXDR = 0x00U;
 80053aa:	2200      	movs	r2, #0
 80053ac:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053ae:	2201      	movs	r2, #1
 80053b0:	6999      	ldr	r1, [r3, #24]
 80053b2:	420a      	tst	r2, r1
 80053b4:	d102      	bne.n	80053bc <I2C_ITMasterCplt+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053b6:	6999      	ldr	r1, [r3, #24]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	619a      	str	r2, [r3, #24]
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80053bc:	2341      	movs	r3, #65	@ 0x41
  tmperror = hi2c->ErrorCode;
 80053be:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80053c0:	5cc1      	ldrb	r1, [r0, r3]
 80053c2:	2960      	cmp	r1, #96	@ 0x60
 80053c4:	d001      	beq.n	80053ca <I2C_ITMasterCplt+0x66>
 80053c6:	2a00      	cmp	r2, #0
 80053c8:	d004      	beq.n	80053d4 <I2C_ITMasterCplt+0x70>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80053ca:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80053cc:	f7ff ff16 	bl	80051fc <I2C_ITError>
}
 80053d0:	b002      	add	sp, #8
 80053d2:	bd10      	pop	{r4, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053d4:	5cc1      	ldrb	r1, [r0, r3]
 80053d6:	2921      	cmp	r1, #33	@ 0x21
 80053d8:	d038      	beq.n	800544c <I2C_ITMasterCplt+0xe8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053da:	5cc1      	ldrb	r1, [r0, r3]
 80053dc:	2922      	cmp	r1, #34	@ 0x22
 80053de:	d1f7      	bne.n	80053d0 <I2C_ITMasterCplt+0x6c>
    hi2c->State = HAL_I2C_STATE_READY;
 80053e0:	3902      	subs	r1, #2
 80053e2:	54c1      	strb	r1, [r0, r3]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053e4:	2342      	movs	r3, #66	@ 0x42
    hi2c->PreviousState = I2C_STATE_NONE;
 80053e6:	6302      	str	r2, [r0, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053e8:	5cc1      	ldrb	r1, [r0, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ea:	54c2      	strb	r2, [r0, r3]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053ec:	b2cc      	uxtb	r4, r1
 80053ee:	2940      	cmp	r1, #64	@ 0x40
 80053f0:	d03e      	beq.n	8005470 <I2C_ITMasterCplt+0x10c>
      __HAL_UNLOCK(hi2c);
 80053f2:	2340      	movs	r3, #64	@ 0x40
 80053f4:	54c2      	strb	r2, [r0, r3]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80053f6:	f7ff fd87 	bl	8004f08 <HAL_I2C_MasterRxCpltCallback>
}
 80053fa:	e7e9      	b.n	80053d0 <I2C_ITMasterCplt+0x6c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80053fc:	5c84      	ldrb	r4, [r0, r2]
 80053fe:	2228      	movs	r2, #40	@ 0x28
 8005400:	4022      	ands	r2, r4
 8005402:	3a28      	subs	r2, #40	@ 0x28
 8005404:	1e54      	subs	r4, r2, #1
 8005406:	41a2      	sbcs	r2, r4
 8005408:	24af      	movs	r4, #175	@ 0xaf
 800540a:	4252      	negs	r2, r2
 800540c:	43a2      	bics	r2, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800540e:	681c      	ldr	r4, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005410:	3a45      	subs	r2, #69	@ 0x45
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005412:	4022      	ands	r2, r4
 8005414:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005416:	2212      	movs	r2, #18
 8005418:	6302      	str	r2, [r0, #48]	@ 0x30
 800541a:	e7af      	b.n	800537c <I2C_ITMasterCplt+0x18>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800541c:	0749      	lsls	r1, r1, #29
 800541e:	d5c1      	bpl.n	80053a4 <I2C_ITMasterCplt+0x40>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005420:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005422:	329f      	adds	r2, #159	@ 0x9f
 8005424:	400a      	ands	r2, r1
 8005426:	9201      	str	r2, [sp, #4]
    UNUSED(tmpreg);
 8005428:	9a01      	ldr	r2, [sp, #4]
 800542a:	e7bb      	b.n	80053a4 <I2C_ITMasterCplt+0x40>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800542c:	5c84      	ldrb	r4, [r0, r2]
 800542e:	3a19      	subs	r2, #25
 8005430:	4022      	ands	r2, r4
 8005432:	3a28      	subs	r2, #40	@ 0x28
 8005434:	1e54      	subs	r4, r2, #1
 8005436:	41a2      	sbcs	r2, r4
 8005438:	24af      	movs	r4, #175	@ 0xaf
 800543a:	4252      	negs	r2, r2
 800543c:	43a2      	bics	r2, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800543e:	681c      	ldr	r4, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005440:	3a43      	subs	r2, #67	@ 0x43
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005442:	4022      	ands	r2, r4
 8005444:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005446:	2211      	movs	r2, #17
 8005448:	6302      	str	r2, [r0, #48]	@ 0x30
 800544a:	e797      	b.n	800537c <I2C_ITMasterCplt+0x18>
    hi2c->State = HAL_I2C_STATE_READY;
 800544c:	3901      	subs	r1, #1
 800544e:	54c1      	strb	r1, [r0, r3]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005450:	2342      	movs	r3, #66	@ 0x42
    hi2c->PreviousState = I2C_STATE_NONE;
 8005452:	6302      	str	r2, [r0, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005454:	5cc1      	ldrb	r1, [r0, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005456:	54c2      	strb	r2, [r0, r3]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005458:	b2cc      	uxtb	r4, r1
 800545a:	2940      	cmp	r1, #64	@ 0x40
 800545c:	d004      	beq.n	8005468 <I2C_ITMasterCplt+0x104>
      __HAL_UNLOCK(hi2c);
 800545e:	2340      	movs	r3, #64	@ 0x40
 8005460:	54c2      	strb	r2, [r0, r3]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005462:	f7ff fd4f 	bl	8004f04 <HAL_I2C_MasterTxCpltCallback>
 8005466:	e7b3      	b.n	80053d0 <I2C_ITMasterCplt+0x6c>
      __HAL_UNLOCK(hi2c);
 8005468:	5502      	strb	r2, [r0, r4]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800546a:	f7ff fe9f 	bl	80051ac <HAL_I2C_MemTxCpltCallback>
 800546e:	e7af      	b.n	80053d0 <I2C_ITMasterCplt+0x6c>
      __HAL_UNLOCK(hi2c);
 8005470:	5502      	strb	r2, [r0, r4]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005472:	f7ff fe9d 	bl	80051b0 <HAL_I2C_MemRxCpltCallback>
 8005476:	e7ab      	b.n	80053d0 <I2C_ITMasterCplt+0x6c>
 8005478:	fe00e800 	.word	0xfe00e800
 800547c:	ffff0000 	.word	0xffff0000

08005480 <I2C_Master_ISR_IT>:
{
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8005482:	2340      	movs	r3, #64	@ 0x40
{
 8005484:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 8005486:	5cc2      	ldrb	r2, [r0, r3]
{
 8005488:	0004      	movs	r4, r0
 800548a:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 800548c:	2a01      	cmp	r2, #1
 800548e:	d100      	bne.n	8005492 <I2C_Master_ISR_IT+0x12>
 8005490:	e0a8      	b.n	80055e4 <I2C_Master_ISR_IT+0x164>
 8005492:	2201      	movs	r2, #1
 8005494:	54c2      	strb	r2, [r0, r3]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005496:	3b30      	subs	r3, #48	@ 0x30
 8005498:	420b      	tst	r3, r1
 800549a:	d01b      	beq.n	80054d4 <I2C_Master_ISR_IT+0x54>
 800549c:	4233      	tst	r3, r6
 800549e:	d019      	beq.n	80054d4 <I2C_Master_ISR_IT+0x54>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054a0:	2104      	movs	r1, #4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a2:	6802      	ldr	r2, [r0, #0]
 80054a4:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054a6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80054a8:	430b      	orrs	r3, r1
 80054aa:	6443      	str	r3, [r0, #68]	@ 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054ac:	6993      	ldr	r3, [r2, #24]
 80054ae:	079b      	lsls	r3, r3, #30
 80054b0:	d501      	bpl.n	80054b6 <I2C_Master_ISR_IT+0x36>
    hi2c->Instance->TXDR = 0x00U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	6293      	str	r3, [r2, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054b6:	2301      	movs	r3, #1
 80054b8:	6991      	ldr	r1, [r2, #24]
 80054ba:	420b      	tst	r3, r1
 80054bc:	d05f      	beq.n	800557e <I2C_Master_ISR_IT+0xfe>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80054be:	2320      	movs	r3, #32
 80054c0:	422b      	tst	r3, r5
 80054c2:	d002      	beq.n	80054ca <I2C_Master_ISR_IT+0x4a>
 80054c4:	4233      	tst	r3, r6
 80054c6:	d000      	beq.n	80054ca <I2C_Master_ISR_IT+0x4a>
 80054c8:	e087      	b.n	80055da <I2C_Master_ISR_IT+0x15a>
  __HAL_UNLOCK(hi2c);
 80054ca:	2340      	movs	r3, #64	@ 0x40
 80054cc:	2200      	movs	r2, #0
  return HAL_OK;
 80054ce:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 80054d0:	54e2      	strb	r2, [r4, r3]
}
 80054d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80054d4:	2304      	movs	r3, #4
 80054d6:	422b      	tst	r3, r5
 80054d8:	d109      	bne.n	80054ee <I2C_Master_ISR_IT+0x6e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80054da:	2302      	movs	r3, #2
 80054dc:	422b      	tst	r3, r5
 80054de:	d018      	beq.n	8005512 <I2C_Master_ISR_IT+0x92>
 80054e0:	4233      	tst	r3, r6
 80054e2:	d016      	beq.n	8005512 <I2C_Master_ISR_IT+0x92>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80054e6:	6822      	ldr	r2, [r4, #0]
 80054e8:	7819      	ldrb	r1, [r3, #0]
 80054ea:	6291      	str	r1, [r2, #40]	@ 0x28
 80054ec:	e007      	b.n	80054fe <I2C_Master_ISR_IT+0x7e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80054ee:	4233      	tst	r3, r6
 80054f0:	d0f3      	beq.n	80054da <I2C_Master_ISR_IT+0x5a>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80054f2:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80054fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054fc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    hi2c->pBuffPtr++;
 80054fe:	3301      	adds	r3, #1
 8005500:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferSize--;
 8005502:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005504:	3b01      	subs	r3, #1
 8005506:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferCount--;
 8005508:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800550a:	3b01      	subs	r3, #1
 800550c:	b29b      	uxth	r3, r3
 800550e:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8005510:	e7d5      	b.n	80054be <I2C_Master_ISR_IT+0x3e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005512:	062b      	lsls	r3, r5, #24
 8005514:	d41a      	bmi.n	800554c <I2C_Master_ISR_IT+0xcc>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005516:	2340      	movs	r3, #64	@ 0x40
 8005518:	422b      	tst	r3, r5
 800551a:	d0d0      	beq.n	80054be <I2C_Master_ISR_IT+0x3e>
 800551c:	4233      	tst	r3, r6
 800551e:	d0ce      	beq.n	80054be <I2C_Master_ISR_IT+0x3e>
    if (hi2c->XferCount == 0U)
 8005520:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005522:	2a00      	cmp	r2, #0
 8005524:	d154      	bne.n	80055d0 <I2C_Master_ISR_IT+0x150>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005526:	6820      	ldr	r0, [r4, #0]
 8005528:	2280      	movs	r2, #128	@ 0x80
 800552a:	6841      	ldr	r1, [r0, #4]
 800552c:	0492      	lsls	r2, r2, #18
 800552e:	000f      	movs	r7, r1
 8005530:	4017      	ands	r7, r2
 8005532:	4211      	tst	r1, r2
 8005534:	d1c3      	bne.n	80054be <I2C_Master_ISR_IT+0x3e>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005536:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005538:	4a61      	ldr	r2, [pc, #388]	@ (80056c0 <I2C_Master_ISR_IT+0x240>)
 800553a:	4291      	cmp	r1, r2
 800553c:	d000      	beq.n	8005540 <I2C_Master_ISR_IT+0xc0>
 800553e:	e07f      	b.n	8005640 <I2C_Master_ISR_IT+0x1c0>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005540:	2380      	movs	r3, #128	@ 0x80
 8005542:	6842      	ldr	r2, [r0, #4]
 8005544:	01db      	lsls	r3, r3, #7
 8005546:	4313      	orrs	r3, r2
 8005548:	6043      	str	r3, [r0, #4]
 800554a:	e7b8      	b.n	80054be <I2C_Master_ISR_IT+0x3e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800554c:	0673      	lsls	r3, r6, #25
 800554e:	d5b6      	bpl.n	80054be <I2C_Master_ISR_IT+0x3e>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005550:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005552:	6822      	ldr	r2, [r4, #0]
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005554:	2b00      	cmp	r3, #0
 8005556:	d016      	beq.n	8005586 <I2C_Master_ISR_IT+0x106>
 8005558:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800555a:	2b00      	cmp	r3, #0
 800555c:	d113      	bne.n	8005586 <I2C_Master_ISR_IT+0x106>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800555e:	6853      	ldr	r3, [r2, #4]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005560:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005562:	059b      	lsls	r3, r3, #22
 8005564:	0d98      	lsrs	r0, r3, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005566:	29ff      	cmp	r1, #255	@ 0xff
 8005568:	d956      	bls.n	8005618 <I2C_Master_ISR_IT+0x198>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800556a:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800556c:	4955      	ldr	r1, [pc, #340]	@ (80056c4 <I2C_Master_ISR_IT+0x244>)
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800556e:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8005570:	6853      	ldr	r3, [r2, #4]
 8005572:	400b      	ands	r3, r1
 8005574:	4954      	ldr	r1, [pc, #336]	@ (80056c8 <I2C_Master_ISR_IT+0x248>)
 8005576:	4303      	orrs	r3, r0
 8005578:	430b      	orrs	r3, r1
 800557a:	6053      	str	r3, [r2, #4]
}
 800557c:	e79f      	b.n	80054be <I2C_Master_ISR_IT+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800557e:	6991      	ldr	r1, [r2, #24]
 8005580:	430b      	orrs	r3, r1
 8005582:	6193      	str	r3, [r2, #24]
 8005584:	e79b      	b.n	80054be <I2C_Master_ISR_IT+0x3e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005586:	6851      	ldr	r1, [r2, #4]
 8005588:	2380      	movs	r3, #128	@ 0x80
 800558a:	0008      	movs	r0, r1
 800558c:	049b      	lsls	r3, r3, #18
 800558e:	4018      	ands	r0, r3
 8005590:	4219      	tst	r1, r3
 8005592:	d11d      	bne.n	80055d0 <I2C_Master_ISR_IT+0x150>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005594:	2342      	movs	r3, #66	@ 0x42
 8005596:	54e0      	strb	r0, [r4, r3]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005598:	3b01      	subs	r3, #1
 800559a:	5ce1      	ldrb	r1, [r4, r3]
 800559c:	2921      	cmp	r1, #33	@ 0x21
 800559e:	d023      	beq.n	80055e8 <I2C_Master_ISR_IT+0x168>
    hi2c->State         = HAL_I2C_STATE_READY;
 80055a0:	2120      	movs	r1, #32
 80055a2:	54e1      	strb	r1, [r4, r3]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055a4:	390e      	subs	r1, #14
 80055a6:	6321      	str	r1, [r4, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80055a8:	6360      	str	r0, [r4, #52]	@ 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80055aa:	5ce1      	ldrb	r1, [r4, r3]
 80055ac:	2328      	movs	r3, #40	@ 0x28
 80055ae:	400b      	ands	r3, r1
 80055b0:	3b28      	subs	r3, #40	@ 0x28
 80055b2:	1e59      	subs	r1, r3, #1
 80055b4:	418b      	sbcs	r3, r1
 80055b6:	21af      	movs	r1, #175	@ 0xaf
 80055b8:	425b      	negs	r3, r3
 80055ba:	438b      	bics	r3, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80055bc:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80055be:	3b45      	subs	r3, #69	@ 0x45
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80055c0:	400b      	ands	r3, r1
 80055c2:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80055c4:	2340      	movs	r3, #64	@ 0x40
 80055c6:	54e0      	strb	r0, [r4, r3]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80055c8:	0020      	movs	r0, r4
 80055ca:	f7ff fc9d 	bl	8004f08 <HAL_I2C_MasterRxCpltCallback>
 80055ce:	e776      	b.n	80054be <I2C_Master_ISR_IT+0x3e>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80055d0:	2140      	movs	r1, #64	@ 0x40
 80055d2:	0020      	movs	r0, r4
 80055d4:	f7ff fe12 	bl	80051fc <I2C_ITError>
 80055d8:	e771      	b.n	80054be <I2C_Master_ISR_IT+0x3e>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80055da:	0029      	movs	r1, r5
 80055dc:	0020      	movs	r0, r4
 80055de:	f7ff fec1 	bl	8005364 <I2C_ITMasterCplt>
 80055e2:	e772      	b.n	80054ca <I2C_Master_ISR_IT+0x4a>
  __HAL_LOCK(hi2c);
 80055e4:	2002      	movs	r0, #2
 80055e6:	e774      	b.n	80054d2 <I2C_Master_ISR_IT+0x52>
    hi2c->State         = HAL_I2C_STATE_READY;
 80055e8:	3901      	subs	r1, #1
 80055ea:	54e1      	strb	r1, [r4, r3]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80055ec:	390f      	subs	r1, #15
 80055ee:	6321      	str	r1, [r4, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80055f0:	6360      	str	r0, [r4, #52]	@ 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80055f2:	5ce1      	ldrb	r1, [r4, r3]
 80055f4:	3b19      	subs	r3, #25
 80055f6:	400b      	ands	r3, r1
 80055f8:	3b28      	subs	r3, #40	@ 0x28
 80055fa:	1e59      	subs	r1, r3, #1
 80055fc:	418b      	sbcs	r3, r1
 80055fe:	21af      	movs	r1, #175	@ 0xaf
 8005600:	425b      	negs	r3, r3
 8005602:	438b      	bics	r3, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005604:	6811      	ldr	r1, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005606:	3b43      	subs	r3, #67	@ 0x43
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005608:	400b      	ands	r3, r1
 800560a:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800560c:	2340      	movs	r3, #64	@ 0x40
 800560e:	54e0      	strb	r0, [r4, r3]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005610:	0020      	movs	r0, r4
 8005612:	f7ff fc77 	bl	8004f04 <HAL_I2C_MasterTxCpltCallback>
}
 8005616:	e752      	b.n	80054be <I2C_Master_ISR_IT+0x3e>
        hi2c->XferSize = hi2c->XferCount;
 8005618:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800561a:	4929      	ldr	r1, [pc, #164]	@ (80056c0 <I2C_Master_ISR_IT+0x240>)
 800561c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
        hi2c->XferSize = hi2c->XferCount;
 800561e:	b29b      	uxth	r3, r3
 8005620:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005622:	428f      	cmp	r7, r1
 8005624:	d029      	beq.n	800567a <I2C_Master_ISR_IT+0x1fa>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005626:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005628:	b2db      	uxtb	r3, r3
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	433b      	orrs	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 800562e:	6851      	ldr	r1, [r2, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005630:	4303      	orrs	r3, r0
  MODIFY_REG(hi2c->Instance->CR2, \
 8005632:	4824      	ldr	r0, [pc, #144]	@ (80056c4 <I2C_Master_ISR_IT+0x244>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	085b      	lsrs	r3, r3, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005638:	4001      	ands	r1, r0
 800563a:	430b      	orrs	r3, r1
 800563c:	6053      	str	r3, [r2, #4]
}
 800563e:	e73e      	b.n	80054be <I2C_Master_ISR_IT+0x3e>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005640:	2242      	movs	r2, #66	@ 0x42
 8005642:	54a7      	strb	r7, [r4, r2]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005644:	3a01      	subs	r2, #1
 8005646:	5ca1      	ldrb	r1, [r4, r2]
 8005648:	2921      	cmp	r1, #33	@ 0x21
 800564a:	d022      	beq.n	8005692 <I2C_Master_ISR_IT+0x212>
    hi2c->State         = HAL_I2C_STATE_READY;
 800564c:	2120      	movs	r1, #32
 800564e:	54a1      	strb	r1, [r4, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005650:	390e      	subs	r1, #14
 8005652:	6321      	str	r1, [r4, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005654:	6367      	str	r7, [r4, #52]	@ 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005656:	5ca1      	ldrb	r1, [r4, r2]
 8005658:	2228      	movs	r2, #40	@ 0x28
 800565a:	400a      	ands	r2, r1
 800565c:	3a28      	subs	r2, #40	@ 0x28
 800565e:	1e51      	subs	r1, r2, #1
 8005660:	418a      	sbcs	r2, r1
 8005662:	21af      	movs	r1, #175	@ 0xaf
 8005664:	4252      	negs	r2, r2
 8005666:	438a      	bics	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005668:	6801      	ldr	r1, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800566a:	3a45      	subs	r2, #69	@ 0x45
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800566c:	400a      	ands	r2, r1
 800566e:	6002      	str	r2, [r0, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005670:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8005672:	54e7      	strb	r7, [r4, r3]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005674:	f7ff fc48 	bl	8004f08 <HAL_I2C_MasterRxCpltCallback>
 8005678:	e721      	b.n	80054be <I2C_Master_ISR_IT+0x3e>
  MODIFY_REG(hi2c->Instance->CR2, \
 800567a:	6851      	ldr	r1, [r2, #4]
 800567c:	4f11      	ldr	r7, [pc, #68]	@ (80056c4 <I2C_Master_ISR_IT+0x244>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800567e:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8005680:	4039      	ands	r1, r7
 8005682:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005684:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005686:	430b      	orrs	r3, r1
 8005688:	2180      	movs	r1, #128	@ 0x80
 800568a:	0489      	lsls	r1, r1, #18
 800568c:	430b      	orrs	r3, r1
 800568e:	6053      	str	r3, [r2, #4]
}
 8005690:	e715      	b.n	80054be <I2C_Master_ISR_IT+0x3e>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005692:	3901      	subs	r1, #1
 8005694:	54a1      	strb	r1, [r4, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005696:	390f      	subs	r1, #15
 8005698:	6321      	str	r1, [r4, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800569a:	6367      	str	r7, [r4, #52]	@ 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800569c:	5ca1      	ldrb	r1, [r4, r2]
 800569e:	3a19      	subs	r2, #25
 80056a0:	400a      	ands	r2, r1
 80056a2:	3a28      	subs	r2, #40	@ 0x28
 80056a4:	1e51      	subs	r1, r2, #1
 80056a6:	418a      	sbcs	r2, r1
 80056a8:	21af      	movs	r1, #175	@ 0xaf
 80056aa:	4252      	negs	r2, r2
 80056ac:	438a      	bics	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80056ae:	6801      	ldr	r1, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80056b0:	3a43      	subs	r2, #67	@ 0x43
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80056b2:	400a      	ands	r2, r1
 80056b4:	6002      	str	r2, [r0, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80056b6:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80056b8:	54e7      	strb	r7, [r4, r3]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80056ba:	f7ff fc23 	bl	8004f04 <HAL_I2C_MasterTxCpltCallback>
}
 80056be:	e6fe      	b.n	80054be <I2C_Master_ISR_IT+0x3e>
 80056c0:	ffff0000 	.word	0xffff0000
 80056c4:	fc009c00 	.word	0xfc009c00
 80056c8:	01ff0000 	.word	0x01ff0000

080056cc <I2C_Mem_ISR_DMA>:
  __HAL_LOCK(hi2c);
 80056cc:	2340      	movs	r3, #64	@ 0x40
{
 80056ce:	b570      	push	{r4, r5, r6, lr}
 80056d0:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 80056d2:	5cc0      	ldrb	r0, [r0, r3]
 80056d4:	2801      	cmp	r0, #1
 80056d6:	d100      	bne.n	80056da <I2C_Mem_ISR_DMA+0xe>
 80056d8:	e0aa      	b.n	8005830 <I2C_Mem_ISR_DMA+0x164>
 80056da:	2001      	movs	r0, #1
 80056dc:	54e0      	strb	r0, [r4, r3]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80056de:	300f      	adds	r0, #15
 80056e0:	4208      	tst	r0, r1
 80056e2:	d02b      	beq.n	800573c <I2C_Mem_ISR_DMA+0x70>
 80056e4:	4210      	tst	r0, r2
 80056e6:	d029      	beq.n	800573c <I2C_Mem_ISR_DMA+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056e8:	6822      	ldr	r2, [r4, #0]
 80056ea:	61d0      	str	r0, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056ec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80056ee:	380c      	subs	r0, #12
 80056f0:	4301      	orrs	r1, r0
 80056f2:	6461      	str	r1, [r4, #68]	@ 0x44
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80056f4:	4866      	ldr	r0, [pc, #408]	@ (8005890 <I2C_Mem_ISR_DMA+0x1c4>)
 80056f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056f8:	4281      	cmp	r1, r0
 80056fa:	d100      	bne.n	80056fe <I2C_Mem_ISR_DMA+0x32>
 80056fc:	e096      	b.n	800582c <I2C_Mem_ISR_DMA+0x160>
 80056fe:	4865      	ldr	r0, [pc, #404]	@ (8005894 <I2C_Mem_ISR_DMA+0x1c8>)
 8005700:	4281      	cmp	r1, r0
 8005702:	d100      	bne.n	8005706 <I2C_Mem_ISR_DMA+0x3a>
 8005704:	e092      	b.n	800582c <I2C_Mem_ISR_DMA+0x160>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005706:	4864      	ldr	r0, [pc, #400]	@ (8005898 <I2C_Mem_ISR_DMA+0x1cc>)
      tmpisr |= I2C_IT_STOPI;
 8005708:	1a09      	subs	r1, r1, r0
 800570a:	4248      	negs	r0, r1
 800570c:	4141      	adcs	r1, r0
 800570e:	4249      	negs	r1, r1
 8005710:	400b      	ands	r3, r1
 8005712:	3320      	adds	r3, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005714:	6811      	ldr	r1, [r2, #0]
 8005716:	430b      	orrs	r3, r1
 8005718:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800571a:	6993      	ldr	r3, [r2, #24]
 800571c:	079b      	lsls	r3, r3, #30
 800571e:	d501      	bpl.n	8005724 <I2C_Mem_ISR_DMA+0x58>
    hi2c->Instance->TXDR = 0x00U;
 8005720:	2300      	movs	r3, #0
 8005722:	6293      	str	r3, [r2, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005724:	2301      	movs	r3, #1
 8005726:	6991      	ldr	r1, [r2, #24]
 8005728:	420b      	tst	r3, r1
 800572a:	d102      	bne.n	8005732 <I2C_Mem_ISR_DMA+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800572c:	6991      	ldr	r1, [r2, #24]
 800572e:	430b      	orrs	r3, r1
 8005730:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(hi2c);
 8005732:	2340      	movs	r3, #64	@ 0x40
 8005734:	2200      	movs	r2, #0
  return HAL_OK;
 8005736:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 8005738:	54e2      	strb	r2, [r4, r3]
}
 800573a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800573c:	2302      	movs	r3, #2
 800573e:	420b      	tst	r3, r1
 8005740:	d12e      	bne.n	80057a0 <I2C_Mem_ISR_DMA+0xd4>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005742:	060b      	lsls	r3, r1, #24
 8005744:	d535      	bpl.n	80057b2 <I2C_Mem_ISR_DMA+0xe6>
 8005746:	0653      	lsls	r3, r2, #25
 8005748:	d536      	bpl.n	80057b8 <I2C_Mem_ISR_DMA+0xec>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800574a:	2190      	movs	r1, #144	@ 0x90
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005754:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005756:	2a00      	cmp	r2, #0
 8005758:	d100      	bne.n	800575c <I2C_Mem_ISR_DMA+0x90>
 800575a:	e08a      	b.n	8005872 <I2C_Mem_ISR_DMA+0x1a6>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800575c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800575e:	2aff      	cmp	r2, #255	@ 0xff
 8005760:	d879      	bhi.n	8005856 <I2C_Mem_ISR_DMA+0x18a>
        hi2c->XferSize = hi2c->XferCount;
 8005762:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005764:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
        hi2c->XferSize = hi2c->XferCount;
 8005766:	b289      	uxth	r1, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005768:	0592      	lsls	r2, r2, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800576a:	b2cd      	uxtb	r5, r1
 800576c:	042d      	lsls	r5, r5, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800576e:	0d92      	lsrs	r2, r2, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005770:	6858      	ldr	r0, [r3, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005772:	432a      	orrs	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8005774:	4d49      	ldr	r5, [pc, #292]	@ (800589c <I2C_Mem_ISR_DMA+0x1d0>)
        hi2c->XferSize = hi2c->XferCount;
 8005776:	8521      	strh	r1, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8005778:	4028      	ands	r0, r5
 800577a:	4302      	orrs	r2, r0
 800577c:	2080      	movs	r0, #128	@ 0x80
 800577e:	0480      	lsls	r0, r0, #18
 8005780:	4302      	orrs	r2, r0
 8005782:	605a      	str	r2, [r3, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8005784:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005786:	1a52      	subs	r2, r2, r1
 8005788:	b292      	uxth	r2, r2
 800578a:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800578c:	2241      	movs	r2, #65	@ 0x41
 800578e:	5ca2      	ldrb	r2, [r4, r2]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005790:	6819      	ldr	r1, [r3, #0]
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005792:	2a22      	cmp	r2, #34	@ 0x22
 8005794:	d077      	beq.n	8005886 <I2C_Mem_ISR_DMA+0x1ba>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005796:	2280      	movs	r2, #128	@ 0x80
 8005798:	01d2      	lsls	r2, r2, #7
 800579a:	430a      	orrs	r2, r1
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e7c8      	b.n	8005732 <I2C_Mem_ISR_DMA+0x66>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80057a0:	4213      	tst	r3, r2
 80057a2:	d0ce      	beq.n	8005742 <I2C_Mem_ISR_DMA+0x76>
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80057a8:	629a      	str	r2, [r3, #40]	@ 0x28
    hi2c->Memaddress = 0xFFFFFFFFU;
 80057aa:	2301      	movs	r3, #1
 80057ac:	425b      	negs	r3, r3
 80057ae:	6523      	str	r3, [r4, #80]	@ 0x50
 80057b0:	e7bf      	b.n	8005732 <I2C_Mem_ISR_DMA+0x66>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80057b2:	2340      	movs	r3, #64	@ 0x40
 80057b4:	420b      	tst	r3, r1
 80057b6:	d108      	bne.n	80057ca <I2C_Mem_ISR_DMA+0xfe>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057b8:	2320      	movs	r3, #32
 80057ba:	420b      	tst	r3, r1
 80057bc:	d0b9      	beq.n	8005732 <I2C_Mem_ISR_DMA+0x66>
 80057be:	4213      	tst	r3, r2
 80057c0:	d0b7      	beq.n	8005732 <I2C_Mem_ISR_DMA+0x66>
    I2C_ITMasterCplt(hi2c, ITFlags);
 80057c2:	0020      	movs	r0, r4
 80057c4:	f7ff fdce 	bl	8005364 <I2C_ITMasterCplt>
 80057c8:	e7b3      	b.n	8005732 <I2C_Mem_ISR_DMA+0x66>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80057ca:	4213      	tst	r3, r2
 80057cc:	d0f4      	beq.n	80057b8 <I2C_Mem_ISR_DMA+0xec>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057ce:	3301      	adds	r3, #1
 80057d0:	5ce3      	ldrb	r3, [r4, r3]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057d2:	6821      	ldr	r1, [r4, #0]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80057d4:	3b22      	subs	r3, #34	@ 0x22
 80057d6:	425a      	negs	r2, r3
 80057d8:	4153      	adcs	r3, r2
 80057da:	4a31      	ldr	r2, [pc, #196]	@ (80058a0 <I2C_Mem_ISR_DMA+0x1d4>)
 80057dc:	029b      	lsls	r3, r3, #10
 80057de:	4694      	mov	ip, r2
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057e0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80057e2:	4463      	add	r3, ip
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057e4:	2aff      	cmp	r2, #255	@ 0xff
 80057e6:	d825      	bhi.n	8005834 <I2C_Mem_ISR_DMA+0x168>
      hi2c->XferSize = hi2c->XferCount;
 80057e8:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80057ea:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      hi2c->XferSize = hi2c->XferCount;
 80057ec:	b280      	uxth	r0, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057ee:	0592      	lsls	r2, r2, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057f0:	b2c6      	uxtb	r6, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057f2:	0d92      	lsrs	r2, r2, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057f4:	0436      	lsls	r6, r6, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057f6:	4332      	orrs	r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 80057f8:	684d      	ldr	r5, [r1, #4]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	4a29      	ldr	r2, [pc, #164]	@ (80058a4 <I2C_Mem_ISR_DMA+0x1d8>)
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	402a      	ands	r2, r5
 8005802:	085b      	lsrs	r3, r3, #1
 8005804:	4313      	orrs	r3, r2
 8005806:	2280      	movs	r2, #128	@ 0x80
 8005808:	0492      	lsls	r2, r2, #18
 800580a:	4313      	orrs	r3, r2
      hi2c->XferSize = hi2c->XferCount;
 800580c:	8520      	strh	r0, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800580e:	604b      	str	r3, [r1, #4]
    hi2c->XferCount -= hi2c->XferSize;
 8005810:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005812:	1a1b      	subs	r3, r3, r0
 8005814:	b29b      	uxth	r3, r3
 8005816:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005818:	2341      	movs	r3, #65	@ 0x41
 800581a:	5ce3      	ldrb	r3, [r4, r3]
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800581c:	680a      	ldr	r2, [r1, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800581e:	2b22      	cmp	r3, #34	@ 0x22
 8005820:	d02c      	beq.n	800587c <I2C_Mem_ISR_DMA+0x1b0>
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005822:	2380      	movs	r3, #128	@ 0x80
 8005824:	01db      	lsls	r3, r3, #7
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]
 800582a:	e782      	b.n	8005732 <I2C_Mem_ISR_DMA+0x66>
 800582c:	2360      	movs	r3, #96	@ 0x60
 800582e:	e771      	b.n	8005714 <I2C_Mem_ISR_DMA+0x48>
  __HAL_LOCK(hi2c);
 8005830:	2002      	movs	r0, #2
 8005832:	e782      	b.n	800573a <I2C_Mem_ISR_DMA+0x6e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005834:	22ff      	movs	r2, #255	@ 0xff
 8005836:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005838:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
  MODIFY_REG(hi2c->Instance->CR2, \
 800583a:	6848      	ldr	r0, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800583c:	0592      	lsls	r2, r2, #22
 800583e:	0d92      	lsrs	r2, r2, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005840:	4313      	orrs	r3, r2
 8005842:	4a18      	ldr	r2, [pc, #96]	@ (80058a4 <I2C_Mem_ISR_DMA+0x1d8>)
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	4002      	ands	r2, r0
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	4313      	orrs	r3, r2
 800584c:	4a16      	ldr	r2, [pc, #88]	@ (80058a8 <I2C_Mem_ISR_DMA+0x1dc>)
}
 800584e:	20ff      	movs	r0, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8005850:	4313      	orrs	r3, r2
 8005852:	604b      	str	r3, [r1, #4]
}
 8005854:	e7dc      	b.n	8005810 <I2C_Mem_ISR_DMA+0x144>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005856:	22ff      	movs	r2, #255	@ 0xff
 8005858:	8522      	strh	r2, [r4, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800585a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
  MODIFY_REG(hi2c->Instance->CR2, \
 800585c:	480f      	ldr	r0, [pc, #60]	@ (800589c <I2C_Mem_ISR_DMA+0x1d0>)
 800585e:	6859      	ldr	r1, [r3, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005860:	0592      	lsls	r2, r2, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005862:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005864:	0d92      	lsrs	r2, r2, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005866:	430a      	orrs	r2, r1
 8005868:	490f      	ldr	r1, [pc, #60]	@ (80058a8 <I2C_Mem_ISR_DMA+0x1dc>)
 800586a:	430a      	orrs	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
}
 800586e:	21ff      	movs	r1, #255	@ 0xff
 8005870:	e788      	b.n	8005784 <I2C_Mem_ISR_DMA+0xb8>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005872:	2140      	movs	r1, #64	@ 0x40
 8005874:	0020      	movs	r0, r4
 8005876:	f7ff fcc1 	bl	80051fc <I2C_ITError>
 800587a:	e75a      	b.n	8005732 <I2C_Mem_ISR_DMA+0x66>
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800587c:	2380      	movs	r3, #128	@ 0x80
 800587e:	021b      	lsls	r3, r3, #8
 8005880:	4313      	orrs	r3, r2
 8005882:	600b      	str	r3, [r1, #0]
 8005884:	e755      	b.n	8005732 <I2C_Mem_ISR_DMA+0x66>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005886:	2280      	movs	r2, #128	@ 0x80
 8005888:	0212      	lsls	r2, r2, #8
 800588a:	430a      	orrs	r2, r1
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	e750      	b.n	8005732 <I2C_Mem_ISR_DMA+0x66>
 8005890:	080058ad 	.word	0x080058ad
 8005894:	08005fd5 	.word	0x08005fd5
 8005898:	080056cd 	.word	0x080056cd
 800589c:	fc009c00 	.word	0xfc009c00
 80058a0:	80002000 	.word	0x80002000
 80058a4:	fc009800 	.word	0xfc009800
 80058a8:	01ff0000 	.word	0x01ff0000

080058ac <I2C_Master_ISR_DMA>:
  __HAL_LOCK(hi2c);
 80058ac:	2340      	movs	r3, #64	@ 0x40
{
 80058ae:	b570      	push	{r4, r5, r6, lr}
 80058b0:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 80058b2:	5cc0      	ldrb	r0, [r0, r3]
 80058b4:	2801      	cmp	r0, #1
 80058b6:	d100      	bne.n	80058ba <I2C_Master_ISR_DMA+0xe>
 80058b8:	e089      	b.n	80059ce <I2C_Master_ISR_DMA+0x122>
 80058ba:	2001      	movs	r0, #1
 80058bc:	54e0      	strb	r0, [r4, r3]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80058be:	300f      	adds	r0, #15
 80058c0:	4208      	tst	r0, r1
 80058c2:	d02b      	beq.n	800591c <I2C_Master_ISR_DMA+0x70>
 80058c4:	4210      	tst	r0, r2
 80058c6:	d029      	beq.n	800591c <I2C_Master_ISR_DMA+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058c8:	6822      	ldr	r2, [r4, #0]
 80058ca:	61d0      	str	r0, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80058ce:	380c      	subs	r0, #12
 80058d0:	4301      	orrs	r1, r0
 80058d2:	6461      	str	r1, [r4, #68]	@ 0x44
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80058d4:	4881      	ldr	r0, [pc, #516]	@ (8005adc <I2C_Master_ISR_DMA+0x230>)
 80058d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058d8:	4281      	cmp	r1, r0
 80058da:	d100      	bne.n	80058de <I2C_Master_ISR_DMA+0x32>
 80058dc:	e075      	b.n	80059ca <I2C_Master_ISR_DMA+0x11e>
 80058de:	4880      	ldr	r0, [pc, #512]	@ (8005ae0 <I2C_Master_ISR_DMA+0x234>)
 80058e0:	4281      	cmp	r1, r0
 80058e2:	d100      	bne.n	80058e6 <I2C_Master_ISR_DMA+0x3a>
 80058e4:	e071      	b.n	80059ca <I2C_Master_ISR_DMA+0x11e>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80058e6:	487f      	ldr	r0, [pc, #508]	@ (8005ae4 <I2C_Master_ISR_DMA+0x238>)
      tmpisr |= I2C_IT_STOPI;
 80058e8:	1a09      	subs	r1, r1, r0
 80058ea:	4248      	negs	r0, r1
 80058ec:	4141      	adcs	r1, r0
 80058ee:	4249      	negs	r1, r1
 80058f0:	400b      	ands	r3, r1
 80058f2:	3320      	adds	r3, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80058f4:	6811      	ldr	r1, [r2, #0]
 80058f6:	430b      	orrs	r3, r1
 80058f8:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058fa:	6993      	ldr	r3, [r2, #24]
 80058fc:	079b      	lsls	r3, r3, #30
 80058fe:	d501      	bpl.n	8005904 <I2C_Master_ISR_DMA+0x58>
    hi2c->Instance->TXDR = 0x00U;
 8005900:	2300      	movs	r3, #0
 8005902:	6293      	str	r3, [r2, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005904:	2301      	movs	r3, #1
 8005906:	6991      	ldr	r1, [r2, #24]
 8005908:	420b      	tst	r3, r1
 800590a:	d102      	bne.n	8005912 <I2C_Master_ISR_DMA+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800590c:	6991      	ldr	r1, [r2, #24]
 800590e:	430b      	orrs	r3, r1
 8005910:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(hi2c);
 8005912:	2340      	movs	r3, #64	@ 0x40
 8005914:	2200      	movs	r2, #0
  return HAL_OK;
 8005916:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 8005918:	54e2      	strb	r2, [r4, r3]
}
 800591a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800591c:	060b      	lsls	r3, r1, #24
 800591e:	d531      	bpl.n	8005984 <I2C_Master_ISR_DMA+0xd8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005920:	2040      	movs	r0, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005922:	4210      	tst	r0, r2
 8005924:	d048      	beq.n	80059b8 <I2C_Master_ISR_DMA+0x10c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	4382      	bics	r2, r0
 800592c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800592e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005930:	6859      	ldr	r1, [r3, #4]
    if (hi2c->XferCount != 0U)
 8005932:	2a00      	cmp	r2, #0
 8005934:	d04d      	beq.n	80059d2 <I2C_Master_ISR_DMA+0x126>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005936:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005938:	0589      	lsls	r1, r1, #22
 800593a:	0d89      	lsrs	r1, r1, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800593c:	2aff      	cmp	r2, #255	@ 0xff
 800593e:	d870      	bhi.n	8005a22 <I2C_Master_ISR_DMA+0x176>
        hi2c->XferSize = hi2c->XferCount;
 8005940:	8d65      	ldrh	r5, [r4, #42]	@ 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005942:	4a69      	ldr	r2, [pc, #420]	@ (8005ae8 <I2C_Master_ISR_DMA+0x23c>)
 8005944:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8005946:	b2ad      	uxth	r5, r5
 8005948:	8525      	strh	r5, [r4, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800594a:	4290      	cmp	r0, r2
 800594c:	d100      	bne.n	8005950 <I2C_Master_ISR_DMA+0xa4>
 800594e:	e092      	b.n	8005a76 <I2C_Master_ISR_DMA+0x1ca>
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005950:	b2ee      	uxtb	r6, r5
          xfermode = hi2c->XferOptions;
 8005952:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005954:	0436      	lsls	r6, r6, #16
 8005956:	4332      	orrs	r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 8005958:	6858      	ldr	r0, [r3, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800595a:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800595c:	4963      	ldr	r1, [pc, #396]	@ (8005aec <I2C_Master_ISR_DMA+0x240>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800595e:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005960:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005962:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8005968:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800596a:	1b52      	subs	r2, r2, r5
 800596c:	b292      	uxth	r2, r2
 800596e:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005970:	2241      	movs	r2, #65	@ 0x41
 8005972:	5ca2      	ldrb	r2, [r4, r2]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005974:	6819      	ldr	r1, [r3, #0]
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005976:	2a22      	cmp	r2, #34	@ 0x22
 8005978:	d05b      	beq.n	8005a32 <I2C_Master_ISR_DMA+0x186>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800597a:	2280      	movs	r2, #128	@ 0x80
 800597c:	01d2      	lsls	r2, r2, #7
 800597e:	430a      	orrs	r2, r1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e7c6      	b.n	8005912 <I2C_Master_ISR_DMA+0x66>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005984:	2340      	movs	r3, #64	@ 0x40
 8005986:	420b      	tst	r3, r1
 8005988:	d016      	beq.n	80059b8 <I2C_Master_ISR_DMA+0x10c>
 800598a:	4213      	tst	r3, r2
 800598c:	d014      	beq.n	80059b8 <I2C_Master_ISR_DMA+0x10c>
    if (hi2c->XferCount == 0U)
 800598e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005990:	2a00      	cmp	r2, #0
 8005992:	d141      	bne.n	8005a18 <I2C_Master_ISR_DMA+0x16c>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005994:	6820      	ldr	r0, [r4, #0]
 8005996:	2280      	movs	r2, #128	@ 0x80
 8005998:	6841      	ldr	r1, [r0, #4]
 800599a:	0492      	lsls	r2, r2, #18
 800599c:	000d      	movs	r5, r1
 800599e:	4015      	ands	r5, r2
 80059a0:	4211      	tst	r1, r2
 80059a2:	d1b6      	bne.n	8005912 <I2C_Master_ISR_DMA+0x66>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80059a4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80059a6:	4a50      	ldr	r2, [pc, #320]	@ (8005ae8 <I2C_Master_ISR_DMA+0x23c>)
 80059a8:	4291      	cmp	r1, r2
 80059aa:	d147      	bne.n	8005a3c <I2C_Master_ISR_DMA+0x190>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059ac:	2380      	movs	r3, #128	@ 0x80
 80059ae:	6842      	ldr	r2, [r0, #4]
 80059b0:	01db      	lsls	r3, r3, #7
 80059b2:	4313      	orrs	r3, r2
 80059b4:	6043      	str	r3, [r0, #4]
 80059b6:	e7ac      	b.n	8005912 <I2C_Master_ISR_DMA+0x66>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059b8:	2320      	movs	r3, #32
 80059ba:	420b      	tst	r3, r1
 80059bc:	d0a9      	beq.n	8005912 <I2C_Master_ISR_DMA+0x66>
 80059be:	4213      	tst	r3, r2
 80059c0:	d0a7      	beq.n	8005912 <I2C_Master_ISR_DMA+0x66>
    I2C_ITMasterCplt(hi2c, ITFlags);
 80059c2:	0020      	movs	r0, r4
 80059c4:	f7ff fcce 	bl	8005364 <I2C_ITMasterCplt>
 80059c8:	e7a3      	b.n	8005912 <I2C_Master_ISR_DMA+0x66>
 80059ca:	2360      	movs	r3, #96	@ 0x60
 80059cc:	e792      	b.n	80058f4 <I2C_Master_ISR_DMA+0x48>
  __HAL_LOCK(hi2c);
 80059ce:	2002      	movs	r0, #2
 80059d0:	e7a3      	b.n	800591a <I2C_Master_ISR_DMA+0x6e>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80059d2:	2280      	movs	r2, #128	@ 0x80
 80059d4:	000d      	movs	r5, r1
 80059d6:	0492      	lsls	r2, r2, #18
 80059d8:	4015      	ands	r5, r2
 80059da:	4211      	tst	r1, r2
 80059dc:	d11c      	bne.n	8005a18 <I2C_Master_ISR_DMA+0x16c>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059de:	2242      	movs	r2, #66	@ 0x42
 80059e0:	54a5      	strb	r5, [r4, r2]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80059e2:	3a01      	subs	r2, #1
 80059e4:	5ca1      	ldrb	r1, [r4, r2]
 80059e6:	2921      	cmp	r1, #33	@ 0x21
 80059e8:	d04a      	beq.n	8005a80 <I2C_Master_ISR_DMA+0x1d4>
    hi2c->State         = HAL_I2C_STATE_READY;
 80059ea:	2120      	movs	r1, #32
 80059ec:	54a1      	strb	r1, [r4, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059ee:	390e      	subs	r1, #14
 80059f0:	6321      	str	r1, [r4, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80059f2:	6365      	str	r5, [r4, #52]	@ 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80059f4:	5ca1      	ldrb	r1, [r4, r2]
 80059f6:	2228      	movs	r2, #40	@ 0x28
 80059f8:	400a      	ands	r2, r1
 80059fa:	3a28      	subs	r2, #40	@ 0x28
 80059fc:	1e51      	subs	r1, r2, #1
 80059fe:	418a      	sbcs	r2, r1
 8005a00:	21af      	movs	r1, #175	@ 0xaf
 8005a02:	4252      	negs	r2, r2
 8005a04:	438a      	bics	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005a06:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a08:	3a45      	subs	r2, #69	@ 0x45
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005a0a:	400a      	ands	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8005a0e:	5425      	strb	r5, [r4, r0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a10:	0020      	movs	r0, r4
 8005a12:	f7ff fa79 	bl	8004f08 <HAL_I2C_MasterRxCpltCallback>
 8005a16:	e77c      	b.n	8005912 <I2C_Master_ISR_DMA+0x66>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005a18:	2140      	movs	r1, #64	@ 0x40
 8005a1a:	0020      	movs	r0, r4
 8005a1c:	f7ff fbee 	bl	80051fc <I2C_ITError>
 8005a20:	e777      	b.n	8005912 <I2C_Master_ISR_DMA+0x66>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a22:	22ff      	movs	r2, #255	@ 0xff
 8005a24:	26ff      	movs	r6, #255	@ 0xff
 8005a26:	8522      	strh	r2, [r4, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005a28:	2280      	movs	r2, #128	@ 0x80
 8005a2a:	25ff      	movs	r5, #255	@ 0xff
 8005a2c:	0436      	lsls	r6, r6, #16
 8005a2e:	0452      	lsls	r2, r2, #17
 8005a30:	e791      	b.n	8005956 <I2C_Master_ISR_DMA+0xaa>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005a32:	2280      	movs	r2, #128	@ 0x80
 8005a34:	0212      	lsls	r2, r2, #8
 8005a36:	430a      	orrs	r2, r1
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	e76a      	b.n	8005912 <I2C_Master_ISR_DMA+0x66>
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3c:	2242      	movs	r2, #66	@ 0x42
 8005a3e:	54a5      	strb	r5, [r4, r2]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a40:	3a01      	subs	r2, #1
 8005a42:	5ca1      	ldrb	r1, [r4, r2]
 8005a44:	2921      	cmp	r1, #33	@ 0x21
 8005a46:	d032      	beq.n	8005aae <I2C_Master_ISR_DMA+0x202>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a48:	2120      	movs	r1, #32
 8005a4a:	54a1      	strb	r1, [r4, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a4c:	390e      	subs	r1, #14
 8005a4e:	6321      	str	r1, [r4, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005a50:	6365      	str	r5, [r4, #52]	@ 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a52:	5ca1      	ldrb	r1, [r4, r2]
 8005a54:	2228      	movs	r2, #40	@ 0x28
 8005a56:	400a      	ands	r2, r1
 8005a58:	3a28      	subs	r2, #40	@ 0x28
 8005a5a:	1e51      	subs	r1, r2, #1
 8005a5c:	418a      	sbcs	r2, r1
 8005a5e:	21af      	movs	r1, #175	@ 0xaf
 8005a60:	4252      	negs	r2, r2
 8005a62:	438a      	bics	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005a64:	6801      	ldr	r1, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a66:	3a45      	subs	r2, #69	@ 0x45
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005a68:	400a      	ands	r2, r1
 8005a6a:	6002      	str	r2, [r0, #0]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a6c:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8005a6e:	54e5      	strb	r5, [r4, r3]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a70:	f7ff fa4a 	bl	8004f08 <HAL_I2C_MasterRxCpltCallback>
 8005a74:	e74d      	b.n	8005912 <I2C_Master_ISR_DMA+0x66>
          xfermode = I2C_AUTOEND_MODE;
 8005a76:	2280      	movs	r2, #128	@ 0x80
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a78:	b2ee      	uxtb	r6, r5
 8005a7a:	0436      	lsls	r6, r6, #16
          xfermode = I2C_AUTOEND_MODE;
 8005a7c:	0492      	lsls	r2, r2, #18
 8005a7e:	e76a      	b.n	8005956 <I2C_Master_ISR_DMA+0xaa>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a80:	3901      	subs	r1, #1
 8005a82:	54a1      	strb	r1, [r4, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a84:	390f      	subs	r1, #15
 8005a86:	6321      	str	r1, [r4, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005a88:	6365      	str	r5, [r4, #52]	@ 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a8a:	5ca1      	ldrb	r1, [r4, r2]
 8005a8c:	3a19      	subs	r2, #25
 8005a8e:	400a      	ands	r2, r1
 8005a90:	3a28      	subs	r2, #40	@ 0x28
 8005a92:	1e51      	subs	r1, r2, #1
 8005a94:	418a      	sbcs	r2, r1
 8005a96:	21af      	movs	r1, #175	@ 0xaf
 8005a98:	4252      	negs	r2, r2
 8005a9a:	438a      	bics	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005a9c:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a9e:	3a43      	subs	r2, #67	@ 0x43
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005aa0:	400a      	ands	r2, r1
 8005aa2:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8005aa4:	5425      	strb	r5, [r4, r0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005aa6:	0020      	movs	r0, r4
 8005aa8:	f7ff fa2c 	bl	8004f04 <HAL_I2C_MasterTxCpltCallback>
}
 8005aac:	e731      	b.n	8005912 <I2C_Master_ISR_DMA+0x66>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005aae:	3901      	subs	r1, #1
 8005ab0:	54a1      	strb	r1, [r4, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ab2:	390f      	subs	r1, #15
 8005ab4:	6321      	str	r1, [r4, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005ab6:	6365      	str	r5, [r4, #52]	@ 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ab8:	5ca1      	ldrb	r1, [r4, r2]
 8005aba:	3a19      	subs	r2, #25
 8005abc:	400a      	ands	r2, r1
 8005abe:	3a28      	subs	r2, #40	@ 0x28
 8005ac0:	1e51      	subs	r1, r2, #1
 8005ac2:	418a      	sbcs	r2, r1
 8005ac4:	21af      	movs	r1, #175	@ 0xaf
 8005ac6:	4252      	negs	r2, r2
 8005ac8:	438a      	bics	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005aca:	6801      	ldr	r1, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005acc:	3a43      	subs	r2, #67	@ 0x43
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005ace:	400a      	ands	r2, r1
 8005ad0:	6002      	str	r2, [r0, #0]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ad2:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8005ad4:	54e5      	strb	r5, [r4, r3]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ad6:	f7ff fa15 	bl	8004f04 <HAL_I2C_MasterTxCpltCallback>
}
 8005ada:	e71a      	b.n	8005912 <I2C_Master_ISR_DMA+0x66>
 8005adc:	080058ad 	.word	0x080058ad
 8005ae0:	08005fd5 	.word	0x08005fd5
 8005ae4:	080056cd 	.word	0x080056cd
 8005ae8:	ffff0000 	.word	0xffff0000
 8005aec:	fc009c00 	.word	0xfc009c00

08005af0 <I2C_DMAMasterTransmitCplt>:
{
 8005af0:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005af2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005af4:	4927      	ldr	r1, [pc, #156]	@ (8005b94 <I2C_DMAMasterTransmitCplt+0xa4>)
 8005af6:	6822      	ldr	r2, [r4, #0]
 8005af8:	6813      	ldr	r3, [r2, #0]
 8005afa:	400b      	ands	r3, r1
 8005afc:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8005afe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d112      	bne.n	8005b2a <I2C_DMAMasterTransmitCplt+0x3a>
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005b04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b06:	4924      	ldr	r1, [pc, #144]	@ (8005b98 <I2C_DMAMasterTransmitCplt+0xa8>)
 8005b08:	428b      	cmp	r3, r1
 8005b0a:	d00c      	beq.n	8005b26 <I2C_DMAMasterTransmitCplt+0x36>
 8005b0c:	4923      	ldr	r1, [pc, #140]	@ (8005b9c <I2C_DMAMasterTransmitCplt+0xac>)
 8005b0e:	428b      	cmp	r3, r1
 8005b10:	d009      	beq.n	8005b26 <I2C_DMAMasterTransmitCplt+0x36>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005b12:	4923      	ldr	r1, [pc, #140]	@ (8005ba0 <I2C_DMAMasterTransmitCplt+0xb0>)
      tmpisr |= I2C_IT_STOPI;
 8005b14:	1a5b      	subs	r3, r3, r1
 8005b16:	4259      	negs	r1, r3
 8005b18:	414b      	adcs	r3, r1
 8005b1a:	019b      	lsls	r3, r3, #6
 8005b1c:	3320      	adds	r3, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005b1e:	6811      	ldr	r1, [r2, #0]
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6013      	str	r3, [r2, #0]
}
 8005b24:	bd10      	pop	{r4, pc}
 8005b26:	2360      	movs	r3, #96	@ 0x60
 8005b28:	e7f9      	b.n	8005b1e <I2C_DMAMasterTransmitCplt+0x2e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005b2a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005b2c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005b2e:	18c9      	adds	r1, r1, r3
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b30:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8005b32:	6261      	str	r1, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b34:	2bff      	cmp	r3, #255	@ 0xff
 8005b36:	d819      	bhi.n	8005b6c <I2C_DMAMasterTransmitCplt+0x7c>
      hi2c->XferSize = hi2c->XferCount;
 8005b38:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005b3a:	3228      	adds	r2, #40	@ 0x28
      hi2c->XferSize = hi2c->XferCount;
 8005b3c:	b280      	uxth	r0, r0
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005b3e:	0003      	movs	r3, r0
 8005b40:	8520      	strh	r0, [r4, #40]	@ 0x28
 8005b42:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005b44:	f7fb fe60 	bl	8001808 <HAL_DMA_Start_IT>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d118      	bne.n	8005b7e <I2C_DMAMasterTransmitCplt+0x8e>
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005b4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b4e:	4a12      	ldr	r2, [pc, #72]	@ (8005b98 <I2C_DMAMasterTransmitCplt+0xa8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d019      	beq.n	8005b88 <I2C_DMAMasterTransmitCplt+0x98>
 8005b54:	4a11      	ldr	r2, [pc, #68]	@ (8005b9c <I2C_DMAMasterTransmitCplt+0xac>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d016      	beq.n	8005b88 <I2C_DMAMasterTransmitCplt+0x98>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005b5a:	4a11      	ldr	r2, [pc, #68]	@ (8005ba0 <I2C_DMAMasterTransmitCplt+0xb0>)
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <I2C_DMAMasterTransmitCplt+0x9a>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005b62:	6822      	ldr	r2, [r4, #0]
 8005b64:	6813      	ldr	r3, [r2, #0]
 8005b66:	430b      	orrs	r3, r1
 8005b68:	6013      	str	r3, [r2, #0]
}
 8005b6a:	e7db      	b.n	8005b24 <I2C_DMAMasterTransmitCplt+0x34>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b6c:	20ff      	movs	r0, #255	@ 0xff
 8005b6e:	23ff      	movs	r3, #255	@ 0xff
 8005b70:	8520      	strh	r0, [r4, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005b72:	3228      	adds	r2, #40	@ 0x28
 8005b74:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005b76:	f7fb fe47 	bl	8001808 <HAL_DMA_Start_IT>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d0e6      	beq.n	8005b4c <I2C_DMAMasterTransmitCplt+0x5c>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005b7e:	2110      	movs	r1, #16
 8005b80:	0020      	movs	r0, r4
 8005b82:	f7ff fb3b 	bl	80051fc <I2C_ITError>
 8005b86:	e7cd      	b.n	8005b24 <I2C_DMAMasterTransmitCplt+0x34>
 8005b88:	4a05      	ldr	r2, [pc, #20]	@ (8005ba0 <I2C_DMAMasterTransmitCplt+0xb0>)
    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	1e5a      	subs	r2, r3, #1
 8005b8e:	4193      	sbcs	r3, r2
 8005b90:	0199      	lsls	r1, r3, #6
 8005b92:	e7e6      	b.n	8005b62 <I2C_DMAMasterTransmitCplt+0x72>
 8005b94:	ffffbfff 	.word	0xffffbfff
 8005b98:	080058ad 	.word	0x080058ad
 8005b9c:	08005fd5 	.word	0x08005fd5
 8005ba0:	080056cd 	.word	0x080056cd

08005ba4 <I2C_DMAMasterReceiveCplt>:
{
 8005ba4:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ba6:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ba8:	4a27      	ldr	r2, [pc, #156]	@ (8005c48 <I2C_DMAMasterReceiveCplt+0xa4>)
 8005baa:	6821      	ldr	r1, [r4, #0]
 8005bac:	680b      	ldr	r3, [r1, #0]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]
  if (hi2c->XferCount == 0U)
 8005bb2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d112      	bne.n	8005bde <I2C_DMAMasterReceiveCplt+0x3a>
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005bb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005bba:	4a24      	ldr	r2, [pc, #144]	@ (8005c4c <I2C_DMAMasterReceiveCplt+0xa8>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d00c      	beq.n	8005bda <I2C_DMAMasterReceiveCplt+0x36>
 8005bc0:	4a23      	ldr	r2, [pc, #140]	@ (8005c50 <I2C_DMAMasterReceiveCplt+0xac>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <I2C_DMAMasterReceiveCplt+0x36>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005bc6:	4a23      	ldr	r2, [pc, #140]	@ (8005c54 <I2C_DMAMasterReceiveCplt+0xb0>)
      tmpisr |= I2C_IT_STOPI;
 8005bc8:	1a9b      	subs	r3, r3, r2
 8005bca:	425a      	negs	r2, r3
 8005bcc:	4153      	adcs	r3, r2
 8005bce:	019b      	lsls	r3, r3, #6
 8005bd0:	3320      	adds	r3, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005bd2:	680a      	ldr	r2, [r1, #0]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	600b      	str	r3, [r1, #0]
}
 8005bd8:	bd10      	pop	{r4, pc}
 8005bda:	2360      	movs	r3, #96	@ 0x60
 8005bdc:	e7f9      	b.n	8005bd2 <I2C_DMAMasterReceiveCplt+0x2e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005bde:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005be0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005be2:	18d2      	adds	r2, r2, r3
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005be4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8005be6:	6262      	str	r2, [r4, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005be8:	2bff      	cmp	r3, #255	@ 0xff
 8005bea:	d819      	bhi.n	8005c20 <I2C_DMAMasterReceiveCplt+0x7c>
      hi2c->XferSize = hi2c->XferCount;
 8005bec:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005bee:	3124      	adds	r1, #36	@ 0x24
      hi2c->XferSize = hi2c->XferCount;
 8005bf0:	b280      	uxth	r0, r0
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005bf2:	0003      	movs	r3, r0
 8005bf4:	8520      	strh	r0, [r4, #40]	@ 0x28
 8005bf6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005bf8:	f7fb fe06 	bl	8001808 <HAL_DMA_Start_IT>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d118      	bne.n	8005c32 <I2C_DMAMasterReceiveCplt+0x8e>
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005c00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c02:	4a12      	ldr	r2, [pc, #72]	@ (8005c4c <I2C_DMAMasterReceiveCplt+0xa8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d019      	beq.n	8005c3c <I2C_DMAMasterReceiveCplt+0x98>
 8005c08:	4a11      	ldr	r2, [pc, #68]	@ (8005c50 <I2C_DMAMasterReceiveCplt+0xac>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d016      	beq.n	8005c3c <I2C_DMAMasterReceiveCplt+0x98>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005c0e:	4a11      	ldr	r2, [pc, #68]	@ (8005c54 <I2C_DMAMasterReceiveCplt+0xb0>)
 8005c10:	2100      	movs	r1, #0
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <I2C_DMAMasterReceiveCplt+0x9a>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005c16:	6822      	ldr	r2, [r4, #0]
 8005c18:	6813      	ldr	r3, [r2, #0]
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	6013      	str	r3, [r2, #0]
}
 8005c1e:	e7db      	b.n	8005bd8 <I2C_DMAMasterReceiveCplt+0x34>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c20:	20ff      	movs	r0, #255	@ 0xff
 8005c22:	23ff      	movs	r3, #255	@ 0xff
 8005c24:	8520      	strh	r0, [r4, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005c26:	3124      	adds	r1, #36	@ 0x24
 8005c28:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005c2a:	f7fb fded 	bl	8001808 <HAL_DMA_Start_IT>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d0e6      	beq.n	8005c00 <I2C_DMAMasterReceiveCplt+0x5c>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005c32:	2110      	movs	r1, #16
 8005c34:	0020      	movs	r0, r4
 8005c36:	f7ff fae1 	bl	80051fc <I2C_ITError>
 8005c3a:	e7cd      	b.n	8005bd8 <I2C_DMAMasterReceiveCplt+0x34>
 8005c3c:	4a05      	ldr	r2, [pc, #20]	@ (8005c54 <I2C_DMAMasterReceiveCplt+0xb0>)
    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	1e5a      	subs	r2, r3, #1
 8005c42:	4193      	sbcs	r3, r2
 8005c44:	0199      	lsls	r1, r3, #6
 8005c46:	e7e6      	b.n	8005c16 <I2C_DMAMasterReceiveCplt+0x72>
 8005c48:	ffff7fff 	.word	0xffff7fff
 8005c4c:	080058ad 	.word	0x080058ad
 8005c50:	08005fd5 	.word	0x08005fd5
 8005c54:	080056cd 	.word	0x080056cd

08005c58 <I2C_Mem_ISR_IT>:
{
 8005c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8005c5a:	2340      	movs	r3, #64	@ 0x40
{
 8005c5c:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 8005c5e:	5cc2      	ldrb	r2, [r0, r3]
{
 8005c60:	0004      	movs	r4, r0
 8005c62:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 8005c64:	2a01      	cmp	r2, #1
 8005c66:	d100      	bne.n	8005c6a <I2C_Mem_ISR_IT+0x12>
 8005c68:	e08b      	b.n	8005d82 <I2C_Mem_ISR_IT+0x12a>
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	54c2      	strb	r2, [r0, r3]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c6e:	3b30      	subs	r3, #48	@ 0x30
 8005c70:	420b      	tst	r3, r1
 8005c72:	d01c      	beq.n	8005cae <I2C_Mem_ISR_IT+0x56>
 8005c74:	4233      	tst	r3, r6
 8005c76:	d01a      	beq.n	8005cae <I2C_Mem_ISR_IT+0x56>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c78:	2104      	movs	r1, #4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c7a:	6802      	ldr	r2, [r0, #0]
 8005c7c:	61d3      	str	r3, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c7e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005c80:	430b      	orrs	r3, r1
 8005c82:	6443      	str	r3, [r0, #68]	@ 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005c84:	6993      	ldr	r3, [r2, #24]
 8005c86:	079b      	lsls	r3, r3, #30
 8005c88:	d501      	bpl.n	8005c8e <I2C_Mem_ISR_IT+0x36>
    hi2c->Instance->TXDR = 0x00U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	6293      	str	r3, [r2, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c8e:	2301      	movs	r3, #1
 8005c90:	6991      	ldr	r1, [r2, #24]
 8005c92:	420b      	tst	r3, r1
 8005c94:	d100      	bne.n	8005c98 <I2C_Mem_ISR_IT+0x40>
 8005c96:	e066      	b.n	8005d66 <I2C_Mem_ISR_IT+0x10e>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c98:	2320      	movs	r3, #32
 8005c9a:	422b      	tst	r3, r5
 8005c9c:	d002      	beq.n	8005ca4 <I2C_Mem_ISR_IT+0x4c>
 8005c9e:	4233      	tst	r3, r6
 8005ca0:	d000      	beq.n	8005ca4 <I2C_Mem_ISR_IT+0x4c>
 8005ca2:	e069      	b.n	8005d78 <I2C_Mem_ISR_IT+0x120>
  __HAL_UNLOCK(hi2c);
 8005ca4:	2340      	movs	r3, #64	@ 0x40
 8005ca6:	2200      	movs	r2, #0
  return HAL_OK;
 8005ca8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 8005caa:	54e2      	strb	r2, [r4, r3]
}
 8005cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005cae:	2304      	movs	r3, #4
 8005cb0:	422b      	tst	r3, r5
 8005cb2:	d10e      	bne.n	8005cd2 <I2C_Mem_ISR_IT+0x7a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	422b      	tst	r3, r5
 8005cb8:	d01d      	beq.n	8005cf6 <I2C_Mem_ISR_IT+0x9e>
 8005cba:	4233      	tst	r3, r6
 8005cbc:	d01b      	beq.n	8005cf6 <I2C_Mem_ISR_IT+0x9e>
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8005cbe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cc0:	6822      	ldr	r2, [r4, #0]
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	d074      	beq.n	8005db0 <I2C_Mem_ISR_IT+0x158>
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8005cc6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005cc8:	6293      	str	r3, [r2, #40]	@ 0x28
      hi2c->Memaddress = 0xFFFFFFFFU;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	425b      	negs	r3, r3
 8005cce:	6523      	str	r3, [r4, #80]	@ 0x50
 8005cd0:	e7e2      	b.n	8005c98 <I2C_Mem_ISR_IT+0x40>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005cd2:	4233      	tst	r3, r6
 8005cd4:	d0ee      	beq.n	8005cb4 <I2C_Mem_ISR_IT+0x5c>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005cd6:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cdc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005cde:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ce0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->pBuffPtr++;
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8005ce6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8005cec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8005cf4:	e7d0      	b.n	8005c98 <I2C_Mem_ISR_IT+0x40>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005cf6:	062b      	lsls	r3, r5, #24
 8005cf8:	d513      	bpl.n	8005d22 <I2C_Mem_ISR_IT+0xca>
 8005cfa:	0673      	lsls	r3, r6, #25
 8005cfc:	d5cc      	bpl.n	8005c98 <I2C_Mem_ISR_IT+0x40>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cfe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d034      	beq.n	8005d6e <I2C_Mem_ISR_IT+0x116>
 8005d04:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d131      	bne.n	8005d6e <I2C_Mem_ISR_IT+0x116>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d0a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d0c:	6821      	ldr	r1, [r4, #0]
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d0e:	2bff      	cmp	r3, #255	@ 0xff
 8005d10:	d952      	bls.n	8005db8 <I2C_Mem_ISR_IT+0x160>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d12:	23ff      	movs	r3, #255	@ 0xff
 8005d14:	8523      	strh	r3, [r4, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005d16:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d18:	4830      	ldr	r0, [pc, #192]	@ (8005ddc <I2C_Mem_ISR_IT+0x184>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d1a:	059b      	lsls	r3, r3, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d1c:	684a      	ldr	r2, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d1e:	0d9b      	lsrs	r3, r3, #22
 8005d20:	e01b      	b.n	8005d5a <I2C_Mem_ISR_IT+0x102>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005d22:	2340      	movs	r3, #64	@ 0x40
 8005d24:	422b      	tst	r3, r5
 8005d26:	d0b7      	beq.n	8005c98 <I2C_Mem_ISR_IT+0x40>
 8005d28:	4233      	tst	r3, r6
 8005d2a:	d0b5      	beq.n	8005c98 <I2C_Mem_ISR_IT+0x40>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	5ce3      	ldrb	r3, [r4, r3]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d30:	6821      	ldr	r1, [r4, #0]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005d32:	3b22      	subs	r3, #34	@ 0x22
 8005d34:	425a      	negs	r2, r3
 8005d36:	4153      	adcs	r3, r2
 8005d38:	4a29      	ldr	r2, [pc, #164]	@ (8005de0 <I2C_Mem_ISR_IT+0x188>)
 8005d3a:	029b      	lsls	r3, r3, #10
 8005d3c:	4694      	mov	ip, r2
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d3e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005d40:	4463      	add	r3, ip
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d42:	2aff      	cmp	r2, #255	@ 0xff
 8005d44:	d91f      	bls.n	8005d86 <I2C_Mem_ISR_IT+0x12e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d46:	22ff      	movs	r2, #255	@ 0xff
 8005d48:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005d4a:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d4c:	6848      	ldr	r0, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d4e:	0592      	lsls	r2, r2, #22
 8005d50:	0d92      	lsrs	r2, r2, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d52:	4313      	orrs	r3, r2
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4a23      	ldr	r2, [pc, #140]	@ (8005de4 <I2C_Mem_ISR_IT+0x18c>)
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	4002      	ands	r2, r0
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	4a22      	ldr	r2, [pc, #136]	@ (8005de8 <I2C_Mem_ISR_IT+0x190>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	604b      	str	r3, [r1, #4]
}
 8005d64:	e798      	b.n	8005c98 <I2C_Mem_ISR_IT+0x40>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d66:	6991      	ldr	r1, [r2, #24]
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6193      	str	r3, [r2, #24]
 8005d6c:	e794      	b.n	8005c98 <I2C_Mem_ISR_IT+0x40>
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d6e:	2140      	movs	r1, #64	@ 0x40
 8005d70:	0020      	movs	r0, r4
 8005d72:	f7ff fa43 	bl	80051fc <I2C_ITError>
 8005d76:	e78f      	b.n	8005c98 <I2C_Mem_ISR_IT+0x40>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005d78:	0029      	movs	r1, r5
 8005d7a:	0020      	movs	r0, r4
 8005d7c:	f7ff faf2 	bl	8005364 <I2C_ITMasterCplt>
 8005d80:	e790      	b.n	8005ca4 <I2C_Mem_ISR_IT+0x4c>
  __HAL_LOCK(hi2c);
 8005d82:	2002      	movs	r0, #2
 8005d84:	e792      	b.n	8005cac <I2C_Mem_ISR_IT+0x54>
      hi2c->XferSize = hi2c->XferCount;
 8005d86:	8d67      	ldrh	r7, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005d88:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      hi2c->XferSize = hi2c->XferCount;
 8005d8a:	b2bf      	uxth	r7, r7
 8005d8c:	8527      	strh	r7, [r4, #40]	@ 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d8e:	0592      	lsls	r2, r2, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d90:	b2ff      	uxtb	r7, r7
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d92:	0d92      	lsrs	r2, r2, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005d94:	043f      	lsls	r7, r7, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005d96:	433a      	orrs	r2, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 8005d98:	6848      	ldr	r0, [r1, #4]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	4a11      	ldr	r2, [pc, #68]	@ (8005de4 <I2C_Mem_ISR_IT+0x18c>)
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	4010      	ands	r0, r2
 8005da2:	2280      	movs	r2, #128	@ 0x80
 8005da4:	085b      	lsrs	r3, r3, #1
 8005da6:	4303      	orrs	r3, r0
 8005da8:	0492      	lsls	r2, r2, #18
 8005daa:	4313      	orrs	r3, r2
 8005dac:	604b      	str	r3, [r1, #4]
}
 8005dae:	e773      	b.n	8005c98 <I2C_Mem_ISR_IT+0x40>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005db0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005db2:	7819      	ldrb	r1, [r3, #0]
 8005db4:	6291      	str	r1, [r2, #40]	@ 0x28
 8005db6:	e794      	b.n	8005ce2 <I2C_Mem_ISR_IT+0x8a>
        hi2c->XferSize = hi2c->XferCount;
 8005db8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005dba:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
        hi2c->XferSize = hi2c->XferCount;
 8005dbc:	b292      	uxth	r2, r2
 8005dbe:	8522      	strh	r2, [r4, #40]	@ 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dc0:	059b      	lsls	r3, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dc6:	0d9b      	lsrs	r3, r3, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8005dc8:	6848      	ldr	r0, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dca:	4313      	orrs	r3, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8005dcc:	4a03      	ldr	r2, [pc, #12]	@ (8005ddc <I2C_Mem_ISR_IT+0x184>)
 8005dce:	4002      	ands	r2, r0
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	2280      	movs	r2, #128	@ 0x80
 8005dd4:	0492      	lsls	r2, r2, #18
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	604b      	str	r3, [r1, #4]
}
 8005dda:	e75d      	b.n	8005c98 <I2C_Mem_ISR_IT+0x40>
 8005ddc:	fc009c00 	.word	0xfc009c00
 8005de0:	80002000 	.word	0x80002000
 8005de4:	fc009800 	.word	0xfc009800
 8005de8:	01ff0000 	.word	0x01ff0000

08005dec <HAL_I2C_ER_IRQHandler>:
{
 8005dec:	b570      	push	{r4, r5, r6, lr}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005dee:	2480      	movs	r4, #128	@ 0x80
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005df0:	6802      	ldr	r2, [r0, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005df2:	0064      	lsls	r4, r4, #1
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005df4:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005df6:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005df8:	4223      	tst	r3, r4
 8005dfa:	d02a      	beq.n	8005e52 <HAL_I2C_ER_IRQHandler+0x66>
 8005dfc:	060d      	lsls	r5, r1, #24
 8005dfe:	d51b      	bpl.n	8005e38 <HAL_I2C_ER_IRQHandler+0x4c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005e00:	2501      	movs	r5, #1
 8005e02:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8005e04:	4329      	orrs	r1, r5
 8005e06:	6441      	str	r1, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e08:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005e0a:	0559      	lsls	r1, r3, #21
 8005e0c:	d526      	bpl.n	8005e5c <HAL_I2C_ER_IRQHandler+0x70>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005e0e:	2408      	movs	r4, #8
 8005e10:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8005e12:	4321      	orrs	r1, r4
 8005e14:	6441      	str	r1, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e16:	2180      	movs	r1, #128	@ 0x80
 8005e18:	00c9      	lsls	r1, r1, #3
 8005e1a:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005e1c:	059b      	lsls	r3, r3, #22
 8005e1e:	d506      	bpl.n	8005e2e <HAL_I2C_ER_IRQHandler+0x42>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005e20:	2102      	movs	r1, #2
 8005e22:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005e24:	430b      	orrs	r3, r1
 8005e26:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e28:	2380      	movs	r3, #128	@ 0x80
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	61d3      	str	r3, [r2, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005e2e:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8005e30:	6c41      	ldr	r1, [r0, #68]	@ 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005e32:	420b      	tst	r3, r1
 8005e34:	d10a      	bne.n	8005e4c <HAL_I2C_ER_IRQHandler+0x60>
}
 8005e36:	bd70      	pop	{r4, r5, r6, pc}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005e38:	055c      	lsls	r4, r3, #21
 8005e3a:	d4f8      	bmi.n	8005e2e <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005e3c:	059b      	lsls	r3, r3, #22
 8005e3e:	d5f6      	bpl.n	8005e2e <HAL_I2C_ER_IRQHandler+0x42>
 8005e40:	0609      	lsls	r1, r1, #24
 8005e42:	d4ed      	bmi.n	8005e20 <HAL_I2C_ER_IRQHandler+0x34>
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005e44:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8005e46:	6c41      	ldr	r1, [r0, #68]	@ 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005e48:	420b      	tst	r3, r1
 8005e4a:	d0f4      	beq.n	8005e36 <HAL_I2C_ER_IRQHandler+0x4a>
    I2C_ITError(hi2c, tmperror);
 8005e4c:	f7ff f9d6 	bl	80051fc <I2C_ITError>
}
 8005e50:	e7f1      	b.n	8005e36 <HAL_I2C_ER_IRQHandler+0x4a>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005e52:	055c      	lsls	r4, r3, #21
 8005e54:	d5f2      	bpl.n	8005e3c <HAL_I2C_ER_IRQHandler+0x50>
 8005e56:	0609      	lsls	r1, r1, #24
 8005e58:	d4d9      	bmi.n	8005e0e <HAL_I2C_ER_IRQHandler+0x22>
 8005e5a:	e7e8      	b.n	8005e2e <HAL_I2C_ER_IRQHandler+0x42>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005e5c:	059b      	lsls	r3, r3, #22
 8005e5e:	d4df      	bmi.n	8005e20 <HAL_I2C_ER_IRQHandler+0x34>
 8005e60:	e7e5      	b.n	8005e2e <HAL_I2C_ER_IRQHandler+0x42>
 8005e62:	46c0      	nop			@ (mov r8, r8)

08005e64 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e68:	2541      	movs	r5, #65	@ 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e6a:	2620      	movs	r6, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e6c:	6803      	ldr	r3, [r0, #0]
 8005e6e:	6818      	ldr	r0, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e70:	5d62      	ldrb	r2, [r4, r5]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e72:	61de      	str	r6, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e74:	3e18      	subs	r6, #24
 8005e76:	43b2      	bics	r2, r6
 8005e78:	2a21      	cmp	r2, #33	@ 0x21
 8005e7a:	d04e      	beq.n	8005f1a <I2C_ITSlaveCplt.constprop.0+0xb6>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e7c:	2a22      	cmp	r2, #34	@ 0x22
 8005e7e:	d100      	bne.n	8005e82 <I2C_ITSlaveCplt.constprop.0+0x1e>
 8005e80:	e071      	b.n	8005f66 <I2C_ITSlaveCplt.constprop.0+0x102>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005e82:	2280      	movs	r2, #128	@ 0x80
 8005e84:	685d      	ldr	r5, [r3, #4]
 8005e86:	0212      	lsls	r2, r2, #8
 8005e88:	432a      	orrs	r2, r5
 8005e8a:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	4d4d      	ldr	r5, [pc, #308]	@ (8005fc4 <I2C_ITSlaveCplt.constprop.0+0x160>)
 8005e90:	402a      	ands	r2, r5
 8005e92:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	0792      	lsls	r2, r2, #30
 8005e98:	d501      	bpl.n	8005e9e <I2C_ITSlaveCplt.constprop.0+0x3a>
    hi2c->Instance->TXDR = 0x00U;
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	699d      	ldr	r5, [r3, #24]
 8005ea2:	422a      	tst	r2, r5
 8005ea4:	d102      	bne.n	8005eac <I2C_ITSlaveCplt.constprop.0+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ea6:	699d      	ldr	r5, [r3, #24]
 8005ea8:	432a      	orrs	r2, r5
 8005eaa:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005eac:	0442      	lsls	r2, r0, #17
 8005eae:	d53b      	bpl.n	8005f28 <I2C_ITSlaveCplt.constprop.0+0xc4>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4845      	ldr	r0, [pc, #276]	@ (8005fc8 <I2C_ITSlaveCplt.constprop.0+0x164>)
 8005eb4:	4002      	ands	r2, r0
 8005eb6:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8005eb8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005eba:	2a00      	cmp	r2, #0
 8005ebc:	d003      	beq.n	8005ec6 <I2C_ITSlaveCplt.constprop.0+0x62>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	6852      	ldr	r2, [r2, #4]
 8005ec2:	b292      	uxth	r2, r2
 8005ec4:	8562      	strh	r2, [r4, #42]	@ 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005ec6:	0749      	lsls	r1, r1, #29
 8005ec8:	d508      	bpl.n	8005edc <I2C_ITSlaveCplt.constprop.0+0x78>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005eca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ecc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005ece:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ed0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	6263      	str	r3, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 8005ed6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d13d      	bne.n	8005f58 <I2C_ITSlaveCplt.constprop.0+0xf4>
  if (hi2c->XferCount != 0U)
 8005edc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <I2C_ITSlaveCplt.constprop.0+0x86>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eea:	2700      	movs	r7, #0
 8005eec:	2542      	movs	r5, #66	@ 0x42
 8005eee:	5567      	strb	r7, [r4, r5]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ef0:	6c66      	ldr	r6, [r4, #68]	@ 0x44
  hi2c->XferISR = NULL;
 8005ef2:	6367      	str	r7, [r4, #52]	@ 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ef4:	2e00      	cmp	r6, #0
 8005ef6:	d13d      	bne.n	8005f74 <I2C_ITSlaveCplt.constprop.0+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005ef8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005efa:	4d34      	ldr	r5, [pc, #208]	@ (8005fcc <I2C_ITSlaveCplt.constprop.0+0x168>)
 8005efc:	42ab      	cmp	r3, r5
 8005efe:	d11d      	bne.n	8005f3c <I2C_ITSlaveCplt.constprop.0+0xd8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f00:	2341      	movs	r3, #65	@ 0x41
 8005f02:	5ce2      	ldrb	r2, [r4, r3]
 8005f04:	2a22      	cmp	r2, #34	@ 0x22
 8005f06:	d053      	beq.n	8005fb0 <I2C_ITSlaveCplt.constprop.0+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f08:	2220      	movs	r2, #32
 8005f0a:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8005f0c:	2340      	movs	r3, #64	@ 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f0e:	6326      	str	r6, [r4, #48]	@ 0x30
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f10:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8005f12:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f14:	f7fe fffa 	bl	8004f0c <HAL_I2C_SlaveTxCpltCallback>
}
 8005f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f1a:	5d65      	ldrb	r5, [r4, r5]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005f1c:	681d      	ldr	r5, [r3, #0]
 8005f1e:	36f2      	adds	r6, #242	@ 0xf2
 8005f20:	43b5      	bics	r5, r6
 8005f22:	601d      	str	r5, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f24:	6322      	str	r2, [r4, #48]	@ 0x30
 8005f26:	e7ac      	b.n	8005e82 <I2C_ITSlaveCplt.constprop.0+0x1e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005f28:	0400      	lsls	r0, r0, #16
 8005f2a:	d5cc      	bpl.n	8005ec6 <I2C_ITSlaveCplt.constprop.0+0x62>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4828      	ldr	r0, [pc, #160]	@ (8005fd0 <I2C_ITSlaveCplt.constprop.0+0x16c>)
 8005f30:	4002      	ands	r2, r0
 8005f32:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8005f34:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005f36:	2a00      	cmp	r2, #0
 8005f38:	d1c1      	bne.n	8005ebe <I2C_ITSlaveCplt.constprop.0+0x5a>
 8005f3a:	e7c4      	b.n	8005ec6 <I2C_ITSlaveCplt.constprop.0+0x62>
    I2C_ITSlaveSeqCplt(hi2c);
 8005f3c:	0020      	movs	r0, r4
 8005f3e:	f7fe ffe9 	bl	8004f14 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f42:	2341      	movs	r3, #65	@ 0x41
 8005f44:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f46:	62e5      	str	r5, [r4, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005f48:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8005f4a:	3b01      	subs	r3, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f4c:	6326      	str	r6, [r4, #48]	@ 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f4e:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8005f50:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f52:	f7ff f929 	bl	80051a8 <HAL_I2C_ListenCpltCallback>
 8005f56:	e7df      	b.n	8005f18 <I2C_ITSlaveCplt.constprop.0+0xb4>
      hi2c->XferSize--;
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8005f5c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8005f64:	e7ba      	b.n	8005edc <I2C_ITSlaveCplt.constprop.0+0x78>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005f66:	26fc      	movs	r6, #252	@ 0xfc
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f68:	5d65      	ldrb	r5, [r4, r5]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005f6a:	681d      	ldr	r5, [r3, #0]
 8005f6c:	43b5      	bics	r5, r6
 8005f6e:	601d      	str	r5, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f70:	6322      	str	r2, [r4, #48]	@ 0x30
 8005f72:	e786      	b.n	8005e82 <I2C_ITSlaveCplt.constprop.0+0x1e>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f74:	0020      	movs	r0, r4
 8005f76:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005f78:	f7ff f940 	bl	80051fc <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005f7c:	2341      	movs	r3, #65	@ 0x41
 8005f7e:	5ce2      	ldrb	r2, [r4, r3]
 8005f80:	2a28      	cmp	r2, #40	@ 0x28
 8005f82:	d1c9      	bne.n	8005f18 <I2C_ITSlaveCplt.constprop.0+0xb4>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f84:	4a11      	ldr	r2, [pc, #68]	@ (8005fcc <I2C_ITSlaveCplt.constprop.0+0x168>)
  HAL_I2C_ListenCpltCallback(hi2c);
 8005f86:	0020      	movs	r0, r4
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f88:	62e2      	str	r2, [r4, #44]	@ 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8005f8a:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f8c:	6327      	str	r7, [r4, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005f8e:	54e2      	strb	r2, [r4, r3]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f90:	5567      	strb	r7, [r4, r5]
  hi2c->XferISR = NULL;
 8005f92:	6367      	str	r7, [r4, #52]	@ 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f94:	5ce1      	ldrb	r1, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005f96:	21fe      	movs	r1, #254	@ 0xfe
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f98:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f9a:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005f9c:	6813      	ldr	r3, [r2, #0]
 8005f9e:	438b      	bics	r3, r1
 8005fa0:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa2:	2310      	movs	r3, #16
 8005fa4:	61d3      	str	r3, [r2, #28]
  __HAL_UNLOCK(hi2c);
 8005fa6:	3330      	adds	r3, #48	@ 0x30
 8005fa8:	54e7      	strb	r7, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 8005faa:	f7ff f8fd 	bl	80051a8 <HAL_I2C_ListenCpltCallback>
}
 8005fae:	e7b3      	b.n	8005f18 <I2C_ITSlaveCplt.constprop.0+0xb4>
    hi2c->State = HAL_I2C_STATE_READY;
 8005fb0:	3a02      	subs	r2, #2
 8005fb2:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8005fb4:	3b01      	subs	r3, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fb6:	6326      	str	r6, [r4, #48]	@ 0x30
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fb8:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8005fba:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fbc:	f7fe ffa8 	bl	8004f10 <HAL_I2C_SlaveRxCpltCallback>
 8005fc0:	e7aa      	b.n	8005f18 <I2C_ITSlaveCplt.constprop.0+0xb4>
 8005fc2:	46c0      	nop			@ (mov r8, r8)
 8005fc4:	fe00e800 	.word	0xfe00e800
 8005fc8:	ffffbfff 	.word	0xffffbfff
 8005fcc:	ffff0000 	.word	0xffff0000
 8005fd0:	ffff7fff 	.word	0xffff7fff

08005fd4 <I2C_Slave_ISR_DMA>:
{
 8005fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8005fd6:	2340      	movs	r3, #64	@ 0x40
{
 8005fd8:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 8005fda:	5cc2      	ldrb	r2, [r0, r3]
{
 8005fdc:	0004      	movs	r4, r0
 8005fde:	000d      	movs	r5, r1
  uint32_t tmpoptions = hi2c->XferOptions;
 8005fe0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 8005fe2:	2a01      	cmp	r2, #1
 8005fe4:	d063      	beq.n	80060ae <I2C_Slave_ISR_DMA+0xda>
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	54c2      	strb	r2, [r0, r3]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005fea:	3b20      	subs	r3, #32
 8005fec:	420b      	tst	r3, r1
 8005fee:	d001      	beq.n	8005ff4 <I2C_Slave_ISR_DMA+0x20>
 8005ff0:	4233      	tst	r3, r6
 8005ff2:	d137      	bne.n	8006064 <I2C_Slave_ISR_DMA+0x90>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	422b      	tst	r3, r5
 8005ff8:	d026      	beq.n	8006048 <I2C_Slave_ISR_DMA+0x74>
 8005ffa:	4233      	tst	r3, r6
 8005ffc:	d024      	beq.n	8006048 <I2C_Slave_ISR_DMA+0x74>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005ffe:	21c0      	movs	r1, #192	@ 0xc0
 8006000:	0209      	lsls	r1, r1, #8
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006002:	6822      	ldr	r2, [r4, #0]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006004:	420e      	tst	r6, r1
 8006006:	d02b      	beq.n	8006060 <I2C_Slave_ISR_DMA+0x8c>
      if (hi2c->hdmarx != NULL)
 8006008:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
      if (hi2c->hdmatx != NULL)
 800600a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
      if (hi2c->hdmarx != NULL)
 800600c:	2b00      	cmp	r3, #0
 800600e:	d02f      	beq.n	8006070 <I2C_Slave_ISR_DMA+0x9c>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006010:	0430      	lsls	r0, r6, #16
 8006012:	d52d      	bpl.n	8006070 <I2C_Slave_ISR_DMA+0x9c>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d129      	bne.n	8006070 <I2C_Slave_ISR_DMA+0x9c>
      if (hi2c->hdmatx != NULL)
 800601c:	2900      	cmp	r1, #0
 800601e:	d003      	beq.n	8006028 <I2C_Slave_ISR_DMA+0x54>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006020:	0476      	lsls	r6, r6, #17
 8006022:	d501      	bpl.n	8006028 <I2C_Slave_ISR_DMA+0x54>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006024:	680b      	ldr	r3, [r1, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006028:	2341      	movs	r3, #65	@ 0x41
 800602a:	5ce1      	ldrb	r1, [r4, r3]
 800602c:	2928      	cmp	r1, #40	@ 0x28
 800602e:	d046      	beq.n	80060be <I2C_Slave_ISR_DMA+0xea>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006030:	2341      	movs	r3, #65	@ 0x41
 8006032:	5ce3      	ldrb	r3, [r4, r3]
 8006034:	2b29      	cmp	r3, #41	@ 0x29
 8006036:	d100      	bne.n	800603a <I2C_Slave_ISR_DMA+0x66>
 8006038:	e074      	b.n	8006124 <I2C_Slave_ISR_DMA+0x150>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800603a:	2310      	movs	r3, #16
 800603c:	61d3      	str	r3, [r2, #28]
  __HAL_UNLOCK(hi2c);
 800603e:	2340      	movs	r3, #64	@ 0x40
 8006040:	2200      	movs	r2, #0
  return HAL_OK;
 8006042:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 8006044:	54e2      	strb	r2, [r4, r3]
}
 8006046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006048:	2308      	movs	r3, #8
 800604a:	422b      	tst	r3, r5
 800604c:	d0f7      	beq.n	800603e <I2C_Slave_ISR_DMA+0x6a>
 800604e:	4233      	tst	r3, r6
 8006050:	d0f5      	beq.n	800603e <I2C_Slave_ISR_DMA+0x6a>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006052:	2241      	movs	r2, #65	@ 0x41
 8006054:	5ca1      	ldrb	r1, [r4, r2]
 8006056:	3a19      	subs	r2, #25
 8006058:	400a      	ands	r2, r1
 800605a:	2a28      	cmp	r2, #40	@ 0x28
 800605c:	d029      	beq.n	80060b2 <I2C_Slave_ISR_DMA+0xde>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800605e:	6822      	ldr	r2, [r4, #0]
 8006060:	61d3      	str	r3, [r2, #28]
    __HAL_UNLOCK(hi2c);
 8006062:	e7ec      	b.n	800603e <I2C_Slave_ISR_DMA+0x6a>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006064:	f7ff fefe 	bl	8005e64 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006068:	2310      	movs	r3, #16
 800606a:	422b      	tst	r3, r5
 800606c:	d0ec      	beq.n	8006048 <I2C_Slave_ISR_DMA+0x74>
 800606e:	e7c4      	b.n	8005ffa <I2C_Slave_ISR_DMA+0x26>
      if (hi2c->hdmatx != NULL)
 8006070:	2900      	cmp	r1, #0
 8006072:	d005      	beq.n	8006080 <I2C_Slave_ISR_DMA+0xac>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006074:	0476      	lsls	r6, r6, #17
 8006076:	d503      	bpl.n	8006080 <I2C_Slave_ISR_DMA+0xac>
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006078:	680b      	ldr	r3, [r1, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0d3      	beq.n	8006028 <I2C_Slave_ISR_DMA+0x54>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006080:	2310      	movs	r3, #16
 8006082:	61d3      	str	r3, [r2, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006084:	2204      	movs	r2, #4
 8006086:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006088:	4313      	orrs	r3, r2
 800608a:	6463      	str	r3, [r4, #68]	@ 0x44
        tmpstate = hi2c->State;
 800608c:	2341      	movs	r3, #65	@ 0x41
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800608e:	4a30      	ldr	r2, [pc, #192]	@ (8006150 <I2C_Slave_ISR_DMA+0x17c>)
        tmpstate = hi2c->State;
 8006090:	5ce3      	ldrb	r3, [r4, r3]
 8006092:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006094:	4217      	tst	r7, r2
 8006096:	d1d2      	bne.n	800603e <I2C_Slave_ISR_DMA+0x6a>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006098:	2208      	movs	r2, #8
 800609a:	4393      	bics	r3, r2
 800609c:	2b21      	cmp	r3, #33	@ 0x21
 800609e:	d00c      	beq.n	80060ba <I2C_Slave_ISR_DMA+0xe6>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80060a0:	2b22      	cmp	r3, #34	@ 0x22
 80060a2:	d00a      	beq.n	80060ba <I2C_Slave_ISR_DMA+0xe6>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80060a4:	0020      	movs	r0, r4
 80060a6:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80060a8:	f7ff f8a8 	bl	80051fc <I2C_ITError>
 80060ac:	e7c7      	b.n	800603e <I2C_Slave_ISR_DMA+0x6a>
  __HAL_LOCK(hi2c);
 80060ae:	2002      	movs	r0, #2
 80060b0:	e7c9      	b.n	8006046 <I2C_Slave_ISR_DMA+0x72>
 80060b2:	0020      	movs	r0, r4
 80060b4:	f7ff f832 	bl	800511c <I2C_ITAddrCplt.part.0>
 80060b8:	e7c1      	b.n	800603e <I2C_Slave_ISR_DMA+0x6a>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80060bc:	e7f2      	b.n	80060a4 <I2C_Slave_ISR_DMA+0xd0>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060be:	2180      	movs	r1, #128	@ 0x80
 80060c0:	0489      	lsls	r1, r1, #18
 80060c2:	428f      	cmp	r7, r1
 80060c4:	d1b4      	bne.n	8006030 <I2C_Slave_ISR_DMA+0x5c>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060c6:	4923      	ldr	r1, [pc, #140]	@ (8006154 <I2C_Slave_ISR_DMA+0x180>)
  hi2c->State = HAL_I2C_STATE_READY;
 80060c8:	2020      	movs	r0, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060ca:	62e1      	str	r1, [r4, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80060cc:	2100      	movs	r1, #0
 80060ce:	6321      	str	r1, [r4, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80060d0:	54e0      	strb	r0, [r4, r3]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d2:	3301      	adds	r3, #1
 80060d4:	54e1      	strb	r1, [r4, r3]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80060d6:	3b3e      	subs	r3, #62	@ 0x3e
  hi2c->XferISR = NULL;
 80060d8:	6361      	str	r1, [r4, #52]	@ 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80060da:	422b      	tst	r3, r5
 80060dc:	d012      	beq.n	8006104 <I2C_Slave_ISR_DMA+0x130>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060de:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80060e0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80060e2:	7011      	strb	r1, [r2, #0]
    hi2c->pBuffPtr++;
 80060e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80060e6:	3201      	adds	r2, #1
 80060e8:	6262      	str	r2, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 80060ea:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80060ec:	2a00      	cmp	r2, #0
 80060ee:	d008      	beq.n	8006102 <I2C_Slave_ISR_DMA+0x12e>
      hi2c->XferSize--;
 80060f0:	3a01      	subs	r2, #1
 80060f2:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80060f4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80060f6:	3a01      	subs	r2, #1
 80060f8:	b292      	uxth	r2, r2
 80060fa:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060fc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80060fe:	4313      	orrs	r3, r2
 8006100:	6463      	str	r3, [r4, #68]	@ 0x44
 8006102:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006104:	2341      	movs	r3, #65	@ 0x41
 8006106:	5ce1      	ldrb	r1, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006108:	21fe      	movs	r1, #254	@ 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800610a:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800610c:	6813      	ldr	r3, [r2, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800610e:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006110:	438b      	bics	r3, r1
 8006112:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006114:	2310      	movs	r3, #16
 8006116:	61d3      	str	r3, [r2, #28]
  __HAL_UNLOCK(hi2c);
 8006118:	2200      	movs	r2, #0
 800611a:	3330      	adds	r3, #48	@ 0x30
 800611c:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 800611e:	f7ff f843 	bl	80051a8 <HAL_I2C_ListenCpltCallback>
}
 8006122:	e78c      	b.n	800603e <I2C_Slave_ISR_DMA+0x6a>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006124:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <I2C_Slave_ISR_DMA+0x180>)
 8006126:	429f      	cmp	r7, r3
 8006128:	d100      	bne.n	800612c <I2C_Slave_ISR_DMA+0x158>
 800612a:	e786      	b.n	800603a <I2C_Slave_ISR_DMA+0x66>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800612c:	2310      	movs	r3, #16
 800612e:	61d3      	str	r3, [r2, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006130:	6993      	ldr	r3, [r2, #24]
 8006132:	079b      	lsls	r3, r3, #30
 8006134:	d501      	bpl.n	800613a <I2C_Slave_ISR_DMA+0x166>
    hi2c->Instance->TXDR = 0x00U;
 8006136:	2300      	movs	r3, #0
 8006138:	6293      	str	r3, [r2, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800613a:	2301      	movs	r3, #1
 800613c:	6991      	ldr	r1, [r2, #24]
 800613e:	420b      	tst	r3, r1
 8006140:	d102      	bne.n	8006148 <I2C_Slave_ISR_DMA+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006142:	6991      	ldr	r1, [r2, #24]
 8006144:	430b      	orrs	r3, r1
 8006146:	6193      	str	r3, [r2, #24]
          I2C_ITSlaveSeqCplt(hi2c);
 8006148:	0020      	movs	r0, r4
 800614a:	f7fe fee3 	bl	8004f14 <I2C_ITSlaveSeqCplt>
 800614e:	e776      	b.n	800603e <I2C_Slave_ISR_DMA+0x6a>
 8006150:	feffffff 	.word	0xfeffffff
 8006154:	ffff0000 	.word	0xffff0000

08006158 <I2C_Slave_ISR_IT>:
{
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800615a:	2340      	movs	r3, #64	@ 0x40
{
 800615c:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 800615e:	5cc2      	ldrb	r2, [r0, r3]
{
 8006160:	0004      	movs	r4, r0
 8006162:	000d      	movs	r5, r1
  uint32_t tmpoptions = hi2c->XferOptions;
 8006164:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
  __HAL_LOCK(hi2c);
 8006166:	2a01      	cmp	r2, #1
 8006168:	d100      	bne.n	800616c <I2C_Slave_ISR_IT+0x14>
 800616a:	e078      	b.n	800625e <I2C_Slave_ISR_IT+0x106>
 800616c:	2201      	movs	r2, #1
 800616e:	54c2      	strb	r2, [r0, r3]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006170:	3b20      	subs	r3, #32
 8006172:	420b      	tst	r3, r1
 8006174:	d001      	beq.n	800617a <I2C_Slave_ISR_IT+0x22>
 8006176:	4233      	tst	r3, r6
 8006178:	d15e      	bne.n	8006238 <I2C_Slave_ISR_IT+0xe0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800617a:	2310      	movs	r3, #16
 800617c:	422b      	tst	r3, r5
 800617e:	d017      	beq.n	80061b0 <I2C_Slave_ISR_IT+0x58>
 8006180:	4233      	tst	r3, r6
 8006182:	d015      	beq.n	80061b0 <I2C_Slave_ISR_IT+0x58>
    if (hi2c->XferCount == 0U)
 8006184:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006186:	6821      	ldr	r1, [r4, #0]
    if (hi2c->XferCount == 0U)
 8006188:	b290      	uxth	r0, r2
 800618a:	2a00      	cmp	r2, #0
 800618c:	d15a      	bne.n	8006244 <I2C_Slave_ISR_IT+0xec>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800618e:	3331      	adds	r3, #49	@ 0x31
 8006190:	5ce2      	ldrb	r2, [r4, r3]
 8006192:	2a28      	cmp	r2, #40	@ 0x28
 8006194:	d100      	bne.n	8006198 <I2C_Slave_ISR_IT+0x40>
 8006196:	e06c      	b.n	8006272 <I2C_Slave_ISR_IT+0x11a>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006198:	2341      	movs	r3, #65	@ 0x41
 800619a:	5ce3      	ldrb	r3, [r4, r3]
 800619c:	2b29      	cmp	r3, #41	@ 0x29
 800619e:	d100      	bne.n	80061a2 <I2C_Slave_ISR_IT+0x4a>
 80061a0:	e09a      	b.n	80062d8 <I2C_Slave_ISR_IT+0x180>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061a2:	2310      	movs	r3, #16
 80061a4:	61cb      	str	r3, [r1, #28]
  __HAL_UNLOCK(hi2c);
 80061a6:	2340      	movs	r3, #64	@ 0x40
 80061a8:	2200      	movs	r2, #0
  return HAL_OK;
 80061aa:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 80061ac:	54e2      	strb	r2, [r4, r3]
}
 80061ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80061b0:	2304      	movs	r3, #4
 80061b2:	422b      	tst	r3, r5
 80061b4:	d10d      	bne.n	80061d2 <I2C_Slave_ISR_IT+0x7a>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061b6:	2308      	movs	r3, #8
 80061b8:	422b      	tst	r3, r5
 80061ba:	d027      	beq.n	800620c <I2C_Slave_ISR_IT+0xb4>
 80061bc:	4233      	tst	r3, r6
 80061be:	d025      	beq.n	800620c <I2C_Slave_ISR_IT+0xb4>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80061c0:	2241      	movs	r2, #65	@ 0x41
 80061c2:	5ca1      	ldrb	r1, [r4, r2]
 80061c4:	3a19      	subs	r2, #25
 80061c6:	400a      	ands	r2, r1
 80061c8:	2a28      	cmp	r2, #40	@ 0x28
 80061ca:	d04e      	beq.n	800626a <I2C_Slave_ISR_IT+0x112>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80061cc:	6822      	ldr	r2, [r4, #0]
 80061ce:	61d3      	str	r3, [r2, #28]
    __HAL_UNLOCK(hi2c);
 80061d0:	e7e9      	b.n	80061a6 <I2C_Slave_ISR_IT+0x4e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80061d2:	4233      	tst	r3, r6
 80061d4:	d0ef      	beq.n	80061b6 <I2C_Slave_ISR_IT+0x5e>
    if (hi2c->XferCount > 0U)
 80061d6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00d      	beq.n	80061f8 <I2C_Slave_ISR_IT+0xa0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80061e2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80061e4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80061e6:	3301      	adds	r3, #1
 80061e8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80061ea:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80061ec:	3b01      	subs	r3, #1
 80061ee:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80061f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && \
 80061f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1d3      	bne.n	80061a6 <I2C_Slave_ISR_IT+0x4e>
 80061fe:	4b40      	ldr	r3, [pc, #256]	@ (8006300 <I2C_Slave_ISR_IT+0x1a8>)
 8006200:	429f      	cmp	r7, r3
 8006202:	d0d0      	beq.n	80061a6 <I2C_Slave_ISR_IT+0x4e>
        I2C_ITSlaveSeqCplt(hi2c);
 8006204:	0020      	movs	r0, r4
 8006206:	f7fe fe85 	bl	8004f14 <I2C_ITSlaveSeqCplt>
 800620a:	e7cc      	b.n	80061a6 <I2C_Slave_ISR_IT+0x4e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800620c:	2302      	movs	r3, #2
 800620e:	422b      	tst	r3, r5
 8006210:	d0c9      	beq.n	80061a6 <I2C_Slave_ISR_IT+0x4e>
 8006212:	4233      	tst	r3, r6
 8006214:	d0c7      	beq.n	80061a6 <I2C_Slave_ISR_IT+0x4e>
    if (hi2c->XferCount > 0U)
 8006216:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006218:	2b00      	cmp	r3, #0
 800621a:	d022      	beq.n	8006262 <I2C_Slave_ISR_IT+0x10a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800621c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8006222:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006224:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8006226:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8006228:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800622a:	3b01      	subs	r3, #1
 800622c:	b29b      	uxth	r3, r3
 800622e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8006230:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8006232:	3b01      	subs	r3, #1
 8006234:	8523      	strh	r3, [r4, #40]	@ 0x28
 8006236:	e7b6      	b.n	80061a6 <I2C_Slave_ISR_IT+0x4e>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006238:	f7ff fe14 	bl	8005e64 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800623c:	2310      	movs	r3, #16
 800623e:	422b      	tst	r3, r5
 8006240:	d0b6      	beq.n	80061b0 <I2C_Slave_ISR_IT+0x58>
 8006242:	e79d      	b.n	8006180 <I2C_Slave_ISR_IT+0x28>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006244:	2204      	movs	r2, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006246:	61cb      	str	r3, [r1, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006248:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800624a:	4313      	orrs	r3, r2
 800624c:	6463      	str	r3, [r4, #68]	@ 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800624e:	4b2d      	ldr	r3, [pc, #180]	@ (8006304 <I2C_Slave_ISR_IT+0x1ac>)
 8006250:	421f      	tst	r7, r3
 8006252:	d1a8      	bne.n	80061a6 <I2C_Slave_ISR_IT+0x4e>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006254:	0020      	movs	r0, r4
 8006256:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006258:	f7fe ffd0 	bl	80051fc <I2C_ITError>
 800625c:	e7a3      	b.n	80061a6 <I2C_Slave_ISR_IT+0x4e>
  __HAL_LOCK(hi2c);
 800625e:	2002      	movs	r0, #2
 8006260:	e7a5      	b.n	80061ae <I2C_Slave_ISR_IT+0x56>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006262:	4b28      	ldr	r3, [pc, #160]	@ (8006304 <I2C_Slave_ISR_IT+0x1ac>)
 8006264:	421f      	tst	r7, r3
 8006266:	d19e      	bne.n	80061a6 <I2C_Slave_ISR_IT+0x4e>
 8006268:	e7cc      	b.n	8006204 <I2C_Slave_ISR_IT+0xac>
 800626a:	0020      	movs	r0, r4
 800626c:	f7fe ff56 	bl	800511c <I2C_ITAddrCplt.part.0>
 8006270:	e799      	b.n	80061a6 <I2C_Slave_ISR_IT+0x4e>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006272:	2280      	movs	r2, #128	@ 0x80
 8006274:	0492      	lsls	r2, r2, #18
 8006276:	4297      	cmp	r7, r2
 8006278:	d000      	beq.n	800627c <I2C_Slave_ISR_IT+0x124>
 800627a:	e78d      	b.n	8006198 <I2C_Slave_ISR_IT+0x40>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800627c:	4a20      	ldr	r2, [pc, #128]	@ (8006300 <I2C_Slave_ISR_IT+0x1a8>)
 800627e:	62e2      	str	r2, [r4, #44]	@ 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8006280:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8006282:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006284:	54e2      	strb	r2, [r4, r3]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006286:	3301      	adds	r3, #1
 8006288:	54e0      	strb	r0, [r4, r3]
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800628a:	3b3e      	subs	r3, #62	@ 0x3e
  hi2c->XferISR = NULL;
 800628c:	6360      	str	r0, [r4, #52]	@ 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800628e:	422b      	tst	r3, r5
 8006290:	d012      	beq.n	80062b8 <I2C_Slave_ISR_IT+0x160>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006292:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8006294:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8006296:	7011      	strb	r1, [r2, #0]
    hi2c->pBuffPtr++;
 8006298:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800629a:	3201      	adds	r2, #1
 800629c:	6262      	str	r2, [r4, #36]	@ 0x24
    if ((hi2c->XferSize > 0U))
 800629e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	d008      	beq.n	80062b6 <I2C_Slave_ISR_IT+0x15e>
      hi2c->XferSize--;
 80062a4:	3a01      	subs	r2, #1
 80062a6:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80062a8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80062aa:	3a01      	subs	r2, #1
 80062ac:	b292      	uxth	r2, r2
 80062ae:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062b0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80062b2:	4313      	orrs	r3, r2
 80062b4:	6463      	str	r3, [r4, #68]	@ 0x44
 80062b6:	6821      	ldr	r1, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80062b8:	2341      	movs	r3, #65	@ 0x41
 80062ba:	5ce2      	ldrb	r2, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80062bc:	22fe      	movs	r2, #254	@ 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80062be:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80062c0:	680b      	ldr	r3, [r1, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 80062c2:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80062c4:	4393      	bics	r3, r2
 80062c6:	600b      	str	r3, [r1, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062c8:	2310      	movs	r3, #16
  __HAL_UNLOCK(hi2c);
 80062ca:	2200      	movs	r2, #0
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062cc:	61cb      	str	r3, [r1, #28]
  __HAL_UNLOCK(hi2c);
 80062ce:	3330      	adds	r3, #48	@ 0x30
 80062d0:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 80062d2:	f7fe ff69 	bl	80051a8 <HAL_I2C_ListenCpltCallback>
}
 80062d6:	e766      	b.n	80061a6 <I2C_Slave_ISR_IT+0x4e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80062d8:	4b09      	ldr	r3, [pc, #36]	@ (8006300 <I2C_Slave_ISR_IT+0x1a8>)
 80062da:	429f      	cmp	r7, r3
 80062dc:	d100      	bne.n	80062e0 <I2C_Slave_ISR_IT+0x188>
 80062de:	e760      	b.n	80061a2 <I2C_Slave_ISR_IT+0x4a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062e0:	2310      	movs	r3, #16
 80062e2:	61cb      	str	r3, [r1, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80062e4:	698b      	ldr	r3, [r1, #24]
 80062e6:	079b      	lsls	r3, r3, #30
 80062e8:	d501      	bpl.n	80062ee <I2C_Slave_ISR_IT+0x196>
    hi2c->Instance->TXDR = 0x00U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	628b      	str	r3, [r1, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062ee:	2301      	movs	r3, #1
 80062f0:	698a      	ldr	r2, [r1, #24]
 80062f2:	4213      	tst	r3, r2
 80062f4:	d186      	bne.n	8006204 <I2C_Slave_ISR_IT+0xac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062f6:	698a      	ldr	r2, [r1, #24]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	618b      	str	r3, [r1, #24]
 80062fc:	e782      	b.n	8006204 <I2C_Slave_ISR_IT+0xac>
 80062fe:	46c0      	nop			@ (mov r8, r8)
 8006300:	ffff0000 	.word	0xffff0000
 8006304:	feffffff 	.word	0xfeffffff

08006308 <I2C_DMAError>:
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006308:	2280      	movs	r2, #128	@ 0x80
{
 800630a:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800630c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800630e:	0212      	lsls	r2, r2, #8
 8006310:	6823      	ldr	r3, [r4, #0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006312:	2500      	movs	r5, #0
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006314:	6859      	ldr	r1, [r3, #4]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006316:	2042      	movs	r0, #66	@ 0x42
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006318:	430a      	orrs	r2, r1
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800631a:	2141      	movs	r1, #65	@ 0x41
  hi2c->ErrorCode |= ErrorCode;
 800631c:	2610      	movs	r6, #16
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800631e:	605a      	str	r2, [r3, #4]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006320:	5c62      	ldrb	r2, [r4, r1]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006322:	5425      	strb	r5, [r4, r0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006324:	4850      	ldr	r0, [pc, #320]	@ (8006468 <I2C_DMAError+0x160>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006326:	3a28      	subs	r2, #40	@ 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006328:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800632a:	8565      	strh	r5, [r4, #42]	@ 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800632c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800632e:	4330      	orrs	r0, r6
 8006330:	6460      	str	r0, [r4, #68]	@ 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006332:	2a02      	cmp	r2, #2
 8006334:	d833      	bhi.n	800639e <I2C_DMAError+0x96>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006336:	2028      	movs	r0, #40	@ 0x28
 8006338:	5c62      	ldrb	r2, [r4, r1]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800633a:	5c61      	ldrb	r1, [r4, r1]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800633c:	4002      	ands	r2, r0
 800633e:	3a28      	subs	r2, #40	@ 0x28
 8006340:	1e55      	subs	r5, r2, #1
 8006342:	41aa      	sbcs	r2, r5
 8006344:	25af      	movs	r5, #175	@ 0xaf
 8006346:	4252      	negs	r2, r2
 8006348:	43aa      	bics	r2, r5
 800634a:	3a47      	subs	r2, #71	@ 0x47
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800634c:	4008      	ands	r0, r1
 800634e:	2828      	cmp	r0, #40	@ 0x28
 8006350:	d001      	beq.n	8006356 <I2C_DMAError+0x4e>
 8006352:	22f7      	movs	r2, #247	@ 0xf7
 8006354:	4252      	negs	r2, r2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006356:	6819      	ldr	r1, [r3, #0]
 8006358:	400a      	ands	r2, r1
 800635a:	601a      	str	r2, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800635c:	2128      	movs	r1, #40	@ 0x28
 800635e:	2241      	movs	r2, #65	@ 0x41
 8006360:	54a1      	strb	r1, [r4, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006362:	4a42      	ldr	r2, [pc, #264]	@ (800646c <I2C_DMAError+0x164>)
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006364:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006366:	6362      	str	r2, [r4, #52]	@ 0x34
  tmppreviousstate = hi2c->PreviousState;
 8006368:	6b22      	ldr	r2, [r4, #48]	@ 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800636a:	2800      	cmp	r0, #0
 800636c:	d004      	beq.n	8006378 <I2C_DMAError+0x70>
 800636e:	0011      	movs	r1, r2
 8006370:	2510      	movs	r5, #16
 8006372:	3911      	subs	r1, #17
 8006374:	43a9      	bics	r1, r5
 8006376:	d039      	beq.n	80063ec <I2C_DMAError+0xe4>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006378:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800637a:	2800      	cmp	r0, #0
 800637c:	d003      	beq.n	8006386 <I2C_DMAError+0x7e>
 800637e:	2110      	movs	r1, #16
 8006380:	3a12      	subs	r2, #18
 8006382:	438a      	bics	r2, r1
 8006384:	d047      	beq.n	8006416 <I2C_DMAError+0x10e>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006386:	2341      	movs	r3, #65	@ 0x41
 8006388:	5ce2      	ldrb	r2, [r4, r3]
 800638a:	2a60      	cmp	r2, #96	@ 0x60
 800638c:	d061      	beq.n	8006452 <I2C_DMAError+0x14a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800638e:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8006390:	2240      	movs	r2, #64	@ 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8006392:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_I2C_ErrorCallback(hi2c);
 8006394:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8006396:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006398:	f7fe ff0c 	bl	80051b4 <HAL_I2C_ErrorCallback>
}
 800639c:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800639e:	5c62      	ldrb	r2, [r4, r1]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80063a0:	5c62      	ldrb	r2, [r4, r1]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80063a2:	21fe      	movs	r1, #254	@ 0xfe
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	438a      	bics	r2, r1
 80063a8:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063aa:	699a      	ldr	r2, [r3, #24]
 80063ac:	0792      	lsls	r2, r2, #30
 80063ae:	d500      	bpl.n	80063b2 <I2C_DMAError+0xaa>
    hi2c->Instance->TXDR = 0x00U;
 80063b0:	629d      	str	r5, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063b2:	2201      	movs	r2, #1
 80063b4:	6999      	ldr	r1, [r3, #24]
 80063b6:	420a      	tst	r2, r1
 80063b8:	d102      	bne.n	80063c0 <I2C_DMAError+0xb8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063ba:	6999      	ldr	r1, [r3, #24]
 80063bc:	430a      	orrs	r2, r1
 80063be:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80063c0:	2241      	movs	r2, #65	@ 0x41
 80063c2:	5ca1      	ldrb	r1, [r4, r2]
 80063c4:	2960      	cmp	r1, #96	@ 0x60
 80063c6:	d00f      	beq.n	80063e8 <I2C_DMAError+0xe0>
      hi2c->State         = HAL_I2C_STATE_READY;
 80063c8:	2120      	movs	r1, #32
 80063ca:	54a1      	strb	r1, [r4, r2]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063cc:	699a      	ldr	r2, [r3, #24]
 80063ce:	4211      	tst	r1, r2
 80063d0:	d00a      	beq.n	80063e8 <I2C_DMAError+0xe0>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063d2:	2210      	movs	r2, #16
 80063d4:	6999      	ldr	r1, [r3, #24]
 80063d6:	420a      	tst	r2, r1
 80063d8:	d004      	beq.n	80063e4 <I2C_DMAError+0xdc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063da:	2104      	movs	r1, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063dc:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063de:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80063e0:	430a      	orrs	r2, r1
 80063e2:	6462      	str	r2, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063e4:	2220      	movs	r2, #32
 80063e6:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 80063e8:	2200      	movs	r2, #0
 80063ea:	e7bb      	b.n	8006364 <I2C_DMAError+0x5c>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	0452      	lsls	r2, r2, #17
 80063f0:	d42a      	bmi.n	8006448 <I2C_DMAError+0x140>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063f2:	f7fb fbb9 	bl	8001b68 <HAL_DMA_GetState>
 80063f6:	2801      	cmp	r0, #1
 80063f8:	d0c5      	beq.n	8006386 <I2C_DMAError+0x7e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063fa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80063fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006470 <I2C_DMAError+0x168>)
      __HAL_UNLOCK(hi2c);
 80063fe:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006400:	6383      	str	r3, [r0, #56]	@ 0x38
      __HAL_UNLOCK(hi2c);
 8006402:	2340      	movs	r3, #64	@ 0x40
 8006404:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006406:	f7fb fa69 	bl	80018dc <HAL_DMA_Abort_IT>
 800640a:	2800      	cmp	r0, #0
 800640c:	d0c6      	beq.n	800639c <I2C_DMAError+0x94>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800640e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8006410:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006412:	4798      	blx	r3
 8006414:	e7c2      	b.n	800639c <I2C_DMAError+0x94>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	0412      	lsls	r2, r2, #16
 800641a:	d503      	bpl.n	8006424 <I2C_DMAError+0x11c>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	4915      	ldr	r1, [pc, #84]	@ (8006474 <I2C_DMAError+0x16c>)
 8006420:	400a      	ands	r2, r1
 8006422:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006424:	f7fb fba0 	bl	8001b68 <HAL_DMA_GetState>
 8006428:	2801      	cmp	r0, #1
 800642a:	d0ac      	beq.n	8006386 <I2C_DMAError+0x7e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800642c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800642e:	4b10      	ldr	r3, [pc, #64]	@ (8006470 <I2C_DMAError+0x168>)
      __HAL_UNLOCK(hi2c);
 8006430:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006432:	6383      	str	r3, [r0, #56]	@ 0x38
      __HAL_UNLOCK(hi2c);
 8006434:	2340      	movs	r3, #64	@ 0x40
 8006436:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006438:	f7fb fa50 	bl	80018dc <HAL_DMA_Abort_IT>
 800643c:	2800      	cmp	r0, #0
 800643e:	d0ad      	beq.n	800639c <I2C_DMAError+0x94>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006440:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006442:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006444:	4798      	blx	r3
 8006446:	e7a9      	b.n	800639c <I2C_DMAError+0x94>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	490b      	ldr	r1, [pc, #44]	@ (8006478 <I2C_DMAError+0x170>)
 800644c:	400a      	ands	r2, r1
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e7cf      	b.n	80063f2 <I2C_DMAError+0xea>
    hi2c->State = HAL_I2C_STATE_READY;
 8006452:	3a40      	subs	r2, #64	@ 0x40
 8006454:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006456:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8006458:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800645a:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800645c:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800645e:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8006460:	f7fe feaa 	bl	80051b8 <HAL_I2C_AbortCpltCallback>
}
 8006464:	e79a      	b.n	800639c <I2C_DMAError+0x94>
 8006466:	46c0      	nop			@ (mov r8, r8)
 8006468:	ffff0000 	.word	0xffff0000
 800646c:	08006159 	.word	0x08006159
 8006470:	080051bd 	.word	0x080051bd
 8006474:	ffff7fff 	.word	0xffff7fff
 8006478:	ffffbfff 	.word	0xffffbfff

0800647c <HAL_I2C_GetState>:
  return hi2c->State;
 800647c:	2341      	movs	r3, #65	@ 0x41
 800647e:	5cc0      	ldrb	r0, [r0, r3]
 8006480:	b2c0      	uxtb	r0, r0
}
 8006482:	4770      	bx	lr

08006484 <HAL_I2C_GetMode>:
  return hi2c->Mode;
 8006484:	2342      	movs	r3, #66	@ 0x42
 8006486:	5cc0      	ldrb	r0, [r0, r3]
 8006488:	b2c0      	uxtb	r0, r0
}
 800648a:	4770      	bx	lr

0800648c <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800648c:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800648e:	4770      	bx	lr

08006490 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006490:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006492:	2441      	movs	r4, #65	@ 0x41
 8006494:	5d03      	ldrb	r3, [r0, r4]
{
 8006496:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006498:	b2dd      	uxtb	r5, r3
 800649a:	2b20      	cmp	r3, #32
 800649c:	d11a      	bne.n	80064d4 <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800649e:	2640      	movs	r6, #64	@ 0x40
 80064a0:	5d83      	ldrb	r3, [r0, r6]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d016      	beq.n	80064d4 <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064a6:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064a8:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80064aa:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 80064ac:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80064ae:	490a      	ldr	r1, [pc, #40]	@ (80064d8 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	43ba      	bics	r2, r7
 80064b4:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	400a      	ands	r2, r1
 80064ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80064bc:	4662      	mov	r2, ip
 80064be:	6819      	ldr	r1, [r3, #0]
 80064c0:	4311      	orrs	r1, r2
 80064c2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	433a      	orrs	r2, r7
 80064c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ca:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80064cc:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 80064ce:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 80064d0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80064d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80064d4:	2002      	movs	r0, #2
 80064d6:	e7fc      	b.n	80064d2 <HAL_I2CEx_ConfigAnalogFilter+0x42>
 80064d8:	ffffefff 	.word	0xffffefff

080064dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80064dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064de:	46ce      	mov	lr, r9
 80064e0:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064e2:	2441      	movs	r4, #65	@ 0x41
{
 80064e4:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80064e6:	5d03      	ldrb	r3, [r0, r4]
 80064e8:	b2dd      	uxtb	r5, r3
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	d11f      	bne.n	800652e <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ee:	2640      	movs	r6, #64	@ 0x40
 80064f0:	5d83      	ldrb	r3, [r0, r6]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d01b      	beq.n	800652e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064f6:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064f8:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80064fa:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 80064fc:	6802      	ldr	r2, [r0, #0]
 80064fe:	46b9      	mov	r9, r7
 8006500:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006502:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8006504:	43bb      	bics	r3, r7
 8006506:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8006508:	6813      	ldr	r3, [r2, #0]
 800650a:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 800650c:	4647      	mov	r7, r8
 800650e:	4b09      	ldr	r3, [pc, #36]	@ (8006534 <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 8006510:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 8006512:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006514:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006516:	4649      	mov	r1, r9
 8006518:	6813      	ldr	r3, [r2, #0]
 800651a:	430b      	orrs	r3, r1
 800651c:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006520:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8006522:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8006524:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006526:	bcc0      	pop	{r6, r7}
 8006528:	46b9      	mov	r9, r7
 800652a:	46b0      	mov	r8, r6
 800652c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800652e:	2002      	movs	r0, #2
 8006530:	e7f9      	b.n	8006526 <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 8006532:	46c0      	nop			@ (mov r8, r8)
 8006534:	fffff0ff 	.word	0xfffff0ff

08006538 <HAL_I2CEx_EnableWakeUp>:
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
{
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006538:	2141      	movs	r1, #65	@ 0x41
{
 800653a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800653c:	5c43      	ldrb	r3, [r0, r1]
 800653e:	b2de      	uxtb	r6, r3
 8006540:	2b20      	cmp	r3, #32
 8006542:	d117      	bne.n	8006574 <HAL_I2CEx_EnableWakeUp+0x3c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006544:	2440      	movs	r4, #64	@ 0x40
 8006546:	5d03      	ldrb	r3, [r0, r4]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d013      	beq.n	8006574 <HAL_I2CEx_EnableWakeUp+0x3c>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800654c:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800654e:	2501      	movs	r5, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006550:	5443      	strb	r3, [r0, r1]
    __HAL_I2C_DISABLE(hi2c);
 8006552:	6803      	ldr	r3, [r0, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	43aa      	bics	r2, r5
 8006558:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
 800655a:	2280      	movs	r2, #128	@ 0x80
 800655c:	681f      	ldr	r7, [r3, #0]
 800655e:	02d2      	lsls	r2, r2, #11
 8006560:	433a      	orrs	r2, r7
 8006562:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	432a      	orrs	r2, r5
 8006568:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800656a:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800656c:	5446      	strb	r6, [r0, r1]
    __HAL_UNLOCK(hi2c);
 800656e:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8006570:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006572:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8006574:	2002      	movs	r0, #2
 8006576:	e7fc      	b.n	8006572 <HAL_I2CEx_EnableWakeUp+0x3a>

08006578 <HAL_I2CEx_DisableWakeUp>:
HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
{
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006578:	2141      	movs	r1, #65	@ 0x41
{
 800657a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800657c:	5c43      	ldrb	r3, [r0, r1]
 800657e:	b2de      	uxtb	r6, r3
 8006580:	2b20      	cmp	r3, #32
 8006582:	d116      	bne.n	80065b2 <HAL_I2CEx_DisableWakeUp+0x3a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006584:	2440      	movs	r4, #64	@ 0x40
 8006586:	5d03      	ldrb	r3, [r0, r4]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d012      	beq.n	80065b2 <HAL_I2CEx_DisableWakeUp+0x3a>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800658c:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800658e:	2501      	movs	r5, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006590:	5443      	strb	r3, [r0, r1]
    __HAL_I2C_DISABLE(hi2c);
 8006592:	6803      	ldr	r3, [r0, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
 8006594:	4f08      	ldr	r7, [pc, #32]	@ (80065b8 <HAL_I2CEx_DisableWakeUp+0x40>)
    __HAL_I2C_DISABLE(hi2c);
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	43aa      	bics	r2, r5
 800659a:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	403a      	ands	r2, r7
 80065a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	432a      	orrs	r2, r5
 80065a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065a8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80065aa:	5446      	strb	r6, [r0, r1]
    __HAL_UNLOCK(hi2c);
 80065ac:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80065ae:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80065b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80065b2:	2002      	movs	r0, #2
 80065b4:	e7fc      	b.n	80065b0 <HAL_I2CEx_DisableWakeUp+0x38>
 80065b6:	46c0      	nop			@ (mov r8, r8)
 80065b8:	fffbffff 	.word	0xfffbffff

080065bc <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065bc:	2101      	movs	r1, #1
 80065be:	4a04      	ldr	r2, [pc, #16]	@ (80065d0 <HAL_I2CEx_EnableFastModePlus+0x14>)
 80065c0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80065c2:	430b      	orrs	r3, r1
 80065c4:	6353      	str	r3, [r2, #52]	@ 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 80065c6:	4a03      	ldr	r2, [pc, #12]	@ (80065d4 <HAL_I2CEx_EnableFastModePlus+0x18>)
 80065c8:	6853      	ldr	r3, [r2, #4]
 80065ca:	4303      	orrs	r3, r0
 80065cc:	6053      	str	r3, [r2, #4]
}
 80065ce:	4770      	bx	lr
 80065d0:	40021000 	.word	0x40021000
 80065d4:	40010000 	.word	0x40010000

080065d8 <HAL_I2CEx_DisableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065d8:	2101      	movs	r1, #1
 80065da:	4a04      	ldr	r2, [pc, #16]	@ (80065ec <HAL_I2CEx_DisableFastModePlus+0x14>)
 80065dc:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80065de:	430b      	orrs	r3, r1
 80065e0:	6353      	str	r3, [r2, #52]	@ 0x34

  /* Disable fast mode plus driving capability for selected pin */
  CLEAR_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 80065e2:	4a03      	ldr	r2, [pc, #12]	@ (80065f0 <HAL_I2CEx_DisableFastModePlus+0x18>)
 80065e4:	6853      	ldr	r3, [r2, #4]
 80065e6:	4383      	bics	r3, r0
 80065e8:	6053      	str	r3, [r2, #4]
}
 80065ea:	4770      	bx	lr
 80065ec:	40021000 	.word	0x40021000
 80065f0:	40010000 	.word	0x40010000

080065f4 <HAL_RCC_DeInit>:
  *            - LSI, LSE and RTC clocks
  *            - HSI48 clock
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80065f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t vl_mask;
  HAL_StatusTypeDef status;

  /* Set MSIClockRange, HSITRIM and MSITRIM bits to the reset values */
  MODIFY_REG(RCC->ICSCR, (RCC_ICSCR_MSITRIM | RCC_ICSCR_HSITRIM | RCC_ICSCR_MSIRANGE), \
 80065f6:	4d31      	ldr	r5, [pc, #196]	@ (80066bc <HAL_RCC_DeInit+0xc8>)
 80065f8:	4b31      	ldr	r3, [pc, #196]	@ (80066c0 <HAL_RCC_DeInit+0xcc>)
 80065fa:	686a      	ldr	r2, [r5, #4]
{
 80065fc:	b083      	sub	sp, #12
  MODIFY_REG(RCC->ICSCR, (RCC_ICSCR_MSITRIM | RCC_ICSCR_HSITRIM | RCC_ICSCR_MSIRANGE), \
 80065fe:	401a      	ands	r2, r3
 8006600:	23b0      	movs	r3, #176	@ 0xb0
 8006602:	021b      	lsls	r3, r3, #8
 8006604:	4313      	orrs	r3, r2
 8006606:	606b      	str	r3, [r5, #4]
            ((RCC_MSICALIBRATION_DEFAULT << RCC_ICSCR_MSITRIM_Pos) | (RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos) | RCC_ICSCR_MSIRANGE_5));

  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006608:	2380      	movs	r3, #128	@ 0x80
 800660a:	682a      	ldr	r2, [r5, #0]
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	4313      	orrs	r3, r2
 8006610:	602b      	str	r3, [r5, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006612:	f7fa f859 	bl	80006c8 <HAL_GetTick>

  /* Wait till MSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006616:	2680      	movs	r6, #128	@ 0x80
  tickstart = HAL_GetTick();
 8006618:	0004      	movs	r4, r0
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800661a:	00b6      	lsls	r6, r6, #2
 800661c:	e004      	b.n	8006628 <HAL_RCC_DeInit+0x34>
  {
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800661e:	f7fa f853 	bl	80006c8 <HAL_GetTick>
 8006622:	1b00      	subs	r0, r0, r4
 8006624:	2802      	cmp	r0, #2
 8006626:	d845      	bhi.n	80066b4 <HAL_RCC_DeInit+0xc0>
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	4233      	tst	r3, r6
 800662c:	d0f7      	beq.n	800661e <HAL_RCC_DeInit+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Switch SYSCLK to MSI*/
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 800662e:	2203      	movs	r2, #3
 8006630:	68eb      	ldr	r3, [r5, #12]

  /* Wait till MSI as SYSCLK status is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8006632:	260c      	movs	r6, #12
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006634:	4393      	bics	r3, r2
 8006636:	60eb      	str	r3, [r5, #12]
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006638:	4f22      	ldr	r7, [pc, #136]	@ (80066c4 <HAL_RCC_DeInit+0xd0>)
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 800663a:	4d20      	ldr	r5, [pc, #128]	@ (80066bc <HAL_RCC_DeInit+0xc8>)
 800663c:	e004      	b.n	8006648 <HAL_RCC_DeInit+0x54>
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800663e:	f7fa f843 	bl	80006c8 <HAL_GetTick>
 8006642:	1b00      	subs	r0, r0, r4
 8006644:	42b8      	cmp	r0, r7
 8006646:	d835      	bhi.n	80066b4 <HAL_RCC_DeInit+0xc0>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8006648:	68eb      	ldr	r3, [r5, #12]
 800664a:	421e      	tst	r6, r3
 800664c:	d1f7      	bne.n	800663e <HAL_RCC_DeInit+0x4a>
      return HAL_TIMEOUT;
    }
  }

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 800664e:	4b1e      	ldr	r3, [pc, #120]	@ (80066c8 <HAL_RCC_DeInit+0xd4>)
 8006650:	4a1e      	ldr	r2, [pc, #120]	@ (80066cc <HAL_RCC_DeInit+0xd8>)
 8006652:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  status = HAL_InitTick(uwTickPrio);
 8006654:	4b1e      	ldr	r3, [pc, #120]	@ (80066d0 <HAL_RCC_DeInit+0xdc>)
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	f7f9 fff2 	bl	8000640 <HAL_InitTick>
 800665c:	1e04      	subs	r4, r0, #0
  if(status != HAL_OK)
 800665e:	d12a      	bne.n	80066b6 <HAL_RCC_DeInit+0xc2>
    return status;
  }

  /* Reset HSE, HSI, CSS, PLL */
#if defined(RCC_CR_CSSHSEON) && defined(RCC_CR_HSIOUTEN)
  CLEAR_BIT(RCC->CR, RCC_CR_HSION| RCC_CR_HSIKERON| RCC_CR_HSIDIVEN | RCC_CR_HSIOUTEN | \
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	4a1c      	ldr	r2, [pc, #112]	@ (80066d4 <HAL_RCC_DeInit+0xe0>)

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL is not ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006664:	4e15      	ldr	r6, [pc, #84]	@ (80066bc <HAL_RCC_DeInit+0xc8>)
  CLEAR_BIT(RCC->CR, RCC_CR_HSION| RCC_CR_HSIKERON| RCC_CR_HSIDIVEN | RCC_CR_HSIOUTEN | \
 8006666:	4013      	ands	r3, r2
  tmpreg = READ_BIT(RCC->CR, RCC_CR_HSEON);      \
 8006668:	2280      	movs	r2, #128	@ 0x80
  CLEAR_BIT(RCC->CR, RCC_CR_HSION| RCC_CR_HSIKERON| RCC_CR_HSIDIVEN | RCC_CR_HSIOUTEN | \
 800666a:	602b      	str	r3, [r5, #0]
  tmpreg = READ_BIT(RCC->CR, RCC_CR_HSEON);      \
 800666c:	682b      	ldr	r3, [r5, #0]
 800666e:	0252      	lsls	r2, r2, #9
 8006670:	4013      	ands	r3, r2
 8006672:	9301      	str	r3, [sp, #4]
  UNUSED(tmpreg);
 8006674:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006676:	4a18      	ldr	r2, [pc, #96]	@ (80066d8 <HAL_RCC_DeInit+0xe4>)
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	4013      	ands	r3, r2
 800667c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800667e:	f7fa f823 	bl	80006c8 <HAL_GetTick>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006682:	2580      	movs	r5, #128	@ 0x80
  tickstart = HAL_GetTick();
 8006684:	0007      	movs	r7, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006686:	04ad      	lsls	r5, r5, #18
 8006688:	e004      	b.n	8006694 <HAL_RCC_DeInit+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800668a:	f7fa f81d 	bl	80006c8 <HAL_GetTick>
 800668e:	1bc0      	subs	r0, r0, r7
 8006690:	2802      	cmp	r0, #2
 8006692:	d80f      	bhi.n	80066b4 <HAL_RCC_DeInit+0xc0>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006694:	6833      	ldr	r3, [r6, #0]
 8006696:	001a      	movs	r2, r3
 8006698:	402a      	ands	r2, r5
 800669a:	422b      	tst	r3, r5
 800669c:	d1f5      	bne.n	800668a <HAL_RCC_DeInit+0x96>
  vl_mask |= RCC_CICR_HSI48RDYC;
#endif
#if defined(RCC_HSECSS_SUPPORT)
  vl_mask |= RCC_CICR_CSSHSEC;
#endif
  WRITE_REG(RCC->CICR, vl_mask);
 800669e:	23c0      	movs	r3, #192	@ 0xc0
 80066a0:	33ff      	adds	r3, #255	@ 0xff
  CLEAR_REG(RCC->CFGR);
 80066a2:	60f2      	str	r2, [r6, #12]
  CLEAR_REG(RCC->CIER);
 80066a4:	6132      	str	r2, [r6, #16]
  WRITE_REG(RCC->CICR, vl_mask);
 80066a6:	61b3      	str	r3, [r6, #24]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80066a8:	2380      	movs	r3, #128	@ 0x80
 80066aa:	6d32      	ldr	r2, [r6, #80]	@ 0x50
 80066ac:	041b      	lsls	r3, r3, #16
 80066ae:	4313      	orrs	r3, r2
 80066b0:	6533      	str	r3, [r6, #80]	@ 0x50

  return HAL_OK;
 80066b2:	e000      	b.n	80066b6 <HAL_RCC_DeInit+0xc2>
      return HAL_TIMEOUT;
 80066b4:	2403      	movs	r4, #3
}
 80066b6:	0020      	movs	r0, r4
 80066b8:	b003      	add	sp, #12
 80066ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066bc:	40021000 	.word	0x40021000
 80066c0:	00ff00ff 	.word	0x00ff00ff
 80066c4:	00001388 	.word	0x00001388
 80066c8:	2000000c 	.word	0x2000000c
 80066cc:	001fff68 	.word	0x001fff68
 80066d0:	20000014 	.word	0x20000014
 80066d4:	fef6ffd4 	.word	0xfef6ffd4
 80066d8:	fffbffff 	.word	0xfffbffff

080066dc <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16 division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	0004      	movs	r4, r0
 80066e2:	000d      	movs	r5, r1
 80066e4:	0016      	movs	r6, r2
  GPIO_InitTypeDef gpio = {0};
 80066e6:	2100      	movs	r1, #0
 80066e8:	2214      	movs	r2, #20
 80066ea:	a803      	add	r0, sp, #12
 80066ec:	f001 fa43 	bl	8007b76 <memset>
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80066f0:	2302      	movs	r3, #2
 80066f2:	9304      	str	r3, [sp, #16]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80066f4:	9306      	str	r3, [sp, #24]
  gpio.Pull      = GPIO_NOPULL;
  if(RCC_MCOx == RCC_MCO1)
 80066f6:	2c00      	cmp	r4, #0
 80066f8:	d02b      	beq.n	8006752 <HAL_RCC_MCOConfig+0x76>
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
  }
#if defined(RCC_MCO3_SUPPORT)
  else if (RCC_MCOx == RCC_MCO3)
  {
    gpio.Pin       = MCO3_PIN;
 80066fa:	2380      	movs	r3, #128	@ 0x80
  else if (RCC_MCOx == RCC_MCO3)
 80066fc:	2c02      	cmp	r4, #2
 80066fe:	d018      	beq.n	8006732 <HAL_RCC_MCOConfig+0x56>
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
  }
#endif /* RCC_MCO3_SUPPORT */
  else
  {
    gpio.Pin       = MCO2_PIN;
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	9303      	str	r3, [sp, #12]
    gpio.Alternate = GPIO_AF0_MCO;

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 8006704:	2301      	movs	r3, #1
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8006706:	20a0      	movs	r0, #160	@ 0xa0
    MCO2_CLK_ENABLE();
 8006708:	4a1a      	ldr	r2, [pc, #104]	@ (8006774 <HAL_RCC_MCOConfig+0x98>)
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 800670a:	05c0      	lsls	r0, r0, #23
    MCO2_CLK_ENABLE();
 800670c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800670e:	4319      	orrs	r1, r3
 8006710:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006712:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 8006714:	a903      	add	r1, sp, #12
    MCO2_CLK_ENABLE();
 8006716:	4013      	ands	r3, r2
 8006718:	9302      	str	r3, [sp, #8]
 800671a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
 800671c:	f7fb fb40 	bl	8001da0 <HAL_GPIO_Init>
  }

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8006720:	4b14      	ldr	r3, [pc, #80]	@ (8006774 <HAL_RCC_MCOConfig+0x98>)
 8006722:	4a15      	ldr	r2, [pc, #84]	@ (8006778 <HAL_RCC_MCOConfig+0x9c>)
 8006724:	68d9      	ldr	r1, [r3, #12]
 8006726:	4011      	ands	r1, r2
 8006728:	4331      	orrs	r1, r6
 800672a:	4329      	orrs	r1, r5
 800672c:	60d9      	str	r1, [r3, #12]
}
 800672e:	b008      	add	sp, #32
 8006730:	bd70      	pop	{r4, r5, r6, pc}
    gpio.Pin       = MCO3_PIN;
 8006732:	019b      	lsls	r3, r3, #6
 8006734:	9303      	str	r3, [sp, #12]
    MCO3_CLK_ENABLE();
 8006736:	4b0f      	ldr	r3, [pc, #60]	@ (8006774 <HAL_RCC_MCOConfig+0x98>)
    gpio.Alternate = MCO3_GPIO_AF;
 8006738:	9407      	str	r4, [sp, #28]
    MCO3_CLK_ENABLE();
 800673a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 800673c:	480f      	ldr	r0, [pc, #60]	@ (800677c <HAL_RCC_MCOConfig+0xa0>)
    MCO3_CLK_ENABLE();
 800673e:	4322      	orrs	r2, r4
 8006740:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 8006744:	a903      	add	r1, sp, #12
    MCO3_CLK_ENABLE();
 8006746:	401c      	ands	r4, r3
 8006748:	9401      	str	r4, [sp, #4]
 800674a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
 800674c:	f7fb fb28 	bl	8001da0 <HAL_GPIO_Init>
 8006750:	e7e6      	b.n	8006720 <HAL_RCC_MCOConfig+0x44>
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8006752:	20a0      	movs	r0, #160	@ 0xa0
    MCO1_CLK_ENABLE();
 8006754:	4a07      	ldr	r2, [pc, #28]	@ (8006774 <HAL_RCC_MCOConfig+0x98>)
    gpio.Pin       = MCO1_PIN;
 8006756:	33fe      	adds	r3, #254	@ 0xfe
 8006758:	9303      	str	r3, [sp, #12]
    MCO1_CLK_ENABLE();
 800675a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800675c:	3bff      	subs	r3, #255	@ 0xff
 800675e:	4319      	orrs	r1, r3
 8006760:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006762:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8006764:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8006766:	4013      	ands	r3, r2
 8006768:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800676a:	05c0      	lsls	r0, r0, #23
    MCO1_CLK_ENABLE();
 800676c:	9b00      	ldr	r3, [sp, #0]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800676e:	f7fb fb17 	bl	8001da0 <HAL_GPIO_Init>
 8006772:	e7d5      	b.n	8006720 <HAL_RCC_MCOConfig+0x44>
 8006774:	40021000 	.word	0x40021000
 8006778:	80ffffff 	.word	0x80ffffff
 800677c:	50000400 	.word	0x50000400

08006780 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8006780:	2380      	movs	r3, #128	@ 0x80
 8006782:	4a03      	ldr	r2, [pc, #12]	@ (8006790 <HAL_RCC_EnableCSS+0x10>)
 8006784:	031b      	lsls	r3, r3, #12
 8006786:	6811      	ldr	r1, [r2, #0]
 8006788:	430b      	orrs	r3, r1
 800678a:	6013      	str	r3, [r2, #0]
}
 800678c:	4770      	bx	lr
 800678e:	46c0      	nop			@ (mov r8, r8)
 8006790:	40021000 	.word	0x40021000

08006794 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006794:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8006796:	491d      	ldr	r1, [pc, #116]	@ (800680c <HAL_RCC_GetSysClockFreq+0x78>)
{
 8006798:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800679a:	68ca      	ldr	r2, [r1, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 800679c:	4013      	ands	r3, r2
 800679e:	2b08      	cmp	r3, #8
 80067a0:	d00b      	beq.n	80067ba <HAL_RCC_GetSysClockFreq+0x26>
 80067a2:	2b0c      	cmp	r3, #12
 80067a4:	d017      	beq.n	80067d6 <HAL_RCC_GetSysClockFreq+0x42>
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d009      	beq.n	80067be <HAL_RCC_GetSysClockFreq+0x2a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80067aa:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80067ac:	684b      	ldr	r3, [r1, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80067ae:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80067b0:	041b      	lsls	r3, r3, #16
 80067b2:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80067b4:	3301      	adds	r3, #1
 80067b6:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 80067b8:	bd70      	pop	{r4, r5, r6, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 80067ba:	4815      	ldr	r0, [pc, #84]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x7c>)
 80067bc:	e7fc      	b.n	80067b8 <HAL_RCC_GetSysClockFreq+0x24>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80067be:	2010      	movs	r0, #16
 80067c0:	680b      	ldr	r3, [r1, #0]
 80067c2:	4018      	ands	r0, r3
        sysclockfreq =  (HSI_VALUE >> 2);
 80067c4:	4243      	negs	r3, r0
 80067c6:	4158      	adcs	r0, r3
 80067c8:	4b12      	ldr	r3, [pc, #72]	@ (8006814 <HAL_RCC_GetSysClockFreq+0x80>)
 80067ca:	4240      	negs	r0, r0
 80067cc:	4018      	ands	r0, r3
 80067ce:	4b12      	ldr	r3, [pc, #72]	@ (8006818 <HAL_RCC_GetSysClockFreq+0x84>)
 80067d0:	469c      	mov	ip, r3
 80067d2:	4460      	add	r0, ip
 80067d4:	e7f0      	b.n	80067b8 <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80067d6:	0293      	lsls	r3, r2, #10
 80067d8:	4810      	ldr	r0, [pc, #64]	@ (800681c <HAL_RCC_GetSysClockFreq+0x88>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80067da:	0212      	lsls	r2, r2, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067dc:	68cd      	ldr	r5, [r1, #12]
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80067de:	0f1b      	lsrs	r3, r3, #28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80067e0:	0f94      	lsrs	r4, r2, #30
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80067e2:	5cc0      	ldrb	r0, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80067e4:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067e6:	03ed      	lsls	r5, r5, #15
 80067e8:	d40c      	bmi.n	8006804 <HAL_RCC_GetSysClockFreq+0x70>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80067ea:	680b      	ldr	r3, [r1, #0]
 80067ec:	06db      	lsls	r3, r3, #27
 80067ee:	d50b      	bpl.n	8006808 <HAL_RCC_GetSysClockFreq+0x74>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80067f0:	4a09      	ldr	r2, [pc, #36]	@ (8006818 <HAL_RCC_GetSysClockFreq+0x84>)
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80067f2:	2300      	movs	r3, #0
 80067f4:	2100      	movs	r1, #0
 80067f6:	f000 fefb 	bl	80075f0 <__aeabi_lmul>
 80067fa:	0022      	movs	r2, r4
 80067fc:	2300      	movs	r3, #0
 80067fe:	f000 fed7 	bl	80075b0 <__aeabi_uldivmod>
 8006802:	e7d9      	b.n	80067b8 <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006804:	4a02      	ldr	r2, [pc, #8]	@ (8006810 <HAL_RCC_GetSysClockFreq+0x7c>)
 8006806:	e7f4      	b.n	80067f2 <HAL_RCC_GetSysClockFreq+0x5e>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006808:	4a05      	ldr	r2, [pc, #20]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x8c>)
 800680a:	e7f2      	b.n	80067f2 <HAL_RCC_GetSysClockFreq+0x5e>
 800680c:	40021000 	.word	0x40021000
 8006810:	007a1200 	.word	0x007a1200
 8006814:	00b71b00 	.word	0x00b71b00
 8006818:	003d0900 	.word	0x003d0900
 800681c:	08007be8 	.word	0x08007be8
 8006820:	00f42400 	.word	0x00f42400

08006824 <HAL_RCC_OscConfig>:
{
 8006824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006826:	46d6      	mov	lr, sl
 8006828:	464f      	mov	r7, r9
 800682a:	4646      	mov	r6, r8
 800682c:	b5c0      	push	{r6, r7, lr}
 800682e:	0004      	movs	r4, r0
 8006830:	b082      	sub	sp, #8
  if(RCC_OscInitStruct == NULL)
 8006832:	2800      	cmp	r0, #0
 8006834:	d100      	bne.n	8006838 <HAL_RCC_OscConfig+0x14>
 8006836:	e186      	b.n	8006b46 <HAL_RCC_OscConfig+0x322>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006838:	4bca      	ldr	r3, [pc, #808]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
 800683a:	250c      	movs	r5, #12
 800683c:	68da      	ldr	r2, [r3, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800683e:	68de      	ldr	r6, [r3, #12]
 8006840:	2380      	movs	r3, #128	@ 0x80
 8006842:	025b      	lsls	r3, r3, #9
 8006844:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006846:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006848:	4015      	ands	r5, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800684a:	07da      	lsls	r2, r3, #31
 800684c:	d533      	bpl.n	80068b6 <HAL_RCC_OscConfig+0x92>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800684e:	2d08      	cmp	r5, #8
 8006850:	d100      	bne.n	8006854 <HAL_RCC_OscConfig+0x30>
 8006852:	e16f      	b.n	8006b34 <HAL_RCC_OscConfig+0x310>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006854:	2d0c      	cmp	r5, #12
 8006856:	d100      	bne.n	800685a <HAL_RCC_OscConfig+0x36>
 8006858:	e169      	b.n	8006b2e <HAL_RCC_OscConfig+0x30a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800685a:	2280      	movs	r2, #128	@ 0x80
 800685c:	6863      	ldr	r3, [r4, #4]
 800685e:	0252      	lsls	r2, r2, #9
 8006860:	4293      	cmp	r3, r2
 8006862:	d100      	bne.n	8006866 <HAL_RCC_OscConfig+0x42>
 8006864:	e171      	b.n	8006b4a <HAL_RCC_OscConfig+0x326>
 8006866:	21a0      	movs	r1, #160	@ 0xa0
 8006868:	02c9      	lsls	r1, r1, #11
 800686a:	428b      	cmp	r3, r1
 800686c:	d100      	bne.n	8006870 <HAL_RCC_OscConfig+0x4c>
 800686e:	e211      	b.n	8006c94 <HAL_RCC_OscConfig+0x470>
 8006870:	4fbc      	ldr	r7, [pc, #752]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
 8006872:	48bd      	ldr	r0, [pc, #756]	@ (8006b68 <HAL_RCC_OscConfig+0x344>)
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	4001      	ands	r1, r0
 8006878:	6039      	str	r1, [r7, #0]
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	400a      	ands	r2, r1
 800687e:	9201      	str	r2, [sp, #4]
 8006880:	9a01      	ldr	r2, [sp, #4]
 8006882:	49ba      	ldr	r1, [pc, #744]	@ (8006b6c <HAL_RCC_OscConfig+0x348>)
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	400a      	ands	r2, r1
 8006888:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800688a:	2b00      	cmp	r3, #0
 800688c:	d000      	beq.n	8006890 <HAL_RCC_OscConfig+0x6c>
 800688e:	e160      	b.n	8006b52 <HAL_RCC_OscConfig+0x32e>
        tickstart = HAL_GetTick();
 8006890:	f7f9 ff1a 	bl	80006c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006894:	2380      	movs	r3, #128	@ 0x80
 8006896:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 8006898:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800689a:	4699      	mov	r9, r3
 800689c:	e006      	b.n	80068ac <HAL_RCC_OscConfig+0x88>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800689e:	f7f9 ff13 	bl	80006c8 <HAL_GetTick>
 80068a2:	4643      	mov	r3, r8
 80068a4:	1ac0      	subs	r0, r0, r3
 80068a6:	2864      	cmp	r0, #100	@ 0x64
 80068a8:	d900      	bls.n	80068ac <HAL_RCC_OscConfig+0x88>
 80068aa:	e1b1      	b.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068ac:	464a      	mov	r2, r9
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	4213      	tst	r3, r2
 80068b2:	d1f4      	bne.n	800689e <HAL_RCC_OscConfig+0x7a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	079a      	lsls	r2, r3, #30
 80068b8:	d52b      	bpl.n	8006912 <HAL_RCC_OscConfig+0xee>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80068ba:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80068bc:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80068be:	421a      	tst	r2, r3
 80068c0:	d000      	beq.n	80068c4 <HAL_RCC_OscConfig+0xa0>
 80068c2:	e0d9      	b.n	8006a78 <HAL_RCC_OscConfig+0x254>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068c4:	2d04      	cmp	r5, #4
 80068c6:	d100      	bne.n	80068ca <HAL_RCC_OscConfig+0xa6>
 80068c8:	e0de      	b.n	8006a88 <HAL_RCC_OscConfig+0x264>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80068ca:	2d0c      	cmp	r5, #12
 80068cc:	d100      	bne.n	80068d0 <HAL_RCC_OscConfig+0xac>
 80068ce:	e16f      	b.n	8006bb0 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80068d0:	4ea4      	ldr	r6, [pc, #656]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
      if(hsi_state != RCC_HSI_OFF)
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d100      	bne.n	80068d8 <HAL_RCC_OscConfig+0xb4>
 80068d6:	e1b2      	b.n	8006c3e <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80068d8:	2109      	movs	r1, #9
 80068da:	6832      	ldr	r2, [r6, #0]
 80068dc:	438a      	bics	r2, r1
 80068de:	4313      	orrs	r3, r2
 80068e0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80068e2:	f7f9 fef1 	bl	80006c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068e6:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 80068e8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068ea:	4698      	mov	r8, r3
 80068ec:	e005      	b.n	80068fa <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068ee:	f7f9 feeb 	bl	80006c8 <HAL_GetTick>
 80068f2:	1bc0      	subs	r0, r0, r7
 80068f4:	2802      	cmp	r0, #2
 80068f6:	d900      	bls.n	80068fa <HAL_RCC_OscConfig+0xd6>
 80068f8:	e18a      	b.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068fa:	4642      	mov	r2, r8
 80068fc:	6833      	ldr	r3, [r6, #0]
 80068fe:	421a      	tst	r2, r3
 8006900:	d0f5      	beq.n	80068ee <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006902:	6872      	ldr	r2, [r6, #4]
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	499a      	ldr	r1, [pc, #616]	@ (8006b70 <HAL_RCC_OscConfig+0x34c>)
 8006908:	021b      	lsls	r3, r3, #8
 800690a:	400a      	ands	r2, r1
 800690c:	4313      	orrs	r3, r2
 800690e:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	06da      	lsls	r2, r3, #27
 8006914:	d52b      	bpl.n	800696e <HAL_RCC_OscConfig+0x14a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006916:	2d00      	cmp	r5, #0
 8006918:	d100      	bne.n	800691c <HAL_RCC_OscConfig+0xf8>
 800691a:	e0dd      	b.n	8006ad8 <HAL_RCC_OscConfig+0x2b4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800691c:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 800691e:	4e91      	ldr	r6, [pc, #580]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006920:	2b00      	cmp	r3, #0
 8006922:	d100      	bne.n	8006926 <HAL_RCC_OscConfig+0x102>
 8006924:	e1a0      	b.n	8006c68 <HAL_RCC_OscConfig+0x444>
        __HAL_RCC_MSI_ENABLE();
 8006926:	2380      	movs	r3, #128	@ 0x80
 8006928:	6832      	ldr	r2, [r6, #0]
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	4313      	orrs	r3, r2
 800692e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006930:	f7f9 feca 	bl	80006c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006934:	2380      	movs	r3, #128	@ 0x80
 8006936:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8006938:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800693a:	4698      	mov	r8, r3
 800693c:	e005      	b.n	800694a <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800693e:	f7f9 fec3 	bl	80006c8 <HAL_GetTick>
 8006942:	1bc0      	subs	r0, r0, r7
 8006944:	2802      	cmp	r0, #2
 8006946:	d900      	bls.n	800694a <HAL_RCC_OscConfig+0x126>
 8006948:	e162      	b.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800694a:	4642      	mov	r2, r8
 800694c:	6833      	ldr	r3, [r6, #0]
 800694e:	4213      	tst	r3, r2
 8006950:	d0f5      	beq.n	800693e <HAL_RCC_OscConfig+0x11a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006952:	6873      	ldr	r3, [r6, #4]
 8006954:	4a87      	ldr	r2, [pc, #540]	@ (8006b74 <HAL_RCC_OscConfig+0x350>)
 8006956:	4013      	ands	r3, r2
 8006958:	6a22      	ldr	r2, [r4, #32]
 800695a:	4313      	orrs	r3, r2
 800695c:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800695e:	6872      	ldr	r2, [r6, #4]
 8006960:	69e3      	ldr	r3, [r4, #28]
 8006962:	0212      	lsls	r2, r2, #8
 8006964:	061b      	lsls	r3, r3, #24
 8006966:	0a12      	lsrs	r2, r2, #8
 8006968:	4313      	orrs	r3, r2
 800696a:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	071a      	lsls	r2, r3, #28
 8006970:	d519      	bpl.n	80069a6 <HAL_RCC_OscConfig+0x182>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006972:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8006974:	4e7b      	ldr	r6, [pc, #492]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006976:	2b00      	cmp	r3, #0
 8006978:	d100      	bne.n	800697c <HAL_RCC_OscConfig+0x158>
 800697a:	e14b      	b.n	8006c14 <HAL_RCC_OscConfig+0x3f0>
      __HAL_RCC_LSI_ENABLE();
 800697c:	2201      	movs	r2, #1
 800697e:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8006980:	4313      	orrs	r3, r2
 8006982:	6533      	str	r3, [r6, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8006984:	f7f9 fea0 	bl	80006c8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006988:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 800698a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800698c:	4698      	mov	r8, r3
 800698e:	e005      	b.n	800699c <HAL_RCC_OscConfig+0x178>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006990:	f7f9 fe9a 	bl	80006c8 <HAL_GetTick>
 8006994:	1bc0      	subs	r0, r0, r7
 8006996:	2802      	cmp	r0, #2
 8006998:	d900      	bls.n	800699c <HAL_RCC_OscConfig+0x178>
 800699a:	e139      	b.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800699c:	4642      	mov	r2, r8
 800699e:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 80069a0:	421a      	tst	r2, r3
 80069a2:	d0f5      	beq.n	8006990 <HAL_RCC_OscConfig+0x16c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069a4:	6823      	ldr	r3, [r4, #0]
 80069a6:	075b      	lsls	r3, r3, #29
 80069a8:	d542      	bpl.n	8006a30 <HAL_RCC_OscConfig+0x20c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069aa:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80069ac:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ae:	4a6d      	ldr	r2, [pc, #436]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
 80069b0:	055b      	lsls	r3, r3, #21
 80069b2:	6b91      	ldr	r1, [r2, #56]	@ 0x38
    FlagStatus       pwrclkchanged = RESET;
 80069b4:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069b6:	4219      	tst	r1, r3
 80069b8:	d104      	bne.n	80069c4 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80069ba:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80069bc:	430b      	orrs	r3, r1
 80069be:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 80069c0:	2301      	movs	r3, #1
 80069c2:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c4:	2780      	movs	r7, #128	@ 0x80
 80069c6:	4e6c      	ldr	r6, [pc, #432]	@ (8006b78 <HAL_RCC_OscConfig+0x354>)
 80069c8:	007f      	lsls	r7, r7, #1
 80069ca:	6833      	ldr	r3, [r6, #0]
 80069cc:	423b      	tst	r3, r7
 80069ce:	d100      	bne.n	80069d2 <HAL_RCC_OscConfig+0x1ae>
 80069d0:	e10e      	b.n	8006bf0 <HAL_RCC_OscConfig+0x3cc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069d2:	2280      	movs	r2, #128	@ 0x80
 80069d4:	68a3      	ldr	r3, [r4, #8]
 80069d6:	0052      	lsls	r2, r2, #1
 80069d8:	4293      	cmp	r3, r2
 80069da:	d100      	bne.n	80069de <HAL_RCC_OscConfig+0x1ba>
 80069dc:	e19c      	b.n	8006d18 <HAL_RCC_OscConfig+0x4f4>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d100      	bne.n	80069e4 <HAL_RCC_OscConfig+0x1c0>
 80069e2:	e0e9      	b.n	8006bb8 <HAL_RCC_OscConfig+0x394>
 80069e4:	21a0      	movs	r1, #160	@ 0xa0
 80069e6:	00c9      	lsls	r1, r1, #3
 80069e8:	428b      	cmp	r3, r1
 80069ea:	d100      	bne.n	80069ee <HAL_RCC_OscConfig+0x1ca>
 80069ec:	e1b5      	b.n	8006d5a <HAL_RCC_OscConfig+0x536>
 80069ee:	4b5d      	ldr	r3, [pc, #372]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
 80069f0:	4962      	ldr	r1, [pc, #392]	@ (8006b7c <HAL_RCC_OscConfig+0x358>)
 80069f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069f4:	400a      	ands	r2, r1
 80069f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80069f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069fa:	4961      	ldr	r1, [pc, #388]	@ (8006b80 <HAL_RCC_OscConfig+0x35c>)
 80069fc:	400a      	ands	r2, r1
 80069fe:	651a      	str	r2, [r3, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8006a00:	f7f9 fe62 	bl	80006c8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a04:	2780      	movs	r7, #128	@ 0x80
 8006a06:	4b57      	ldr	r3, [pc, #348]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
      tickstart = HAL_GetTick();
 8006a08:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a0a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a0c:	4b5d      	ldr	r3, [pc, #372]	@ (8006b84 <HAL_RCC_OscConfig+0x360>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a0e:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a10:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a12:	e005      	b.n	8006a20 <HAL_RCC_OscConfig+0x1fc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a14:	f7f9 fe58 	bl	80006c8 <HAL_GetTick>
 8006a18:	1b80      	subs	r0, r0, r6
 8006a1a:	4548      	cmp	r0, r9
 8006a1c:	d900      	bls.n	8006a20 <HAL_RCC_OscConfig+0x1fc>
 8006a1e:	e0f7      	b.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a20:	4643      	mov	r3, r8
 8006a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a24:	423b      	tst	r3, r7
 8006a26:	d0f5      	beq.n	8006a14 <HAL_RCC_OscConfig+0x1f0>
    if(pwrclkchanged == SET)
 8006a28:	4653      	mov	r3, sl
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d100      	bne.n	8006a30 <HAL_RCC_OscConfig+0x20c>
 8006a2e:	e16d      	b.n	8006d0c <HAL_RCC_OscConfig+0x4e8>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a30:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d019      	beq.n	8006a6a <HAL_RCC_OscConfig+0x246>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a36:	2d0c      	cmp	r5, #12
 8006a38:	d100      	bne.n	8006a3c <HAL_RCC_OscConfig+0x218>
 8006a3a:	e172      	b.n	8006d22 <HAL_RCC_OscConfig+0x4fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d100      	bne.n	8006a42 <HAL_RCC_OscConfig+0x21e>
 8006a40:	e132      	b.n	8006ca8 <HAL_RCC_OscConfig+0x484>
        __HAL_RCC_PLL_DISABLE();
 8006a42:	4c48      	ldr	r4, [pc, #288]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
 8006a44:	4a50      	ldr	r2, [pc, #320]	@ (8006b88 <HAL_RCC_OscConfig+0x364>)
 8006a46:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006a48:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006a4e:	f7f9 fe3b 	bl	80006c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006a52:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8006a54:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006a56:	e005      	b.n	8006a64 <HAL_RCC_OscConfig+0x240>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a58:	f7f9 fe36 	bl	80006c8 <HAL_GetTick>
 8006a5c:	1b40      	subs	r0, r0, r5
 8006a5e:	2802      	cmp	r0, #2
 8006a60:	d900      	bls.n	8006a64 <HAL_RCC_OscConfig+0x240>
 8006a62:	e0d5      	b.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	4233      	tst	r3, r6
 8006a68:	d1f6      	bne.n	8006a58 <HAL_RCC_OscConfig+0x234>
  return HAL_OK;
 8006a6a:	2000      	movs	r0, #0
}
 8006a6c:	b002      	add	sp, #8
 8006a6e:	bce0      	pop	{r5, r6, r7}
 8006a70:	46ba      	mov	sl, r7
 8006a72:	46b1      	mov	r9, r6
 8006a74:	46a8      	mov	r8, r5
 8006a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006a78:	483a      	ldr	r0, [pc, #232]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006a7a:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006a7c:	6801      	ldr	r1, [r0, #0]
 8006a7e:	4311      	orrs	r1, r2
 8006a80:	6001      	str	r1, [r0, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a82:	2d04      	cmp	r5, #4
 8006a84:	d000      	beq.n	8006a88 <HAL_RCC_OscConfig+0x264>
 8006a86:	e720      	b.n	80068ca <HAL_RCC_OscConfig+0xa6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006a88:	4a36      	ldr	r2, [pc, #216]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
 8006a8a:	6812      	ldr	r2, [r2, #0]
 8006a8c:	0752      	lsls	r2, r2, #29
 8006a8e:	d501      	bpl.n	8006a94 <HAL_RCC_OscConfig+0x270>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d058      	beq.n	8006b46 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a94:	4e33      	ldr	r6, [pc, #204]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
 8006a96:	6922      	ldr	r2, [r4, #16]
 8006a98:	6871      	ldr	r1, [r6, #4]
 8006a9a:	4835      	ldr	r0, [pc, #212]	@ (8006b70 <HAL_RCC_OscConfig+0x34c>)
 8006a9c:	0212      	lsls	r2, r2, #8
 8006a9e:	4001      	ands	r1, r0
 8006aa0:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006aa2:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aa4:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006aa6:	6832      	ldr	r2, [r6, #0]
 8006aa8:	438a      	bics	r2, r1
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006aae:	f7ff fe71 	bl	8006794 <HAL_RCC_GetSysClockFreq>
 8006ab2:	68f3      	ldr	r3, [r6, #12]
 8006ab4:	4a35      	ldr	r2, [pc, #212]	@ (8006b8c <HAL_RCC_OscConfig+0x368>)
 8006ab6:	061b      	lsls	r3, r3, #24
 8006ab8:	0f1b      	lsrs	r3, r3, #28
 8006aba:	5cd3      	ldrb	r3, [r2, r3]
 8006abc:	4934      	ldr	r1, [pc, #208]	@ (8006b90 <HAL_RCC_OscConfig+0x36c>)
 8006abe:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 8006ac0:	4b34      	ldr	r3, [pc, #208]	@ (8006b94 <HAL_RCC_OscConfig+0x370>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ac2:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8006ac4:	6818      	ldr	r0, [r3, #0]
 8006ac6:	f7f9 fdbb 	bl	8000640 <HAL_InitTick>
      if(status != HAL_OK)
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d1ce      	bne.n	8006a6c <HAL_RCC_OscConfig+0x248>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	06da      	lsls	r2, r3, #27
 8006ad2:	d400      	bmi.n	8006ad6 <HAL_RCC_OscConfig+0x2b2>
 8006ad4:	e74b      	b.n	800696e <HAL_RCC_OscConfig+0x14a>
 8006ad6:	e71e      	b.n	8006916 <HAL_RCC_OscConfig+0xf2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ad8:	4b22      	ldr	r3, [pc, #136]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	059b      	lsls	r3, r3, #22
 8006ade:	d502      	bpl.n	8006ae6 <HAL_RCC_OscConfig+0x2c2>
 8006ae0:	69a3      	ldr	r3, [r4, #24]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d02f      	beq.n	8006b46 <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
 8006ae8:	4822      	ldr	r0, [pc, #136]	@ (8006b74 <HAL_RCC_OscConfig+0x350>)
 8006aea:	6851      	ldr	r1, [r2, #4]
 8006aec:	6a23      	ldr	r3, [r4, #32]
 8006aee:	4001      	ands	r1, r0
 8006af0:	4319      	orrs	r1, r3
 8006af2:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006af4:	6850      	ldr	r0, [r2, #4]
 8006af6:	69e1      	ldr	r1, [r4, #28]
 8006af8:	0200      	lsls	r0, r0, #8
 8006afa:	0a00      	lsrs	r0, r0, #8
 8006afc:	0609      	lsls	r1, r1, #24
 8006afe:	4301      	orrs	r1, r0
 8006b00:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006b02:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006b04:	2280      	movs	r2, #128	@ 0x80
 8006b06:	0b5b      	lsrs	r3, r3, #13
 8006b08:	3301      	adds	r3, #1
 8006b0a:	0212      	lsls	r2, r2, #8
 8006b0c:	409a      	lsls	r2, r3
 8006b0e:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006b10:	481e      	ldr	r0, [pc, #120]	@ (8006b8c <HAL_RCC_OscConfig+0x368>)
 8006b12:	060a      	lsls	r2, r1, #24
 8006b14:	0f12      	lsrs	r2, r2, #28
 8006b16:	5c82      	ldrb	r2, [r0, r2]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006b18:	4e1d      	ldr	r6, [pc, #116]	@ (8006b90 <HAL_RCC_OscConfig+0x36c>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006b1a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006b1c:	6033      	str	r3, [r6, #0]
        status = HAL_InitTick (uwTickPrio);
 8006b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006b94 <HAL_RCC_OscConfig+0x370>)
 8006b20:	6818      	ldr	r0, [r3, #0]
 8006b22:	f7f9 fd8d 	bl	8000640 <HAL_InitTick>
        if(status != HAL_OK)
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d1a0      	bne.n	8006a6c <HAL_RCC_OscConfig+0x248>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	e71f      	b.n	800696e <HAL_RCC_OscConfig+0x14a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006b2e:	2e00      	cmp	r6, #0
 8006b30:	d100      	bne.n	8006b34 <HAL_RCC_OscConfig+0x310>
 8006b32:	e692      	b.n	800685a <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b34:	4a0b      	ldr	r2, [pc, #44]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
 8006b36:	6812      	ldr	r2, [r2, #0]
 8006b38:	0392      	lsls	r2, r2, #14
 8006b3a:	d400      	bmi.n	8006b3e <HAL_RCC_OscConfig+0x31a>
 8006b3c:	e6bb      	b.n	80068b6 <HAL_RCC_OscConfig+0x92>
 8006b3e:	6862      	ldr	r2, [r4, #4]
 8006b40:	2a00      	cmp	r2, #0
 8006b42:	d000      	beq.n	8006b46 <HAL_RCC_OscConfig+0x322>
 8006b44:	e6b7      	b.n	80068b6 <HAL_RCC_OscConfig+0x92>
    return HAL_ERROR;
 8006b46:	2001      	movs	r0, #1
 8006b48:	e790      	b.n	8006a6c <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b4a:	4906      	ldr	r1, [pc, #24]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
 8006b4c:	680a      	ldr	r2, [r1, #0]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8006b52:	f7f9 fdb9 	bl	80006c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b56:	4b03      	ldr	r3, [pc, #12]	@ (8006b64 <HAL_RCC_OscConfig+0x340>)
        tickstart = HAL_GetTick();
 8006b58:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b5a:	4699      	mov	r9, r3
 8006b5c:	2380      	movs	r3, #128	@ 0x80
 8006b5e:	029b      	lsls	r3, r3, #10
 8006b60:	4698      	mov	r8, r3
 8006b62:	e01e      	b.n	8006ba2 <HAL_RCC_OscConfig+0x37e>
 8006b64:	40021000 	.word	0x40021000
 8006b68:	fffeffff 	.word	0xfffeffff
 8006b6c:	fffbffff 	.word	0xfffbffff
 8006b70:	ffffe0ff 	.word	0xffffe0ff
 8006b74:	ffff1fff 	.word	0xffff1fff
 8006b78:	40007000 	.word	0x40007000
 8006b7c:	fffffeff 	.word	0xfffffeff
 8006b80:	fffffbff 	.word	0xfffffbff
 8006b84:	00001388 	.word	0x00001388
 8006b88:	feffffff 	.word	0xfeffffff
 8006b8c:	08007bf4 	.word	0x08007bf4
 8006b90:	2000000c 	.word	0x2000000c
 8006b94:	20000014 	.word	0x20000014
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b98:	f7f9 fd96 	bl	80006c8 <HAL_GetTick>
 8006b9c:	1bc0      	subs	r0, r0, r7
 8006b9e:	2864      	cmp	r0, #100	@ 0x64
 8006ba0:	d836      	bhi.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	4642      	mov	r2, r8
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4213      	tst	r3, r2
 8006baa:	d0f5      	beq.n	8006b98 <HAL_RCC_OscConfig+0x374>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	e682      	b.n	80068b6 <HAL_RCC_OscConfig+0x92>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006bb0:	2e00      	cmp	r6, #0
 8006bb2:	d000      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x392>
 8006bb4:	e68c      	b.n	80068d0 <HAL_RCC_OscConfig+0xac>
 8006bb6:	e767      	b.n	8006a88 <HAL_RCC_OscConfig+0x264>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb8:	4e6d      	ldr	r6, [pc, #436]	@ (8006d70 <HAL_RCC_OscConfig+0x54c>)
 8006bba:	4a6e      	ldr	r2, [pc, #440]	@ (8006d74 <HAL_RCC_OscConfig+0x550>)
 8006bbc:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	6533      	str	r3, [r6, #80]	@ 0x50
 8006bc2:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8006bc4:	4a6c      	ldr	r2, [pc, #432]	@ (8006d78 <HAL_RCC_OscConfig+0x554>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	6533      	str	r3, [r6, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8006bca:	f7f9 fd7d 	bl	80006c8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bce:	2380      	movs	r3, #128	@ 0x80
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bd4:	4b69      	ldr	r3, [pc, #420]	@ (8006d7c <HAL_RCC_OscConfig+0x558>)
      tickstart = HAL_GetTick();
 8006bd6:	0007      	movs	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bd8:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006bda:	e004      	b.n	8006be6 <HAL_RCC_OscConfig+0x3c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bdc:	f7f9 fd74 	bl	80006c8 <HAL_GetTick>
 8006be0:	1bc0      	subs	r0, r0, r7
 8006be2:	4548      	cmp	r0, r9
 8006be4:	d814      	bhi.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006be6:	4642      	mov	r2, r8
 8006be8:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8006bea:	4213      	tst	r3, r2
 8006bec:	d1f6      	bne.n	8006bdc <HAL_RCC_OscConfig+0x3b8>
 8006bee:	e71b      	b.n	8006a28 <HAL_RCC_OscConfig+0x204>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bf0:	6833      	ldr	r3, [r6, #0]
 8006bf2:	433b      	orrs	r3, r7
 8006bf4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006bf6:	f7f9 fd67 	bl	80006c8 <HAL_GetTick>
 8006bfa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bfc:	6833      	ldr	r3, [r6, #0]
 8006bfe:	423b      	tst	r3, r7
 8006c00:	d000      	beq.n	8006c04 <HAL_RCC_OscConfig+0x3e0>
 8006c02:	e6e6      	b.n	80069d2 <HAL_RCC_OscConfig+0x1ae>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c04:	f7f9 fd60 	bl	80006c8 <HAL_GetTick>
 8006c08:	4643      	mov	r3, r8
 8006c0a:	1ac0      	subs	r0, r0, r3
 8006c0c:	2864      	cmp	r0, #100	@ 0x64
 8006c0e:	d9f5      	bls.n	8006bfc <HAL_RCC_OscConfig+0x3d8>
            return HAL_TIMEOUT;
 8006c10:	2003      	movs	r0, #3
 8006c12:	e72b      	b.n	8006a6c <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_LSI_DISABLE();
 8006c14:	2201      	movs	r2, #1
 8006c16:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8006c18:	4393      	bics	r3, r2
 8006c1a:	6533      	str	r3, [r6, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8006c1c:	f7f9 fd54 	bl	80006c8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c20:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8006c22:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c24:	4698      	mov	r8, r3
 8006c26:	e004      	b.n	8006c32 <HAL_RCC_OscConfig+0x40e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c28:	f7f9 fd4e 	bl	80006c8 <HAL_GetTick>
 8006c2c:	1bc0      	subs	r0, r0, r7
 8006c2e:	2802      	cmp	r0, #2
 8006c30:	d8ee      	bhi.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c32:	4642      	mov	r2, r8
 8006c34:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 8006c36:	421a      	tst	r2, r3
 8006c38:	d1f6      	bne.n	8006c28 <HAL_RCC_OscConfig+0x404>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	e6b3      	b.n	80069a6 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_DISABLE();
 8006c3e:	2201      	movs	r2, #1
 8006c40:	6833      	ldr	r3, [r6, #0]
 8006c42:	4393      	bics	r3, r2
 8006c44:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006c46:	f7f9 fd3f 	bl	80006c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c4a:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8006c4c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c4e:	4698      	mov	r8, r3
 8006c50:	e004      	b.n	8006c5c <HAL_RCC_OscConfig+0x438>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c52:	f7f9 fd39 	bl	80006c8 <HAL_GetTick>
 8006c56:	1bc0      	subs	r0, r0, r7
 8006c58:	2802      	cmp	r0, #2
 8006c5a:	d8d9      	bhi.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006c5c:	4642      	mov	r2, r8
 8006c5e:	6833      	ldr	r3, [r6, #0]
 8006c60:	421a      	tst	r2, r3
 8006c62:	d1f6      	bne.n	8006c52 <HAL_RCC_OscConfig+0x42e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	e733      	b.n	8006ad0 <HAL_RCC_OscConfig+0x2ac>
        __HAL_RCC_MSI_DISABLE();
 8006c68:	6833      	ldr	r3, [r6, #0]
 8006c6a:	4a42      	ldr	r2, [pc, #264]	@ (8006d74 <HAL_RCC_OscConfig+0x550>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006c70:	f7f9 fd2a 	bl	80006c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006c74:	2380      	movs	r3, #128	@ 0x80
 8006c76:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8006c78:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006c7a:	4698      	mov	r8, r3
 8006c7c:	e004      	b.n	8006c88 <HAL_RCC_OscConfig+0x464>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c7e:	f7f9 fd23 	bl	80006c8 <HAL_GetTick>
 8006c82:	1bc0      	subs	r0, r0, r7
 8006c84:	2802      	cmp	r0, #2
 8006c86:	d8c3      	bhi.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006c88:	4642      	mov	r2, r8
 8006c8a:	6833      	ldr	r3, [r6, #0]
 8006c8c:	4213      	tst	r3, r2
 8006c8e:	d1f6      	bne.n	8006c7e <HAL_RCC_OscConfig+0x45a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	e66c      	b.n	800696e <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c94:	2180      	movs	r1, #128	@ 0x80
 8006c96:	4b36      	ldr	r3, [pc, #216]	@ (8006d70 <HAL_RCC_OscConfig+0x54c>)
 8006c98:	02c9      	lsls	r1, r1, #11
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	4301      	orrs	r1, r0
 8006c9e:	6019      	str	r1, [r3, #0]
 8006ca0:	6819      	ldr	r1, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ca6:	e754      	b.n	8006b52 <HAL_RCC_OscConfig+0x32e>
        __HAL_RCC_PLL_DISABLE();
 8006ca8:	4d31      	ldr	r5, [pc, #196]	@ (8006d70 <HAL_RCC_OscConfig+0x54c>)
 8006caa:	4a35      	ldr	r2, [pc, #212]	@ (8006d80 <HAL_RCC_OscConfig+0x55c>)
 8006cac:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006cae:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006cb4:	f7f9 fd08 	bl	80006c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006cb8:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8006cba:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006cbc:	e004      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cbe:	f7f9 fd03 	bl	80006c8 <HAL_GetTick>
 8006cc2:	1b80      	subs	r0, r0, r6
 8006cc4:	2802      	cmp	r0, #2
 8006cc6:	d8a3      	bhi.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	423b      	tst	r3, r7
 8006ccc:	d1f7      	bne.n	8006cbe <HAL_RCC_OscConfig+0x49a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006cd0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006cd2:	68ea      	ldr	r2, [r5, #12]
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	492b      	ldr	r1, [pc, #172]	@ (8006d84 <HAL_RCC_OscConfig+0x560>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006cd8:	4e25      	ldr	r6, [pc, #148]	@ (8006d70 <HAL_RCC_OscConfig+0x54c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cda:	400a      	ands	r2, r1
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8006ce4:	2380      	movs	r3, #128	@ 0x80
 8006ce6:	682a      	ldr	r2, [r5, #0]
 8006ce8:	045b      	lsls	r3, r3, #17
 8006cea:	4313      	orrs	r3, r2
 8006cec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006cee:	f7f9 fceb 	bl	80006c8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006cf2:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8006cf4:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006cf6:	04ad      	lsls	r5, r5, #18
 8006cf8:	e004      	b.n	8006d04 <HAL_RCC_OscConfig+0x4e0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cfa:	f7f9 fce5 	bl	80006c8 <HAL_GetTick>
 8006cfe:	1b00      	subs	r0, r0, r4
 8006d00:	2802      	cmp	r0, #2
 8006d02:	d885      	bhi.n	8006c10 <HAL_RCC_OscConfig+0x3ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006d04:	6833      	ldr	r3, [r6, #0]
 8006d06:	422b      	tst	r3, r5
 8006d08:	d0f7      	beq.n	8006cfa <HAL_RCC_OscConfig+0x4d6>
 8006d0a:	e6ae      	b.n	8006a6a <HAL_RCC_OscConfig+0x246>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d0c:	4a18      	ldr	r2, [pc, #96]	@ (8006d70 <HAL_RCC_OscConfig+0x54c>)
 8006d0e:	491e      	ldr	r1, [pc, #120]	@ (8006d88 <HAL_RCC_OscConfig+0x564>)
 8006d10:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8006d12:	400b      	ands	r3, r1
 8006d14:	6393      	str	r3, [r2, #56]	@ 0x38
 8006d16:	e68b      	b.n	8006a30 <HAL_RCC_OscConfig+0x20c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d18:	4a15      	ldr	r2, [pc, #84]	@ (8006d70 <HAL_RCC_OscConfig+0x54c>)
 8006d1a:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	6513      	str	r3, [r2, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d20:	e66e      	b.n	8006a00 <HAL_RCC_OscConfig+0x1dc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d100      	bne.n	8006d28 <HAL_RCC_OscConfig+0x504>
 8006d26:	e70e      	b.n	8006b46 <HAL_RCC_OscConfig+0x322>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d28:	2280      	movs	r2, #128	@ 0x80
        pll_config = RCC->CFGR;
 8006d2a:	4b11      	ldr	r3, [pc, #68]	@ (8006d70 <HAL_RCC_OscConfig+0x54c>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
        pll_config = RCC->CFGR;
 8006d2e:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d30:	0252      	lsls	r2, r2, #9
 8006d32:	401a      	ands	r2, r3
 8006d34:	428a      	cmp	r2, r1
 8006d36:	d000      	beq.n	8006d3a <HAL_RCC_OscConfig+0x516>
 8006d38:	e705      	b.n	8006b46 <HAL_RCC_OscConfig+0x322>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006d3a:	22f0      	movs	r2, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d3c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006d3e:	0392      	lsls	r2, r2, #14
 8006d40:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d42:	428a      	cmp	r2, r1
 8006d44:	d000      	beq.n	8006d48 <HAL_RCC_OscConfig+0x524>
 8006d46:	e6fe      	b.n	8006b46 <HAL_RCC_OscConfig+0x322>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006d48:	22c0      	movs	r2, #192	@ 0xc0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006d4a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006d4c:	0412      	lsls	r2, r2, #16
 8006d4e:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006d50:	1a18      	subs	r0, r3, r0
 8006d52:	1e43      	subs	r3, r0, #1
 8006d54:	4198      	sbcs	r0, r3
 8006d56:	b2c0      	uxtb	r0, r0
 8006d58:	e688      	b.n	8006a6c <HAL_RCC_OscConfig+0x248>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d5a:	4b05      	ldr	r3, [pc, #20]	@ (8006d70 <HAL_RCC_OscConfig+0x54c>)
 8006d5c:	3901      	subs	r1, #1
 8006d5e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006d60:	39ff      	subs	r1, #255	@ 0xff
 8006d62:	4301      	orrs	r1, r0
 8006d64:	6519      	str	r1, [r3, #80]	@ 0x50
 8006d66:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	651a      	str	r2, [r3, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d6c:	e648      	b.n	8006a00 <HAL_RCC_OscConfig+0x1dc>
 8006d6e:	46c0      	nop			@ (mov r8, r8)
 8006d70:	40021000 	.word	0x40021000
 8006d74:	fffffeff 	.word	0xfffffeff
 8006d78:	fffffbff 	.word	0xfffffbff
 8006d7c:	00001388 	.word	0x00001388
 8006d80:	feffffff 	.word	0xfeffffff
 8006d84:	ff02ffff 	.word	0xff02ffff
 8006d88:	efffffff 	.word	0xefffffff

08006d8c <HAL_RCC_ClockConfig>:
{
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	46ce      	mov	lr, r9
 8006d90:	4647      	mov	r7, r8
 8006d92:	0005      	movs	r5, r0
 8006d94:	000c      	movs	r4, r1
 8006d96:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d066      	beq.n	8006e6a <HAL_RCC_ClockConfig+0xde>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	4e6a      	ldr	r6, [pc, #424]	@ (8006f48 <HAL_RCC_ClockConfig+0x1bc>)
 8006da0:	6833      	ldr	r3, [r6, #0]
 8006da2:	4013      	ands	r3, r2
 8006da4:	428b      	cmp	r3, r1
 8006da6:	d362      	bcc.n	8006e6e <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	079a      	lsls	r2, r3, #30
 8006dac:	d506      	bpl.n	8006dbc <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dae:	20f0      	movs	r0, #240	@ 0xf0
 8006db0:	4966      	ldr	r1, [pc, #408]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c0>)
 8006db2:	68ca      	ldr	r2, [r1, #12]
 8006db4:	4382      	bics	r2, r0
 8006db6:	68a8      	ldr	r0, [r5, #8]
 8006db8:	4302      	orrs	r2, r0
 8006dba:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dbc:	07db      	lsls	r3, r3, #31
 8006dbe:	d52d      	bpl.n	8006e1c <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dc0:	4b62      	ldr	r3, [pc, #392]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c0>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dc2:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dc4:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dc6:	2a02      	cmp	r2, #2
 8006dc8:	d04d      	beq.n	8006e66 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dca:	2a03      	cmp	r2, #3
 8006dcc:	d100      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0x44>
 8006dce:	e06f      	b.n	8006eb0 <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006dd0:	2a01      	cmp	r2, #1
 8006dd2:	d100      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0x4a>
 8006dd4:	e0a3      	b.n	8006f1e <HAL_RCC_ClockConfig+0x192>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006dd6:	059b      	lsls	r3, r3, #22
 8006dd8:	d547      	bpl.n	8006e6a <HAL_RCC_ClockConfig+0xde>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dda:	2103      	movs	r1, #3
 8006ddc:	4e5b      	ldr	r6, [pc, #364]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c0>)
 8006dde:	68f3      	ldr	r3, [r6, #12]
 8006de0:	438b      	bics	r3, r1
 8006de2:	4313      	orrs	r3, r2
 8006de4:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006de6:	f7f9 fc6f 	bl	80006c8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dea:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8006dec:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d100      	bne.n	8006df4 <HAL_RCC_ClockConfig+0x68>
 8006df2:	e074      	b.n	8006ede <HAL_RCC_ClockConfig+0x152>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d100      	bne.n	8006dfa <HAL_RCC_ClockConfig+0x6e>
 8006df8:	e081      	b.n	8006efe <HAL_RCC_ClockConfig+0x172>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d100      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x74>
 8006dfe:	e093      	b.n	8006f28 <HAL_RCC_ClockConfig+0x19c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006e00:	230c      	movs	r3, #12
 8006e02:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e04:	4b52      	ldr	r3, [pc, #328]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006e06:	4699      	mov	r9, r3
 8006e08:	e004      	b.n	8006e14 <HAL_RCC_ClockConfig+0x88>
 8006e0a:	f7f9 fc5d 	bl	80006c8 <HAL_GetTick>
 8006e0e:	1bc0      	subs	r0, r0, r7
 8006e10:	4548      	cmp	r0, r9
 8006e12:	d842      	bhi.n	8006e9a <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006e14:	4642      	mov	r2, r8
 8006e16:	68f3      	ldr	r3, [r6, #12]
 8006e18:	421a      	tst	r2, r3
 8006e1a:	d1f6      	bne.n	8006e0a <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	4e4a      	ldr	r6, [pc, #296]	@ (8006f48 <HAL_RCC_ClockConfig+0x1bc>)
 8006e20:	6833      	ldr	r3, [r6, #0]
 8006e22:	4013      	ands	r3, r2
 8006e24:	42a3      	cmp	r3, r4
 8006e26:	d847      	bhi.n	8006eb8 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e28:	682b      	ldr	r3, [r5, #0]
 8006e2a:	075a      	lsls	r2, r3, #29
 8006e2c:	d506      	bpl.n	8006e3c <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e2e:	4947      	ldr	r1, [pc, #284]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c0>)
 8006e30:	4848      	ldr	r0, [pc, #288]	@ (8006f54 <HAL_RCC_ClockConfig+0x1c8>)
 8006e32:	68ca      	ldr	r2, [r1, #12]
 8006e34:	4002      	ands	r2, r0
 8006e36:	68e8      	ldr	r0, [r5, #12]
 8006e38:	4302      	orrs	r2, r0
 8006e3a:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e3c:	071b      	lsls	r3, r3, #28
 8006e3e:	d42e      	bmi.n	8006e9e <HAL_RCC_ClockConfig+0x112>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e40:	f7ff fca8 	bl	8006794 <HAL_RCC_GetSysClockFreq>
 8006e44:	4b41      	ldr	r3, [pc, #260]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c0>)
 8006e46:	4a44      	ldr	r2, [pc, #272]	@ (8006f58 <HAL_RCC_ClockConfig+0x1cc>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	4944      	ldr	r1, [pc, #272]	@ (8006f5c <HAL_RCC_ClockConfig+0x1d0>)
 8006e4c:	061b      	lsls	r3, r3, #24
 8006e4e:	0f1b      	lsrs	r3, r3, #28
 8006e50:	5cd3      	ldrb	r3, [r2, r3]
 8006e52:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 8006e54:	4b42      	ldr	r3, [pc, #264]	@ (8006f60 <HAL_RCC_ClockConfig+0x1d4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e56:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8006e58:	6818      	ldr	r0, [r3, #0]
 8006e5a:	f7f9 fbf1 	bl	8000640 <HAL_InitTick>
}
 8006e5e:	bcc0      	pop	{r6, r7}
 8006e60:	46b9      	mov	r9, r7
 8006e62:	46b0      	mov	r8, r6
 8006e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e66:	039b      	lsls	r3, r3, #14
 8006e68:	d4b7      	bmi.n	8006dda <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8006e6a:	2001      	movs	r0, #1
 8006e6c:	e7f7      	b.n	8006e5e <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e6e:	6833      	ldr	r3, [r6, #0]
 8006e70:	4393      	bics	r3, r2
 8006e72:	430b      	orrs	r3, r1
 8006e74:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006e76:	f7f9 fc27 	bl	80006c8 <HAL_GetTick>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e7e:	4b34      	ldr	r3, [pc, #208]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 8006e80:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e82:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e84:	4642      	mov	r2, r8
 8006e86:	6833      	ldr	r3, [r6, #0]
 8006e88:	4013      	ands	r3, r2
 8006e8a:	42a3      	cmp	r3, r4
 8006e8c:	d100      	bne.n	8006e90 <HAL_RCC_ClockConfig+0x104>
 8006e8e:	e78b      	b.n	8006da8 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e90:	f7f9 fc1a 	bl	80006c8 <HAL_GetTick>
 8006e94:	1bc0      	subs	r0, r0, r7
 8006e96:	4548      	cmp	r0, r9
 8006e98:	d9f4      	bls.n	8006e84 <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 8006e9a:	2003      	movs	r0, #3
 8006e9c:	e7df      	b.n	8006e5e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e9e:	492b      	ldr	r1, [pc, #172]	@ (8006f4c <HAL_RCC_ClockConfig+0x1c0>)
 8006ea0:	692b      	ldr	r3, [r5, #16]
 8006ea2:	68ca      	ldr	r2, [r1, #12]
 8006ea4:	482f      	ldr	r0, [pc, #188]	@ (8006f64 <HAL_RCC_ClockConfig+0x1d8>)
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4002      	ands	r2, r0
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60cb      	str	r3, [r1, #12]
 8006eae:	e7c7      	b.n	8006e40 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006eb0:	019b      	lsls	r3, r3, #6
 8006eb2:	d492      	bmi.n	8006dda <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8006eb4:	2001      	movs	r0, #1
 8006eb6:	e7d2      	b.n	8006e5e <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eb8:	6833      	ldr	r3, [r6, #0]
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eba:	2701      	movs	r7, #1
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ebc:	4393      	bics	r3, r2
 8006ebe:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006ec0:	f7f9 fc02 	bl	80006c8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec4:	4b22      	ldr	r3, [pc, #136]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 8006ec6:	0004      	movs	r4, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec8:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eca:	6833      	ldr	r3, [r6, #0]
 8006ecc:	421f      	tst	r7, r3
 8006ece:	d0ab      	beq.n	8006e28 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ed0:	f7f9 fbfa 	bl	80006c8 <HAL_GetTick>
 8006ed4:	1b00      	subs	r0, r0, r4
 8006ed6:	4540      	cmp	r0, r8
 8006ed8:	d9f7      	bls.n	8006eca <HAL_RCC_ClockConfig+0x13e>
        return HAL_TIMEOUT;
 8006eda:	2003      	movs	r0, #3
 8006edc:	e7bf      	b.n	8006e5e <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ede:	330a      	adds	r3, #10
 8006ee0:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006ee4:	4699      	mov	r9, r3
 8006ee6:	e004      	b.n	8006ef2 <HAL_RCC_ClockConfig+0x166>
 8006ee8:	f7f9 fbee 	bl	80006c8 <HAL_GetTick>
 8006eec:	1bc0      	subs	r0, r0, r7
 8006eee:	4548      	cmp	r0, r9
 8006ef0:	d8d3      	bhi.n	8006e9a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ef2:	4642      	mov	r2, r8
 8006ef4:	68f3      	ldr	r3, [r6, #12]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d1f5      	bne.n	8006ee8 <HAL_RCC_ClockConfig+0x15c>
 8006efc:	e78e      	b.n	8006e1c <HAL_RCC_ClockConfig+0x90>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006efe:	3309      	adds	r3, #9
 8006f00:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f02:	4b13      	ldr	r3, [pc, #76]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006f04:	4699      	mov	r9, r3
 8006f06:	e004      	b.n	8006f12 <HAL_RCC_ClockConfig+0x186>
 8006f08:	f7f9 fbde 	bl	80006c8 <HAL_GetTick>
 8006f0c:	1bc0      	subs	r0, r0, r7
 8006f0e:	4548      	cmp	r0, r9
 8006f10:	d8c3      	bhi.n	8006e9a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f12:	4642      	mov	r2, r8
 8006f14:	68f3      	ldr	r3, [r6, #12]
 8006f16:	4013      	ands	r3, r2
 8006f18:	2b0c      	cmp	r3, #12
 8006f1a:	d1f5      	bne.n	8006f08 <HAL_RCC_ClockConfig+0x17c>
 8006f1c:	e77e      	b.n	8006e1c <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f1e:	075b      	lsls	r3, r3, #29
 8006f20:	d500      	bpl.n	8006f24 <HAL_RCC_ClockConfig+0x198>
 8006f22:	e75a      	b.n	8006dda <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8006f24:	2001      	movs	r0, #1
 8006f26:	e79a      	b.n	8006e5e <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f28:	330b      	adds	r3, #11
 8006f2a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f2c:	4b08      	ldr	r3, [pc, #32]	@ (8006f50 <HAL_RCC_ClockConfig+0x1c4>)
 8006f2e:	4699      	mov	r9, r3
 8006f30:	e004      	b.n	8006f3c <HAL_RCC_ClockConfig+0x1b0>
 8006f32:	f7f9 fbc9 	bl	80006c8 <HAL_GetTick>
 8006f36:	1bc0      	subs	r0, r0, r7
 8006f38:	4548      	cmp	r0, r9
 8006f3a:	d8ae      	bhi.n	8006e9a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f3c:	4642      	mov	r2, r8
 8006f3e:	68f3      	ldr	r3, [r6, #12]
 8006f40:	4013      	ands	r3, r2
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	d1f5      	bne.n	8006f32 <HAL_RCC_ClockConfig+0x1a6>
 8006f46:	e769      	b.n	8006e1c <HAL_RCC_ClockConfig+0x90>
 8006f48:	40022000 	.word	0x40022000
 8006f4c:	40021000 	.word	0x40021000
 8006f50:	00001388 	.word	0x00001388
 8006f54:	fffff8ff 	.word	0xfffff8ff
 8006f58:	08007bf4 	.word	0x08007bf4
 8006f5c:	2000000c 	.word	0x2000000c
 8006f60:	20000014 	.word	0x20000014
 8006f64:	ffffc7ff 	.word	0xffffc7ff

08006f68 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8006f68:	4b01      	ldr	r3, [pc, #4]	@ (8006f70 <HAL_RCC_GetHCLKFreq+0x8>)
 8006f6a:	6818      	ldr	r0, [r3, #0]
}
 8006f6c:	4770      	bx	lr
 8006f6e:	46c0      	nop			@ (mov r8, r8)
 8006f70:	2000000c 	.word	0x2000000c

08006f74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f74:	4b04      	ldr	r3, [pc, #16]	@ (8006f88 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8006f76:	4a05      	ldr	r2, [pc, #20]	@ (8006f8c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	4905      	ldr	r1, [pc, #20]	@ (8006f90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006f7c:	055b      	lsls	r3, r3, #21
 8006f7e:	0f5b      	lsrs	r3, r3, #29
 8006f80:	5ccb      	ldrb	r3, [r1, r3]
 8006f82:	6810      	ldr	r0, [r2, #0]
 8006f84:	40d8      	lsrs	r0, r3
}
 8006f86:	4770      	bx	lr
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	2000000c 	.word	0x2000000c
 8006f90:	08007c04 	.word	0x08007c04

08006f94 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f94:	4b04      	ldr	r3, [pc, #16]	@ (8006fa8 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8006f96:	4a05      	ldr	r2, [pc, #20]	@ (8006fac <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	4905      	ldr	r1, [pc, #20]	@ (8006fb0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006f9c:	049b      	lsls	r3, r3, #18
 8006f9e:	0f5b      	lsrs	r3, r3, #29
 8006fa0:	5ccb      	ldrb	r3, [r1, r3]
 8006fa2:	6810      	ldr	r0, [r2, #0]
 8006fa4:	40d8      	lsrs	r0, r3
}
 8006fa6:	4770      	bx	lr
 8006fa8:	40021000 	.word	0x40021000
 8006fac:	2000000c 	.word	0x2000000c
 8006fb0:	08007c04 	.word	0x08007c04

08006fb4 <HAL_RCC_GetOscConfig>:
{
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != (void *)NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8006fb4:	231f      	movs	r3, #31
  RCC_OscInitStruct->OscillatorType |= RCC_OSCILLATORTYPE_HSI48;
#endif /* RCC_HSI48_SUPPORT */


  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8006fb6:	4a24      	ldr	r2, [pc, #144]	@ (8007048 <HAL_RCC_GetOscConfig+0x94>)
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8006fb8:	6003      	str	r3, [r0, #0]
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8006fba:	6813      	ldr	r3, [r2, #0]
{
 8006fbc:	b510      	push	{r4, lr}
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8006fbe:	035b      	lsls	r3, r3, #13
 8006fc0:	d43b      	bmi.n	800703a <HAL_RCC_GetOscConfig+0x86>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8006fc2:	6813      	ldr	r3, [r2, #0]
 8006fc4:	03db      	lsls	r3, r3, #15
 8006fc6:	0fdb      	lsrs	r3, r3, #31
 8006fc8:	041b      	lsls	r3, r3, #16
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8006fca:	2201      	movs	r2, #1
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
  }

  RCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos);
  RCC_OscInitStruct->MSIClockRange = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSIRANGE));
 8006fcc:	24e0      	movs	r4, #224	@ 0xe0
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8006fce:	6043      	str	r3, [r0, #4]
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8006fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8007048 <HAL_RCC_GetOscConfig+0x94>)
  RCC_OscInitStruct->MSIClockRange = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSIRANGE));
 8006fd2:	0224      	lsls	r4, r4, #8
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8006fd4:	6819      	ldr	r1, [r3, #0]
 8006fd6:	4011      	ands	r1, r2
 8006fd8:	60c1      	str	r1, [r0, #12]
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> 8);
 8006fda:	6859      	ldr	r1, [r3, #4]
 8006fdc:	04c9      	lsls	r1, r1, #19
 8006fde:	0ec9      	lsrs	r1, r1, #27
 8006fe0:	6101      	str	r1, [r0, #16]
  if((RCC->CR &RCC_CR_MSION) == RCC_CR_MSION)
 8006fe2:	6819      	ldr	r1, [r3, #0]
 8006fe4:	0a09      	lsrs	r1, r1, #8
 8006fe6:	4011      	ands	r1, r2
 8006fe8:	6181      	str	r1, [r0, #24]
  RCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos);
 8006fea:	6859      	ldr	r1, [r3, #4]
 8006fec:	0e09      	lsrs	r1, r1, #24
 8006fee:	61c1      	str	r1, [r0, #28]
  RCC_OscInitStruct->MSIClockRange = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSIRANGE));
 8006ff0:	6859      	ldr	r1, [r3, #4]
 8006ff2:	4021      	ands	r1, r4
 8006ff4:	6201      	str	r1, [r0, #32]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSEBYP) == RCC_CSR_LSEBYP)
 8006ff6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006ff8:	0549      	lsls	r1, r1, #21
 8006ffa:	d421      	bmi.n	8007040 <HAL_RCC_GetOscConfig+0x8c>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
  }
  else if((RCC->CSR &RCC_CSR_LSEON) == RCC_CSR_LSEON)
 8006ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ffe:	0a1b      	lsrs	r3, r3, #8
 8007000:	401a      	ands	r2, r3
 8007002:	0212      	lsls	r2, r2, #8
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8007004:	2301      	movs	r3, #1
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8007006:	6082      	str	r2, [r0, #8]
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8007008:	4a0f      	ldr	r2, [pc, #60]	@ (8007048 <HAL_RCC_GetOscConfig+0x94>)
 800700a:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 800700c:	400b      	ands	r3, r1
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 800700e:	2180      	movs	r1, #128	@ 0x80
 8007010:	6143      	str	r3, [r0, #20]
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8007012:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8007014:	0249      	lsls	r1, r1, #9
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8007016:	01db      	lsls	r3, r3, #7
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8007018:	0fdb      	lsrs	r3, r3, #31
 800701a:	3301      	adds	r3, #1
 800701c:	6243      	str	r3, [r0, #36]	@ 0x24
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 800701e:	68d3      	ldr	r3, [r2, #12]
 8007020:	400b      	ands	r3, r1
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
 8007022:	21f0      	movs	r1, #240	@ 0xf0
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8007024:	6283      	str	r3, [r0, #40]	@ 0x28
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
 8007026:	68d3      	ldr	r3, [r2, #12]
 8007028:	0389      	lsls	r1, r1, #14
 800702a:	400b      	ands	r3, r1
 800702c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  RCC_OscInitStruct->PLL.PLLDIV = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLDIV);
 800702e:	68d3      	ldr	r3, [r2, #12]
 8007030:	22c0      	movs	r2, #192	@ 0xc0
 8007032:	0412      	lsls	r2, r2, #16
 8007034:	4013      	ands	r3, r2
 8007036:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8007038:	bd10      	pop	{r4, pc}
 800703a:	23a0      	movs	r3, #160	@ 0xa0
 800703c:	02db      	lsls	r3, r3, #11
 800703e:	e7c4      	b.n	8006fca <HAL_RCC_GetOscConfig+0x16>
 8007040:	22a0      	movs	r2, #160	@ 0xa0
 8007042:	00d2      	lsls	r2, r2, #3
 8007044:	e7de      	b.n	8007004 <HAL_RCC_GetOscConfig+0x50>
 8007046:	46c0      	nop			@ (mov r8, r8)
 8007048:	40021000 	.word	0x40021000

0800704c <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800704c:	230f      	movs	r3, #15

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800704e:	2203      	movs	r2, #3
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007050:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007052:	4b0c      	ldr	r3, [pc, #48]	@ (8007084 <HAL_RCC_GetClockConfig+0x38>)
{
 8007054:	b510      	push	{r4, lr}
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007056:	68dc      	ldr	r4, [r3, #12]
 8007058:	4022      	ands	r2, r4
 800705a:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800705c:	22f0      	movs	r2, #240	@ 0xf0
 800705e:	68dc      	ldr	r4, [r3, #12]
 8007060:	4022      	ands	r2, r4

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007062:	24e0      	movs	r4, #224	@ 0xe0
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007064:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	00e4      	lsls	r4, r4, #3
 800706a:	4022      	ands	r2, r4
 800706c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	08db      	lsrs	r3, r3, #3
 8007072:	4023      	ands	r3, r4
 8007074:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007076:	4b04      	ldr	r3, [pc, #16]	@ (8007088 <HAL_RCC_GetClockConfig+0x3c>)
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	2301      	movs	r3, #1
 800707c:	4013      	ands	r3, r2
 800707e:	600b      	str	r3, [r1, #0]
}
 8007080:	bd10      	pop	{r4, pc}
 8007082:	46c0      	nop			@ (mov r8, r8)
 8007084:	40021000 	.word	0x40021000
 8007088:	40022000 	.word	0x40022000

0800708c <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800708c:	4770      	bx	lr
 800708e:	46c0      	nop			@ (mov r8, r8)

08007090 <HAL_RCC_NMI_IRQHandler>:
{
 8007090:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007092:	2580      	movs	r5, #128	@ 0x80
 8007094:	4c04      	ldr	r4, [pc, #16]	@ (80070a8 <HAL_RCC_NMI_IRQHandler+0x18>)
 8007096:	006d      	lsls	r5, r5, #1
 8007098:	6963      	ldr	r3, [r4, #20]
 800709a:	422b      	tst	r3, r5
 800709c:	d100      	bne.n	80070a0 <HAL_RCC_NMI_IRQHandler+0x10>
}
 800709e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_CSSCallback();
 80070a0:	f7ff fff4 	bl	800708c <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80070a4:	61a5      	str	r5, [r4, #24]
}
 80070a6:	e7fa      	b.n	800709e <HAL_RCC_NMI_IRQHandler+0xe>
 80070a8:	40021000 	.word	0x40021000

080070ac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	46ce      	mov	lr, r9
 80070b0:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070b2:	6803      	ldr	r3, [r0, #0]
{
 80070b4:	0004      	movs	r4, r0
 80070b6:	b580      	push	{r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070b8:	069a      	lsls	r2, r3, #26
 80070ba:	d567      	bpl.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070bc:	2380      	movs	r3, #128	@ 0x80
  FlagStatus       pwrclkchanged = RESET;
 80070be:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070c0:	4a5c      	ldr	r2, [pc, #368]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80070c2:	055b      	lsls	r3, r3, #21
 80070c4:	6b91      	ldr	r1, [r2, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 80070c6:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070c8:	4219      	tst	r1, r3
 80070ca:	d100      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x22>
 80070cc:	e088      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070ce:	2680      	movs	r6, #128	@ 0x80
 80070d0:	4d59      	ldr	r5, [pc, #356]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80070d2:	0076      	lsls	r6, r6, #1
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	4233      	tst	r3, r6
 80070d8:	d100      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x30>
 80070da:	e08d      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80070dc:	20c0      	movs	r0, #192	@ 0xc0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80070de:	4955      	ldr	r1, [pc, #340]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x188>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80070e0:	6863      	ldr	r3, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80070e2:	680a      	ldr	r2, [r1, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80070e4:	0380      	lsls	r0, r0, #14
 80070e6:	405a      	eors	r2, r3
 80070e8:	4202      	tst	r2, r0
 80070ea:	d006      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80070ec:	22c0      	movs	r2, #192	@ 0xc0
 80070ee:	0018      	movs	r0, r3
 80070f0:	0292      	lsls	r2, r2, #10
 80070f2:	4010      	ands	r0, r2
 80070f4:	4290      	cmp	r0, r2
 80070f6:	d100      	bne.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80070f8:	e096      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80070fa:	4d4e      	ldr	r5, [pc, #312]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80070fc:	22c0      	movs	r2, #192	@ 0xc0
 80070fe:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8007100:	0292      	lsls	r2, r2, #10
 8007102:	0006      	movs	r6, r0

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007104:	6821      	ldr	r1, [r4, #0]
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8007106:	4016      	ands	r6, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8007108:	4210      	tst	r0, r2
 800710a:	d024      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 800710c:	401a      	ands	r2, r3
 800710e:	42b2      	cmp	r2, r6
 8007110:	d021      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007112:	0689      	lsls	r1, r1, #26
 8007114:	d536      	bpl.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007116:	2680      	movs	r6, #128	@ 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8007118:	6d29      	ldr	r1, [r5, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 800711a:	6d2f      	ldr	r7, [r5, #80]	@ 0x50
 800711c:	0336      	lsls	r6, r6, #12
 800711e:	433e      	orrs	r6, r7
 8007120:	652e      	str	r6, [r5, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007122:	6d2e      	ldr	r6, [r5, #80]	@ 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8007124:	4845      	ldr	r0, [pc, #276]	@ (800723c <HAL_RCCEx_PeriphCLKConfig+0x190>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007126:	4f46      	ldr	r7, [pc, #280]	@ (8007240 <HAL_RCCEx_PeriphCLKConfig+0x194>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8007128:	4008      	ands	r0, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800712a:	403e      	ands	r6, r7
 800712c:	652e      	str	r6, [r5, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800712e:	6528      	str	r0, [r5, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8007130:	05c9      	lsls	r1, r1, #23
 8007132:	d516      	bpl.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007134:	f7f9 fac8 	bl	80006c8 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007138:	2780      	movs	r7, #128	@ 0x80
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800713a:	4b42      	ldr	r3, [pc, #264]	@ (8007244 <HAL_RCCEx_PeriphCLKConfig+0x198>)
        tickstart = HAL_GetTick();
 800713c:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800713e:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007140:	00bf      	lsls	r7, r7, #2
 8007142:	e004      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007144:	f7f9 fac0 	bl	80006c8 <HAL_GetTick>
 8007148:	1b80      	subs	r0, r0, r6
 800714a:	4548      	cmp	r0, r9
 800714c:	d863      	bhi.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x16a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800714e:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8007150:	423b      	tst	r3, r7
 8007152:	d0f7      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007154:	6821      	ldr	r1, [r4, #0]
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007156:	0689      	lsls	r1, r1, #26
 8007158:	d514      	bpl.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800715a:	22c0      	movs	r2, #192	@ 0xc0
 800715c:	6863      	ldr	r3, [r4, #4]
 800715e:	0292      	lsls	r2, r2, #10
 8007160:	401a      	ands	r2, r3
 8007162:	21c0      	movs	r1, #192	@ 0xc0
 8007164:	0289      	lsls	r1, r1, #10
 8007166:	428a      	cmp	r2, r1
 8007168:	d108      	bne.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 800716a:	4832      	ldr	r0, [pc, #200]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800716c:	4d36      	ldr	r5, [pc, #216]	@ (8007248 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 800716e:	6801      	ldr	r1, [r0, #0]
 8007170:	4029      	ands	r1, r5
 8007172:	25c0      	movs	r5, #192	@ 0xc0
 8007174:	03ad      	lsls	r5, r5, #14
 8007176:	402b      	ands	r3, r5
 8007178:	430b      	orrs	r3, r1
 800717a:	6003      	str	r3, [r0, #0]
 800717c:	492d      	ldr	r1, [pc, #180]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800717e:	6d0b      	ldr	r3, [r1, #80]	@ 0x50
 8007180:	4313      	orrs	r3, r2
 8007182:	650b      	str	r3, [r1, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007184:	4643      	mov	r3, r8
 8007186:	2b01      	cmp	r3, #1
 8007188:	d047      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	079a      	lsls	r2, r3, #30
 800718e:	d506      	bpl.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007190:	200c      	movs	r0, #12
 8007192:	4928      	ldr	r1, [pc, #160]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8007194:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8007196:	4382      	bics	r2, r0
 8007198:	68a0      	ldr	r0, [r4, #8]
 800719a:	4302      	orrs	r2, r0
 800719c:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800719e:	075a      	lsls	r2, r3, #29
 80071a0:	d506      	bpl.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071a2:	4924      	ldr	r1, [pc, #144]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80071a4:	4829      	ldr	r0, [pc, #164]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80071a6:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80071a8:	4002      	ands	r2, r0
 80071aa:	68e0      	ldr	r0, [r4, #12]
 80071ac:	4302      	orrs	r2, r0
 80071ae:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80071b0:	071a      	lsls	r2, r3, #28
 80071b2:	d506      	bpl.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80071b4:	491f      	ldr	r1, [pc, #124]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80071b6:	4826      	ldr	r0, [pc, #152]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80071b8:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 80071ba:	4002      	ands	r2, r0
 80071bc:	6920      	ldr	r0, [r4, #16]
 80071be:	4302      	orrs	r2, r0
 80071c0:	64ca      	str	r2, [r1, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80071c2:	061b      	lsls	r3, r3, #24
 80071c4:	d404      	bmi.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80071c6:	2000      	movs	r0, #0
}
 80071c8:	bcc0      	pop	{r6, r7}
 80071ca:	46b9      	mov	r9, r7
 80071cc:	46b0      	mov	r8, r6
 80071ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80071d0:	4a18      	ldr	r2, [pc, #96]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80071d2:	4920      	ldr	r1, [pc, #128]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80071d4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80071d6:	400b      	ands	r3, r1
 80071d8:	6961      	ldr	r1, [r4, #20]
 80071da:	430b      	orrs	r3, r1
 80071dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80071de:	e7f2      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80071e0:	6b91      	ldr	r1, [r2, #56]	@ 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071e2:	2680      	movs	r6, #128	@ 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 80071e4:	430b      	orrs	r3, r1
 80071e6:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 80071e8:	2301      	movs	r3, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ea:	4d13      	ldr	r5, [pc, #76]	@ (8007238 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
      pwrclkchanged = SET;
 80071ec:	4698      	mov	r8, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ee:	682b      	ldr	r3, [r5, #0]
 80071f0:	0076      	lsls	r6, r6, #1
 80071f2:	4233      	tst	r3, r6
 80071f4:	d000      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80071f6:	e771      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	4333      	orrs	r3, r6
 80071fc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80071fe:	f7f9 fa63 	bl	80006c8 <HAL_GetTick>
 8007202:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	4233      	tst	r3, r6
 8007208:	d000      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800720a:	e767      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800720c:	f7f9 fa5c 	bl	80006c8 <HAL_GetTick>
 8007210:	1bc0      	subs	r0, r0, r7
 8007212:	2864      	cmp	r0, #100	@ 0x64
 8007214:	d9f6      	bls.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x158>
          return HAL_TIMEOUT;
 8007216:	2003      	movs	r0, #3
 8007218:	e7d6      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800721a:	4a06      	ldr	r2, [pc, #24]	@ (8007234 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800721c:	490e      	ldr	r1, [pc, #56]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800721e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007220:	400b      	ands	r3, r1
 8007222:	6393      	str	r3, [r2, #56]	@ 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	e7b1      	b.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007228:	680a      	ldr	r2, [r1, #0]
 800722a:	0392      	lsls	r2, r2, #14
 800722c:	d400      	bmi.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x184>
 800722e:	e764      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
          return HAL_ERROR;
 8007230:	2001      	movs	r0, #1
 8007232:	e7c9      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8007234:	40021000 	.word	0x40021000
 8007238:	40007000 	.word	0x40007000
 800723c:	fffcffff 	.word	0xfffcffff
 8007240:	fff7ffff 	.word	0xfff7ffff
 8007244:	00001388 	.word	0x00001388
 8007248:	ffcfffff 	.word	0xffcfffff
 800724c:	fffff3ff 	.word	0xfffff3ff
 8007250:	ffffcfff 	.word	0xffffcfff
 8007254:	fff3ffff 	.word	0xfff3ffff
 8007258:	efffffff 	.word	0xefffffff

0800725c <HAL_RCCEx_GetPeriphCLKConfig>:
{
  uint32_t srcclk;

   /* Set all possible values for the extended clock type parameter -----------*/
  /* Common part first */
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
 800725c:	23ae      	movs	r3, #174	@ 0xae
#if defined(LCD)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LCD;
#endif /* LCD */

  /* Get the RTC/LCD configuration -----------------------------------------------*/
  srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800725e:	22c0      	movs	r2, #192	@ 0xc0
 8007260:	4910      	ldr	r1, [pc, #64]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKConfig+0x48>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
 8007262:	6003      	str	r3, [r0, #0]
  srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007264:	6d0b      	ldr	r3, [r1, #80]	@ 0x50
 8007266:	0292      	lsls	r2, r2, #10
 8007268:	4013      	ands	r3, r2
  if (srcclk != RCC_RTCCLKSOURCE_HSE_DIV2)
 800726a:	4293      	cmp	r3, r2
 800726c:	d100      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKConfig+0x14>
    PeriphClkInit->RTCClockSelection = srcclk;
  }
  else
  {
    /* Source clock is HSE. Need to get the prescaler value*/
    PeriphClkInit->RTCClockSelection = srcclk | (READ_BIT(RCC->CR, RCC_CR_RTCPRE));
 800726e:	680b      	ldr	r3, [r1, #0]
#if defined(RCC_CCIPR_USART1SEL)
  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection  = __HAL_RCC_GET_USART1_SOURCE();
#endif /* RCC_CCIPR_USART1SEL */
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 8007270:	220c      	movs	r2, #12
 8007272:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKConfig+0x48>)
 8007274:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007276:	400a      	ands	r2, r1
  /* Get the LPUART1 clock source ---------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8007278:	21c0      	movs	r1, #192	@ 0xc0
  PeriphClkInit->Usart2ClockSelection  = __HAL_RCC_GET_USART2_SOURCE();
 800727a:	6082      	str	r2, [r0, #8]
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 800727c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800727e:	0109      	lsls	r1, r1, #4
 8007280:	400a      	ands	r2, r1
  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8007282:	21c0      	movs	r1, #192	@ 0xc0
  PeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 8007284:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 8007286:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007288:	0189      	lsls	r1, r1, #6
 800728a:	400a      	ands	r2, r1
#if defined(RCC_CCIPR_I2C3SEL)
/* Get the I2C3 clock source -----------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection    = __HAL_RCC_GET_I2C3_SOURCE();
#endif /* RCC_CCIPR_I2C3SEL */
  /* Get the LPTIM1 clock source -----------------------------------------------*/
  PeriphClkInit->LptimClockSelection   = __HAL_RCC_GET_LPTIM1_SOURCE();
 800728c:	21c0      	movs	r1, #192	@ 0xc0
  PeriphClkInit->I2c1ClockSelection    = __HAL_RCC_GET_I2C1_SOURCE();
 800728e:	6102      	str	r2, [r0, #16]
  PeriphClkInit->LptimClockSelection   = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007290:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007292:	0309      	lsls	r1, r1, #12
 8007294:	400a      	ands	r2, r1
 8007296:	6142      	str	r2, [r0, #20]
  /* Get the RTC clock source -----------------------------------------------*/
  PeriphClkInit->RTCClockSelection     = __HAL_RCC_GET_RTC_SOURCE();
 8007298:	22c0      	movs	r2, #192	@ 0xc0
 800729a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800729c:	0292      	lsls	r2, r2, #10
 800729e:	4013      	ands	r3, r2
 80072a0:	6043      	str	r3, [r0, #4]
#if defined(USB)
  /* Get the USB/RNG clock source -----------------------------------------------*/
  PeriphClkInit->UsbClockSelection     = __HAL_RCC_GET_USB_SOURCE();
#endif /* USB */
}
 80072a2:	4770      	bx	lr
 80072a4:	40021000 	.word	0x40021000

080072a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_I2C3     I2C3 peripheral clock (*)
  * @note   (*) means that this peripheral is not present on all the devices
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072a8:	0003      	movs	r3, r0
 80072aa:	b570      	push	{r4, r5, r6, lr}
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80072ac:	2808      	cmp	r0, #8
 80072ae:	d034      	beq.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
 80072b0:	d81c      	bhi.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 80072b2:	2802      	cmp	r0, #2
 80072b4:	d043      	beq.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 80072b6:	2804      	cmp	r0, #4
 80072b8:	d13f      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      break;
    }
  case RCC_PERIPHCLK_LPUART1:
    {
      /* Get the current LPUART1 source */
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80072ba:	4d4f      	ldr	r5, [pc, #316]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80072bc:	22c0      	movs	r2, #192	@ 0xc0
 80072be:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80072c0:	0112      	lsls	r2, r2, #4
 80072c2:	000c      	movs	r4, r1
 80072c4:	4014      	ands	r4, r2

      /* Check if LPUART1 clock selection is PCLK1 */
      if (srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80072c6:	4211      	tst	r1, r2
 80072c8:	d050      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      /* Check if HSI is ready and if LPUART1 clock selection is HSI */
      else if (srcclk == RCC_LPUART1CLKSOURCE_HSI)
 80072ca:	2180      	movs	r1, #128	@ 0x80
 80072cc:	0109      	lsls	r1, r1, #4
 80072ce:	428c      	cmp	r4, r1
 80072d0:	d100      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 80072d2:	e06d      	b.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
            frequency =  HSI_VALUE;
          }
        }
      }
      /* Check if LPUART1 clock selection is SYSCLK */
      else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80072d4:	2380      	movs	r3, #128	@ 0x80
 80072d6:	00db      	lsls	r3, r3, #3
 80072d8:	429c      	cmp	r4, r3
 80072da:	d04a      	beq.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
  uint32_t frequency = 0U;
 80072dc:	2000      	movs	r0, #0
      {
        frequency = HAL_RCC_GetSysClockFreq();
      }
      /* Check if LSE is ready  and if LPUART1 clock selection is LSE */
      else if (srcclk == RCC_LPUART1CLKSOURCE_LSE)
 80072de:	4294      	cmp	r4, r2
 80072e0:	d12c      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY))
 80072e2:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 80072e4:	0580      	lsls	r0, r0, #22
 80072e6:	0fc0      	lsrs	r0, r0, #31
 80072e8:	03c0      	lsls	r0, r0, #15
 80072ea:	e027      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
  switch (PeriphClk)
 80072ec:	2820      	cmp	r0, #32
 80072ee:	d124      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80072f0:	20c0      	movs	r0, #192	@ 0xc0
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80072f2:	2480      	movs	r4, #128	@ 0x80
      temp_reg = RCC->CSR;
 80072f4:	4a40      	ldr	r2, [pc, #256]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80072f6:	0280      	lsls	r0, r0, #10
      temp_reg = RCC->CSR;
 80072f8:	6d11      	ldr	r1, [r2, #80]	@ 0x50
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80072fa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 80072fc:	0264      	lsls	r4, r4, #9
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80072fe:	4003      	ands	r3, r0
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8007300:	42a3      	cmp	r3, r4
 8007302:	d02f      	beq.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
      else if (srcclk == RCC_RTCCLKSOURCE_LSI)
 8007304:	2480      	movs	r4, #128	@ 0x80
 8007306:	02a4      	lsls	r4, r4, #10
 8007308:	42a3      	cmp	r3, r4
 800730a:	d135      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
        if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSIRDY))
 800730c:	2302      	movs	r3, #2
 800730e:	0018      	movs	r0, r3
 8007310:	4008      	ands	r0, r1
 8007312:	420b      	tst	r3, r1
 8007314:	d012      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
          frequency = LSI_VALUE;
 8007316:	4839      	ldr	r0, [pc, #228]	@ (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007318:	e010      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      break;
    }
  case RCC_PERIPHCLK_I2C1:
    {
      /* Get the current I2C1 source */
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800731a:	4937      	ldr	r1, [pc, #220]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800731c:	23c0      	movs	r3, #192	@ 0xc0
 800731e:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8007320:	019b      	lsls	r3, r3, #6
 8007322:	0010      	movs	r0, r2
 8007324:	4018      	ands	r0, r3

      /* Check if I2C1 clock selection is PCLK1 */
      if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007326:	421a      	tst	r2, r3
 8007328:	d020      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
      {
        frequency = HAL_RCC_GetPCLK1Freq();
      }
      /* Check if HSI is ready and if I2C1 clock selection is HSI */
      else if (srcclk == RCC_I2C1CLKSOURCE_HSI)
 800732a:	2380      	movs	r3, #128	@ 0x80
 800732c:	019b      	lsls	r3, r3, #6
 800732e:	4298      	cmp	r0, r3
 8007330:	d056      	beq.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency =  HSI_VALUE;
          }
        }
      }
      /* Check if I2C1 clock selection is SYSCLK */
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007332:	2380      	movs	r3, #128	@ 0x80
 8007334:	015b      	lsls	r3, r3, #5
 8007336:	4298      	cmp	r0, r3
 8007338:	d01b      	beq.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
  uint32_t frequency = 0U;
 800733a:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 800733c:	bd70      	pop	{r4, r5, r6, pc}
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800733e:	220c      	movs	r2, #12
 8007340:	0011      	movs	r1, r2
 8007342:	4c2d      	ldr	r4, [pc, #180]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8007344:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8007346:	4019      	ands	r1, r3
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007348:	421a      	tst	r2, r3
 800734a:	d00f      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
      else if (srcclk == RCC_USART2CLKSOURCE_HSI)
 800734c:	2908      	cmp	r1, #8
 800734e:	d03f      	beq.n	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007350:	2904      	cmp	r1, #4
 8007352:	d00e      	beq.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xca>
  uint32_t frequency = 0U;
 8007354:	2000      	movs	r0, #0
      else if (srcclk == RCC_USART2CLKSOURCE_LSE)
 8007356:	290c      	cmp	r1, #12
 8007358:	d1f0      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSERDY))
 800735a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800735c:	0580      	lsls	r0, r0, #22
 800735e:	0fc0      	lsrs	r0, r0, #31
 8007360:	03c0      	lsls	r0, r0, #15
 8007362:	e7eb      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSERDY)))
 8007364:	0589      	lsls	r1, r1, #22
 8007366:	0fc9      	lsrs	r1, r1, #31
 8007368:	03c8      	lsls	r0, r1, #15
 800736a:	e7e7      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        frequency = HAL_RCC_GetPCLK1Freq();
 800736c:	f7ff fe02 	bl	8006f74 <HAL_RCC_GetPCLK1Freq>
 8007370:	e7e4      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        frequency = HAL_RCC_GetSysClockFreq();
 8007372:	f7ff fa0f 	bl	8006794 <HAL_RCC_GetSysClockFreq>
 8007376:	e7e1      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      else if (srcclk == RCC_RTCCLKSOURCE_HSE_DIVX)
 8007378:	4283      	cmp	r3, r0
 800737a:	d1de      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800737c:	6813      	ldr	r3, [r2, #0]
 800737e:	0018      	movs	r0, r3
 8007380:	4020      	ands	r0, r4
 8007382:	4223      	tst	r3, r4
 8007384:	d0da      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
          clkprediv = __HAL_RCC_GET_RTC_HSE_PRESCALER();
 8007386:	6813      	ldr	r3, [r2, #0]
 8007388:	22c0      	movs	r2, #192	@ 0xc0
 800738a:	2180      	movs	r1, #128	@ 0x80
 800738c:	0392      	lsls	r2, r2, #14
 800738e:	4013      	ands	r3, r2
          switch (clkprediv)
 8007390:	0389      	lsls	r1, r1, #14
 8007392:	428b      	cmp	r3, r1
 8007394:	d02e      	beq.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007396:	4293      	cmp	r3, r2
 8007398:	d02a      	beq.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
            frequency =  (HSI_VALUE >> 2U);
 800739a:	4a19      	ldr	r2, [pc, #100]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800739c:	1898      	adds	r0, r3, r2
 800739e:	4243      	negs	r3, r0
 80073a0:	4158      	adcs	r0, r3
 80073a2:	4b18      	ldr	r3, [pc, #96]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80073a4:	4240      	negs	r0, r0
 80073a6:	4018      	ands	r0, r3
 80073a8:	4b17      	ldr	r3, [pc, #92]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80073aa:	469c      	mov	ip, r3
 80073ac:	4460      	add	r0, ip
 80073ae:	e7c5      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073b0:	682a      	ldr	r2, [r5, #0]
 80073b2:	4010      	ands	r0, r2
 80073b4:	4213      	tst	r3, r2
 80073b6:	d0c1      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
          if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	2010      	movs	r0, #16
 80073bc:	4018      	ands	r0, r3
            frequency =  (HSI_VALUE >> 2U);
 80073be:	4243      	negs	r3, r0
 80073c0:	4158      	adcs	r0, r3
 80073c2:	4b12      	ldr	r3, [pc, #72]	@ (800740c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80073c4:	4240      	negs	r0, r0
 80073c6:	4018      	ands	r0, r3
 80073c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80073ca:	469c      	mov	ip, r3
 80073cc:	4460      	add	r0, ip
 80073ce:	e7b5      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073d0:	2204      	movs	r2, #4
 80073d2:	0010      	movs	r0, r2
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	4018      	ands	r0, r3
 80073d8:	421a      	tst	r2, r3
 80073da:	d0af      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
          if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	e7ec      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073e0:	2204      	movs	r2, #4
 80073e2:	0010      	movs	r0, r2
 80073e4:	680b      	ldr	r3, [r1, #0]
 80073e6:	4018      	ands	r0, r3
 80073e8:	421a      	tst	r2, r3
 80073ea:	d0a7      	beq.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
          if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
 80073ec:	680b      	ldr	r3, [r1, #0]
 80073ee:	e7e4      	b.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x112>
              frequency = HSE_VALUE / 16U;
 80073f0:	4807      	ldr	r0, [pc, #28]	@ (8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80073f2:	e7a3      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80073f4:	4807      	ldr	r0, [pc, #28]	@ (8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80073f6:	e7a1      	b.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80073f8:	40021000 	.word	0x40021000
 80073fc:	00009088 	.word	0x00009088
 8007400:	fff00000 	.word	0xfff00000
 8007404:	ffe17b80 	.word	0xffe17b80
 8007408:	003d0900 	.word	0x003d0900
 800740c:	00b71b00 	.word	0x00b71b00
 8007410:	0007a120 	.word	0x0007a120
 8007414:	000f4240 	.word	0x000f4240

08007418 <HAL_RCCEx_EnableLSECSS>:
  * @brief  Enables the LSE Clock Security System.
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_LSECSSON) ;
 8007418:	2380      	movs	r3, #128	@ 0x80
 800741a:	4a03      	ldr	r2, [pc, #12]	@ (8007428 <HAL_RCCEx_EnableLSECSS+0x10>)
 800741c:	019b      	lsls	r3, r3, #6
 800741e:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8007420:	430b      	orrs	r3, r1
 8007422:	6513      	str	r3, [r2, #80]	@ 0x50
}
 8007424:	4770      	bx	lr
 8007426:	46c0      	nop			@ (mov r8, r8)
 8007428:	40021000 	.word	0x40021000

0800742c <HAL_RCCEx_DisableLSECSS>:
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
  /* Disable LSE CSS */
   CLEAR_BIT(RCC->CSR, RCC_CSR_LSECSSON) ;
 800742c:	4b04      	ldr	r3, [pc, #16]	@ (8007440 <HAL_RCCEx_DisableLSECSS+0x14>)
 800742e:	4905      	ldr	r1, [pc, #20]	@ (8007444 <HAL_RCCEx_DisableLSECSS+0x18>)
 8007430:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007432:	400a      	ands	r2, r1

  /* Disable LSE CSS IT */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 8007434:	2180      	movs	r1, #128	@ 0x80
   CLEAR_BIT(RCC->CSR, RCC_CSR_LSECSSON) ;
 8007436:	651a      	str	r2, [r3, #80]	@ 0x50
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
 8007438:	691a      	ldr	r2, [r3, #16]
 800743a:	438a      	bics	r2, r1
 800743c:	611a      	str	r2, [r3, #16]
}
 800743e:	4770      	bx	lr
 8007440:	40021000 	.word	0x40021000
 8007444:	ffffdfff 	.word	0xffffdfff

08007448 <HAL_RCCEx_EnableLSECSS_IT>:
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
  /* Enable LSE CSS */
   SET_BIT(RCC->CSR, RCC_CSR_LSECSSON) ;
 8007448:	2280      	movs	r2, #128	@ 0x80
 800744a:	4b09      	ldr	r3, [pc, #36]	@ (8007470 <HAL_RCCEx_EnableLSECSS_IT+0x28>)
 800744c:	0192      	lsls	r2, r2, #6
 800744e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007450:	430a      	orrs	r2, r1

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
 8007452:	2180      	movs	r1, #128	@ 0x80
   SET_BIT(RCC->CSR, RCC_CSR_LSECSSON) ;
 8007454:	651a      	str	r2, [r3, #80]	@ 0x50
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
 8007456:	691a      	ldr	r2, [r3, #16]
 8007458:	430a      	orrs	r2, r1
 800745a:	611a      	str	r2, [r3, #16]

  /* Enable IT on EXTI Line 19 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
 800745c:	2280      	movs	r2, #128	@ 0x80
 800745e:	4b05      	ldr	r3, [pc, #20]	@ (8007474 <HAL_RCCEx_EnableLSECSS_IT+0x2c>)
 8007460:	0312      	lsls	r2, r2, #12
 8007462:	6819      	ldr	r1, [r3, #0]
 8007464:	4311      	orrs	r1, r2
 8007466:	6019      	str	r1, [r3, #0]
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
 8007468:	6899      	ldr	r1, [r3, #8]
 800746a:	430a      	orrs	r2, r1
 800746c:	609a      	str	r2, [r3, #8]
}
 800746e:	4770      	bx	lr
 8007470:	40021000 	.word	0x40021000
 8007474:	40010400 	.word	0x40010400

08007478 <HAL_RCCEx_LSECSS_Callback>:
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
   */
}
 8007478:	4770      	bx	lr
 800747a:	46c0      	nop			@ (mov r8, r8)

0800747c <HAL_RCCEx_LSECSS_IRQHandler>:
{
 800747c:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
 800747e:	2580      	movs	r5, #128	@ 0x80
 8007480:	4c04      	ldr	r4, [pc, #16]	@ (8007494 <HAL_RCCEx_LSECSS_IRQHandler+0x18>)
 8007482:	6963      	ldr	r3, [r4, #20]
 8007484:	421d      	tst	r5, r3
 8007486:	d100      	bne.n	800748a <HAL_RCCEx_LSECSS_IRQHandler+0xe>
}
 8007488:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCCEx_LSECSS_Callback();
 800748a:	f7ff fff5 	bl	8007478 <HAL_RCCEx_LSECSS_Callback>
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
 800748e:	61a5      	str	r5, [r4, #24]
}
 8007490:	e7fa      	b.n	8007488 <HAL_RCCEx_LSECSS_IRQHandler+0xc>
 8007492:	46c0      	nop			@ (mov r8, r8)
 8007494:	40021000 	.word	0x40021000

08007498 <__udivsi3>:
 8007498:	2200      	movs	r2, #0
 800749a:	0843      	lsrs	r3, r0, #1
 800749c:	428b      	cmp	r3, r1
 800749e:	d374      	bcc.n	800758a <__udivsi3+0xf2>
 80074a0:	0903      	lsrs	r3, r0, #4
 80074a2:	428b      	cmp	r3, r1
 80074a4:	d35f      	bcc.n	8007566 <__udivsi3+0xce>
 80074a6:	0a03      	lsrs	r3, r0, #8
 80074a8:	428b      	cmp	r3, r1
 80074aa:	d344      	bcc.n	8007536 <__udivsi3+0x9e>
 80074ac:	0b03      	lsrs	r3, r0, #12
 80074ae:	428b      	cmp	r3, r1
 80074b0:	d328      	bcc.n	8007504 <__udivsi3+0x6c>
 80074b2:	0c03      	lsrs	r3, r0, #16
 80074b4:	428b      	cmp	r3, r1
 80074b6:	d30d      	bcc.n	80074d4 <__udivsi3+0x3c>
 80074b8:	22ff      	movs	r2, #255	@ 0xff
 80074ba:	0209      	lsls	r1, r1, #8
 80074bc:	ba12      	rev	r2, r2
 80074be:	0c03      	lsrs	r3, r0, #16
 80074c0:	428b      	cmp	r3, r1
 80074c2:	d302      	bcc.n	80074ca <__udivsi3+0x32>
 80074c4:	1212      	asrs	r2, r2, #8
 80074c6:	0209      	lsls	r1, r1, #8
 80074c8:	d065      	beq.n	8007596 <__udivsi3+0xfe>
 80074ca:	0b03      	lsrs	r3, r0, #12
 80074cc:	428b      	cmp	r3, r1
 80074ce:	d319      	bcc.n	8007504 <__udivsi3+0x6c>
 80074d0:	e000      	b.n	80074d4 <__udivsi3+0x3c>
 80074d2:	0a09      	lsrs	r1, r1, #8
 80074d4:	0bc3      	lsrs	r3, r0, #15
 80074d6:	428b      	cmp	r3, r1
 80074d8:	d301      	bcc.n	80074de <__udivsi3+0x46>
 80074da:	03cb      	lsls	r3, r1, #15
 80074dc:	1ac0      	subs	r0, r0, r3
 80074de:	4152      	adcs	r2, r2
 80074e0:	0b83      	lsrs	r3, r0, #14
 80074e2:	428b      	cmp	r3, r1
 80074e4:	d301      	bcc.n	80074ea <__udivsi3+0x52>
 80074e6:	038b      	lsls	r3, r1, #14
 80074e8:	1ac0      	subs	r0, r0, r3
 80074ea:	4152      	adcs	r2, r2
 80074ec:	0b43      	lsrs	r3, r0, #13
 80074ee:	428b      	cmp	r3, r1
 80074f0:	d301      	bcc.n	80074f6 <__udivsi3+0x5e>
 80074f2:	034b      	lsls	r3, r1, #13
 80074f4:	1ac0      	subs	r0, r0, r3
 80074f6:	4152      	adcs	r2, r2
 80074f8:	0b03      	lsrs	r3, r0, #12
 80074fa:	428b      	cmp	r3, r1
 80074fc:	d301      	bcc.n	8007502 <__udivsi3+0x6a>
 80074fe:	030b      	lsls	r3, r1, #12
 8007500:	1ac0      	subs	r0, r0, r3
 8007502:	4152      	adcs	r2, r2
 8007504:	0ac3      	lsrs	r3, r0, #11
 8007506:	428b      	cmp	r3, r1
 8007508:	d301      	bcc.n	800750e <__udivsi3+0x76>
 800750a:	02cb      	lsls	r3, r1, #11
 800750c:	1ac0      	subs	r0, r0, r3
 800750e:	4152      	adcs	r2, r2
 8007510:	0a83      	lsrs	r3, r0, #10
 8007512:	428b      	cmp	r3, r1
 8007514:	d301      	bcc.n	800751a <__udivsi3+0x82>
 8007516:	028b      	lsls	r3, r1, #10
 8007518:	1ac0      	subs	r0, r0, r3
 800751a:	4152      	adcs	r2, r2
 800751c:	0a43      	lsrs	r3, r0, #9
 800751e:	428b      	cmp	r3, r1
 8007520:	d301      	bcc.n	8007526 <__udivsi3+0x8e>
 8007522:	024b      	lsls	r3, r1, #9
 8007524:	1ac0      	subs	r0, r0, r3
 8007526:	4152      	adcs	r2, r2
 8007528:	0a03      	lsrs	r3, r0, #8
 800752a:	428b      	cmp	r3, r1
 800752c:	d301      	bcc.n	8007532 <__udivsi3+0x9a>
 800752e:	020b      	lsls	r3, r1, #8
 8007530:	1ac0      	subs	r0, r0, r3
 8007532:	4152      	adcs	r2, r2
 8007534:	d2cd      	bcs.n	80074d2 <__udivsi3+0x3a>
 8007536:	09c3      	lsrs	r3, r0, #7
 8007538:	428b      	cmp	r3, r1
 800753a:	d301      	bcc.n	8007540 <__udivsi3+0xa8>
 800753c:	01cb      	lsls	r3, r1, #7
 800753e:	1ac0      	subs	r0, r0, r3
 8007540:	4152      	adcs	r2, r2
 8007542:	0983      	lsrs	r3, r0, #6
 8007544:	428b      	cmp	r3, r1
 8007546:	d301      	bcc.n	800754c <__udivsi3+0xb4>
 8007548:	018b      	lsls	r3, r1, #6
 800754a:	1ac0      	subs	r0, r0, r3
 800754c:	4152      	adcs	r2, r2
 800754e:	0943      	lsrs	r3, r0, #5
 8007550:	428b      	cmp	r3, r1
 8007552:	d301      	bcc.n	8007558 <__udivsi3+0xc0>
 8007554:	014b      	lsls	r3, r1, #5
 8007556:	1ac0      	subs	r0, r0, r3
 8007558:	4152      	adcs	r2, r2
 800755a:	0903      	lsrs	r3, r0, #4
 800755c:	428b      	cmp	r3, r1
 800755e:	d301      	bcc.n	8007564 <__udivsi3+0xcc>
 8007560:	010b      	lsls	r3, r1, #4
 8007562:	1ac0      	subs	r0, r0, r3
 8007564:	4152      	adcs	r2, r2
 8007566:	08c3      	lsrs	r3, r0, #3
 8007568:	428b      	cmp	r3, r1
 800756a:	d301      	bcc.n	8007570 <__udivsi3+0xd8>
 800756c:	00cb      	lsls	r3, r1, #3
 800756e:	1ac0      	subs	r0, r0, r3
 8007570:	4152      	adcs	r2, r2
 8007572:	0883      	lsrs	r3, r0, #2
 8007574:	428b      	cmp	r3, r1
 8007576:	d301      	bcc.n	800757c <__udivsi3+0xe4>
 8007578:	008b      	lsls	r3, r1, #2
 800757a:	1ac0      	subs	r0, r0, r3
 800757c:	4152      	adcs	r2, r2
 800757e:	0843      	lsrs	r3, r0, #1
 8007580:	428b      	cmp	r3, r1
 8007582:	d301      	bcc.n	8007588 <__udivsi3+0xf0>
 8007584:	004b      	lsls	r3, r1, #1
 8007586:	1ac0      	subs	r0, r0, r3
 8007588:	4152      	adcs	r2, r2
 800758a:	1a41      	subs	r1, r0, r1
 800758c:	d200      	bcs.n	8007590 <__udivsi3+0xf8>
 800758e:	4601      	mov	r1, r0
 8007590:	4152      	adcs	r2, r2
 8007592:	4610      	mov	r0, r2
 8007594:	4770      	bx	lr
 8007596:	e7ff      	b.n	8007598 <__udivsi3+0x100>
 8007598:	b501      	push	{r0, lr}
 800759a:	2000      	movs	r0, #0
 800759c:	f000 f806 	bl	80075ac <__aeabi_idiv0>
 80075a0:	bd02      	pop	{r1, pc}
 80075a2:	46c0      	nop			@ (mov r8, r8)

080075a4 <__aeabi_uidivmod>:
 80075a4:	2900      	cmp	r1, #0
 80075a6:	d0f7      	beq.n	8007598 <__udivsi3+0x100>
 80075a8:	e776      	b.n	8007498 <__udivsi3>
 80075aa:	4770      	bx	lr

080075ac <__aeabi_idiv0>:
 80075ac:	4770      	bx	lr
 80075ae:	46c0      	nop			@ (mov r8, r8)

080075b0 <__aeabi_uldivmod>:
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d111      	bne.n	80075d8 <__aeabi_uldivmod+0x28>
 80075b4:	2a00      	cmp	r2, #0
 80075b6:	d10f      	bne.n	80075d8 <__aeabi_uldivmod+0x28>
 80075b8:	2900      	cmp	r1, #0
 80075ba:	d100      	bne.n	80075be <__aeabi_uldivmod+0xe>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d002      	beq.n	80075c6 <__aeabi_uldivmod+0x16>
 80075c0:	2100      	movs	r1, #0
 80075c2:	43c9      	mvns	r1, r1
 80075c4:	0008      	movs	r0, r1
 80075c6:	b407      	push	{r0, r1, r2}
 80075c8:	4802      	ldr	r0, [pc, #8]	@ (80075d4 <__aeabi_uldivmod+0x24>)
 80075ca:	a102      	add	r1, pc, #8	@ (adr r1, 80075d4 <__aeabi_uldivmod+0x24>)
 80075cc:	1840      	adds	r0, r0, r1
 80075ce:	9002      	str	r0, [sp, #8]
 80075d0:	bd03      	pop	{r0, r1, pc}
 80075d2:	46c0      	nop			@ (mov r8, r8)
 80075d4:	ffffffd9 	.word	0xffffffd9
 80075d8:	b403      	push	{r0, r1}
 80075da:	4668      	mov	r0, sp
 80075dc:	b501      	push	{r0, lr}
 80075de:	9802      	ldr	r0, [sp, #8]
 80075e0:	f000 f834 	bl	800764c <__udivmoddi4>
 80075e4:	9b01      	ldr	r3, [sp, #4]
 80075e6:	469e      	mov	lr, r3
 80075e8:	b002      	add	sp, #8
 80075ea:	bc0c      	pop	{r2, r3}
 80075ec:	4770      	bx	lr
 80075ee:	46c0      	nop			@ (mov r8, r8)

080075f0 <__aeabi_lmul>:
 80075f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075f2:	46ce      	mov	lr, r9
 80075f4:	4699      	mov	r9, r3
 80075f6:	0c03      	lsrs	r3, r0, #16
 80075f8:	469c      	mov	ip, r3
 80075fa:	0413      	lsls	r3, r2, #16
 80075fc:	4647      	mov	r7, r8
 80075fe:	0c1b      	lsrs	r3, r3, #16
 8007600:	001d      	movs	r5, r3
 8007602:	000e      	movs	r6, r1
 8007604:	4661      	mov	r1, ip
 8007606:	0404      	lsls	r4, r0, #16
 8007608:	0c24      	lsrs	r4, r4, #16
 800760a:	b580      	push	{r7, lr}
 800760c:	0007      	movs	r7, r0
 800760e:	0c10      	lsrs	r0, r2, #16
 8007610:	434b      	muls	r3, r1
 8007612:	4365      	muls	r5, r4
 8007614:	4341      	muls	r1, r0
 8007616:	4360      	muls	r0, r4
 8007618:	0c2c      	lsrs	r4, r5, #16
 800761a:	18c0      	adds	r0, r0, r3
 800761c:	1824      	adds	r4, r4, r0
 800761e:	468c      	mov	ip, r1
 8007620:	42a3      	cmp	r3, r4
 8007622:	d903      	bls.n	800762c <__aeabi_lmul+0x3c>
 8007624:	2380      	movs	r3, #128	@ 0x80
 8007626:	025b      	lsls	r3, r3, #9
 8007628:	4698      	mov	r8, r3
 800762a:	44c4      	add	ip, r8
 800762c:	4649      	mov	r1, r9
 800762e:	4379      	muls	r1, r7
 8007630:	4356      	muls	r6, r2
 8007632:	0c23      	lsrs	r3, r4, #16
 8007634:	042d      	lsls	r5, r5, #16
 8007636:	0c2d      	lsrs	r5, r5, #16
 8007638:	1989      	adds	r1, r1, r6
 800763a:	4463      	add	r3, ip
 800763c:	0424      	lsls	r4, r4, #16
 800763e:	1960      	adds	r0, r4, r5
 8007640:	18c9      	adds	r1, r1, r3
 8007642:	bcc0      	pop	{r6, r7}
 8007644:	46b9      	mov	r9, r7
 8007646:	46b0      	mov	r8, r6
 8007648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800764a:	46c0      	nop			@ (mov r8, r8)

0800764c <__udivmoddi4>:
 800764c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800764e:	4657      	mov	r7, sl
 8007650:	464e      	mov	r6, r9
 8007652:	4645      	mov	r5, r8
 8007654:	46de      	mov	lr, fp
 8007656:	b5e0      	push	{r5, r6, r7, lr}
 8007658:	0004      	movs	r4, r0
 800765a:	000d      	movs	r5, r1
 800765c:	4692      	mov	sl, r2
 800765e:	4699      	mov	r9, r3
 8007660:	b083      	sub	sp, #12
 8007662:	428b      	cmp	r3, r1
 8007664:	d830      	bhi.n	80076c8 <__udivmoddi4+0x7c>
 8007666:	d02d      	beq.n	80076c4 <__udivmoddi4+0x78>
 8007668:	4649      	mov	r1, r9
 800766a:	4650      	mov	r0, sl
 800766c:	f000 f8d8 	bl	8007820 <__clzdi2>
 8007670:	0029      	movs	r1, r5
 8007672:	0006      	movs	r6, r0
 8007674:	0020      	movs	r0, r4
 8007676:	f000 f8d3 	bl	8007820 <__clzdi2>
 800767a:	1a33      	subs	r3, r6, r0
 800767c:	4698      	mov	r8, r3
 800767e:	3b20      	subs	r3, #32
 8007680:	d434      	bmi.n	80076ec <__udivmoddi4+0xa0>
 8007682:	469b      	mov	fp, r3
 8007684:	4653      	mov	r3, sl
 8007686:	465a      	mov	r2, fp
 8007688:	4093      	lsls	r3, r2
 800768a:	4642      	mov	r2, r8
 800768c:	001f      	movs	r7, r3
 800768e:	4653      	mov	r3, sl
 8007690:	4093      	lsls	r3, r2
 8007692:	001e      	movs	r6, r3
 8007694:	42af      	cmp	r7, r5
 8007696:	d83b      	bhi.n	8007710 <__udivmoddi4+0xc4>
 8007698:	42af      	cmp	r7, r5
 800769a:	d100      	bne.n	800769e <__udivmoddi4+0x52>
 800769c:	e079      	b.n	8007792 <__udivmoddi4+0x146>
 800769e:	465b      	mov	r3, fp
 80076a0:	1ba4      	subs	r4, r4, r6
 80076a2:	41bd      	sbcs	r5, r7
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	da00      	bge.n	80076aa <__udivmoddi4+0x5e>
 80076a8:	e076      	b.n	8007798 <__udivmoddi4+0x14c>
 80076aa:	2200      	movs	r2, #0
 80076ac:	2300      	movs	r3, #0
 80076ae:	9200      	str	r2, [sp, #0]
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	2301      	movs	r3, #1
 80076b4:	465a      	mov	r2, fp
 80076b6:	4093      	lsls	r3, r2
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	2301      	movs	r3, #1
 80076bc:	4642      	mov	r2, r8
 80076be:	4093      	lsls	r3, r2
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	e029      	b.n	8007718 <__udivmoddi4+0xcc>
 80076c4:	4282      	cmp	r2, r0
 80076c6:	d9cf      	bls.n	8007668 <__udivmoddi4+0x1c>
 80076c8:	2200      	movs	r2, #0
 80076ca:	2300      	movs	r3, #0
 80076cc:	9200      	str	r2, [sp, #0]
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <__udivmoddi4+0x8e>
 80076d6:	601c      	str	r4, [r3, #0]
 80076d8:	605d      	str	r5, [r3, #4]
 80076da:	9800      	ldr	r0, [sp, #0]
 80076dc:	9901      	ldr	r1, [sp, #4]
 80076de:	b003      	add	sp, #12
 80076e0:	bcf0      	pop	{r4, r5, r6, r7}
 80076e2:	46bb      	mov	fp, r7
 80076e4:	46b2      	mov	sl, r6
 80076e6:	46a9      	mov	r9, r5
 80076e8:	46a0      	mov	r8, r4
 80076ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ec:	4642      	mov	r2, r8
 80076ee:	469b      	mov	fp, r3
 80076f0:	2320      	movs	r3, #32
 80076f2:	1a9b      	subs	r3, r3, r2
 80076f4:	4652      	mov	r2, sl
 80076f6:	40da      	lsrs	r2, r3
 80076f8:	4641      	mov	r1, r8
 80076fa:	0013      	movs	r3, r2
 80076fc:	464a      	mov	r2, r9
 80076fe:	408a      	lsls	r2, r1
 8007700:	0017      	movs	r7, r2
 8007702:	4642      	mov	r2, r8
 8007704:	431f      	orrs	r7, r3
 8007706:	4653      	mov	r3, sl
 8007708:	4093      	lsls	r3, r2
 800770a:	001e      	movs	r6, r3
 800770c:	42af      	cmp	r7, r5
 800770e:	d9c3      	bls.n	8007698 <__udivmoddi4+0x4c>
 8007710:	2200      	movs	r2, #0
 8007712:	2300      	movs	r3, #0
 8007714:	9200      	str	r2, [sp, #0]
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	4643      	mov	r3, r8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0d8      	beq.n	80076d0 <__udivmoddi4+0x84>
 800771e:	07fb      	lsls	r3, r7, #31
 8007720:	0872      	lsrs	r2, r6, #1
 8007722:	431a      	orrs	r2, r3
 8007724:	4646      	mov	r6, r8
 8007726:	087b      	lsrs	r3, r7, #1
 8007728:	e00e      	b.n	8007748 <__udivmoddi4+0xfc>
 800772a:	42ab      	cmp	r3, r5
 800772c:	d101      	bne.n	8007732 <__udivmoddi4+0xe6>
 800772e:	42a2      	cmp	r2, r4
 8007730:	d80c      	bhi.n	800774c <__udivmoddi4+0x100>
 8007732:	1aa4      	subs	r4, r4, r2
 8007734:	419d      	sbcs	r5, r3
 8007736:	2001      	movs	r0, #1
 8007738:	1924      	adds	r4, r4, r4
 800773a:	416d      	adcs	r5, r5
 800773c:	2100      	movs	r1, #0
 800773e:	3e01      	subs	r6, #1
 8007740:	1824      	adds	r4, r4, r0
 8007742:	414d      	adcs	r5, r1
 8007744:	2e00      	cmp	r6, #0
 8007746:	d006      	beq.n	8007756 <__udivmoddi4+0x10a>
 8007748:	42ab      	cmp	r3, r5
 800774a:	d9ee      	bls.n	800772a <__udivmoddi4+0xde>
 800774c:	3e01      	subs	r6, #1
 800774e:	1924      	adds	r4, r4, r4
 8007750:	416d      	adcs	r5, r5
 8007752:	2e00      	cmp	r6, #0
 8007754:	d1f8      	bne.n	8007748 <__udivmoddi4+0xfc>
 8007756:	9800      	ldr	r0, [sp, #0]
 8007758:	9901      	ldr	r1, [sp, #4]
 800775a:	465b      	mov	r3, fp
 800775c:	1900      	adds	r0, r0, r4
 800775e:	4169      	adcs	r1, r5
 8007760:	2b00      	cmp	r3, #0
 8007762:	db24      	blt.n	80077ae <__udivmoddi4+0x162>
 8007764:	002b      	movs	r3, r5
 8007766:	465a      	mov	r2, fp
 8007768:	4644      	mov	r4, r8
 800776a:	40d3      	lsrs	r3, r2
 800776c:	002a      	movs	r2, r5
 800776e:	40e2      	lsrs	r2, r4
 8007770:	001c      	movs	r4, r3
 8007772:	465b      	mov	r3, fp
 8007774:	0015      	movs	r5, r2
 8007776:	2b00      	cmp	r3, #0
 8007778:	db2a      	blt.n	80077d0 <__udivmoddi4+0x184>
 800777a:	0026      	movs	r6, r4
 800777c:	409e      	lsls	r6, r3
 800777e:	0033      	movs	r3, r6
 8007780:	0026      	movs	r6, r4
 8007782:	4647      	mov	r7, r8
 8007784:	40be      	lsls	r6, r7
 8007786:	0032      	movs	r2, r6
 8007788:	1a80      	subs	r0, r0, r2
 800778a:	4199      	sbcs	r1, r3
 800778c:	9000      	str	r0, [sp, #0]
 800778e:	9101      	str	r1, [sp, #4]
 8007790:	e79e      	b.n	80076d0 <__udivmoddi4+0x84>
 8007792:	42a3      	cmp	r3, r4
 8007794:	d8bc      	bhi.n	8007710 <__udivmoddi4+0xc4>
 8007796:	e782      	b.n	800769e <__udivmoddi4+0x52>
 8007798:	4642      	mov	r2, r8
 800779a:	2320      	movs	r3, #32
 800779c:	2100      	movs	r1, #0
 800779e:	1a9b      	subs	r3, r3, r2
 80077a0:	2200      	movs	r2, #0
 80077a2:	9100      	str	r1, [sp, #0]
 80077a4:	9201      	str	r2, [sp, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	40da      	lsrs	r2, r3
 80077aa:	9201      	str	r2, [sp, #4]
 80077ac:	e785      	b.n	80076ba <__udivmoddi4+0x6e>
 80077ae:	4642      	mov	r2, r8
 80077b0:	2320      	movs	r3, #32
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	002a      	movs	r2, r5
 80077b6:	4646      	mov	r6, r8
 80077b8:	409a      	lsls	r2, r3
 80077ba:	0023      	movs	r3, r4
 80077bc:	40f3      	lsrs	r3, r6
 80077be:	4644      	mov	r4, r8
 80077c0:	4313      	orrs	r3, r2
 80077c2:	002a      	movs	r2, r5
 80077c4:	40e2      	lsrs	r2, r4
 80077c6:	001c      	movs	r4, r3
 80077c8:	465b      	mov	r3, fp
 80077ca:	0015      	movs	r5, r2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	dad4      	bge.n	800777a <__udivmoddi4+0x12e>
 80077d0:	4642      	mov	r2, r8
 80077d2:	002f      	movs	r7, r5
 80077d4:	2320      	movs	r3, #32
 80077d6:	0026      	movs	r6, r4
 80077d8:	4097      	lsls	r7, r2
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	40de      	lsrs	r6, r3
 80077de:	003b      	movs	r3, r7
 80077e0:	4333      	orrs	r3, r6
 80077e2:	e7cd      	b.n	8007780 <__udivmoddi4+0x134>

080077e4 <__clzsi2>:
 80077e4:	211c      	movs	r1, #28
 80077e6:	2301      	movs	r3, #1
 80077e8:	041b      	lsls	r3, r3, #16
 80077ea:	4298      	cmp	r0, r3
 80077ec:	d301      	bcc.n	80077f2 <__clzsi2+0xe>
 80077ee:	0c00      	lsrs	r0, r0, #16
 80077f0:	3910      	subs	r1, #16
 80077f2:	0a1b      	lsrs	r3, r3, #8
 80077f4:	4298      	cmp	r0, r3
 80077f6:	d301      	bcc.n	80077fc <__clzsi2+0x18>
 80077f8:	0a00      	lsrs	r0, r0, #8
 80077fa:	3908      	subs	r1, #8
 80077fc:	091b      	lsrs	r3, r3, #4
 80077fe:	4298      	cmp	r0, r3
 8007800:	d301      	bcc.n	8007806 <__clzsi2+0x22>
 8007802:	0900      	lsrs	r0, r0, #4
 8007804:	3904      	subs	r1, #4
 8007806:	a202      	add	r2, pc, #8	@ (adr r2, 8007810 <__clzsi2+0x2c>)
 8007808:	5c10      	ldrb	r0, [r2, r0]
 800780a:	1840      	adds	r0, r0, r1
 800780c:	4770      	bx	lr
 800780e:	46c0      	nop			@ (mov r8, r8)
 8007810:	02020304 	.word	0x02020304
 8007814:	01010101 	.word	0x01010101
	...

08007820 <__clzdi2>:
 8007820:	b510      	push	{r4, lr}
 8007822:	2900      	cmp	r1, #0
 8007824:	d103      	bne.n	800782e <__clzdi2+0xe>
 8007826:	f7ff ffdd 	bl	80077e4 <__clzsi2>
 800782a:	3020      	adds	r0, #32
 800782c:	e002      	b.n	8007834 <__clzdi2+0x14>
 800782e:	0008      	movs	r0, r1
 8007830:	f7ff ffd8 	bl	80077e4 <__clzsi2>
 8007834:	bd10      	pop	{r4, pc}
 8007836:	46c0      	nop			@ (mov r8, r8)

08007838 <main>:
{
 8007838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800783a:	46d6      	mov	lr, sl
 800783c:	464f      	mov	r7, r9
 800783e:	4646      	mov	r6, r8
 8007840:	b5c0      	push	{r6, r7, lr}
 8007842:	b08c      	sub	sp, #48	@ 0x30
  HAL_Init();
 8007844:	f7f8 ff20 	bl	8000688 <HAL_Init>
  SystemClock_Config();
 8007848:	f7f8 fc98 	bl	800017c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800784c:	2214      	movs	r2, #20
 800784e:	2100      	movs	r1, #0
 8007850:	a807      	add	r0, sp, #28
 8007852:	f000 f990 	bl	8007b76 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007856:	2304      	movs	r3, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007858:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800785a:	4ea7      	ldr	r6, [pc, #668]	@ (8007af8 <main+0x2c0>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800785c:	21c0      	movs	r1, #192	@ 0xc0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800785e:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8007860:	48a6      	ldr	r0, [pc, #664]	@ (8007afc <main+0x2c4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007862:	431a      	orrs	r2, r3
 8007864:	62f2      	str	r2, [r6, #44]	@ 0x2c
 8007866:	6af2      	ldr	r2, [r6, #44]	@ 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8007868:	0209      	lsls	r1, r1, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800786a:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800786c:	2202      	movs	r2, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800786e:	9302      	str	r3, [sp, #8]
 8007870:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007872:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007874:	4690      	mov	r8, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007876:	432b      	orrs	r3, r5
 8007878:	62f3      	str	r3, [r6, #44]	@ 0x2c
 800787a:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800787c:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800787e:	402b      	ands	r3, r5
 8007880:	9303      	str	r3, [sp, #12]
 8007882:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007884:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8007886:	4313      	orrs	r3, r2
 8007888:	62f3      	str	r3, [r6, #44]	@ 0x2c
 800788a:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 800788c:	4013      	ands	r3, r2
 800788e:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8007890:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007892:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8007894:	f7fa fc0a 	bl	80020ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, EN_TOF1_Pin|EN_TOF2_Pin, GPIO_PIN_RESET);
 8007898:	20a0      	movs	r0, #160	@ 0xa0
 800789a:	2200      	movs	r2, #0
 800789c:	210c      	movs	r1, #12
 800789e:	05c0      	lsls	r0, r0, #23
 80078a0:	f7fa fc04 	bl	80020ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80078a4:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078a6:	4895      	ldr	r0, [pc, #596]	@ (8007afc <main+0x2c4>)
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80078a8:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078aa:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80078ac:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078ae:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b0:	9709      	str	r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078b2:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078b4:	f7fa fa74 	bl	8001da0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80078b8:	2380      	movs	r3, #128	@ 0x80
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80078be:	4643      	mov	r3, r8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078c0:	488e      	ldr	r0, [pc, #568]	@ (8007afc <main+0x2c4>)
 80078c2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80078c4:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078c6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078c8:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078ca:	f7fa fa69 	bl	8001da0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EN_TOF1_Pin|EN_TOF2_Pin;
 80078ce:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078d0:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = EN_TOF1_Pin|EN_TOF2_Pin;
 80078d2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80078d4:	4643      	mov	r3, r8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078d6:	a907      	add	r1, sp, #28
 80078d8:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80078da:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078dc:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078de:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078e0:	f7fa fa5e 	bl	8001da0 <HAL_GPIO_Init>
  HAL_GPIO_Init(I_OTF_GPIO_Port, &GPIO_InitStruct);
 80078e4:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = I_OTF_Pin;
 80078e6:	2310      	movs	r3, #16
  HAL_GPIO_Init(I_OTF_GPIO_Port, &GPIO_InitStruct);
 80078e8:	a907      	add	r1, sp, #28
 80078ea:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = I_OTF_Pin;
 80078ec:	469a      	mov	sl, r3
 80078ee:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078f0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80078f2:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(I_OTF_GPIO_Port, &GPIO_InitStruct);
 80078f4:	f7fa fa54 	bl	8001da0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RUN_Pin;
 80078f8:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(RUN_GPIO_Port, &GPIO_InitStruct);
 80078fa:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = RUN_Pin;
 80078fc:	4699      	mov	r9, r3
 80078fe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007900:	23c4      	movs	r3, #196	@ 0xc4
  HAL_GPIO_Init(RUN_GPIO_Port, &GPIO_InitStruct);
 8007902:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007904:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(RUN_GPIO_Port, &GPIO_InitStruct);
 8007906:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8007908:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800790a:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(RUN_GPIO_Port, &GPIO_InitStruct);
 800790c:	f7fa fa48 	bl	8001da0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8007910:	4643      	mov	r3, r8
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8007912:	487b      	ldr	r0, [pc, #492]	@ (8007b00 <main+0x2c8>)
 8007914:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = SWITCH_Pin;
 8007916:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007918:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800791a:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 800791c:	f7fa fa40 	bl	8001da0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007920:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007922:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007924:	432b      	orrs	r3, r5
 8007926:	6333      	str	r3, [r6, #48]	@ 0x30
 8007928:	6b33      	ldr	r3, [r6, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800792a:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800792c:	402b      	ands	r3, r5
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800792e:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007934:	f7f9 fdec 	bl	8001510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007938:	2009      	movs	r0, #9
 800793a:	f7f9 fe13 	bl	8001564 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800793e:	2200      	movs	r2, #0
 8007940:	2100      	movs	r1, #0
 8007942:	200a      	movs	r0, #10
 8007944:	f7f9 fde4 	bl	8001510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8007948:	200a      	movs	r0, #10
 800794a:	f7f9 fe0b 	bl	8001564 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800794e:	2200      	movs	r2, #0
 8007950:	2100      	movs	r1, #0
 8007952:	200b      	movs	r0, #11
 8007954:	f7f9 fddc 	bl	8001510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8007958:	200b      	movs	r0, #11
 800795a:	f7f9 fe03 	bl	8001564 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 800795e:	2208      	movs	r2, #8
 8007960:	2100      	movs	r1, #0
 8007962:	a805      	add	r0, sp, #20
 8007964:	f000 f907 	bl	8007b76 <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8007968:	2214      	movs	r2, #20
 800796a:	2100      	movs	r1, #0
 800796c:	a807      	add	r0, sp, #28
 800796e:	f000 f902 	bl	8007b76 <memset>
  hadc.Instance = ADC1;
 8007972:	4c64      	ldr	r4, [pc, #400]	@ (8007b04 <main+0x2cc>)
 8007974:	4b64      	ldr	r3, [pc, #400]	@ (8007b08 <main+0x2d0>)
  hadc.Init.DMAContinuousRequests = ENABLE;
 8007976:	2201      	movs	r2, #1
  hadc.Instance = ADC1;
 8007978:	6023      	str	r3, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800797a:	23c0      	movs	r3, #192	@ 0xc0
 800797c:	061b      	lsls	r3, r3, #24
 800797e:	6063      	str	r3, [r4, #4]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8007980:	4643      	mov	r3, r8
 8007982:	63a3      	str	r3, [r4, #56]	@ 0x38
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8007984:	2380      	movs	r3, #128	@ 0x80
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	62a3      	str	r3, [r4, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800798a:	464b      	mov	r3, r9
 800798c:	6263      	str	r3, [r4, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800798e:	3b54      	subs	r3, #84	@ 0x54
 8007990:	54e2      	strb	r2, [r4, r3]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8007992:	0020      	movs	r0, r4
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007994:	3b24      	subs	r3, #36	@ 0x24
  hadc.Init.OversamplingMode = DISABLE;
 8007996:	63e7      	str	r7, [r4, #60]	@ 0x3c
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8007998:	60a7      	str	r7, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800799a:	6125      	str	r5, [r4, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800799c:	60e7      	str	r7, [r4, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800799e:	8425      	strh	r5, [r4, #32]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80079a0:	6163      	str	r3, [r4, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80079a2:	6327      	str	r7, [r4, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80079a4:	61a7      	str	r7, [r4, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80079a6:	6365      	str	r5, [r4, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80079a8:	61e7      	str	r7, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80079aa:	f7f9 f827 	bl	80009fc <HAL_ADC_Init>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d001      	beq.n	80079b6 <main+0x17e>
  __ASM volatile ("cpsid i" : : : "memory");
 80079b2:	b672      	cpsid	i
  while (1)
 80079b4:	e7fe      	b.n	80079b4 <main+0x17c>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80079b6:	2380      	movs	r3, #128	@ 0x80
  sConfig.Channel = ADC_CHANNEL_5;
 80079b8:	4f54      	ldr	r7, [pc, #336]	@ (8007b0c <main+0x2d4>)
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80079ba:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80079bc:	0020      	movs	r0, r4
 80079be:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_5;
 80079c0:	9705      	str	r7, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80079c2:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80079c4:	f7f9 fc0a 	bl	80011dc <HAL_ADC_ConfigChannel>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d001      	beq.n	80079d0 <main+0x198>
 80079cc:	b672      	cpsid	i
  while (1)
 80079ce:	e7fe      	b.n	80079ce <main+0x196>
  sConfig.Channel = ADC_CHANNEL_6;
 80079d0:	4b4f      	ldr	r3, [pc, #316]	@ (8007b10 <main+0x2d8>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80079d2:	0020      	movs	r0, r4
 80079d4:	a905      	add	r1, sp, #20
  sConfig.Channel = ADC_CHANNEL_6;
 80079d6:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80079d8:	f7f9 fc00 	bl	80011dc <HAL_ADC_ConfigChannel>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d001      	beq.n	80079e4 <main+0x1ac>
 80079e0:	b672      	cpsid	i
  while (1)
 80079e2:	e7fe      	b.n	80079e2 <main+0x1aa>
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80079e4:	23c0      	movs	r3, #192	@ 0xc0
 80079e6:	041b      	lsls	r3, r3, #16
 80079e8:	9307      	str	r3, [sp, #28]
  AnalogWDGConfig.ITMode = DISABLE;
 80079ea:	2224      	movs	r2, #36	@ 0x24
 80079ec:	466b      	mov	r3, sp
 80079ee:	189b      	adds	r3, r3, r2
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80079f0:	9708      	str	r7, [sp, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80079f2:	a907      	add	r1, sp, #28
  AnalogWDGConfig.ITMode = DISABLE;
 80079f4:	7018      	strb	r0, [r3, #0]
  AnalogWDGConfig.HighThreshold = 0;
 80079f6:	900a      	str	r0, [sp, #40]	@ 0x28
  AnalogWDGConfig.LowThreshold = 0;
 80079f8:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80079fa:	0020      	movs	r0, r4
 80079fc:	f7f9 fc5a 	bl	80012b4 <HAL_ADC_AnalogWDGConfig>
 8007a00:	1e01      	subs	r1, r0, #0
 8007a02:	d001      	beq.n	8007a08 <main+0x1d0>
 8007a04:	b672      	cpsid	i
  while (1)
 8007a06:	e7fe      	b.n	8007a06 <main+0x1ce>
  if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 8007a08:	0020      	movs	r0, r4
 8007a0a:	f7f9 fca3 	bl	8001354 <HAL_ADCEx_Calibration_Start>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d001      	beq.n	8007a16 <main+0x1de>
 8007a12:	b672      	cpsid	i
  while (1)
 8007a14:	e7fe      	b.n	8007a14 <main+0x1dc>
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007a16:	0027      	movs	r7, r4
  hi2c1.Instance = I2C1;
 8007a18:	4b3e      	ldr	r3, [pc, #248]	@ (8007b14 <main+0x2dc>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007a1a:	375c      	adds	r7, #92	@ 0x5c
  hi2c1.Instance = I2C1;
 8007a1c:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hi2c1.Init.Timing = 0x00600619;
 8007a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b18 <main+0x2e0>)
  hi2c1.Init.OwnAddress1 = 0;
 8007a20:	6660      	str	r0, [r4, #100]	@ 0x64
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007a22:	66e0      	str	r0, [r4, #108]	@ 0x6c
  hi2c1.Init.OwnAddress2 = 0;
 8007a24:	6720      	str	r0, [r4, #112]	@ 0x70
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007a26:	6760      	str	r0, [r4, #116]	@ 0x74
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007a28:	67a0      	str	r0, [r4, #120]	@ 0x78
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007a2a:	67e0      	str	r0, [r4, #124]	@ 0x7c
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007a2c:	0038      	movs	r0, r7
  hi2c1.Init.Timing = 0x00600619;
 8007a2e:	6623      	str	r3, [r4, #96]	@ 0x60
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007a30:	66a5      	str	r5, [r4, #104]	@ 0x68
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007a32:	f7fa fe23 	bl	800267c <HAL_I2C_Init>
 8007a36:	1e01      	subs	r1, r0, #0
 8007a38:	d001      	beq.n	8007a3e <main+0x206>
 8007a3a:	b672      	cpsid	i
  while (1)
 8007a3c:	e7fe      	b.n	8007a3c <main+0x204>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007a3e:	0038      	movs	r0, r7
 8007a40:	f7fe fd26 	bl	8006490 <HAL_I2CEx_ConfigAnalogFilter>
 8007a44:	1e01      	subs	r1, r0, #0
 8007a46:	d001      	beq.n	8007a4c <main+0x214>
 8007a48:	b672      	cpsid	i
  while (1)
 8007a4a:	e7fe      	b.n	8007a4a <main+0x212>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007a4c:	0038      	movs	r0, r7
 8007a4e:	f7fe fd45 	bl	80064dc <HAL_I2CEx_ConfigDigitalFilter>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d001      	beq.n	8007a5a <main+0x222>
 8007a56:	b672      	cpsid	i
  while (1)
 8007a58:	e7fe      	b.n	8007a58 <main+0x220>
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8007a5a:	6bb3      	ldr	r3, [r6, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a5c:	a907      	add	r1, sp, #28
  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8007a5e:	432b      	orrs	r3, r5
 8007a60:	63b3      	str	r3, [r6, #56]	@ 0x38
  TIM2->PSC = 0;
 8007a62:	2680      	movs	r6, #128	@ 0x80
  TIM2->ARR = PWM_PERIOD;
 8007a64:	2340      	movs	r3, #64	@ 0x40
  TIM2->PSC = 0;
 8007a66:	05f6      	lsls	r6, r6, #23
  TIM2->ARR = PWM_PERIOD;
 8007a68:	33ff      	adds	r3, #255	@ 0xff
  TIM2->PSC = 0;
 8007a6a:	62b0      	str	r0, [r6, #40]	@ 0x28
  TIM2->ARR = PWM_PERIOD;
 8007a6c:	62f3      	str	r3, [r6, #44]	@ 0x2c
  TIM2->CR1 |= TIM_CR1_CMS_0;
 8007a6e:	6832      	ldr	r2, [r6, #0]
 8007a70:	3b20      	subs	r3, #32
 8007a72:	3bff      	subs	r3, #255	@ 0xff
 8007a74:	431a      	orrs	r2, r3
 8007a76:	6032      	str	r2, [r6, #0]
  TIM2->CR2 |= TIM_TRGO_UPDATE;
 8007a78:	6872      	ldr	r2, [r6, #4]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	6073      	str	r3, [r6, #4]
  TIM2->EGR |= TIM_EGR_UG;
 8007a7e:	6973      	ldr	r3, [r6, #20]
 8007a80:	432b      	orrs	r3, r5
 8007a82:	6173      	str	r3, [r6, #20]
  TIM2->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1
 8007a84:	2368      	movs	r3, #104	@ 0x68
 8007a86:	69b2      	ldr	r2, [r6, #24]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	61b3      	str	r3, [r6, #24]
  TIM2->CCER |= TIM_CCER_CC1E;
 8007a8c:	6a33      	ldr	r3, [r6, #32]
 8007a8e:	432b      	orrs	r3, r5
 8007a90:	6233      	str	r3, [r6, #32]
  TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1
 8007a92:	23d0      	movs	r3, #208	@ 0xd0
  TIM2->CCR1 = 0;
 8007a94:	6370      	str	r0, [r6, #52]	@ 0x34
  TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1
 8007a96:	69b2      	ldr	r2, [r6, #24]
 8007a98:	01db      	lsls	r3, r3, #7
 8007a9a:	4313      	orrs	r3, r2
  TIM2->CCER |= TIM_CCER_CC2E;
 8007a9c:	4652      	mov	r2, sl
  TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1
 8007a9e:	61b3      	str	r3, [r6, #24]
  TIM2->CCER |= TIM_CCER_CC2E;
 8007aa0:	6a33      	ldr	r3, [r6, #32]
 8007aa2:	431a      	orrs	r2, r3
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007aa4:	2303      	movs	r3, #3
  TIM2->CCER |= TIM_CCER_CC2E;
 8007aa6:	6232      	str	r2, [r6, #32]
  TIM2->CCR2 = 0;
 8007aa8:	63b0      	str	r0, [r6, #56]	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aaa:	9009      	str	r0, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aac:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007aae:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ab0:	4643      	mov	r3, r8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ab2:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ab4:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8007ab6:	930b      	str	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8007ab8:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aba:	f7fa f971 	bl	8001da0 <HAL_GPIO_Init>
  interrupt_init();
 8007abe:	f7f8 fb25 	bl	800010c <interrupt_init>
  if (HAL_ADC_Start_DMA(&hadc, &adc_values.dma_pointer, 4) != HAL_OK)
 8007ac2:	4f16      	ldr	r7, [pc, #88]	@ (8007b1c <main+0x2e4>)
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	0039      	movs	r1, r7
 8007ac8:	0020      	movs	r0, r4
 8007aca:	f7f9 fa3b 	bl	8000f44 <HAL_ADC_Start_DMA>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d001      	beq.n	8007ad6 <main+0x29e>
 8007ad2:	b672      	cpsid	i
  while (1)
 8007ad4:	e7fe      	b.n	8007ad4 <main+0x29c>
  adc_value_pointer = &adc_values.adc_values[0];
 8007ad6:	4b12      	ldr	r3, [pc, #72]	@ (8007b20 <main+0x2e8>)
  HAL_GPIO_WritePin(GPIOC, EN_TOF2_Pin, GPIO_PIN_SET);
 8007ad8:	4808      	ldr	r0, [pc, #32]	@ (8007afc <main+0x2c4>)
  adc_value_pointer = &adc_values.adc_values[0];
 8007ada:	631f      	str	r7, [r3, #48]	@ 0x30
  TIM2->CCR1 = PWM_PERIOD/2;
 8007adc:	239f      	movs	r3, #159	@ 0x9f
 8007ade:	6373      	str	r3, [r6, #52]	@ 0x34
  TIM2->CCR2  = PWM_PERIOD/2;
 8007ae0:	63b3      	str	r3, [r6, #56]	@ 0x38
  TIM2->CR1 |= TIM_CR1_CEN;
 8007ae2:	6833      	ldr	r3, [r6, #0]
  HAL_GPIO_WritePin(GPIOC, EN_TOF2_Pin, GPIO_PIN_SET);
 8007ae4:	2201      	movs	r2, #1
  TIM2->CR1 |= TIM_CR1_CEN;
 8007ae6:	431d      	orrs	r5, r3
  HAL_GPIO_WritePin(GPIOC, EN_TOF2_Pin, GPIO_PIN_SET);
 8007ae8:	2108      	movs	r1, #8
  TIM2->CR1 |= TIM_CR1_CEN;
 8007aea:	6035      	str	r5, [r6, #0]
  HAL_GPIO_WritePin(GPIOC, EN_TOF2_Pin, GPIO_PIN_SET);
 8007aec:	f7fa fade 	bl	80020ac <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8007af0:	2002      	movs	r0, #2
 8007af2:	f7f8 fe0d 	bl	8000710 <HAL_Delay>
  while (1)
 8007af6:	e7fe      	b.n	8007af6 <main+0x2be>
 8007af8:	40021000 	.word	0x40021000
 8007afc:	50000800 	.word	0x50000800
 8007b00:	50000400 	.word	0x50000400
 8007b04:	2000003c 	.word	0x2000003c
 8007b08:	40012400 	.word	0x40012400
 8007b0c:	14000020 	.word	0x14000020
 8007b10:	18000040 	.word	0x18000040
 8007b14:	40005400 	.word	0x40005400
 8007b18:	00600619 	.word	0x00600619
 8007b1c:	20000000 	.word	0x20000000
 8007b20:	200000bc 	.word	0x200000bc

08007b24 <Reset_Handler>:
 8007b24:	480d      	ldr	r0, [pc, #52]	@ (8007b5c <LoopForever+0x2>)
 8007b26:	4685      	mov	sp, r0
 8007b28:	f7f8 fd0e 	bl	8000548 <SystemInit>
 8007b2c:	480c      	ldr	r0, [pc, #48]	@ (8007b60 <LoopForever+0x6>)
 8007b2e:	490d      	ldr	r1, [pc, #52]	@ (8007b64 <LoopForever+0xa>)
 8007b30:	4a0d      	ldr	r2, [pc, #52]	@ (8007b68 <LoopForever+0xe>)
 8007b32:	2300      	movs	r3, #0
 8007b34:	e002      	b.n	8007b3c <LoopCopyDataInit>

08007b36 <CopyDataInit>:
 8007b36:	58d4      	ldr	r4, [r2, r3]
 8007b38:	50c4      	str	r4, [r0, r3]
 8007b3a:	3304      	adds	r3, #4

08007b3c <LoopCopyDataInit>:
 8007b3c:	18c4      	adds	r4, r0, r3
 8007b3e:	428c      	cmp	r4, r1
 8007b40:	d3f9      	bcc.n	8007b36 <CopyDataInit>
 8007b42:	4a0a      	ldr	r2, [pc, #40]	@ (8007b6c <LoopForever+0x12>)
 8007b44:	4c0a      	ldr	r4, [pc, #40]	@ (8007b70 <LoopForever+0x16>)
 8007b46:	2300      	movs	r3, #0
 8007b48:	e001      	b.n	8007b4e <LoopFillZerobss>

08007b4a <FillZerobss>:
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	3204      	adds	r2, #4

08007b4e <LoopFillZerobss>:
 8007b4e:	42a2      	cmp	r2, r4
 8007b50:	d3fb      	bcc.n	8007b4a <FillZerobss>
 8007b52:	f000 f819 	bl	8007b88 <__libc_init_array>
 8007b56:	f7ff fe6f 	bl	8007838 <main>

08007b5a <LoopForever>:
 8007b5a:	e7fe      	b.n	8007b5a <LoopForever>
 8007b5c:	20002000 	.word	0x20002000
 8007b60:	20000000 	.word	0x20000000
 8007b64:	20000018 	.word	0x20000018
 8007b68:	08007c30 	.word	0x08007c30
 8007b6c:	20000018 	.word	0x20000018
 8007b70:	20000238 	.word	0x20000238

08007b74 <ADC1_COMP_IRQHandler>:
 8007b74:	e7fe      	b.n	8007b74 <ADC1_COMP_IRQHandler>

08007b76 <memset>:
 8007b76:	0003      	movs	r3, r0
 8007b78:	1882      	adds	r2, r0, r2
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d100      	bne.n	8007b80 <memset+0xa>
 8007b7e:	4770      	bx	lr
 8007b80:	7019      	strb	r1, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	e7f9      	b.n	8007b7a <memset+0x4>
	...

08007b88 <__libc_init_array>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	2600      	movs	r6, #0
 8007b8c:	4c0c      	ldr	r4, [pc, #48]	@ (8007bc0 <__libc_init_array+0x38>)
 8007b8e:	4d0d      	ldr	r5, [pc, #52]	@ (8007bc4 <__libc_init_array+0x3c>)
 8007b90:	1b64      	subs	r4, r4, r5
 8007b92:	10a4      	asrs	r4, r4, #2
 8007b94:	42a6      	cmp	r6, r4
 8007b96:	d109      	bne.n	8007bac <__libc_init_array+0x24>
 8007b98:	2600      	movs	r6, #0
 8007b9a:	f000 f819 	bl	8007bd0 <_init>
 8007b9e:	4c0a      	ldr	r4, [pc, #40]	@ (8007bc8 <__libc_init_array+0x40>)
 8007ba0:	4d0a      	ldr	r5, [pc, #40]	@ (8007bcc <__libc_init_array+0x44>)
 8007ba2:	1b64      	subs	r4, r4, r5
 8007ba4:	10a4      	asrs	r4, r4, #2
 8007ba6:	42a6      	cmp	r6, r4
 8007ba8:	d105      	bne.n	8007bb6 <__libc_init_array+0x2e>
 8007baa:	bd70      	pop	{r4, r5, r6, pc}
 8007bac:	00b3      	lsls	r3, r6, #2
 8007bae:	58eb      	ldr	r3, [r5, r3]
 8007bb0:	4798      	blx	r3
 8007bb2:	3601      	adds	r6, #1
 8007bb4:	e7ee      	b.n	8007b94 <__libc_init_array+0xc>
 8007bb6:	00b3      	lsls	r3, r6, #2
 8007bb8:	58eb      	ldr	r3, [r5, r3]
 8007bba:	4798      	blx	r3
 8007bbc:	3601      	adds	r6, #1
 8007bbe:	e7f2      	b.n	8007ba6 <__libc_init_array+0x1e>
 8007bc0:	08007c28 	.word	0x08007c28
 8007bc4:	08007c28 	.word	0x08007c28
 8007bc8:	08007c2c 	.word	0x08007c2c
 8007bcc:	08007c28 	.word	0x08007c28

08007bd0 <_init>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	46c0      	nop			@ (mov r8, r8)
 8007bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bd6:	bc08      	pop	{r3}
 8007bd8:	469e      	mov	lr, r3
 8007bda:	4770      	bx	lr

08007bdc <_fini>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	46c0      	nop			@ (mov r8, r8)
 8007be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be2:	bc08      	pop	{r3}
 8007be4:	469e      	mov	lr, r3
 8007be6:	4770      	bx	lr
