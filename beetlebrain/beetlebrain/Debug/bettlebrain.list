
bettlebrain.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002a68  08002a68  00003a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a84  08002a84  00004014  2**0
                  CONTENTS
  4 .ARM          00000008  08002a84  08002a84  00003a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a8c  08002a8c  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a8c  08002a8c  00003a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a90  08002a90  00003a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002a94  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000014  08002aa8  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08002aa8  00004234  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001236a  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002934  00000000  00000000  000163a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00018ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afd  00000000  00000000  00019b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001254c  00000000  00000000  0001a635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017aab  00000000  00000000  0002cb81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000711b1  00000000  00000000  0004462c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b57dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002624  00000000  00000000  000b5820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000093a8  00000000  00000000  000b7e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000c11ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a50 	.word	0x08002a50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002a50 	.word	0x08002a50

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <RUN_interrupt>:
	HAL_NVIC_SetPriority(EXTI4_15_IRQn,3,0);
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
}

void RUN_interrupt(void){
	asm("NOP");
 80004a8:	46c0      	nop			@ (mov r8, r8)
}
 80004aa:	4770      	bx	lr

080004ac <interrupt_init>:
void interrupt_init(void){
 80004ac:	b510      	push	{r4, lr}
 80004ae:	b084      	sub	sp, #16
	EXTI_ConfigTypeDef hext_a7_config = {0};
 80004b0:	2210      	movs	r2, #16
 80004b2:	2100      	movs	r1, #0
 80004b4:	4668      	mov	r0, sp
 80004b6:	f002 fa9f 	bl	80029f8 <memset>
	hext_a7_config.Line = EXTI_LINE_7;
 80004ba:	490e      	ldr	r1, [pc, #56]	@ (80004f4 <interrupt_init+0x48>)
 80004bc:	9100      	str	r1, [sp, #0]
	hext_a7_config.Mode = EXTI_MODE_INTERRUPT;
 80004be:	2301      	movs	r3, #1
 80004c0:	9301      	str	r3, [sp, #4]
	hext_a7_config.Trigger = EXTI_TRIGGER_RISING_FALLING;
 80004c2:	3302      	adds	r3, #2
 80004c4:	9302      	str	r3, [sp, #8]
	HAL_EXTI_GetHandle(&RUN_Handle, EXTI_LINE_7);
 80004c6:	4c0c      	ldr	r4, [pc, #48]	@ (80004f8 <interrupt_init+0x4c>)
 80004c8:	0020      	movs	r0, r4
 80004ca:	f001 f8fc 	bl	80016c6 <HAL_EXTI_GetHandle>
	HAL_EXTI_SetConfigLine(&RUN_Handle, &hext_a7_config);
 80004ce:	4669      	mov	r1, sp
 80004d0:	0020      	movs	r0, r4
 80004d2:	f001 f891 	bl	80015f8 <HAL_EXTI_SetConfigLine>
	HAL_EXTI_RegisterCallback(&RUN_Handle, HAL_EXTI_COMMON_CB_ID, &RUN_interrupt);
 80004d6:	4a09      	ldr	r2, [pc, #36]	@ (80004fc <interrupt_init+0x50>)
 80004d8:	2100      	movs	r1, #0
 80004da:	0020      	movs	r0, r4
 80004dc:	f001 f8ec 	bl	80016b8 <HAL_EXTI_RegisterCallback>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn,3,0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2103      	movs	r1, #3
 80004e4:	2007      	movs	r0, #7
 80004e6:	f000 ff77 	bl	80013d8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004ea:	2007      	movs	r0, #7
 80004ec:	f000 ff78 	bl	80013e0 <HAL_NVIC_EnableIRQ>
}
 80004f0:	b004      	add	sp, #16
 80004f2:	bd10      	pop	{r4, pc}
 80004f4:	06000007 	.word	0x06000007
 80004f8:	20000030 	.word	0x20000030
 80004fc:	080004a9 	.word	0x080004a9

08000500 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8000500:	b510      	push	{r4, lr}
// Function called on 4_15 interrupt
// We call the HAL handler
	if(HAL_EXTI_GetPending(&RUN_Handle, EXTI_TRIGGER_RISING_FALLING))
 8000502:	4805      	ldr	r0, [pc, #20]	@ (8000518 <EXTI4_15_IRQHandler+0x18>)
 8000504:	2103      	movs	r1, #3
 8000506:	f001 f8f9 	bl	80016fc <HAL_EXTI_GetPending>
 800050a:	2800      	cmp	r0, #0
 800050c:	d100      	bne.n	8000510 <EXTI4_15_IRQHandler+0x10>
	{
		HAL_EXTI_IRQHandler(&RUN_Handle);
	}
};
 800050e:	bd10      	pop	{r4, pc}
		HAL_EXTI_IRQHandler(&RUN_Handle);
 8000510:	4801      	ldr	r0, [pc, #4]	@ (8000518 <EXTI4_15_IRQHandler+0x18>)
 8000512:	f001 f8df 	bl	80016d4 <HAL_EXTI_IRQHandler>
};
 8000516:	e7fa      	b.n	800050e <EXTI4_15_IRQHandler+0xe>
 8000518:	20000030 	.word	0x20000030

0800051c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051e:	46c6      	mov	lr, r8
 8000520:	b500      	push	{lr}
 8000522:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	2214      	movs	r2, #20
 8000526:	2100      	movs	r1, #0
 8000528:	a803      	add	r0, sp, #12
 800052a:	f002 fa65 	bl	80029f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	4b31      	ldr	r3, [pc, #196]	@ (80005f4 <MX_GPIO_Init+0xd8>)
 8000530:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000532:	2204      	movs	r2, #4
 8000534:	4311      	orrs	r1, r2
 8000536:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000538:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800053a:	400a      	ands	r2, r1
 800053c:	9200      	str	r2, [sp, #0]
 800053e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000542:	2401      	movs	r4, #1
 8000544:	4322      	orrs	r2, r4
 8000546:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800054a:	4022      	ands	r2, r4
 800054c:	9201      	str	r2, [sp, #4]
 800054e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000552:	2602      	movs	r6, #2
 8000554:	4332      	orrs	r2, r6
 8000556:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800055a:	4033      	ands	r3, r6
 800055c:	9302      	str	r3, [sp, #8]
 800055e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000560:	21c0      	movs	r1, #192	@ 0xc0
 8000562:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <MX_GPIO_Init+0xdc>)
 8000564:	4698      	mov	r8, r3
 8000566:	2200      	movs	r2, #0
 8000568:	0209      	lsls	r1, r1, #8
 800056a:	0018      	movs	r0, r3
 800056c:	f001 f990 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_TOF1_Pin|EN_TOF2_Pin, GPIO_PIN_RESET);
 8000570:	27a0      	movs	r7, #160	@ 0xa0
 8000572:	05ff      	lsls	r7, r7, #23
 8000574:	2200      	movs	r2, #0
 8000576:	210c      	movs	r1, #12
 8000578:	0038      	movs	r0, r7
 800057a:	f001 f989 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800057e:	2380      	movs	r3, #128	@ 0x80
 8000580:	01db      	lsls	r3, r3, #7
 8000582:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	2500      	movs	r5, #0
 8000588:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058c:	a903      	add	r1, sp, #12
 800058e:	4640      	mov	r0, r8
 8000590:	f001 f8c0 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000594:	2380      	movs	r3, #128	@ 0x80
 8000596:	021b      	lsls	r3, r3, #8
 8000598:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800059c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a0:	a903      	add	r1, sp, #12
 80005a2:	4640      	mov	r0, r8
 80005a4:	f001 f8b6 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_TOF1_Pin EN_TOF2_Pin */
  GPIO_InitStruct.Pin = EN_TOF1_Pin|EN_TOF2_Pin;
 80005a8:	230c      	movs	r3, #12
 80005aa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ac:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005ae:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	a903      	add	r1, sp, #12
 80005b4:	0038      	movs	r0, r7
 80005b6:	f001 f8ad 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : I_OTF_Pin */
  GPIO_InitStruct.Pin = I_OTF_Pin;
 80005ba:	2310      	movs	r3, #16
 80005bc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005be:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005c0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(I_OTF_GPIO_Port, &GPIO_InitStruct);
 80005c2:	a903      	add	r1, sp, #12
 80005c4:	0038      	movs	r0, r7
 80005c6:	f001 f8a5 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : RUN_Pin */
  GPIO_InitStruct.Pin = RUN_Pin;
 80005ca:	2380      	movs	r3, #128	@ 0x80
 80005cc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005ce:	23c4      	movs	r3, #196	@ 0xc4
 80005d0:	039b      	lsls	r3, r3, #14
 80005d2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(RUN_GPIO_Port, &GPIO_InitStruct);
 80005d6:	a903      	add	r1, sp, #12
 80005d8:	0038      	movs	r0, r7
 80005da:	f001 f89b 	bl	8001714 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_Pin */
  GPIO_InitStruct.Pin = SWITCH_Pin;
 80005de:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 80005e4:	a903      	add	r1, sp, #12
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <MX_GPIO_Init+0xe0>)
 80005e8:	f001 f894 	bl	8001714 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ec:	b008      	add	sp, #32
 80005ee:	bc80      	pop	{r7}
 80005f0:	46b8      	mov	r8, r7
 80005f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	50000800 	.word	0x50000800
 80005fc:	50000400 	.word	0x50000400

08000600 <MX_DMA_Init>:
{
 8000600:	b500      	push	{lr}
 8000602:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000604:	4a11      	ldr	r2, [pc, #68]	@ (800064c <MX_DMA_Init+0x4c>)
 8000606:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8000608:	2301      	movs	r3, #1
 800060a:	4319      	orrs	r1, r3
 800060c:	6311      	str	r1, [r2, #48]	@ 0x30
 800060e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000610:	4013      	ands	r3, r2
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	2009      	movs	r0, #9
 800061c:	f000 fedc 	bl	80013d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000620:	2009      	movs	r0, #9
 8000622:	f000 fedd 	bl	80013e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	200a      	movs	r0, #10
 800062c:	f000 fed4 	bl	80013d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000630:	200a      	movs	r0, #10
 8000632:	f000 fed5 	bl	80013e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	200b      	movs	r0, #11
 800063c:	f000 fecc 	bl	80013d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000640:	200b      	movs	r0, #11
 8000642:	f000 fecd 	bl	80013e0 <HAL_NVIC_EnableIRQ>
}
 8000646:	b003      	add	sp, #12
 8000648:	bd00      	pop	{pc}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	40021000 	.word	0x40021000

08000650 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000652:	e7fe      	b.n	8000652 <Error_Handler+0x2>

08000654 <MX_ADC_Init>:
{
 8000654:	b500      	push	{lr}
 8000656:	b089      	sub	sp, #36	@ 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000658:	2208      	movs	r2, #8
 800065a:	2100      	movs	r1, #0
 800065c:	a806      	add	r0, sp, #24
 800065e:	f002 f9cb 	bl	80029f8 <memset>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000662:	2214      	movs	r2, #20
 8000664:	2100      	movs	r1, #0
 8000666:	a801      	add	r0, sp, #4
 8000668:	f002 f9c6 	bl	80029f8 <memset>
  hadc.Instance = ADC1;
 800066c:	482b      	ldr	r0, [pc, #172]	@ (800071c <MX_ADC_Init+0xc8>)
 800066e:	4b2c      	ldr	r3, [pc, #176]	@ (8000720 <MX_ADC_Init+0xcc>)
 8000670:	6003      	str	r3, [r0, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	63c3      	str	r3, [r0, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000676:	22c0      	movs	r2, #192	@ 0xc0
 8000678:	0612      	lsls	r2, r2, #24
 800067a:	6042      	str	r2, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800067c:	6083      	str	r3, [r0, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800067e:	2202      	movs	r2, #2
 8000680:	6382      	str	r2, [r0, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000682:	3a01      	subs	r2, #1
 8000684:	6102      	str	r2, [r0, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000686:	60c3      	str	r3, [r0, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000688:	2120      	movs	r1, #32
 800068a:	5442      	strb	r2, [r0, r1]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800068c:	3101      	adds	r1, #1
 800068e:	5443      	strb	r3, [r0, r1]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000690:	2180      	movs	r1, #128	@ 0x80
 8000692:	00c9      	lsls	r1, r1, #3
 8000694:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000696:	2180      	movs	r1, #128	@ 0x80
 8000698:	6241      	str	r1, [r0, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800069a:	3954      	subs	r1, #84	@ 0x54
 800069c:	5442      	strb	r2, [r0, r1]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800069e:	3924      	subs	r1, #36	@ 0x24
 80006a0:	6141      	str	r1, [r0, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a2:	6303      	str	r3, [r0, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80006a4:	6183      	str	r3, [r0, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80006a6:	6342      	str	r2, [r0, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006a8:	61c3      	str	r3, [r0, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006aa:	f000 fba7 	bl	8000dfc <HAL_ADC_Init>
 80006ae:	2800      	cmp	r0, #0
 80006b0:	d129      	bne.n	8000706 <MX_ADC_Init+0xb2>
  sConfig.Channel = ADC_CHANNEL_5;
 80006b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <MX_ADC_Init+0xd0>)
 80006b4:	9306      	str	r3, [sp, #24]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006b6:	2380      	movs	r3, #128	@ 0x80
 80006b8:	015b      	lsls	r3, r3, #5
 80006ba:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006bc:	4817      	ldr	r0, [pc, #92]	@ (800071c <MX_ADC_Init+0xc8>)
 80006be:	a906      	add	r1, sp, #24
 80006c0:	f000 fd34 	bl	800112c <HAL_ADC_ConfigChannel>
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d120      	bne.n	800070a <MX_ADC_Init+0xb6>
  sConfig.Channel = ADC_CHANNEL_6;
 80006c8:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <MX_ADC_Init+0xd4>)
 80006ca:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006cc:	4813      	ldr	r0, [pc, #76]	@ (800071c <MX_ADC_Init+0xc8>)
 80006ce:	a906      	add	r1, sp, #24
 80006d0:	f000 fd2c 	bl	800112c <HAL_ADC_ConfigChannel>
 80006d4:	2800      	cmp	r0, #0
 80006d6:	d11a      	bne.n	800070e <MX_ADC_Init+0xba>
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80006d8:	a901      	add	r1, sp, #4
 80006da:	23c0      	movs	r3, #192	@ 0xc0
 80006dc:	041b      	lsls	r3, r3, #16
 80006de:	9301      	str	r3, [sp, #4]
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b10      	ldr	r3, [pc, #64]	@ (8000724 <MX_ADC_Init+0xd0>)
 80006e2:	604b      	str	r3, [r1, #4]
  AnalogWDGConfig.ITMode = DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	720b      	strb	r3, [r1, #8]
  AnalogWDGConfig.HighThreshold = 0;
 80006e8:	60cb      	str	r3, [r1, #12]
  AnalogWDGConfig.LowThreshold = 0;
 80006ea:	610b      	str	r3, [r1, #16]
  if (HAL_ADC_AnalogWDGConfig(&hadc, &AnalogWDGConfig) != HAL_OK)
 80006ec:	480b      	ldr	r0, [pc, #44]	@ (800071c <MX_ADC_Init+0xc8>)
 80006ee:	f000 fd7b 	bl	80011e8 <HAL_ADC_AnalogWDGConfig>
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d10d      	bne.n	8000712 <MX_ADC_Init+0xbe>
  if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 80006f6:	4809      	ldr	r0, [pc, #36]	@ (800071c <MX_ADC_Init+0xc8>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	f000 fdc9 	bl	8001290 <HAL_ADCEx_Calibration_Start>
 80006fe:	2800      	cmp	r0, #0
 8000700:	d109      	bne.n	8000716 <MX_ADC_Init+0xc2>
}
 8000702:	b009      	add	sp, #36	@ 0x24
 8000704:	bd00      	pop	{pc}
    Error_Handler();
 8000706:	f7ff ffa3 	bl	8000650 <Error_Handler>
    Error_Handler();
 800070a:	f7ff ffa1 	bl	8000650 <Error_Handler>
    Error_Handler();
 800070e:	f7ff ff9f 	bl	8000650 <Error_Handler>
    Error_Handler();
 8000712:	f7ff ff9d 	bl	8000650 <Error_Handler>
    Error_Handler();
 8000716:	f7ff ff9b 	bl	8000650 <Error_Handler>
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	200001cc 	.word	0x200001cc
 8000720:	40012400 	.word	0x40012400
 8000724:	14000020 	.word	0x14000020
 8000728:	18000040 	.word	0x18000040

0800072c <MX_I2C1_Init>:
{
 800072c:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 800072e:	4813      	ldr	r0, [pc, #76]	@ (800077c <MX_I2C1_Init+0x50>)
 8000730:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_I2C1_Init+0x54>)
 8000732:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000734:	23e1      	movs	r3, #225	@ 0xe1
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073e:	2201      	movs	r2, #1
 8000740:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000742:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000744:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000746:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800074c:	f001 f8a6 	bl	800189c <HAL_I2C_Init>
 8000750:	2800      	cmp	r0, #0
 8000752:	d10c      	bne.n	800076e <MX_I2C1_Init+0x42>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000754:	4809      	ldr	r0, [pc, #36]	@ (800077c <MX_I2C1_Init+0x50>)
 8000756:	2100      	movs	r1, #0
 8000758:	f001 f906 	bl	8001968 <HAL_I2CEx_ConfigAnalogFilter>
 800075c:	2800      	cmp	r0, #0
 800075e:	d108      	bne.n	8000772 <MX_I2C1_Init+0x46>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000760:	4806      	ldr	r0, [pc, #24]	@ (800077c <MX_I2C1_Init+0x50>)
 8000762:	2100      	movs	r1, #0
 8000764:	f001 f92c 	bl	80019c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000768:	2800      	cmp	r0, #0
 800076a:	d104      	bne.n	8000776 <MX_I2C1_Init+0x4a>
}
 800076c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800076e:	f7ff ff6f 	bl	8000650 <Error_Handler>
    Error_Handler();
 8000772:	f7ff ff6d 	bl	8000650 <Error_Handler>
    Error_Handler();
 8000776:	f7ff ff6b 	bl	8000650 <Error_Handler>
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	20000130 	.word	0x20000130
 8000780:	40005400 	.word	0x40005400

08000784 <MX_TIM2_Init>:
{
 8000784:	b500      	push	{lr}
 8000786:	b091      	sub	sp, #68	@ 0x44
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000788:	2210      	movs	r2, #16
 800078a:	2100      	movs	r1, #0
 800078c:	a80c      	add	r0, sp, #48	@ 0x30
 800078e:	f002 f933 	bl	80029f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000792:	2208      	movs	r2, #8
 8000794:	2100      	movs	r1, #0
 8000796:	a80a      	add	r0, sp, #40	@ 0x28
 8000798:	f002 f92e 	bl	80029f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079c:	2210      	movs	r2, #16
 800079e:	2100      	movs	r1, #0
 80007a0:	a806      	add	r0, sp, #24
 80007a2:	f002 f929 	bl	80029f8 <memset>
  htim2.Instance = TIM2;
 80007a6:	4835      	ldr	r0, [pc, #212]	@ (800087c <MX_TIM2_Init+0xf8>)
 80007a8:	2380      	movs	r3, #128	@ 0x80
 80007aa:	05db      	lsls	r3, r3, #23
 80007ac:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80007b2:	331f      	adds	r3, #31
 80007b4:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = PWM_PERIOD;
 80007b6:	2340      	movs	r3, #64	@ 0x40
 80007b8:	33ff      	adds	r3, #255	@ 0xff
 80007ba:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c0:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007c2:	f001 ff48 	bl	8002656 <HAL_TIM_Base_Init>
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d14a      	bne.n	8000860 <MX_TIM2_Init+0xdc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	2380      	movs	r3, #128	@ 0x80
 80007cc:	015b      	lsls	r3, r3, #5
 80007ce:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d0:	482a      	ldr	r0, [pc, #168]	@ (800087c <MX_TIM2_Init+0xf8>)
 80007d2:	a90c      	add	r1, sp, #48	@ 0x30
 80007d4:	f002 f85a 	bl	800288c <HAL_TIM_ConfigClockSource>
 80007d8:	2800      	cmp	r0, #0
 80007da:	d143      	bne.n	8000864 <MX_TIM2_Init+0xe0>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80007dc:	4827      	ldr	r0, [pc, #156]	@ (800087c <MX_TIM2_Init+0xf8>)
 80007de:	f001 ff8c 	bl	80026fa <HAL_TIM_OC_Init>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d140      	bne.n	8000868 <MX_TIM2_Init+0xe4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC3REF;
 80007e6:	2360      	movs	r3, #96	@ 0x60
 80007e8:	930a      	str	r3, [sp, #40]	@ 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ee:	4823      	ldr	r0, [pc, #140]	@ (800087c <MX_TIM2_Init+0xf8>)
 80007f0:	a90a      	add	r1, sp, #40	@ 0x28
 80007f2:	f002 f8cf 	bl	8002994 <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d138      	bne.n	800086c <MX_TIM2_Init+0xe8>
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80007fa:	2310      	movs	r3, #16
 80007fc:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 5;
 80007fe:	3b0b      	subs	r3, #11
 8000800:	9307      	str	r3, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000802:	2300      	movs	r3, #0
 8000804:	9308      	str	r3, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000806:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000808:	481c      	ldr	r0, [pc, #112]	@ (800087c <MX_TIM2_Init+0xf8>)
 800080a:	2208      	movs	r2, #8
 800080c:	a906      	add	r1, sp, #24
 800080e:	f001 ff98 	bl	8002742 <HAL_TIM_OC_ConfigChannel>
 8000812:	2800      	cmp	r0, #0
 8000814:	d12c      	bne.n	8000870 <MX_TIM2_Init+0xec>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000816:	2370      	movs	r3, #112	@ 0x70
 8000818:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	9307      	str	r3, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081e:	9308      	str	r3, [sp, #32]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000820:	9309      	str	r3, [sp, #36]	@ 0x24
  if(HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000822:	4816      	ldr	r0, [pc, #88]	@ (800087c <MX_TIM2_Init+0xf8>)
 8000824:	2204      	movs	r2, #4
 8000826:	a906      	add	r1, sp, #24
 8000828:	f001 ffb8 	bl	800279c <HAL_TIM_PWM_ConfigChannel>
 800082c:	2800      	cmp	r0, #0
 800082e:	d121      	bne.n	8000874 <MX_TIM2_Init+0xf0>
  if(HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000830:	4812      	ldr	r0, [pc, #72]	@ (800087c <MX_TIM2_Init+0xf8>)
 8000832:	2200      	movs	r2, #0
 8000834:	a906      	add	r1, sp, #24
 8000836:	f001 ffb1 	bl	800279c <HAL_TIM_PWM_ConfigChannel>
 800083a:	2800      	cmp	r0, #0
 800083c:	d11c      	bne.n	8000878 <MX_TIM2_Init+0xf4>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	2214      	movs	r2, #20
 8000840:	2100      	movs	r1, #0
 8000842:	a801      	add	r0, sp, #4
 8000844:	f002 f8d8 	bl	80029f8 <memset>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000848:	2303      	movs	r3, #3
 800084a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	3b01      	subs	r3, #1
 800084e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000850:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	20a0      	movs	r0, #160	@ 0xa0
 8000854:	a901      	add	r1, sp, #4
 8000856:	05c0      	lsls	r0, r0, #23
 8000858:	f000 ff5c 	bl	8001714 <HAL_GPIO_Init>
}
 800085c:	b011      	add	sp, #68	@ 0x44
 800085e:	bd00      	pop	{pc}
    Error_Handler();
 8000860:	f7ff fef6 	bl	8000650 <Error_Handler>
    Error_Handler();
 8000864:	f7ff fef4 	bl	8000650 <Error_Handler>
    Error_Handler();
 8000868:	f7ff fef2 	bl	8000650 <Error_Handler>
    Error_Handler();
 800086c:	f7ff fef0 	bl	8000650 <Error_Handler>
    Error_Handler();
 8000870:	f7ff feee 	bl	8000650 <Error_Handler>
	  Error_Handler();
 8000874:	f7ff feec 	bl	8000650 <Error_Handler>
	  Error_Handler();
 8000878:	f7ff feea 	bl	8000650 <Error_Handler>
 800087c:	2000003c 	.word	0x2000003c

08000880 <MX_RTC_Init>:
{
 8000880:	b510      	push	{r4, lr}
  hrtc.Instance = RTC;
 8000882:	480a      	ldr	r0, [pc, #40]	@ (80008ac <MX_RTC_Init+0x2c>)
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <MX_RTC_Init+0x30>)
 8000886:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000888:	2300      	movs	r3, #0
 800088a:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800088c:	227f      	movs	r2, #127	@ 0x7f
 800088e:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8000890:	3280      	adds	r2, #128	@ 0x80
 8000892:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000894:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000896:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000898:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800089a:	61c3      	str	r3, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800089c:	f001 fdb0 	bl	8002400 <HAL_RTC_Init>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d100      	bne.n	80008a6 <MX_RTC_Init+0x26>
}
 80008a4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80008a6:	f7ff fed3 	bl	8000650 <Error_Handler>
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	2000007c 	.word	0x2000007c
 80008b0:	40002800 	.word	0x40002800

080008b4 <SystemClock_Config>:
{
 80008b4:	b500      	push	{lr}
 80008b6:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b8:	2234      	movs	r2, #52	@ 0x34
 80008ba:	2100      	movs	r1, #0
 80008bc:	a80b      	add	r0, sp, #44	@ 0x2c
 80008be:	f002 f89b 	bl	80029f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c2:	2214      	movs	r2, #20
 80008c4:	2100      	movs	r1, #0
 80008c6:	a806      	add	r0, sp, #24
 80008c8:	f002 f896 	bl	80029f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008cc:	2218      	movs	r2, #24
 80008ce:	2100      	movs	r1, #0
 80008d0:	4668      	mov	r0, sp
 80008d2:	f002 f891 	bl	80029f8 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d6:	491d      	ldr	r1, [pc, #116]	@ (800094c <SystemClock_Config+0x98>)
 80008d8:	680a      	ldr	r2, [r1, #0]
 80008da:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <SystemClock_Config+0x9c>)
 80008dc:	401a      	ands	r2, r3
 80008de:	2380      	movs	r3, #128	@ 0x80
 80008e0:	011b      	lsls	r3, r3, #4
 80008e2:	4313      	orrs	r3, r2
 80008e4:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSI;
 80008e6:	230a      	movs	r3, #10
 80008e8:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008ea:	3b09      	subs	r3, #9
 80008ec:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_OFF;
 80008ee:	2300      	movs	r3, #0
 80008f0:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON | RCC_HSI_OUTEN;
 80008f2:	2221      	movs	r2, #33	@ 0x21
 80008f4:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f6:	3a11      	subs	r2, #17
 80008f8:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008fa:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	a80b      	add	r0, sp, #44	@ 0x2c
 80008fe:	f001 f8e1 	bl	8001ac4 <HAL_RCC_OscConfig>
 8000902:	2800      	cmp	r0, #0
 8000904:	d11c      	bne.n	8000940 <SystemClock_Config+0x8c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	230f      	movs	r3, #15
 8000908:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800090a:	3b0e      	subs	r3, #14
 800090c:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000912:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	a806      	add	r0, sp, #24
 800091a:	f001 fb61 	bl	8001fe0 <HAL_RCC_ClockConfig>
 800091e:	2800      	cmp	r0, #0
 8000920:	d110      	bne.n	8000944 <SystemClock_Config+0x90>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8000922:	2328      	movs	r3, #40	@ 0x28
 8000924:	9300      	str	r3, [sp, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000926:	2380      	movs	r3, #128	@ 0x80
 8000928:	015b      	lsls	r3, r3, #5
 800092a:	9304      	str	r3, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800092c:	2380      	movs	r3, #128	@ 0x80
 800092e:	029b      	lsls	r3, r3, #10
 8000930:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000932:	4668      	mov	r0, sp
 8000934:	f001 fc40 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 8000938:	2800      	cmp	r0, #0
 800093a:	d105      	bne.n	8000948 <SystemClock_Config+0x94>
}
 800093c:	b019      	add	sp, #100	@ 0x64
 800093e:	bd00      	pop	{pc}
    Error_Handler();
 8000940:	f7ff fe86 	bl	8000650 <Error_Handler>
    Error_Handler();
 8000944:	f7ff fe84 	bl	8000650 <Error_Handler>
    Error_Handler();
 8000948:	f7ff fe82 	bl	8000650 <Error_Handler>
 800094c:	40007000 	.word	0x40007000
 8000950:	ffffe7ff 	.word	0xffffe7ff

08000954 <main>:
{
 8000954:	b510      	push	{r4, lr}
  HAL_Init();
 8000956:	f000 f9d3 	bl	8000d00 <HAL_Init>
  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM2EN));
 800095a:	4a14      	ldr	r2, [pc, #80]	@ (80009ac <main+0x58>)
 800095c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800095e:	2101      	movs	r1, #1
 8000960:	430b      	orrs	r3, r1
 8000962:	6393      	str	r3, [r2, #56]	@ 0x38
  SystemClock_Config();
 8000964:	f7ff ffa6 	bl	80008b4 <SystemClock_Config>
  MX_GPIO_Init();
 8000968:	f7ff fdd8 	bl	800051c <MX_GPIO_Init>
  MX_DMA_Init();
 800096c:	f7ff fe48 	bl	8000600 <MX_DMA_Init>
  MX_ADC_Init();
 8000970:	f7ff fe70 	bl	8000654 <MX_ADC_Init>
  MX_I2C1_Init();
 8000974:	f7ff feda 	bl	800072c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000978:	f7ff ff04 	bl	8000784 <MX_TIM2_Init>
  MX_RTC_Init();
 800097c:	f7ff ff80 	bl	8000880 <MX_RTC_Init>
  interrupt_init();
 8000980:	f7ff fd94 	bl	80004ac <interrupt_init>
  if (HAL_ADC_Start_DMA(&hadc, &adc_values.dma_pointer, 4) != HAL_OK)
 8000984:	490a      	ldr	r1, [pc, #40]	@ (80009b0 <main+0x5c>)
 8000986:	480b      	ldr	r0, [pc, #44]	@ (80009b4 <main+0x60>)
 8000988:	2204      	movs	r2, #4
 800098a:	f000 fb2d 	bl	8000fe8 <HAL_ADC_Start_DMA>
 800098e:	2800      	cmp	r0, #0
 8000990:	d001      	beq.n	8000996 <main+0x42>
    Error_Handler();
 8000992:	f7ff fe5d 	bl	8000650 <Error_Handler>
  adc_value_pointer = &adc_values.adc_values[0];
 8000996:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <main+0x64>)
 8000998:	4a05      	ldr	r2, [pc, #20]	@ (80009b0 <main+0x5c>)
 800099a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK){
 800099c:	4807      	ldr	r0, [pc, #28]	@ (80009bc <main+0x68>)
 800099e:	f001 fe7f 	bl	80026a0 <HAL_TIM_Base_Start>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d100      	bne.n	80009a8 <main+0x54>
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <main+0x52>
	Error_Handler();
 80009a8:	f7ff fe52 	bl	8000650 <Error_Handler>
 80009ac:	40021000 	.word	0x40021000
 80009b0:	20000004 	.word	0x20000004
 80009b4:	200001cc 	.word	0x200001cc
 80009b8:	20000038 	.word	0x20000038
 80009bc:	2000003c 	.word	0x2000003c

080009c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <HAL_MspInit+0x18>)
 80009c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009c4:	2101      	movs	r1, #1
 80009c6:	430a      	orrs	r2, r1
 80009c8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80009cc:	2280      	movs	r2, #128	@ 0x80
 80009ce:	0552      	lsls	r2, r2, #21
 80009d0:	430a      	orrs	r2, r1
 80009d2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d4:	4770      	bx	lr
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009dc:	b510      	push	{r4, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	2214      	movs	r2, #20
 80009e4:	2100      	movs	r1, #0
 80009e6:	a801      	add	r0, sp, #4
 80009e8:	f002 f806 	bl	80029f8 <memset>
  if(hadc->Instance==ADC1)
 80009ec:	6822      	ldr	r2, [r4, #0]
 80009ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <HAL_ADC_MspInit+0x84>)
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d001      	beq.n	80009f8 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009f4:	b006      	add	sp, #24
 80009f6:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <HAL_ADC_MspInit+0x88>)
 80009fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	0092      	lsls	r2, r2, #2
 8000a00:	430a      	orrs	r2, r1
 8000a02:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000a06:	2201      	movs	r2, #1
 8000a08:	4311      	orrs	r1, r2
 8000a0a:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8000a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0e:	401a      	ands	r2, r3
 8000a10:	9200      	str	r2, [sp, #0]
 8000a12:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000a14:	2360      	movs	r3, #96	@ 0x60
 8000a16:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a18:	3b5d      	subs	r3, #93	@ 0x5d
 8000a1a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	20a0      	movs	r0, #160	@ 0xa0
 8000a1e:	a901      	add	r1, sp, #4
 8000a20:	05c0      	lsls	r0, r0, #23
 8000a22:	f000 fe77 	bl	8001714 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8000a26:	4810      	ldr	r0, [pc, #64]	@ (8000a68 <HAL_ADC_MspInit+0x8c>)
 8000a28:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <HAL_ADC_MspInit+0x90>)
 8000a2a:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	6043      	str	r3, [r0, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a30:	6083      	str	r3, [r0, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a32:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000a34:	2280      	movs	r2, #128	@ 0x80
 8000a36:	6102      	str	r2, [r0, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a38:	3280      	adds	r2, #128	@ 0x80
 8000a3a:	6142      	str	r2, [r0, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a3c:	2280      	movs	r2, #128	@ 0x80
 8000a3e:	00d2      	lsls	r2, r2, #3
 8000a40:	6182      	str	r2, [r0, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000a42:	2220      	movs	r2, #32
 8000a44:	61c2      	str	r2, [r0, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000a46:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000a48:	f000 fcf2 	bl	8001430 <HAL_DMA_Init>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d103      	bne.n	8000a58 <HAL_ADC_MspInit+0x7c>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <HAL_ADC_MspInit+0x8c>)
 8000a52:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8000a54:	629c      	str	r4, [r3, #40]	@ 0x28
}
 8000a56:	e7cd      	b.n	80009f4 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000a58:	f7ff fdfa 	bl	8000650 <Error_Handler>
 8000a5c:	e7f8      	b.n	8000a50 <HAL_ADC_MspInit+0x74>
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	40012400 	.word	0x40012400
 8000a64:	40021000 	.word	0x40021000
 8000a68:	20000184 	.word	0x20000184
 8000a6c:	40020008 	.word	0x40020008

08000a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a70:	b530      	push	{r4, r5, lr}
 8000a72:	b087      	sub	sp, #28
 8000a74:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	2214      	movs	r2, #20
 8000a78:	2100      	movs	r1, #0
 8000a7a:	a801      	add	r0, sp, #4
 8000a7c:	f001 ffbc 	bl	80029f8 <memset>
  if(hi2c->Instance==I2C1)
 8000a80:	6822      	ldr	r2, [r4, #0]
 8000a82:	4b2c      	ldr	r3, [pc, #176]	@ (8000b34 <HAL_I2C_MspInit+0xc4>)
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d001      	beq.n	8000a8c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a88:	b007      	add	sp, #28
 8000a8a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4d2a      	ldr	r5, [pc, #168]	@ (8000b38 <HAL_I2C_MspInit+0xc8>)
 8000a8e:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8000a90:	2301      	movs	r3, #1
 8000a92:	431a      	orrs	r2, r3
 8000a94:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8000a96:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8000a98:	401a      	ands	r2, r3
 8000a9a:	9200      	str	r2, [sp, #0]
 8000a9c:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a9e:	22c0      	movs	r2, #192	@ 0xc0
 8000aa0:	00d2      	lsls	r2, r2, #3
 8000aa2:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa4:	2212      	movs	r2, #18
 8000aa6:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	3a0f      	subs	r2, #15
 8000aaa:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000aac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aae:	20a0      	movs	r0, #160	@ 0xa0
 8000ab0:	a901      	add	r1, sp, #4
 8000ab2:	05c0      	lsls	r0, r0, #23
 8000ab4:	f000 fe2e 	bl	8001714 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab8:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8000aba:	2380      	movs	r3, #128	@ 0x80
 8000abc:	039b      	lsls	r3, r3, #14
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	63ab      	str	r3, [r5, #56]	@ 0x38
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000ac2:	481e      	ldr	r0, [pc, #120]	@ (8000b3c <HAL_I2C_MspInit+0xcc>)
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <HAL_I2C_MspInit+0xd0>)
 8000ac6:	6003      	str	r3, [r0, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8000ac8:	2306      	movs	r3, #6
 8000aca:	6043      	str	r3, [r0, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000acc:	2300      	movs	r3, #0
 8000ace:	6083      	str	r3, [r0, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad0:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad2:	2280      	movs	r2, #128	@ 0x80
 8000ad4:	6102      	str	r2, [r0, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ad6:	3280      	adds	r2, #128	@ 0x80
 8000ad8:	6142      	str	r2, [r0, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ada:	2280      	movs	r2, #128	@ 0x80
 8000adc:	00d2      	lsls	r2, r2, #3
 8000ade:	6182      	str	r2, [r0, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000ae0:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ae2:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000ae4:	f000 fca4 	bl	8001430 <HAL_DMA_Init>
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	d11c      	bne.n	8000b26 <HAL_I2C_MspInit+0xb6>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <HAL_I2C_MspInit+0xcc>)
 8000aee:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8000af0:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000af2:	4814      	ldr	r0, [pc, #80]	@ (8000b44 <HAL_I2C_MspInit+0xd4>)
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <HAL_I2C_MspInit+0xd8>)
 8000af6:	6003      	str	r3, [r0, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8000af8:	2306      	movs	r3, #6
 8000afa:	6043      	str	r3, [r0, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000afc:	330a      	adds	r3, #10
 8000afe:	6083      	str	r3, [r0, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60c3      	str	r3, [r0, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b04:	2280      	movs	r2, #128	@ 0x80
 8000b06:	6102      	str	r2, [r0, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b08:	3280      	adds	r2, #128	@ 0x80
 8000b0a:	6142      	str	r2, [r0, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	00d2      	lsls	r2, r2, #3
 8000b10:	6182      	str	r2, [r0, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000b12:	61c3      	str	r3, [r0, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b14:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000b16:	f000 fc8b 	bl	8001430 <HAL_DMA_Init>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d106      	bne.n	8000b2c <HAL_I2C_MspInit+0xbc>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_I2C_MspInit+0xd4>)
 8000b20:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000b22:	629c      	str	r4, [r3, #40]	@ 0x28
}
 8000b24:	e7b0      	b.n	8000a88 <HAL_I2C_MspInit+0x18>
      Error_Handler();
 8000b26:	f7ff fd93 	bl	8000650 <Error_Handler>
 8000b2a:	e7df      	b.n	8000aec <HAL_I2C_MspInit+0x7c>
      Error_Handler();
 8000b2c:	f7ff fd90 	bl	8000650 <Error_Handler>
 8000b30:	e7f5      	b.n	8000b1e <HAL_I2C_MspInit+0xae>
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	40005400 	.word	0x40005400
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	200000e8 	.word	0x200000e8
 8000b40:	40020080 	.word	0x40020080
 8000b44:	200000a0 	.word	0x200000a0
 8000b48:	4002001c 	.word	0x4002001c

08000b4c <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8000b4c:	6802      	ldr	r2, [r0, #0]
 8000b4e:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <HAL_RTC_MspInit+0x18>)
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d000      	beq.n	8000b56 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b54:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8000b56:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <HAL_RTC_MspInit+0x1c>)
 8000b58:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8000b5a:	2380      	movs	r3, #128	@ 0x80
 8000b5c:	02db      	lsls	r3, r3, #11
 8000b5e:	430b      	orrs	r3, r1
 8000b60:	6513      	str	r3, [r2, #80]	@ 0x50
}
 8000b62:	e7f7      	b.n	8000b54 <HAL_RTC_MspInit+0x8>
 8000b64:	40002800 	.word	0x40002800
 8000b68:	40021000 	.word	0x40021000

08000b6c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler>

08000b6e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler>

08000b70 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b76:	f000 f8d7 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7a:	bd10      	pop	{r4, pc}

08000b7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b7c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000b7e:	4824      	ldr	r0, [pc, #144]	@ (8000c10 <DMA1_Channel1_IRQHandler+0x94>)
 8000b80:	f000 fcdd 	bl	800153e <HAL_DMA_IRQHandler>

  Fixed32_19 error = error_direction * (FP32_19_INT_TO_FP(*adc_value_pointer) - FP_ADC_TARGET);
 8000b84:	4b23      	ldr	r3, [pc, #140]	@ (8000c14 <DMA1_Channel1_IRQHandler+0x98>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	4a23      	ldr	r2, [pc, #140]	@ (8000c18 <DMA1_Channel1_IRQHandler+0x9c>)
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	8812      	ldrh	r2, [r2, #0]
 8000b8e:	04d2      	lsls	r2, r2, #19
 8000b90:	4922      	ldr	r1, [pc, #136]	@ (8000c1c <DMA1_Channel1_IRQHandler+0xa0>)
 8000b92:	468c      	mov	ip, r1
 8000b94:	4462      	add	r2, ip
 8000b96:	435a      	muls	r2, r3
  Fixed32_19 output = output_previous + PID_A * error + PID_B * error_previous;
 8000b98:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <DMA1_Channel1_IRQHandler+0xa4>)
 8000b9a:	4353      	muls	r3, r2
 8000b9c:	4921      	ldr	r1, [pc, #132]	@ (8000c24 <DMA1_Channel1_IRQHandler+0xa8>)
 8000b9e:	680c      	ldr	r4, [r1, #0]
 8000ba0:	191c      	adds	r4, r3, r4
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <DMA1_Channel1_IRQHandler+0xac>)
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	0281      	lsls	r1, r0, #10
 8000ba8:	1809      	adds	r1, r1, r0
 8000baa:	01c9      	lsls	r1, r1, #7
 8000bac:	1a09      	subs	r1, r1, r0
 8000bae:	014b      	lsls	r3, r1, #5
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	181b      	adds	r3, r3, r0
 8000bb6:	0159      	lsls	r1, r3, #5
 8000bb8:	185b      	adds	r3, r3, r1
 8000bba:	0099      	lsls	r1, r3, #2
 8000bbc:	1864      	adds	r4, r4, r1
  output_previous = output > OUTPUT_SAT ? OUTPUT_SAT : (output < - OUTPUT_SAT ? - OUTPUT_SAT: 0);
 8000bbe:	491b      	ldr	r1, [pc, #108]	@ (8000c2c <DMA1_Channel1_IRQHandler+0xb0>)
 8000bc0:	428c      	cmp	r4, r1
 8000bc2:	dc04      	bgt.n	8000bce <DMA1_Channel1_IRQHandler+0x52>
 8000bc4:	491a      	ldr	r1, [pc, #104]	@ (8000c30 <DMA1_Channel1_IRQHandler+0xb4>)
 8000bc6:	428c      	cmp	r4, r1
 8000bc8:	da1c      	bge.n	8000c04 <DMA1_Channel1_IRQHandler+0x88>
 8000bca:	000b      	movs	r3, r1
 8000bcc:	e000      	b.n	8000bd0 <DMA1_Channel1_IRQHandler+0x54>
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <DMA1_Channel1_IRQHandler+0xb0>)
 8000bd0:	4914      	ldr	r1, [pc, #80]	@ (8000c24 <DMA1_Channel1_IRQHandler+0xa8>)
 8000bd2:	600b      	str	r3, [r1, #0]
  error_previous = error;
 8000bd4:	4914      	ldr	r1, [pc, #80]	@ (8000c28 <DMA1_Channel1_IRQHandler+0xac>)
 8000bd6:	600a      	str	r2, [r1, #0]
  int16_t output_in_pwm_unit = (int16_t) (FP32_19_FP_TO_INT(output_previous));
 8000bd8:	14d9      	asrs	r1, r3, #19
 8000bda:	000b      	movs	r3, r1
  TIM2->CCR1 =  FORWARD_SPEED < - output_in_pwm_unit ? 0 : (uint16_t)(FORWARD_SPEED + output_in_pwm_unit);
 8000bdc:	4a15      	ldr	r2, [pc, #84]	@ (8000c34 <DMA1_Channel1_IRQHandler+0xb8>)
 8000bde:	4291      	cmp	r1, r2
 8000be0:	db12      	blt.n	8000c08 <DMA1_Channel1_IRQHandler+0x8c>
 8000be2:	000a      	movs	r2, r1
 8000be4:	322d      	adds	r2, #45	@ 0x2d
 8000be6:	32ff      	adds	r2, #255	@ 0xff
 8000be8:	b292      	uxth	r2, r2
 8000bea:	2080      	movs	r0, #128	@ 0x80
 8000bec:	05c0      	lsls	r0, r0, #23
 8000bee:	6342      	str	r2, [r0, #52]	@ 0x34
  TIM2->CCR2 =  FORWARD_SPEED < output_in_pwm_unit ? 0 : (uint16_t)(FORWARD_SPEED - output_in_pwm_unit);
 8000bf0:	2296      	movs	r2, #150	@ 0x96
 8000bf2:	0052      	lsls	r2, r2, #1
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	dc09      	bgt.n	8000c0c <DMA1_Channel1_IRQHandler+0x90>
 8000bf8:	1a53      	subs	r3, r2, r1
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	2280      	movs	r2, #128	@ 0x80
 8000bfe:	05d2      	lsls	r2, r2, #23
 8000c00:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c02:	bd10      	pop	{r4, pc}
  output_previous = output > OUTPUT_SAT ? OUTPUT_SAT : (output < - OUTPUT_SAT ? - OUTPUT_SAT: 0);
 8000c04:	2300      	movs	r3, #0
 8000c06:	e7e3      	b.n	8000bd0 <DMA1_Channel1_IRQHandler+0x54>
  TIM2->CCR1 =  FORWARD_SPEED < - output_in_pwm_unit ? 0 : (uint16_t)(FORWARD_SPEED + output_in_pwm_unit);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	e7ee      	b.n	8000bea <DMA1_Channel1_IRQHandler+0x6e>
  TIM2->CCR2 =  FORWARD_SPEED < output_in_pwm_unit ? 0 : (uint16_t)(FORWARD_SPEED - output_in_pwm_unit);
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e7f5      	b.n	8000bfc <DMA1_Channel1_IRQHandler+0x80>
 8000c10:	20000184 	.word	0x20000184
 8000c14:	20000000 	.word	0x20000000
 8000c18:	20000038 	.word	0x20000038
 8000c1c:	c1800000 	.word	0xc1800000
 8000c20:	00008f5c 	.word	0x00008f5c
 8000c24:	20000228 	.word	0x20000228
 8000c28:	2000022c 	.word	0x2000022c
 8000c2c:	09f80000 	.word	0x09f80000
 8000c30:	f6080000 	.word	0xf6080000
 8000c34:	fffffed4 	.word	0xfffffed4

08000c38 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000c38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c3a:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <DMA1_Channel2_3_IRQHandler+0xc>)
 8000c3c:	f000 fc7f 	bl	800153e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000c40:	bd10      	pop	{r4, pc}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	200000a0 	.word	0x200000a0

08000c48 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000c48:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000c4a:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8000c4c:	f000 fc77 	bl	800153e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000c50:	bd10      	pop	{r4, pc}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	200000e8 	.word	0x200000e8

08000c58 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	4770      	bx	lr
	...

08000c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c5c:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c5e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c60:	f7ff fffa 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	@ (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f001 febd 	bl	8002a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fe61 	bl	8000954 <main>

08000c92 <LoopForever>:

LoopForever:
    b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
   ldr   r0, =_estack
 8000c94:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ca0:	08002a94 	.word	0x08002a94
  ldr r2, =_sbss
 8000ca4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ca8:	20000234 	.word	0x20000234

08000cac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_COMP_IRQHandler>
	...

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b510      	push	{r4, lr}
 8000cb2:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <HAL_InitTick+0x44>)
 8000cb6:	7819      	ldrb	r1, [r3, #0]
 8000cb8:	20fa      	movs	r0, #250	@ 0xfa
 8000cba:	0080      	lsls	r0, r0, #2
 8000cbc:	f7ff fa24 	bl	8000108 <__udivsi3>
 8000cc0:	0001      	movs	r1, r0
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <HAL_InitTick+0x48>)
 8000cc4:	6818      	ldr	r0, [r3, #0]
 8000cc6:	f7ff fa1f 	bl	8000108 <__udivsi3>
 8000cca:	f000 fb95 	bl	80013f8 <HAL_SYSTICK_Config>
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d10d      	bne.n	8000cee <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	2c03      	cmp	r4, #3
 8000cd4:	d901      	bls.n	8000cda <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	e00a      	b.n	8000cf0 <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cda:	3001      	adds	r0, #1
 8000cdc:	2200      	movs	r2, #0
 8000cde:	0021      	movs	r1, r4
 8000ce0:	4240      	negs	r0, r0
 8000ce2:	f000 fb79 	bl	80013d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce6:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_InitTick+0x4c>)
 8000ce8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2000      	movs	r0, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x40>
    return HAL_ERROR;
 8000cee:	2001      	movs	r0, #1
}
 8000cf0:	bd10      	pop	{r4, pc}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	2000000c 	.word	0x2000000c
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000010 	.word	0x20000010

08000d00 <HAL_Init>:
{
 8000d00:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d02:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <HAL_Init+0x24>)
 8000d04:	6813      	ldr	r3, [r2, #0]
 8000d06:	2140      	movs	r1, #64	@ 0x40
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f7ff ffcf 	bl	8000cb0 <HAL_InitTick>
 8000d12:	1e04      	subs	r4, r0, #0
 8000d14:	d002      	beq.n	8000d1c <HAL_Init+0x1c>
    status = HAL_ERROR;
 8000d16:	2401      	movs	r4, #1
}
 8000d18:	0020      	movs	r0, r4
 8000d1a:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000d1c:	f7ff fe50 	bl	80009c0 <HAL_MspInit>
 8000d20:	e7fa      	b.n	8000d18 <HAL_Init+0x18>
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	40022000 	.word	0x40022000

08000d28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d28:	4a03      	ldr	r2, [pc, #12]	@ (8000d38 <HAL_IncTick+0x10>)
 8000d2a:	6811      	ldr	r1, [r2, #0]
 8000d2c:	4b03      	ldr	r3, [pc, #12]	@ (8000d3c <HAL_IncTick+0x14>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	185b      	adds	r3, r3, r1
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	4770      	bx	lr
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	20000230 	.word	0x20000230
 8000d3c:	2000000c 	.word	0x2000000c

08000d40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d40:	4b01      	ldr	r3, [pc, #4]	@ (8000d48 <HAL_GetTick+0x8>)
 8000d42:	6818      	ldr	r0, [r3, #0]
}
 8000d44:	4770      	bx	lr
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	20000230 	.word	0x20000230

08000d4c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8000d4c:	b510      	push	{r4, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	0004      	movs	r4, r0
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8000d52:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <ADC_DelayMicroSecond+0x28>)
 8000d54:	6818      	ldr	r0, [r3, #0]
 8000d56:	4908      	ldr	r1, [pc, #32]	@ (8000d78 <ADC_DelayMicroSecond+0x2c>)
 8000d58:	f7ff f9d6 	bl	8000108 <__udivsi3>
 8000d5c:	4344      	muls	r4, r0
 8000d5e:	9401      	str	r4, [sp, #4]

  while (waitLoopIndex != 0U)
 8000d60:	e002      	b.n	8000d68 <ADC_DelayMicroSecond+0x1c>
  {
    waitLoopIndex--;
 8000d62:	9b01      	ldr	r3, [sp, #4]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	9301      	str	r3, [sp, #4]
  while (waitLoopIndex != 0U)
 8000d68:	9b01      	ldr	r3, [sp, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d1f9      	bne.n	8000d62 <ADC_DelayMicroSecond+0x16>
  }
}
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd10      	pop	{r4, pc}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	20000008 	.word	0x20000008
 8000d78:	000f4240 	.word	0x000f4240

08000d7c <ADC_Enable>:
{
 8000d7c:	b570      	push	{r4, r5, r6, lr}
 8000d7e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d80:	6802      	ldr	r2, [r0, #0]
 8000d82:	6891      	ldr	r1, [r2, #8]
 8000d84:	2303      	movs	r3, #3
 8000d86:	400b      	ands	r3, r1
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d00d      	beq.n	8000da8 <ADC_Enable+0x2c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000d8c:	6891      	ldr	r1, [r2, #8]
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <ADC_Enable+0x7c>)
 8000d90:	4219      	tst	r1, r3
 8000d92:	d00e      	beq.n	8000db2 <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d94:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000d96:	2210      	movs	r2, #16
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000d9e:	3a0f      	subs	r2, #15
 8000da0:	4313      	orrs	r3, r2
 8000da2:	65a3      	str	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8000da4:	2001      	movs	r0, #1
}
 8000da6:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000da8:	6813      	ldr	r3, [r2, #0]
 8000daa:	07db      	lsls	r3, r3, #31
 8000dac:	d5ee      	bpl.n	8000d8c <ADC_Enable+0x10>
  return HAL_OK;
 8000dae:	2000      	movs	r0, #0
 8000db0:	e7f9      	b.n	8000da6 <ADC_Enable+0x2a>
    __HAL_ADC_ENABLE(hadc);
 8000db2:	6893      	ldr	r3, [r2, #8]
 8000db4:	2101      	movs	r1, #1
 8000db6:	430b      	orrs	r3, r1
 8000db8:	6093      	str	r3, [r2, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffc6 	bl	8000d4c <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8000dc0:	f7ff ffbe 	bl	8000d40 <HAL_GetTick>
 8000dc4:	0005      	movs	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	07db      	lsls	r3, r3, #31
 8000dcc:	d412      	bmi.n	8000df4 <ADC_Enable+0x78>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000dce:	f7ff ffb7 	bl	8000d40 <HAL_GetTick>
 8000dd2:	1b40      	subs	r0, r0, r5
 8000dd4:	280a      	cmp	r0, #10
 8000dd6:	d9f6      	bls.n	8000dc6 <ADC_Enable+0x4a>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	07db      	lsls	r3, r3, #31
 8000dde:	d4f2      	bmi.n	8000dc6 <ADC_Enable+0x4a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000de0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000de2:	2210      	movs	r2, #16
 8000de4:	4313      	orrs	r3, r2
 8000de6:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000dea:	3a0f      	subs	r2, #15
 8000dec:	4313      	orrs	r3, r2
 8000dee:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 8000df0:	2001      	movs	r0, #1
 8000df2:	e7d8      	b.n	8000da6 <ADC_Enable+0x2a>
  return HAL_OK;
 8000df4:	2000      	movs	r0, #0
 8000df6:	e7d6      	b.n	8000da6 <ADC_Enable+0x2a>
 8000df8:	80000017 	.word	0x80000017

08000dfc <HAL_ADC_Init>:
{
 8000dfc:	b570      	push	{r4, r5, r6, lr}
 8000dfe:	1e04      	subs	r4, r0, #0
  if (hadc == NULL)
 8000e00:	d100      	bne.n	8000e04 <HAL_ADC_Init+0x8>
 8000e02:	e0e2      	b.n	8000fca <HAL_ADC_Init+0x1ce>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e04:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d030      	beq.n	8000e6c <HAL_ADC_Init+0x70>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e0a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000e0c:	06db      	lsls	r3, r3, #27
 8000e0e:	d433      	bmi.n	8000e78 <HAL_ADC_Init+0x7c>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	2104      	movs	r1, #4
 8000e16:	000d      	movs	r5, r1
 8000e18:	4015      	ands	r5, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e1a:	4211      	tst	r1, r2
 8000e1c:	d12c      	bne.n	8000e78 <HAL_ADC_Init+0x7c>
  ADC_STATE_CLR_SET(hadc->State,
 8000e1e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000e20:	496b      	ldr	r1, [pc, #428]	@ (8000fd0 <HAL_ADC_Init+0x1d4>)
 8000e22:	400a      	ands	r2, r1
 8000e24:	3106      	adds	r1, #6
 8000e26:	31ff      	adds	r1, #255	@ 0xff
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	6562      	str	r2, [r4, #84]	@ 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e2c:	6899      	ldr	r1, [r3, #8]
 8000e2e:	2203      	movs	r2, #3
 8000e30:	400a      	ands	r2, r1
 8000e32:	2a01      	cmp	r2, #1
 8000e34:	d029      	beq.n	8000e8a <HAL_ADC_Init+0x8e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000e36:	6862      	ldr	r2, [r4, #4]
 8000e38:	21c0      	movs	r1, #192	@ 0xc0
 8000e3a:	0609      	lsls	r1, r1, #24
 8000e3c:	428a      	cmp	r2, r1
 8000e3e:	d028      	beq.n	8000e92 <HAL_ADC_Init+0x96>
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	05c9      	lsls	r1, r1, #23
 8000e44:	428a      	cmp	r2, r1
 8000e46:	d024      	beq.n	8000e92 <HAL_ADC_Init+0x96>
 8000e48:	2180      	movs	r1, #128	@ 0x80
 8000e4a:	0609      	lsls	r1, r1, #24
 8000e4c:	428a      	cmp	r2, r1
 8000e4e:	d020      	beq.n	8000e92 <HAL_ADC_Init+0x96>
 8000e50:	691a      	ldr	r2, [r3, #16]
 8000e52:	0092      	lsls	r2, r2, #2
 8000e54:	0892      	lsrs	r2, r2, #2
 8000e56:	611a      	str	r2, [r3, #16]
 8000e58:	4b5e      	ldr	r3, [pc, #376]	@ (8000fd4 <HAL_ADC_Init+0x1d8>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	495e      	ldr	r1, [pc, #376]	@ (8000fd8 <HAL_ADC_Init+0x1dc>)
 8000e5e:	400a      	ands	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	6861      	ldr	r1, [r4, #4]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e01b      	b.n	8000ea4 <HAL_ADC_Init+0xa8>
    ADC_CLEAR_ERRORCODE(hadc);
 8000e6c:	6583      	str	r3, [r0, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000e6e:	2250      	movs	r2, #80	@ 0x50
 8000e70:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000e72:	f7ff fdb3 	bl	80009dc <HAL_ADC_MspInit>
 8000e76:	e7c8      	b.n	8000e0a <HAL_ADC_Init+0xe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e78:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000e7a:	2210      	movs	r2, #16
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8000e80:	2350      	movs	r3, #80	@ 0x50
 8000e82:	2200      	movs	r2, #0
 8000e84:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8000e86:	2001      	movs	r0, #1
}
 8000e88:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	07d2      	lsls	r2, r2, #31
 8000e8e:	d413      	bmi.n	8000eb8 <HAL_ADC_Init+0xbc>
 8000e90:	e7d1      	b.n	8000e36 <HAL_ADC_Init+0x3a>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	0892      	lsrs	r2, r2, #2
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	6822      	ldr	r2, [r4, #0]
 8000e9c:	6913      	ldr	r3, [r2, #16]
 8000e9e:	6861      	ldr	r1, [r4, #4]
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000ea4:	6822      	ldr	r2, [r4, #0]
 8000ea6:	68d3      	ldr	r3, [r2, #12]
 8000ea8:	2118      	movs	r1, #24
 8000eaa:	438b      	bics	r3, r1
 8000eac:	60d3      	str	r3, [r2, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	68d3      	ldr	r3, [r2, #12]
 8000eb2:	68a1      	ldr	r1, [r4, #8]
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	60d3      	str	r3, [r2, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000eb8:	4b46      	ldr	r3, [pc, #280]	@ (8000fd4 <HAL_ADC_Init+0x1d8>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4947      	ldr	r1, [pc, #284]	@ (8000fdc <HAL_ADC_Init+0x1e0>)
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000ec6:	0649      	lsls	r1, r1, #25
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	00d2      	lsls	r2, r2, #3
 8000ed2:	d404      	bmi.n	8000ede <HAL_ADC_Init+0xe2>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000ed4:	6899      	ldr	r1, [r3, #8]
 8000ed6:	2280      	movs	r2, #128	@ 0x80
 8000ed8:	0552      	lsls	r2, r2, #21
 8000eda:	430a      	orrs	r2, r1
 8000edc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000ede:	6822      	ldr	r2, [r4, #0]
 8000ee0:	68d3      	ldr	r3, [r2, #12]
 8000ee2:	493f      	ldr	r1, [pc, #252]	@ (8000fe0 <HAL_ADC_Init+0x1e4>)
 8000ee4:	400b      	ands	r3, r1
 8000ee6:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ee8:	6820      	ldr	r0, [r4, #0]
 8000eea:	68c2      	ldr	r2, [r0, #12]
 8000eec:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000eee:	6921      	ldr	r1, [r4, #16]
 8000ef0:	2902      	cmp	r1, #2
 8000ef2:	d02d      	beq.n	8000f50 <HAL_ADC_Init+0x154>
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ef4:	432b      	orrs	r3, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	5c61      	ldrb	r1, [r4, r1]
 8000efa:	0349      	lsls	r1, r1, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000efc:	430b      	orrs	r3, r1
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000efe:	212c      	movs	r1, #44	@ 0x2c
 8000f00:	5c61      	ldrb	r1, [r4, r1]
 8000f02:	0049      	lsls	r1, r1, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f04:	430b      	orrs	r3, r1
                            hadc->Init.Overrun                               |
 8000f06:	6b21      	ldr	r1, [r4, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f08:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f0a:	69a1      	ldr	r1, [r4, #24]
 8000f0c:	0389      	lsls	r1, r1, #14
                            hadc->Init.Overrun                               |
 8000f0e:	430b      	orrs	r3, r1
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000f10:	69e1      	ldr	r1, [r4, #28]
 8000f12:	03c9      	lsls	r1, r1, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000f14:	430b      	orrs	r3, r1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60c3      	str	r3, [r0, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000f1c:	22c2      	movs	r2, #194	@ 0xc2
 8000f1e:	32ff      	adds	r2, #255	@ 0xff
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d005      	beq.n	8000f30 <HAL_ADC_Init+0x134>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f24:	6821      	ldr	r1, [r4, #0]
 8000f26:	68ca      	ldr	r2, [r1, #12]
                             hadc->Init.ExternalTrigConvEdge;
 8000f28:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f2a:	4303      	orrs	r3, r0
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	60cb      	str	r3, [r1, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f30:	2321      	movs	r3, #33	@ 0x21
 8000f32:	5ce3      	ldrb	r3, [r4, r3]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d00d      	beq.n	8000f54 <HAL_ADC_Init+0x158>
  if (hadc->Init.OversamplingMode == ENABLE)
 8000f38:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d01e      	beq.n	8000f7c <HAL_ADC_Init+0x180>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000f3e:	6822      	ldr	r2, [r4, #0]
 8000f40:	6913      	ldr	r3, [r2, #16]
 8000f42:	07db      	lsls	r3, r3, #31
 8000f44:	d52d      	bpl.n	8000fa2 <HAL_ADC_Init+0x1a6>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000f46:	6913      	ldr	r3, [r2, #16]
 8000f48:	2101      	movs	r1, #1
 8000f4a:	438b      	bics	r3, r1
 8000f4c:	6113      	str	r3, [r2, #16]
 8000f4e:	e028      	b.n	8000fa2 <HAL_ADC_Init+0x1a6>
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000f50:	2504      	movs	r5, #4
 8000f52:	e7cf      	b.n	8000ef4 <HAL_ADC_Init+0xf8>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f54:	331f      	adds	r3, #31
 8000f56:	5ce3      	ldrb	r3, [r4, r3]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d106      	bne.n	8000f6a <HAL_ADC_Init+0x16e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000f5c:	6822      	ldr	r2, [r4, #0]
 8000f5e:	68d1      	ldr	r1, [r2, #12]
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	025b      	lsls	r3, r3, #9
 8000f64:	430b      	orrs	r3, r1
 8000f66:	60d3      	str	r3, [r2, #12]
 8000f68:	e7e6      	b.n	8000f38 <HAL_ADC_Init+0x13c>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f6a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000f74:	3a1f      	subs	r2, #31
 8000f76:	4313      	orrs	r3, r2
 8000f78:	65a3      	str	r3, [r4, #88]	@ 0x58
 8000f7a:	e7dd      	b.n	8000f38 <HAL_ADC_Init+0x13c>
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000f7c:	6822      	ldr	r2, [r4, #0]
 8000f7e:	6913      	ldr	r3, [r2, #16]
 8000f80:	4918      	ldr	r1, [pc, #96]	@ (8000fe4 <HAL_ADC_Init+0x1e8>)
 8000f82:	400b      	ands	r3, r1
 8000f84:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000f86:	6821      	ldr	r1, [r4, #0]
 8000f88:	690a      	ldr	r2, [r1, #16]
 8000f8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000f8c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000f8e:	4303      	orrs	r3, r0
                              hadc->Init.Oversample.TriggeredMode);
 8000f90:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000f92:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000f94:	4313      	orrs	r3, r2
 8000f96:	610b      	str	r3, [r1, #16]
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000f98:	6822      	ldr	r2, [r4, #0]
 8000f9a:	6913      	ldr	r3, [r2, #16]
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	430b      	orrs	r3, r1
 8000fa0:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000fa2:	6822      	ldr	r2, [r4, #0]
 8000fa4:	6953      	ldr	r3, [r2, #20]
 8000fa6:	2107      	movs	r1, #7
 8000fa8:	438b      	bics	r3, r1
 8000faa:	6153      	str	r3, [r2, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000fac:	6822      	ldr	r2, [r4, #0]
 8000fae:	6953      	ldr	r3, [r2, #20]
 8000fb0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8000fb2:	430b      	orrs	r3, r1
 8000fb4:	6153      	str	r3, [r2, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	65a3      	str	r3, [r4, #88]	@ 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8000fba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	4393      	bics	r3, r2
 8000fc0:	3a02      	subs	r2, #2
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	6563      	str	r3, [r4, #84]	@ 0x54
  return HAL_OK;
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	e75e      	b.n	8000e88 <HAL_ADC_Init+0x8c>
    return HAL_ERROR;
 8000fca:	2001      	movs	r0, #1
 8000fcc:	e75c      	b.n	8000e88 <HAL_ADC_Init+0x8c>
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	fffffefd 	.word	0xfffffefd
 8000fd4:	40012708 	.word	0x40012708
 8000fd8:	ffc3ffff 	.word	0xffc3ffff
 8000fdc:	fdffffff 	.word	0xfdffffff
 8000fe0:	fffe0219 	.word	0xfffe0219
 8000fe4:	fffffc03 	.word	0xfffffc03

08000fe8 <HAL_ADC_Start_DMA>:
{
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	0004      	movs	r4, r0
 8000fec:	000d      	movs	r5, r1
 8000fee:	0016      	movs	r6, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ff0:	6803      	ldr	r3, [r0, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	0752      	lsls	r2, r2, #29
 8000ff6:	d43c      	bmi.n	8001072 <HAL_ADC_Start_DMA+0x8a>
    __HAL_LOCK(hadc);
 8000ff8:	2250      	movs	r2, #80	@ 0x50
 8000ffa:	5c82      	ldrb	r2, [r0, r2]
 8000ffc:	2a01      	cmp	r2, #1
 8000ffe:	d03a      	beq.n	8001076 <HAL_ADC_Start_DMA+0x8e>
 8001000:	2101      	movs	r1, #1
 8001002:	2250      	movs	r2, #80	@ 0x50
 8001004:	5481      	strb	r1, [r0, r2]
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	430a      	orrs	r2, r1
 800100a:	60da      	str	r2, [r3, #12]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800100c:	69c3      	ldr	r3, [r0, #28]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d004      	beq.n	800101c <HAL_ADC_Start_DMA+0x34>
      tmp_hal_status = ADC_Enable(hadc);
 8001012:	f7ff feb3 	bl	8000d7c <ADC_Enable>
 8001016:	1e07      	subs	r7, r0, #0
    if (tmp_hal_status == HAL_OK)
 8001018:	d129      	bne.n	800106e <HAL_ADC_Start_DMA+0x86>
 800101a:	e000      	b.n	800101e <HAL_ADC_Start_DMA+0x36>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800101c:	2700      	movs	r7, #0
      ADC_STATE_CLR_SET(hadc->State,
 800101e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001020:	4b16      	ldr	r3, [pc, #88]	@ (800107c <HAL_ADC_Start_DMA+0x94>)
 8001022:	401a      	ands	r2, r3
 8001024:	2380      	movs	r3, #128	@ 0x80
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4313      	orrs	r3, r2
 800102a:	6563      	str	r3, [r4, #84]	@ 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 800102c:	2300      	movs	r3, #0
 800102e:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_UNLOCK(hadc);
 8001030:	2250      	movs	r2, #80	@ 0x50
 8001032:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001034:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001036:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <HAL_ADC_Start_DMA+0x98>)
 8001038:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800103a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800103c:	4a11      	ldr	r2, [pc, #68]	@ (8001084 <HAL_ADC_Start_DMA+0x9c>)
 800103e:	631a      	str	r2, [r3, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001040:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001042:	4a11      	ldr	r2, [pc, #68]	@ (8001088 <HAL_ADC_Start_DMA+0xa0>)
 8001044:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	221c      	movs	r2, #28
 800104a:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800104c:	6822      	ldr	r2, [r4, #0]
 800104e:	6853      	ldr	r3, [r2, #4]
 8001050:	2110      	movs	r1, #16
 8001052:	430b      	orrs	r3, r1
 8001054:	6053      	str	r3, [r2, #4]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001056:	6821      	ldr	r1, [r4, #0]
 8001058:	3140      	adds	r1, #64	@ 0x40
 800105a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800105c:	0033      	movs	r3, r6
 800105e:	002a      	movs	r2, r5
 8001060:	f000 fa32 	bl	80014c8 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001064:	6822      	ldr	r2, [r4, #0]
 8001066:	6893      	ldr	r3, [r2, #8]
 8001068:	2104      	movs	r1, #4
 800106a:	430b      	orrs	r3, r1
 800106c:	6093      	str	r3, [r2, #8]
}
 800106e:	0038      	movs	r0, r7
 8001070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 8001072:	2702      	movs	r7, #2
 8001074:	e7fb      	b.n	800106e <HAL_ADC_Start_DMA+0x86>
    __HAL_LOCK(hadc);
 8001076:	2702      	movs	r7, #2
 8001078:	e7f9      	b.n	800106e <HAL_ADC_Start_DMA+0x86>
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	fffff0fe 	.word	0xfffff0fe
 8001080:	08001091 	.word	0x08001091
 8001084:	08001107 	.word	0x08001107
 8001088:	08001113 	.word	0x08001113

0800108c <HAL_ADC_ConvCpltCallback>:
}
 800108c:	4770      	bx	lr
	...

08001090 <ADC_DMAConvCplt>:
{
 8001090:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001092:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001094:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001096:	2150      	movs	r1, #80	@ 0x50
 8001098:	4211      	tst	r1, r2
 800109a:	d12c      	bne.n	80010f6 <ADC_DMAConvCplt+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800109c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800109e:	2280      	movs	r2, #128	@ 0x80
 80010a0:	0092      	lsls	r2, r2, #2
 80010a2:	430a      	orrs	r2, r1
 80010a4:	655a      	str	r2, [r3, #84]	@ 0x54
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	68d0      	ldr	r0, [r2, #12]
 80010aa:	21c0      	movs	r1, #192	@ 0xc0
 80010ac:	0109      	lsls	r1, r1, #4
 80010ae:	4208      	tst	r0, r1
 80010b0:	d114      	bne.n	80010dc <ADC_DMAConvCplt+0x4c>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80010b2:	2120      	movs	r1, #32
 80010b4:	5c59      	ldrb	r1, [r3, r1]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80010b6:	2900      	cmp	r1, #0
 80010b8:	d110      	bne.n	80010dc <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80010ba:	6811      	ldr	r1, [r2, #0]
 80010bc:	0709      	lsls	r1, r1, #28
 80010be:	d50d      	bpl.n	80010dc <ADC_DMAConvCplt+0x4c>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010c0:	6891      	ldr	r1, [r2, #8]
 80010c2:	0749      	lsls	r1, r1, #29
 80010c4:	d40e      	bmi.n	80010e4 <ADC_DMAConvCplt+0x54>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80010c6:	6851      	ldr	r1, [r2, #4]
 80010c8:	200c      	movs	r0, #12
 80010ca:	4381      	bics	r1, r0
 80010cc:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80010ce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80010d0:	490b      	ldr	r1, [pc, #44]	@ (8001100 <ADC_DMAConvCplt+0x70>)
 80010d2:	400a      	ands	r2, r1
 80010d4:	3104      	adds	r1, #4
 80010d6:	31ff      	adds	r1, #255	@ 0xff
 80010d8:	430a      	orrs	r2, r1
 80010da:	655a      	str	r2, [r3, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff ffd5 	bl	800108c <HAL_ADC_ConvCpltCallback>
}
 80010e2:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80010e6:	2120      	movs	r1, #32
 80010e8:	430a      	orrs	r2, r1
 80010ea:	655a      	str	r2, [r3, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80010ee:	391f      	subs	r1, #31
 80010f0:	430a      	orrs	r2, r1
 80010f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80010f4:	e7f2      	b.n	80010dc <ADC_DMAConvCplt+0x4c>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010fa:	4798      	blx	r3
}
 80010fc:	e7f1      	b.n	80010e2 <ADC_DMAConvCplt+0x52>
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	fffffefe 	.word	0xfffffefe

08001104 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001104:	4770      	bx	lr

08001106 <ADC_DMAHalfConvCplt>:
{
 8001106:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001108:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800110a:	f7ff fffb 	bl	8001104 <HAL_ADC_ConvHalfCpltCallback>
}
 800110e:	bd10      	pop	{r4, pc}

08001110 <HAL_ADC_ErrorCallback>:
}
 8001110:	4770      	bx	lr

08001112 <ADC_DMAError>:
{
 8001112:	b510      	push	{r4, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001114:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001116:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001118:	2240      	movs	r2, #64	@ 0x40
 800111a:	4313      	orrs	r3, r2
 800111c:	6543      	str	r3, [r0, #84]	@ 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800111e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001120:	3a3c      	subs	r2, #60	@ 0x3c
 8001122:	4313      	orrs	r3, r2
 8001124:	6583      	str	r3, [r0, #88]	@ 0x58
  HAL_ADC_ErrorCallback(hadc);
 8001126:	f7ff fff3 	bl	8001110 <HAL_ADC_ErrorCallback>
}
 800112a:	bd10      	pop	{r4, pc}

0800112c <HAL_ADC_ConfigChannel>:
{
 800112c:	b570      	push	{r4, r5, r6, lr}
 800112e:	0004      	movs	r4, r0
 8001130:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8001132:	2350      	movs	r3, #80	@ 0x50
 8001134:	5cc3      	ldrb	r3, [r0, r3]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d04b      	beq.n	80011d2 <HAL_ADC_ConfigChannel+0xa6>
 800113a:	2350      	movs	r3, #80	@ 0x50
 800113c:	2201      	movs	r2, #1
 800113e:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001140:	6803      	ldr	r3, [r0, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	0752      	lsls	r2, r2, #29
 8001146:	d41a      	bmi.n	800117e <HAL_ADC_ConfigChannel+0x52>
  if (sConfig->Rank != ADC_RANK_NONE)
 8001148:	6849      	ldr	r1, [r1, #4]
 800114a:	4a23      	ldr	r2, [pc, #140]	@ (80011d8 <HAL_ADC_ConfigChannel+0xac>)
 800114c:	4291      	cmp	r1, r2
 800114e:	d029      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001150:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001152:	682a      	ldr	r2, [r5, #0]
 8001154:	0352      	lsls	r2, r2, #13
 8001156:	0b52      	lsrs	r2, r2, #13
 8001158:	430a      	orrs	r2, r1
 800115a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	035b      	lsls	r3, r3, #13
 8001160:	d416      	bmi.n	8001190 <HAL_ADC_ConfigChannel+0x64>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001162:	682b      	ldr	r3, [r5, #0]
 8001164:	039b      	lsls	r3, r3, #14
 8001166:	d505      	bpl.n	8001174 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR |= ADC_CCR_VREFEN;
 8001168:	4a1c      	ldr	r2, [pc, #112]	@ (80011dc <HAL_ADC_ConfigChannel+0xb0>)
 800116a:	6811      	ldr	r1, [r2, #0]
 800116c:	2380      	movs	r3, #128	@ 0x80
 800116e:	03db      	lsls	r3, r3, #15
 8001170:	430b      	orrs	r3, r1
 8001172:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8001174:	2350      	movs	r3, #80	@ 0x50
 8001176:	2200      	movs	r2, #0
 8001178:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800117a:	2000      	movs	r0, #0
}
 800117c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800117e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001180:	2220      	movs	r2, #32
 8001182:	4313      	orrs	r3, r2
 8001184:	6543      	str	r3, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hadc);
 8001186:	2350      	movs	r3, #80	@ 0x50
 8001188:	2200      	movs	r2, #0
 800118a:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 800118c:	2001      	movs	r0, #1
 800118e:	e7f5      	b.n	800117c <HAL_ADC_ConfigChannel+0x50>
      ADC->CCR |= ADC_CCR_TSEN;
 8001190:	4a12      	ldr	r2, [pc, #72]	@ (80011dc <HAL_ADC_ConfigChannel+0xb0>)
 8001192:	6811      	ldr	r1, [r2, #0]
 8001194:	2380      	movs	r3, #128	@ 0x80
 8001196:	041b      	lsls	r3, r3, #16
 8001198:	430b      	orrs	r3, r1
 800119a:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800119c:	200a      	movs	r0, #10
 800119e:	f7ff fdd5 	bl	8000d4c <ADC_DelayMicroSecond>
 80011a2:	e7de      	b.n	8001162 <HAL_ADC_ConfigChannel+0x36>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80011a4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80011a6:	682a      	ldr	r2, [r5, #0]
 80011a8:	0352      	lsls	r2, r2, #13
 80011aa:	0b52      	lsrs	r2, r2, #13
 80011ac:	4391      	bics	r1, r2
 80011ae:	6299      	str	r1, [r3, #40]	@ 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80011b0:	682b      	ldr	r3, [r5, #0]
 80011b2:	035b      	lsls	r3, r3, #13
 80011b4:	d504      	bpl.n	80011c0 <HAL_ADC_ConfigChannel+0x94>
      ADC->CCR &= ~ADC_CCR_TSEN;
 80011b6:	4a09      	ldr	r2, [pc, #36]	@ (80011dc <HAL_ADC_ConfigChannel+0xb0>)
 80011b8:	6813      	ldr	r3, [r2, #0]
 80011ba:	4909      	ldr	r1, [pc, #36]	@ (80011e0 <HAL_ADC_ConfigChannel+0xb4>)
 80011bc:	400b      	ands	r3, r1
 80011be:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011c0:	682b      	ldr	r3, [r5, #0]
 80011c2:	039b      	lsls	r3, r3, #14
 80011c4:	d5d6      	bpl.n	8001174 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80011c6:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <HAL_ADC_ConfigChannel+0xb0>)
 80011c8:	6813      	ldr	r3, [r2, #0]
 80011ca:	4906      	ldr	r1, [pc, #24]	@ (80011e4 <HAL_ADC_ConfigChannel+0xb8>)
 80011cc:	400b      	ands	r3, r1
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e7d0      	b.n	8001174 <HAL_ADC_ConfigChannel+0x48>
  __HAL_LOCK(hadc);
 80011d2:	2002      	movs	r0, #2
 80011d4:	e7d2      	b.n	800117c <HAL_ADC_ConfigChannel+0x50>
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	00001001 	.word	0x00001001
 80011dc:	40012708 	.word	0x40012708
 80011e0:	ff7fffff 	.word	0xff7fffff
 80011e4:	ffbfffff 	.word	0xffbfffff

080011e8 <HAL_ADC_AnalogWDGConfig>:
{
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 80011ec:	2250      	movs	r2, #80	@ 0x50
 80011ee:	5c82      	ldrb	r2, [r0, r2]
 80011f0:	2a01      	cmp	r2, #1
 80011f2:	d046      	beq.n	8001282 <HAL_ADC_AnalogWDGConfig+0x9a>
 80011f4:	2250      	movs	r2, #80	@ 0x50
 80011f6:	2001      	movs	r0, #1
 80011f8:	5498      	strb	r0, [r3, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	6882      	ldr	r2, [r0, #8]
 80011fe:	0752      	lsls	r2, r2, #29
 8001200:	d439      	bmi.n	8001276 <HAL_ADC_AnalogWDGConfig+0x8e>
    if (AnalogWDGConfig->ITMode == ENABLE)
 8001202:	7a0a      	ldrb	r2, [r1, #8]
 8001204:	2a01      	cmp	r2, #1
 8001206:	d031      	beq.n	800126c <HAL_ADC_AnalogWDGConfig+0x84>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001208:	6842      	ldr	r2, [r0, #4]
 800120a:	2480      	movs	r4, #128	@ 0x80
 800120c:	43a2      	bics	r2, r4
 800120e:	6042      	str	r2, [r0, #4]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDSGL |
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	68c2      	ldr	r2, [r0, #12]
 8001214:	4c1c      	ldr	r4, [pc, #112]	@ (8001288 <HAL_ADC_AnalogWDGConfig+0xa0>)
 8001216:	4022      	ands	r2, r4
 8001218:	60c2      	str	r2, [r0, #12]
    hadc->Instance->CFGR1 |= (AnalogWDGConfig->WatchdogMode |
 800121a:	681d      	ldr	r5, [r3, #0]
 800121c:	68ea      	ldr	r2, [r5, #12]
 800121e:	6808      	ldr	r0, [r1, #0]
                              (AnalogWDGConfig->Channel & ADC_CHANNEL_AWD_MASK));
 8001220:	684c      	ldr	r4, [r1, #4]
 8001222:	26f8      	movs	r6, #248	@ 0xf8
 8001224:	05f6      	lsls	r6, r6, #23
 8001226:	4034      	ands	r4, r6
    hadc->Instance->CFGR1 |= (AnalogWDGConfig->WatchdogMode |
 8001228:	4320      	orrs	r0, r4
 800122a:	4302      	orrs	r2, r0
 800122c:	60ea      	str	r2, [r5, #12]
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800122e:	68cd      	ldr	r5, [r1, #12]
 8001230:	681c      	ldr	r4, [r3, #0]
 8001232:	68e2      	ldr	r2, [r4, #12]
 8001234:	08d2      	lsrs	r2, r2, #3
 8001236:	2003      	movs	r0, #3
 8001238:	4002      	ands	r2, r0
 800123a:	0052      	lsls	r2, r2, #1
 800123c:	4095      	lsls	r5, r2
 800123e:	002a      	movs	r2, r5
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8001240:	6909      	ldr	r1, [r1, #16]
 8001242:	68e5      	ldr	r5, [r4, #12]
 8001244:	08ed      	lsrs	r5, r5, #3
 8001246:	4028      	ands	r0, r5
 8001248:	0040      	lsls	r0, r0, #1
 800124a:	4081      	lsls	r1, r0
    hadc->Instance->TR &= (uint32_t) ~(ADC_TR_HT | ADC_TR_LT);
 800124c:	6a20      	ldr	r0, [r4, #32]
 800124e:	4d0f      	ldr	r5, [pc, #60]	@ (800128c <HAL_ADC_AnalogWDGConfig+0xa4>)
 8001250:	4028      	ands	r0, r5
 8001252:	6220      	str	r0, [r4, #32]
    hadc->Instance->TR = ADC_TRX_HIGHTHRESHOLD(tmpAWDHighThresholdShifted);
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	0412      	lsls	r2, r2, #16
 8001258:	6202      	str	r2, [r0, #32]
    hadc->Instance->TR |= tmpAWDLowThresholdShifted;
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	6a02      	ldr	r2, [r0, #32]
 800125e:	430a      	orrs	r2, r1
 8001260:	6202      	str	r2, [r0, #32]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001262:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001264:	2250      	movs	r2, #80	@ 0x50
 8001266:	2100      	movs	r1, #0
 8001268:	5499      	strb	r1, [r3, r2]
}
 800126a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800126c:	6842      	ldr	r2, [r0, #4]
 800126e:	2480      	movs	r4, #128	@ 0x80
 8001270:	4322      	orrs	r2, r4
 8001272:	6042      	str	r2, [r0, #4]
 8001274:	e7cc      	b.n	8001210 <HAL_ADC_AnalogWDGConfig+0x28>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001276:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001278:	2120      	movs	r1, #32
 800127a:	430a      	orrs	r2, r1
 800127c:	655a      	str	r2, [r3, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 800127e:	2001      	movs	r0, #1
 8001280:	e7f0      	b.n	8001264 <HAL_ADC_AnalogWDGConfig+0x7c>
  __HAL_LOCK(hadc);
 8001282:	2002      	movs	r0, #2
 8001284:	e7f1      	b.n	800126a <HAL_ADC_AnalogWDGConfig+0x82>
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	833fffff 	.word	0x833fffff
 800128c:	f000f000 	.word	0xf000f000

08001290 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001294:	2350      	movs	r3, #80	@ 0x50
 8001296:	5cc3      	ldrb	r3, [r0, r3]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d04d      	beq.n	8001338 <HAL_ADCEx_Calibration_Start+0xa8>
 800129c:	2350      	movs	r3, #80	@ 0x50
 800129e:	2201      	movs	r2, #1
 80012a0:	54c2      	strb	r2, [r0, r3]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012a2:	6803      	ldr	r3, [r0, #0]
 80012a4:	6899      	ldr	r1, [r3, #8]
 80012a6:	3202      	adds	r2, #2
 80012a8:	400a      	ands	r2, r1
 80012aa:	2a01      	cmp	r2, #1
 80012ac:	d108      	bne.n	80012c0 <HAL_ADCEx_Calibration_Start+0x30>
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	07d2      	lsls	r2, r2, #31
 80012b2:	d505      	bpl.n	80012c0 <HAL_ADCEx_Calibration_Start+0x30>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012b4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80012b6:	2220      	movs	r2, #32
 80012b8:	4313      	orrs	r3, r2
 80012ba:	6543      	str	r3, [r0, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80012bc:	2001      	movs	r0, #1
 80012be:	e037      	b.n	8001330 <HAL_ADCEx_Calibration_Start+0xa0>
    ADC_STATE_CLR_SET(hadc->State,
 80012c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80012c2:	491e      	ldr	r1, [pc, #120]	@ (800133c <HAL_ADCEx_Calibration_Start+0xac>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	3106      	adds	r1, #6
 80012c8:	31ff      	adds	r1, #255	@ 0xff
 80012ca:	430a      	orrs	r2, r1
 80012cc:	6562      	str	r2, [r4, #84]	@ 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80012ce:	68de      	ldr	r6, [r3, #12]
 80012d0:	3101      	adds	r1, #1
 80012d2:	400e      	ands	r6, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	438a      	bics	r2, r1
 80012d8:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80012da:	6822      	ldr	r2, [r4, #0]
 80012dc:	6891      	ldr	r1, [r2, #8]
 80012de:	2380      	movs	r3, #128	@ 0x80
 80012e0:	061b      	lsls	r3, r3, #24
 80012e2:	430b      	orrs	r3, r1
 80012e4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80012e6:	f7ff fd2b 	bl	8000d40 <HAL_GetTick>
 80012ea:	0005      	movs	r5, r0
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	2a00      	cmp	r2, #0
 80012f2:	da13      	bge.n	800131c <HAL_ADCEx_Calibration_Start+0x8c>
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80012f4:	f7ff fd24 	bl	8000d40 <HAL_GetTick>
 80012f8:	1b40      	subs	r0, r0, r5
 80012fa:	280a      	cmp	r0, #10
 80012fc:	d9f6      	bls.n	80012ec <HAL_ADCEx_Calibration_Start+0x5c>
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80012fe:	6823      	ldr	r3, [r4, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	daf2      	bge.n	80012ec <HAL_ADCEx_Calibration_Start+0x5c>
          ADC_STATE_CLR_SET(hadc->State,
 8001306:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001308:	2212      	movs	r2, #18
 800130a:	4393      	bics	r3, r2
 800130c:	3a02      	subs	r2, #2
 800130e:	4313      	orrs	r3, r2
 8001310:	6563      	str	r3, [r4, #84]	@ 0x54
          __HAL_UNLOCK(hadc);
 8001312:	2350      	movs	r3, #80	@ 0x50
 8001314:	2200      	movs	r2, #0
 8001316:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 8001318:	2001      	movs	r0, #1
 800131a:	e00c      	b.n	8001336 <HAL_ADCEx_Calibration_Start+0xa6>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	4332      	orrs	r2, r6
 8001320:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001322:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001324:	2203      	movs	r2, #3
 8001326:	4393      	bics	r3, r2
 8001328:	3a02      	subs	r2, #2
 800132a:	4313      	orrs	r3, r2
 800132c:	6563      	str	r3, [r4, #84]	@ 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132e:	2000      	movs	r0, #0
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001330:	2350      	movs	r3, #80	@ 0x50
 8001332:	2200      	movs	r2, #0
 8001334:	54e2      	strb	r2, [r4, r3]

  /* Return function status */
  return tmp_hal_status;
}
 8001336:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8001338:	2002      	movs	r0, #2
 800133a:	e7fc      	b.n	8001336 <HAL_ADCEx_Calibration_Start+0xa6>
 800133c:	fffffefd 	.word	0xfffffefd

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 8001342:	2800      	cmp	r0, #0
 8001344:	db11      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001346:	0883      	lsrs	r3, r0, #2
 8001348:	4d13      	ldr	r5, [pc, #76]	@ (8001398 <__NVIC_SetPriority+0x58>)
 800134a:	33c0      	adds	r3, #192	@ 0xc0
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	595c      	ldr	r4, [r3, r5]
 8001350:	2203      	movs	r2, #3
 8001352:	4010      	ands	r0, r2
 8001354:	00c0      	lsls	r0, r0, #3
 8001356:	32fc      	adds	r2, #252	@ 0xfc
 8001358:	0016      	movs	r6, r2
 800135a:	4086      	lsls	r6, r0
 800135c:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800135e:	0189      	lsls	r1, r1, #6
 8001360:	400a      	ands	r2, r1
 8001362:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001364:	4322      	orrs	r2, r4
 8001366:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001368:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800136a:	230f      	movs	r3, #15
 800136c:	4003      	ands	r3, r0
 800136e:	3b08      	subs	r3, #8
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3306      	adds	r3, #6
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4a09      	ldr	r2, [pc, #36]	@ (800139c <__NVIC_SetPriority+0x5c>)
 8001378:	4694      	mov	ip, r2
 800137a:	4463      	add	r3, ip
 800137c:	685c      	ldr	r4, [r3, #4]
 800137e:	2203      	movs	r2, #3
 8001380:	4010      	ands	r0, r2
 8001382:	00c0      	lsls	r0, r0, #3
 8001384:	32fc      	adds	r2, #252	@ 0xfc
 8001386:	0015      	movs	r5, r2
 8001388:	4085      	lsls	r5, r0
 800138a:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800138c:	0189      	lsls	r1, r1, #6
 800138e:	400a      	ands	r2, r1
 8001390:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001392:	4322      	orrs	r2, r4
 8001394:	605a      	str	r2, [r3, #4]
}
 8001396:	e7e7      	b.n	8001368 <__NVIC_SetPriority+0x28>
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	3801      	subs	r0, #1
 80013a2:	2380      	movs	r3, #128	@ 0x80
 80013a4:	045b      	lsls	r3, r3, #17
 80013a6:	4298      	cmp	r0, r3
 80013a8:	d20f      	bcs.n	80013ca <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a09      	ldr	r2, [pc, #36]	@ (80013d0 <SysTick_Config+0x30>)
 80013ac:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ae:	4809      	ldr	r0, [pc, #36]	@ (80013d4 <SysTick_Config+0x34>)
 80013b0:	6a03      	ldr	r3, [r0, #32]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	21c0      	movs	r1, #192	@ 0xc0
 80013b8:	0609      	lsls	r1, r1, #24
 80013ba:	430b      	orrs	r3, r1
 80013bc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013be:	2300      	movs	r3, #0
 80013c0:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	3307      	adds	r3, #7
 80013c4:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c6:	2000      	movs	r0, #0
}
 80013c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2001      	movs	r0, #1
 80013cc:	e7fc      	b.n	80013c8 <SysTick_Config+0x28>
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	e000e010 	.word	0xe000e010
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d8:	b510      	push	{r4, lr}
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013da:	f7ff ffb1 	bl	8001340 <__NVIC_SetPriority>
}
 80013de:	bd10      	pop	{r4, pc}

080013e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80013e0:	2800      	cmp	r0, #0
 80013e2:	db05      	blt.n	80013f0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e4:	221f      	movs	r2, #31
 80013e6:	4002      	ands	r2, r0
 80013e8:	2301      	movs	r3, #1
 80013ea:	4093      	lsls	r3, r2
 80013ec:	4a01      	ldr	r2, [pc, #4]	@ (80013f4 <HAL_NVIC_EnableIRQ+0x14>)
 80013ee:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80013f0:	4770      	bx	lr
 80013f2:	46c0      	nop			@ (mov r8, r8)
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f8:	b510      	push	{r4, lr}
   return SysTick_Config(TicksNumb);
 80013fa:	f7ff ffd1 	bl	80013a0 <SysTick_Config>
}
 80013fe:	bd10      	pop	{r4, pc}

08001400 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001400:	b570      	push	{r4, r5, r6, lr}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001402:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8001404:	251c      	movs	r5, #28
 8001406:	4025      	ands	r5, r4
 8001408:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 800140a:	2401      	movs	r4, #1
 800140c:	40ac      	lsls	r4, r5
 800140e:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001410:	6804      	ldr	r4, [r0, #0]
 8001412:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001414:	6883      	ldr	r3, [r0, #8]
 8001416:	2b10      	cmp	r3, #16
 8001418:	d004      	beq.n	8001424 <DMA_SetConfig+0x24>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800141a:	6803      	ldr	r3, [r0, #0]
 800141c:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800141e:	6803      	ldr	r3, [r0, #0]
 8001420:	60da      	str	r2, [r3, #12]
  }
}
 8001422:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8001424:	6803      	ldr	r3, [r0, #0]
 8001426:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001428:	6803      	ldr	r3, [r0, #0]
 800142a:	60d9      	str	r1, [r3, #12]
 800142c:	e7f9      	b.n	8001422 <DMA_SetConfig+0x22>
	...

08001430 <HAL_DMA_Init>:
{
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	1e04      	subs	r4, r0, #0
  if(hdma == NULL)
 8001434:	d03d      	beq.n	80014b2 <HAL_DMA_Init+0x82>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001436:	6805      	ldr	r5, [r0, #0]
 8001438:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <HAL_DMA_Init+0x88>)
 800143a:	18e8      	adds	r0, r5, r3
 800143c:	2114      	movs	r1, #20
 800143e:	f7fe fe63 	bl	8000108 <__udivsi3>
 8001442:	0080      	lsls	r0, r0, #2
 8001444:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <HAL_DMA_Init+0x8c>)
 8001448:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800144a:	2325      	movs	r3, #37	@ 0x25
 800144c:	2202      	movs	r2, #2
 800144e:	54e2      	strb	r2, [r4, r3]
  tmp = hdma->Instance->CCR;
 8001450:	682a      	ldr	r2, [r5, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001452:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <HAL_DMA_Init+0x90>)
 8001454:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8001456:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001458:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 800145a:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145c:	6921      	ldr	r1, [r4, #16]
 800145e:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001460:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001462:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001464:	69a1      	ldr	r1, [r4, #24]
 8001466:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001468:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146a:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800146c:	6a21      	ldr	r1, [r4, #32]
 800146e:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8001470:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001472:	602b      	str	r3, [r5, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001474:	68a2      	ldr	r2, [r4, #8]
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	01db      	lsls	r3, r3, #7
 800147a:	429a      	cmp	r2, r3
 800147c:	d010      	beq.n	80014a0 <HAL_DMA_Init+0x70>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_DMA_Init+0x94>)
 8001480:	6819      	ldr	r1, [r3, #0]
 8001482:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8001484:	221c      	movs	r2, #28
 8001486:	4015      	ands	r5, r2
 8001488:	200f      	movs	r0, #15
 800148a:	40a8      	lsls	r0, r5
 800148c:	4381      	bics	r1, r0
 800148e:	6019      	str	r1, [r3, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	6860      	ldr	r0, [r4, #4]
 8001494:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8001496:	402a      	ands	r2, r5
 8001498:	4090      	lsls	r0, r2
 800149a:	0002      	movs	r2, r0
 800149c:	430a      	orrs	r2, r1
 800149e:	601a      	str	r2, [r3, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80014a4:	2225      	movs	r2, #37	@ 0x25
 80014a6:	2101      	movs	r1, #1
 80014a8:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 80014aa:	3a01      	subs	r2, #1
 80014ac:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80014ae:	2000      	movs	r0, #0
}
 80014b0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80014b2:	2001      	movs	r0, #1
 80014b4:	e7fc      	b.n	80014b0 <HAL_DMA_Init+0x80>
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	bffdfff8 	.word	0xbffdfff8
 80014bc:	40020000 	.word	0x40020000
 80014c0:	ffff800f 	.word	0xffff800f
 80014c4:	400200a8 	.word	0x400200a8

080014c8 <HAL_DMA_Start_IT>:
{
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80014cc:	2024      	movs	r0, #36	@ 0x24
 80014ce:	5c20      	ldrb	r0, [r4, r0]
 80014d0:	2801      	cmp	r0, #1
 80014d2:	d032      	beq.n	800153a <HAL_DMA_Start_IT+0x72>
 80014d4:	2024      	movs	r0, #36	@ 0x24
 80014d6:	2501      	movs	r5, #1
 80014d8:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 80014da:	3001      	adds	r0, #1
 80014dc:	5c20      	ldrb	r0, [r4, r0]
 80014de:	2801      	cmp	r0, #1
 80014e0:	d004      	beq.n	80014ec <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 80014e2:	2324      	movs	r3, #36	@ 0x24
 80014e4:	2200      	movs	r2, #0
 80014e6:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 80014e8:	2002      	movs	r0, #2
}
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ec:	3024      	adds	r0, #36	@ 0x24
 80014ee:	3501      	adds	r5, #1
 80014f0:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f2:	2000      	movs	r0, #0
 80014f4:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80014f6:	6825      	ldr	r5, [r4, #0]
 80014f8:	6828      	ldr	r0, [r5, #0]
 80014fa:	2601      	movs	r6, #1
 80014fc:	43b0      	bics	r0, r6
 80014fe:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001500:	0020      	movs	r0, r4
 8001502:	f7ff ff7d 	bl	8001400 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001506:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00b      	beq.n	8001524 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150c:	6822      	ldr	r2, [r4, #0]
 800150e:	6813      	ldr	r3, [r2, #0]
 8001510:	210e      	movs	r1, #14
 8001512:	430b      	orrs	r3, r1
 8001514:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001516:	6822      	ldr	r2, [r4, #0]
 8001518:	6813      	ldr	r3, [r2, #0]
 800151a:	2101      	movs	r1, #1
 800151c:	430b      	orrs	r3, r1
 800151e:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001520:	2000      	movs	r0, #0
 8001522:	e7e2      	b.n	80014ea <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001524:	6822      	ldr	r2, [r4, #0]
 8001526:	6813      	ldr	r3, [r2, #0]
 8001528:	2104      	movs	r1, #4
 800152a:	438b      	bics	r3, r1
 800152c:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800152e:	6822      	ldr	r2, [r4, #0]
 8001530:	6813      	ldr	r3, [r2, #0]
 8001532:	3106      	adds	r1, #6
 8001534:	430b      	orrs	r3, r1
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e7ed      	b.n	8001516 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 800153a:	2002      	movs	r0, #2
 800153c:	e7d5      	b.n	80014ea <HAL_DMA_Start_IT+0x22>

0800153e <HAL_DMA_IRQHandler>:
{
 800153e:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001540:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001542:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001544:	6804      	ldr	r4, [r0, #0]
 8001546:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001548:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800154a:	231c      	movs	r3, #28
 800154c:	4013      	ands	r3, r2
 800154e:	2204      	movs	r2, #4
 8001550:	409a      	lsls	r2, r3
 8001552:	4211      	tst	r1, r2
 8001554:	d014      	beq.n	8001580 <HAL_DMA_IRQHandler+0x42>
 8001556:	076a      	lsls	r2, r5, #29
 8001558:	d512      	bpl.n	8001580 <HAL_DMA_IRQHandler+0x42>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	069b      	lsls	r3, r3, #26
 800155e:	d403      	bmi.n	8001568 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001560:	6823      	ldr	r3, [r4, #0]
 8001562:	2204      	movs	r2, #4
 8001564:	4393      	bics	r3, r2
 8001566:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001568:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800156a:	221c      	movs	r2, #28
 800156c:	401a      	ands	r2, r3
 800156e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001570:	2304      	movs	r3, #4
 8001572:	4093      	lsls	r3, r2
 8001574:	604b      	str	r3, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8001576:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001578:	2b00      	cmp	r3, #0
 800157a:	d000      	beq.n	800157e <HAL_DMA_IRQHandler+0x40>
        hdma->XferHalfCpltCallback(hdma);
 800157c:	4798      	blx	r3
}
 800157e:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001580:	2202      	movs	r2, #2
 8001582:	409a      	lsls	r2, r3
 8001584:	4211      	tst	r1, r2
 8001586:	d01a      	beq.n	80015be <HAL_DMA_IRQHandler+0x80>
 8001588:	07aa      	lsls	r2, r5, #30
 800158a:	d518      	bpl.n	80015be <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	069b      	lsls	r3, r3, #26
 8001590:	d406      	bmi.n	80015a0 <HAL_DMA_IRQHandler+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001592:	6823      	ldr	r3, [r4, #0]
 8001594:	220a      	movs	r2, #10
 8001596:	4393      	bics	r3, r2
 8001598:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800159a:	2325      	movs	r3, #37	@ 0x25
 800159c:	3a09      	subs	r2, #9
 800159e:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80015a0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80015a2:	221c      	movs	r2, #28
 80015a4:	401a      	ands	r2, r3
 80015a6:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80015a8:	2302      	movs	r3, #2
 80015aa:	4093      	lsls	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 80015ae:	2324      	movs	r3, #36	@ 0x24
 80015b0:	2200      	movs	r2, #0
 80015b2:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 80015b4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0e1      	beq.n	800157e <HAL_DMA_IRQHandler+0x40>
      hdma->XferCpltCallback(hdma);
 80015ba:	4798      	blx	r3
 80015bc:	e7df      	b.n	800157e <HAL_DMA_IRQHandler+0x40>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80015be:	2208      	movs	r2, #8
 80015c0:	409a      	lsls	r2, r3
 80015c2:	4211      	tst	r1, r2
 80015c4:	d0db      	beq.n	800157e <HAL_DMA_IRQHandler+0x40>
 80015c6:	072d      	lsls	r5, r5, #28
 80015c8:	d5d9      	bpl.n	800157e <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	220e      	movs	r2, #14
 80015ce:	4393      	bics	r3, r2
 80015d0:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015d2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80015d4:	320e      	adds	r2, #14
 80015d6:	401a      	ands	r2, r3
 80015d8:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80015da:	2301      	movs	r3, #1
 80015dc:	001c      	movs	r4, r3
 80015de:	4094      	lsls	r4, r2
 80015e0:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015e2:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80015e4:	2225      	movs	r2, #37	@ 0x25
 80015e6:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80015e8:	3323      	adds	r3, #35	@ 0x23
 80015ea:	2200      	movs	r2, #0
 80015ec:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 80015ee:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0c4      	beq.n	800157e <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 80015f4:	4798      	blx	r3
  return;
 80015f6:	e7c2      	b.n	800157e <HAL_DMA_IRQHandler+0x40>

080015f8 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 80015f8:	b570      	push	{r4, r5, r6, lr}
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 80015fa:	2800      	cmp	r0, #0
 80015fc:	d053      	beq.n	80016a6 <HAL_EXTI_SetConfigLine+0xae>
 80015fe:	2900      	cmp	r1, #0
 8001600:	d053      	beq.n	80016aa <HAL_EXTI_SetConfigLine+0xb2>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8001602:	680c      	ldr	r4, [r1, #0]
 8001604:	6004      	str	r4, [r0, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8001606:	231f      	movs	r3, #31
 8001608:	4023      	ands	r3, r4
  maskline = (1uL << linepos);
 800160a:	2201      	movs	r2, #1
 800160c:	409a      	lsls	r2, r3

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 800160e:	01a0      	lsls	r0, r4, #6
 8001610:	d513      	bpl.n	800163a <HAL_EXTI_SetConfigLine+0x42>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8001612:	6888      	ldr	r0, [r1, #8]
 8001614:	07c0      	lsls	r0, r0, #31
 8001616:	d520      	bpl.n	800165a <HAL_EXTI_SetConfigLine+0x62>
    {
      EXTI->RTSR |= maskline;
 8001618:	4d25      	ldr	r5, [pc, #148]	@ (80016b0 <HAL_EXTI_SetConfigLine+0xb8>)
 800161a:	68a8      	ldr	r0, [r5, #8]
 800161c:	4310      	orrs	r0, r2
 800161e:	60a8      	str	r0, [r5, #8]
      EXTI->RTSR &= ~maskline;
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8001620:	6888      	ldr	r0, [r1, #8]
 8001622:	0780      	lsls	r0, r0, #30
 8001624:	d51e      	bpl.n	8001664 <HAL_EXTI_SetConfigLine+0x6c>
    {
      EXTI->FTSR |= maskline;
 8001626:	4d22      	ldr	r5, [pc, #136]	@ (80016b0 <HAL_EXTI_SetConfigLine+0xb8>)
 8001628:	68e8      	ldr	r0, [r5, #12]
 800162a:	4310      	orrs	r0, r2
 800162c:	60e8      	str	r0, [r5, #12]
      EXTI->FTSR &= ~maskline;
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 800162e:	6808      	ldr	r0, [r1, #0]
 8001630:	25c0      	movs	r5, #192	@ 0xc0
 8001632:	04ed      	lsls	r5, r5, #19
 8001634:	4028      	ands	r0, r5
 8001636:	42a8      	cmp	r0, r5
 8001638:	d019      	beq.n	800166e <HAL_EXTI_SetConfigLine+0x76>
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 800163a:	684b      	ldr	r3, [r1, #4]
 800163c:	07db      	lsls	r3, r3, #31
 800163e:	d527      	bpl.n	8001690 <HAL_EXTI_SetConfigLine+0x98>
  {
    EXTI->IMR |= maskline;
 8001640:	481b      	ldr	r0, [pc, #108]	@ (80016b0 <HAL_EXTI_SetConfigLine+0xb8>)
 8001642:	6803      	ldr	r3, [r0, #0]
 8001644:	4313      	orrs	r3, r2
 8001646:	6003      	str	r3, [r0, #0]
    EXTI->IMR &= ~maskline;
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8001648:	684b      	ldr	r3, [r1, #4]
 800164a:	079b      	lsls	r3, r3, #30
 800164c:	d525      	bpl.n	800169a <HAL_EXTI_SetConfigLine+0xa2>
  {
    EXTI->EMR |= maskline;
 800164e:	4918      	ldr	r1, [pc, #96]	@ (80016b0 <HAL_EXTI_SetConfigLine+0xb8>)
 8001650:	684b      	ldr	r3, [r1, #4]
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
  else
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
 8001656:	2000      	movs	r0, #0
}
 8001658:	bd70      	pop	{r4, r5, r6, pc}
      EXTI->RTSR &= ~maskline;
 800165a:	4d15      	ldr	r5, [pc, #84]	@ (80016b0 <HAL_EXTI_SetConfigLine+0xb8>)
 800165c:	68a8      	ldr	r0, [r5, #8]
 800165e:	4390      	bics	r0, r2
 8001660:	60a8      	str	r0, [r5, #8]
 8001662:	e7dd      	b.n	8001620 <HAL_EXTI_SetConfigLine+0x28>
      EXTI->FTSR &= ~maskline;
 8001664:	4d12      	ldr	r5, [pc, #72]	@ (80016b0 <HAL_EXTI_SetConfigLine+0xb8>)
 8001666:	68e8      	ldr	r0, [r5, #12]
 8001668:	4390      	bics	r0, r2
 800166a:	60e8      	str	r0, [r5, #12]
 800166c:	e7df      	b.n	800162e <HAL_EXTI_SetConfigLine+0x36>
      regval = SYSCFG->EXTICR[linepos >> 2u];
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	4d10      	ldr	r5, [pc, #64]	@ (80016b4 <HAL_EXTI_SetConfigLine+0xbc>)
 8001672:	3302      	adds	r3, #2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	595e      	ldr	r6, [r3, r5]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001678:	2003      	movs	r0, #3
 800167a:	4020      	ands	r0, r4
 800167c:	0080      	lsls	r0, r0, #2
 800167e:	240f      	movs	r4, #15
 8001680:	4084      	lsls	r4, r0
 8001682:	43a6      	bics	r6, r4
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001684:	68cc      	ldr	r4, [r1, #12]
 8001686:	4084      	lsls	r4, r0
 8001688:	0020      	movs	r0, r4
 800168a:	4330      	orrs	r0, r6
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 800168c:	5158      	str	r0, [r3, r5]
 800168e:	e7d4      	b.n	800163a <HAL_EXTI_SetConfigLine+0x42>
    EXTI->IMR &= ~maskline;
 8001690:	4807      	ldr	r0, [pc, #28]	@ (80016b0 <HAL_EXTI_SetConfigLine+0xb8>)
 8001692:	6803      	ldr	r3, [r0, #0]
 8001694:	4393      	bics	r3, r2
 8001696:	6003      	str	r3, [r0, #0]
 8001698:	e7d6      	b.n	8001648 <HAL_EXTI_SetConfigLine+0x50>
    EXTI->EMR &= ~maskline;
 800169a:	4905      	ldr	r1, [pc, #20]	@ (80016b0 <HAL_EXTI_SetConfigLine+0xb8>)
 800169c:	684b      	ldr	r3, [r1, #4]
 800169e:	4393      	bics	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
  return HAL_OK;
 80016a2:	2000      	movs	r0, #0
 80016a4:	e7d8      	b.n	8001658 <HAL_EXTI_SetConfigLine+0x60>
    return HAL_ERROR;
 80016a6:	2001      	movs	r0, #1
 80016a8:	e7d6      	b.n	8001658 <HAL_EXTI_SetConfigLine+0x60>
 80016aa:	2001      	movs	r0, #1
 80016ac:	e7d4      	b.n	8001658 <HAL_EXTI_SetConfigLine+0x60>
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	40010400 	.word	0x40010400
 80016b4:	40010000 	.word	0x40010000

080016b8 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 80016b8:	2900      	cmp	r1, #0
 80016ba:	d102      	bne.n	80016c2 <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80016bc:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016be:	0008      	movs	r0, r1
      status = HAL_ERROR;
      break;
  }

  return status;
}
 80016c0:	4770      	bx	lr
      status = HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
 80016c4:	e7fc      	b.n	80016c0 <HAL_EXTI_RegisterCallback+0x8>

080016c6 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80016c6:	2800      	cmp	r0, #0
 80016c8:	d002      	beq.n	80016d0 <HAL_EXTI_GetHandle+0xa>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80016ca:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 80016cc:	2000      	movs	r0, #0
  }
}
 80016ce:	4770      	bx	lr
    return HAL_ERROR;
 80016d0:	2001      	movs	r0, #1
 80016d2:	e7fc      	b.n	80016ce <HAL_EXTI_GetHandle+0x8>

080016d4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80016d4:	b510      	push	{r4, lr}
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80016d6:	6803      	ldr	r3, [r0, #0]
 80016d8:	221f      	movs	r2, #31
 80016da:	401a      	ands	r2, r3
 80016dc:	2301      	movs	r3, #1
 80016de:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80016e0:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <HAL_EXTI_IRQHandler+0x24>)
 80016e2:	6952      	ldr	r2, [r2, #20]
  if (regval != 0x00u)
 80016e4:	4213      	tst	r3, r2
 80016e6:	d005      	beq.n	80016f4 <HAL_EXTI_IRQHandler+0x20>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80016e8:	4a03      	ldr	r2, [pc, #12]	@ (80016f8 <HAL_EXTI_IRQHandler+0x24>)
 80016ea:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80016ec:	6843      	ldr	r3, [r0, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d000      	beq.n	80016f4 <HAL_EXTI_IRQHandler+0x20>
    {
      hexti->PendingCallback();
 80016f2:	4798      	blx	r3
    }
  }
}
 80016f4:	bd10      	pop	{r4, pc}
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	40010400 	.word	0x40010400

080016fc <HAL_EXTI_GetPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 80016fc:	6802      	ldr	r2, [r0, #0]
 80016fe:	231f      	movs	r3, #31
 8001700:	4013      	ands	r3, r2
  maskline = (1uL << linepos);
 8001702:	2001      	movs	r0, #1
 8001704:	4098      	lsls	r0, r3

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 8001706:	4a02      	ldr	r2, [pc, #8]	@ (8001710 <HAL_EXTI_GetPending+0x14>)
 8001708:	6952      	ldr	r2, [r2, #20]
 800170a:	4010      	ands	r0, r2
 800170c:	40d8      	lsrs	r0, r3
  return regval;
}
 800170e:	4770      	bx	lr
 8001710:	40010400 	.word	0x40010400

08001714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 8001716:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001718:	e056      	b.n	80017c8 <HAL_GPIO_Init+0xb4>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800171a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800171c:	005f      	lsls	r7, r3, #1
 800171e:	2403      	movs	r4, #3
 8001720:	40bc      	lsls	r4, r7
 8001722:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001724:	68cc      	ldr	r4, [r1, #12]
 8001726:	40bc      	lsls	r4, r7
 8001728:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800172a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800172e:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001730:	684e      	ldr	r6, [r1, #4]
 8001732:	0936      	lsrs	r6, r6, #4
 8001734:	2201      	movs	r2, #1
 8001736:	4032      	ands	r2, r6
 8001738:	409a      	lsls	r2, r3
 800173a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800173c:	6042      	str	r2, [r0, #4]
 800173e:	e053      	b.n	80017e8 <HAL_GPIO_Init+0xd4>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001740:	08de      	lsrs	r6, r3, #3
 8001742:	3608      	adds	r6, #8
 8001744:	00b6      	lsls	r6, r6, #2
 8001746:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001748:	3205      	adds	r2, #5
 800174a:	401a      	ands	r2, r3
 800174c:	0092      	lsls	r2, r2, #2
 800174e:	240f      	movs	r4, #15
 8001750:	4094      	lsls	r4, r2
 8001752:	43a7      	bics	r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001754:	690c      	ldr	r4, [r1, #16]
 8001756:	4094      	lsls	r4, r2
 8001758:	0022      	movs	r2, r4
 800175a:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 800175c:	5032      	str	r2, [r6, r0]
 800175e:	e056      	b.n	800180e <HAL_GPIO_Init+0xfa>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001760:	2605      	movs	r6, #5
 8001762:	e000      	b.n	8001766 <HAL_GPIO_Init+0x52>
 8001764:	2600      	movs	r6, #0
 8001766:	40a6      	lsls	r6, r4
 8001768:	0034      	movs	r4, r6
 800176a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800176c:	3202      	adds	r2, #2
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	4e41      	ldr	r6, [pc, #260]	@ (8001878 <HAL_GPIO_Init+0x164>)
 8001772:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001774:	4a41      	ldr	r2, [pc, #260]	@ (800187c <HAL_GPIO_Init+0x168>)
 8001776:	6897      	ldr	r7, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001778:	43ea      	mvns	r2, r5
 800177a:	003e      	movs	r6, r7
 800177c:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800177e:	684c      	ldr	r4, [r1, #4]
 8001780:	02e4      	lsls	r4, r4, #11
 8001782:	d501      	bpl.n	8001788 <HAL_GPIO_Init+0x74>
        {
          temp |= iocurrent;
 8001784:	003e      	movs	r6, r7
 8001786:	432e      	orrs	r6, r5
        }
        EXTI->RTSR = temp;
 8001788:	4c3c      	ldr	r4, [pc, #240]	@ (800187c <HAL_GPIO_Init+0x168>)
 800178a:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800178c:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800178e:	003e      	movs	r6, r7
 8001790:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001792:	684c      	ldr	r4, [r1, #4]
 8001794:	02a4      	lsls	r4, r4, #10
 8001796:	d501      	bpl.n	800179c <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8001798:	003e      	movs	r6, r7
 800179a:	432e      	orrs	r6, r5
        }
        EXTI->FTSR = temp;
 800179c:	4c37      	ldr	r4, [pc, #220]	@ (800187c <HAL_GPIO_Init+0x168>)
 800179e:	60e6      	str	r6, [r4, #12]

        temp = EXTI->EMR;
 80017a0:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	003e      	movs	r6, r7
 80017a4:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017a6:	684c      	ldr	r4, [r1, #4]
 80017a8:	03a4      	lsls	r4, r4, #14
 80017aa:	d501      	bpl.n	80017b0 <HAL_GPIO_Init+0x9c>
        {
          temp |= iocurrent;
 80017ac:	003e      	movs	r6, r7
 80017ae:	432e      	orrs	r6, r5
        }
        EXTI->EMR = temp;
 80017b0:	4c32      	ldr	r4, [pc, #200]	@ (800187c <HAL_GPIO_Init+0x168>)
 80017b2:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b4:	6826      	ldr	r6, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	4032      	ands	r2, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017b8:	684c      	ldr	r4, [r1, #4]
 80017ba:	03e4      	lsls	r4, r4, #15
 80017bc:	d501      	bpl.n	80017c2 <HAL_GPIO_Init+0xae>
        {
          temp |= iocurrent;
 80017be:	002a      	movs	r2, r5
 80017c0:	4332      	orrs	r2, r6
        }
        EXTI->IMR = temp;
 80017c2:	4c2e      	ldr	r4, [pc, #184]	@ (800187c <HAL_GPIO_Init+0x168>)
 80017c4:	6022      	str	r2, [r4, #0]
      }
    }
    position++;
 80017c6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80017c8:	680c      	ldr	r4, [r1, #0]
 80017ca:	0022      	movs	r2, r4
 80017cc:	40da      	lsrs	r2, r3
 80017ce:	d052      	beq.n	8001876 <HAL_GPIO_Init+0x162>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80017d0:	2201      	movs	r2, #1
 80017d2:	409a      	lsls	r2, r3
 80017d4:	0025      	movs	r5, r4
 80017d6:	4015      	ands	r5, r2
    if (iocurrent)
 80017d8:	4214      	tst	r4, r2
 80017da:	d0f4      	beq.n	80017c6 <HAL_GPIO_Init+0xb2>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017dc:	684e      	ldr	r6, [r1, #4]
 80017de:	2403      	movs	r4, #3
 80017e0:	4034      	ands	r4, r6
 80017e2:	3c01      	subs	r4, #1
 80017e4:	2c01      	cmp	r4, #1
 80017e6:	d998      	bls.n	800171a <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e8:	684c      	ldr	r4, [r1, #4]
 80017ea:	2203      	movs	r2, #3
 80017ec:	4022      	ands	r2, r4
 80017ee:	2a03      	cmp	r2, #3
 80017f0:	d008      	beq.n	8001804 <HAL_GPIO_Init+0xf0>
        temp = GPIOx->PUPDR;
 80017f2:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017f4:	005e      	lsls	r6, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	40b2      	lsls	r2, r6
 80017fa:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fc:	688a      	ldr	r2, [r1, #8]
 80017fe:	40b2      	lsls	r2, r6
 8001800:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001802:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001804:	684c      	ldr	r4, [r1, #4]
 8001806:	2203      	movs	r2, #3
 8001808:	4022      	ands	r2, r4
 800180a:	2a02      	cmp	r2, #2
 800180c:	d098      	beq.n	8001740 <HAL_GPIO_Init+0x2c>
      temp = GPIOx->MODER;
 800180e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001810:	005e      	lsls	r6, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	0017      	movs	r7, r2
 8001816:	40b7      	lsls	r7, r6
 8001818:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181a:	684f      	ldr	r7, [r1, #4]
 800181c:	403a      	ands	r2, r7
 800181e:	40b2      	lsls	r2, r6
 8001820:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001822:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001824:	684c      	ldr	r4, [r1, #4]
 8001826:	22c0      	movs	r2, #192	@ 0xc0
 8001828:	0292      	lsls	r2, r2, #10
 800182a:	4214      	tst	r4, r2
 800182c:	d0cb      	beq.n	80017c6 <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	4c14      	ldr	r4, [pc, #80]	@ (8001880 <HAL_GPIO_Init+0x16c>)
 8001830:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001832:	2601      	movs	r6, #1
 8001834:	4332      	orrs	r2, r6
 8001836:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8001838:	089a      	lsrs	r2, r3, #2
 800183a:	1c94      	adds	r4, r2, #2
 800183c:	00a4      	lsls	r4, r4, #2
 800183e:	4e0e      	ldr	r6, [pc, #56]	@ (8001878 <HAL_GPIO_Init+0x164>)
 8001840:	59a7      	ldr	r7, [r4, r6]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001842:	2403      	movs	r4, #3
 8001844:	401c      	ands	r4, r3
 8001846:	00a4      	lsls	r4, r4, #2
 8001848:	260f      	movs	r6, #15
 800184a:	40a6      	lsls	r6, r4
 800184c:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800184e:	26a0      	movs	r6, #160	@ 0xa0
 8001850:	05f6      	lsls	r6, r6, #23
 8001852:	42b0      	cmp	r0, r6
 8001854:	d086      	beq.n	8001764 <HAL_GPIO_Init+0x50>
 8001856:	4e0b      	ldr	r6, [pc, #44]	@ (8001884 <HAL_GPIO_Init+0x170>)
 8001858:	42b0      	cmp	r0, r6
 800185a:	d008      	beq.n	800186e <HAL_GPIO_Init+0x15a>
 800185c:	4e0a      	ldr	r6, [pc, #40]	@ (8001888 <HAL_GPIO_Init+0x174>)
 800185e:	42b0      	cmp	r0, r6
 8001860:	d007      	beq.n	8001872 <HAL_GPIO_Init+0x15e>
 8001862:	4e0a      	ldr	r6, [pc, #40]	@ (800188c <HAL_GPIO_Init+0x178>)
 8001864:	42b0      	cmp	r0, r6
 8001866:	d100      	bne.n	800186a <HAL_GPIO_Init+0x156>
 8001868:	e77a      	b.n	8001760 <HAL_GPIO_Init+0x4c>
 800186a:	2606      	movs	r6, #6
 800186c:	e77b      	b.n	8001766 <HAL_GPIO_Init+0x52>
 800186e:	2601      	movs	r6, #1
 8001870:	e779      	b.n	8001766 <HAL_GPIO_Init+0x52>
 8001872:	2602      	movs	r6, #2
 8001874:	e777      	b.n	8001766 <HAL_GPIO_Init+0x52>
  }
}
 8001876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001878:	40010000 	.word	0x40010000
 800187c:	40010400 	.word	0x40010400
 8001880:	40021000 	.word	0x40021000
 8001884:	50000400 	.word	0x50000400
 8001888:	50000800 	.word	0x50000800
 800188c:	50001c00 	.word	0x50001c00

08001890 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001890:	2a00      	cmp	r2, #0
 8001892:	d001      	beq.n	8001898 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001894:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001896:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001898:	6281      	str	r1, [r0, #40]	@ 0x28
}
 800189a:	e7fc      	b.n	8001896 <HAL_GPIO_WritePin+0x6>

0800189c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800189c:	b510      	push	{r4, lr}
 800189e:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a0:	d059      	beq.n	8001956 <HAL_I2C_Init+0xba>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018a2:	2341      	movs	r3, #65	@ 0x41
 80018a4:	5cc3      	ldrb	r3, [r0, r3]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d043      	beq.n	8001932 <HAL_I2C_Init+0x96>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018aa:	2341      	movs	r3, #65	@ 0x41
 80018ac:	2224      	movs	r2, #36	@ 0x24
 80018ae:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b0:	6822      	ldr	r2, [r4, #0]
 80018b2:	6813      	ldr	r3, [r2, #0]
 80018b4:	2101      	movs	r1, #1
 80018b6:	438b      	bics	r3, r1
 80018b8:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018ba:	6863      	ldr	r3, [r4, #4]
 80018bc:	6822      	ldr	r2, [r4, #0]
 80018be:	4927      	ldr	r1, [pc, #156]	@ (800195c <HAL_I2C_Init+0xc0>)
 80018c0:	400b      	ands	r3, r1
 80018c2:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018c4:	6822      	ldr	r2, [r4, #0]
 80018c6:	6893      	ldr	r3, [r2, #8]
 80018c8:	4925      	ldr	r1, [pc, #148]	@ (8001960 <HAL_I2C_Init+0xc4>)
 80018ca:	400b      	ands	r3, r1
 80018cc:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018ce:	68e3      	ldr	r3, [r4, #12]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d034      	beq.n	800193e <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018d4:	68a1      	ldr	r1, [r4, #8]
 80018d6:	6822      	ldr	r2, [r4, #0]
 80018d8:	2384      	movs	r3, #132	@ 0x84
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	430b      	orrs	r3, r1
 80018de:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018e0:	68e3      	ldr	r3, [r4, #12]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d032      	beq.n	800194c <HAL_I2C_Init+0xb0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018e6:	6822      	ldr	r2, [r4, #0]
 80018e8:	6851      	ldr	r1, [r2, #4]
 80018ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001964 <HAL_I2C_Init+0xc8>)
 80018ec:	430b      	orrs	r3, r1
 80018ee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018f0:	6822      	ldr	r2, [r4, #0]
 80018f2:	68d3      	ldr	r3, [r2, #12]
 80018f4:	491a      	ldr	r1, [pc, #104]	@ (8001960 <HAL_I2C_Init+0xc4>)
 80018f6:	400b      	ands	r3, r1
 80018f8:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018fa:	6923      	ldr	r3, [r4, #16]
 80018fc:	6962      	ldr	r2, [r4, #20]
 80018fe:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001900:	69a2      	ldr	r2, [r4, #24]
 8001902:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001904:	6821      	ldr	r1, [r4, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	60cb      	str	r3, [r1, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800190a:	69e3      	ldr	r3, [r4, #28]
 800190c:	6a21      	ldr	r1, [r4, #32]
 800190e:	6822      	ldr	r2, [r4, #0]
 8001910:	430b      	orrs	r3, r1
 8001912:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001914:	6822      	ldr	r2, [r4, #0]
 8001916:	6813      	ldr	r3, [r2, #0]
 8001918:	2101      	movs	r1, #1
 800191a:	430b      	orrs	r3, r1
 800191c:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800191e:	2300      	movs	r3, #0
 8001920:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001922:	2241      	movs	r2, #65	@ 0x41
 8001924:	311f      	adds	r1, #31
 8001926:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001928:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800192a:	3201      	adds	r2, #1
 800192c:	54a3      	strb	r3, [r4, r2]

  return HAL_OK;
 800192e:	2000      	movs	r0, #0
}
 8001930:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001932:	3340      	adds	r3, #64	@ 0x40
 8001934:	2200      	movs	r2, #0
 8001936:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8001938:	f7ff f89a 	bl	8000a70 <HAL_I2C_MspInit>
 800193c:	e7b5      	b.n	80018aa <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800193e:	68a1      	ldr	r1, [r4, #8]
 8001940:	6822      	ldr	r2, [r4, #0]
 8001942:	2380      	movs	r3, #128	@ 0x80
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	430b      	orrs	r3, r1
 8001948:	6093      	str	r3, [r2, #8]
 800194a:	e7c9      	b.n	80018e0 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800194c:	6823      	ldr	r3, [r4, #0]
 800194e:	2280      	movs	r2, #128	@ 0x80
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	e7c7      	b.n	80018e6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001956:	2001      	movs	r0, #1
 8001958:	e7ea      	b.n	8001930 <HAL_I2C_Init+0x94>
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	f0ffffff 	.word	0xf0ffffff
 8001960:	ffff7fff 	.word	0xffff7fff
 8001964:	02008000 	.word	0x02008000

08001968 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001968:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800196a:	2341      	movs	r3, #65	@ 0x41
 800196c:	5cc3      	ldrb	r3, [r0, r3]
 800196e:	2b20      	cmp	r3, #32
 8001970:	d120      	bne.n	80019b4 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001972:	3320      	adds	r3, #32
 8001974:	5cc3      	ldrb	r3, [r0, r3]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d01e      	beq.n	80019b8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 800197a:	2440      	movs	r4, #64	@ 0x40
 800197c:	2201      	movs	r2, #1
 800197e:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001980:	2541      	movs	r5, #65	@ 0x41
 8001982:	2324      	movs	r3, #36	@ 0x24
 8001984:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001986:	6806      	ldr	r6, [r0, #0]
 8001988:	6833      	ldr	r3, [r6, #0]
 800198a:	4393      	bics	r3, r2
 800198c:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800198e:	6806      	ldr	r6, [r0, #0]
 8001990:	6833      	ldr	r3, [r6, #0]
 8001992:	4f0a      	ldr	r7, [pc, #40]	@ (80019bc <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8001994:	403b      	ands	r3, r7
 8001996:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001998:	6806      	ldr	r6, [r0, #0]
 800199a:	6833      	ldr	r3, [r6, #0]
 800199c:	430b      	orrs	r3, r1
 800199e:	6033      	str	r3, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019a0:	6801      	ldr	r1, [r0, #0]
 80019a2:	680b      	ldr	r3, [r1, #0]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a8:	2320      	movs	r3, #32
 80019aa:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ac:	2300      	movs	r3, #0
 80019ae:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 80019b0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80019b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80019b4:	2002      	movs	r0, #2
 80019b6:	e7fc      	b.n	80019b2 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 80019b8:	2002      	movs	r0, #2
 80019ba:	e7fa      	b.n	80019b2 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 80019bc:	ffffefff 	.word	0xffffefff

080019c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019c0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019c2:	2341      	movs	r3, #65	@ 0x41
 80019c4:	5cc3      	ldrb	r3, [r0, r3]
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d11e      	bne.n	8001a08 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ca:	3320      	adds	r3, #32
 80019cc:	5cc3      	ldrb	r3, [r0, r3]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d01c      	beq.n	8001a0c <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 80019d2:	2440      	movs	r4, #64	@ 0x40
 80019d4:	2201      	movs	r2, #1
 80019d6:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019d8:	2541      	movs	r5, #65	@ 0x41
 80019da:	2324      	movs	r3, #36	@ 0x24
 80019dc:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019de:	6806      	ldr	r6, [r0, #0]
 80019e0:	6833      	ldr	r3, [r6, #0]
 80019e2:	4393      	bics	r3, r2
 80019e4:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019e6:	6806      	ldr	r6, [r0, #0]
 80019e8:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019ea:	4f09      	ldr	r7, [pc, #36]	@ (8001a10 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 80019ec:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019ee:	0209      	lsls	r1, r1, #8
 80019f0:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019f2:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019f4:	6801      	ldr	r1, [r0, #0]
 80019f6:	680b      	ldr	r3, [r1, #0]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019fc:	2320      	movs	r3, #32
 80019fe:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a00:	2300      	movs	r3, #0
 8001a02:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8001a04:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001a08:	2002      	movs	r0, #2
 8001a0a:	e7fc      	b.n	8001a06 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	e7fa      	b.n	8001a06 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8001a10:	fffff0ff 	.word	0xfffff0ff

08001a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a14:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a16:	4b26      	ldr	r3, [pc, #152]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a18:	68da      	ldr	r2, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a1a:	230c      	movs	r3, #12
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d042      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x94>
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d011      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x36>
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d009      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	0b52      	lsrs	r2, r2, #13
 8001a30:	2307      	movs	r3, #7
 8001a32:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a34:	3301      	adds	r3, #1
 8001a36:	2080      	movs	r0, #128	@ 0x80
 8001a38:	0200      	lsls	r0, r0, #8
 8001a3a:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8001a3c:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	06db      	lsls	r3, r3, #27
 8001a44:	d532      	bpl.n	8001aac <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a46:	481b      	ldr	r0, [pc, #108]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a48:	e7f8      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a4a:	0c91      	lsrs	r1, r2, #18
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	400b      	ands	r3, r1
 8001a50:	4919      	ldr	r1, [pc, #100]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a52:	5cc8      	ldrb	r0, [r1, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a54:	0d92      	lsrs	r2, r2, #22
 8001a56:	2303      	movs	r3, #3
 8001a58:	401a      	ands	r2, r3
 8001a5a:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	03db      	lsls	r3, r3, #15
 8001a62:	d509      	bpl.n	8001a78 <HAL_RCC_GetSysClockFreq+0x64>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a64:	4a15      	ldr	r2, [pc, #84]	@ (8001abc <HAL_RCC_GetSysClockFreq+0xa8>)
 8001a66:	2300      	movs	r3, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f7fe fbf9 	bl	8000260 <__aeabi_lmul>
 8001a6e:	0022      	movs	r2, r4
 8001a70:	2300      	movs	r3, #0
 8001a72:	f7fe fbd5 	bl	8000220 <__aeabi_uldivmod>
 8001a76:	e7e1      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x28>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a78:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	06db      	lsls	r3, r3, #27
 8001a7e:	d509      	bpl.n	8001a94 <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001a80:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a82:	2300      	movs	r3, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	f7fe fbeb 	bl	8000260 <__aeabi_lmul>
 8001a8a:	0022      	movs	r2, r4
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f7fe fbc7 	bl	8000220 <__aeabi_uldivmod>
 8001a92:	e7d3      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a94:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a96:	2300      	movs	r3, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	f7fe fbe1 	bl	8000260 <__aeabi_lmul>
 8001a9e:	0022      	movs	r2, r4
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f7fe fbbd 	bl	8000220 <__aeabi_uldivmod>
 8001aa6:	e7c9      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x28>
  switch (tmpreg & RCC_CFGR_SWS)
 8001aa8:	4804      	ldr	r0, [pc, #16]	@ (8001abc <HAL_RCC_GetSysClockFreq+0xa8>)
 8001aaa:	e7c7      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 8001aac:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 8001aae:	e7c5      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x28>
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	003d0900 	.word	0x003d0900
 8001ab8:	08002a68 	.word	0x08002a68
 8001abc:	007a1200 	.word	0x007a1200
 8001ac0:	00f42400 	.word	0x00f42400

08001ac4 <HAL_RCC_OscConfig>:
{
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8001aca:	d100      	bne.n	8001ace <HAL_RCC_OscConfig+0xa>
 8001acc:	e265      	b.n	8001f9a <HAL_RCC_OscConfig+0x4d6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ace:	4bc5      	ldr	r3, [pc, #788]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	250c      	movs	r5, #12
 8001ad4:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad6:	68de      	ldr	r6, [r3, #12]
 8001ad8:	2380      	movs	r3, #128	@ 0x80
 8001ada:	025b      	lsls	r3, r3, #9
 8001adc:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ade:	6803      	ldr	r3, [r0, #0]
 8001ae0:	07db      	lsls	r3, r3, #31
 8001ae2:	d536      	bpl.n	8001b52 <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae4:	2d08      	cmp	r5, #8
 8001ae6:	d02c      	beq.n	8001b42 <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ae8:	2d0c      	cmp	r5, #12
 8001aea:	d028      	beq.n	8001b3e <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aec:	6863      	ldr	r3, [r4, #4]
 8001aee:	2280      	movs	r2, #128	@ 0x80
 8001af0:	0252      	lsls	r2, r2, #9
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d055      	beq.n	8001ba2 <HAL_RCC_OscConfig+0xde>
 8001af6:	22a0      	movs	r2, #160	@ 0xa0
 8001af8:	02d2      	lsls	r2, r2, #11
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d058      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xec>
 8001afe:	4bb9      	ldr	r3, [pc, #740]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	49b9      	ldr	r1, [pc, #740]	@ (8001de8 <HAL_RCC_OscConfig+0x324>)
 8001b04:	400a      	ands	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	2180      	movs	r1, #128	@ 0x80
 8001b0c:	0249      	lsls	r1, r1, #9
 8001b0e:	400a      	ands	r2, r1
 8001b10:	9201      	str	r2, [sp, #4]
 8001b12:	9a01      	ldr	r2, [sp, #4]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	49b5      	ldr	r1, [pc, #724]	@ (8001dec <HAL_RCC_OscConfig+0x328>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1c:	6863      	ldr	r3, [r4, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d052      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8001b22:	f7ff f90d 	bl	8000d40 <HAL_GetTick>
 8001b26:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b28:	4bae      	ldr	r3, [pc, #696]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	039b      	lsls	r3, r3, #14
 8001b2e:	d410      	bmi.n	8001b52 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff f906 	bl	8000d40 <HAL_GetTick>
 8001b34:	1bc0      	subs	r0, r0, r7
 8001b36:	2864      	cmp	r0, #100	@ 0x64
 8001b38:	d9f6      	bls.n	8001b28 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 8001b3a:	2003      	movs	r0, #3
 8001b3c:	e22e      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b3e:	2e00      	cmp	r6, #0
 8001b40:	d0d4      	beq.n	8001aec <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b42:	4ba8      	ldr	r3, [pc, #672]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	039b      	lsls	r3, r3, #14
 8001b48:	d503      	bpl.n	8001b52 <HAL_RCC_OscConfig+0x8e>
 8001b4a:	6863      	ldr	r3, [r4, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d100      	bne.n	8001b52 <HAL_RCC_OscConfig+0x8e>
 8001b50:	e226      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4dc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	079b      	lsls	r3, r3, #30
 8001b56:	d56d      	bpl.n	8001c34 <HAL_RCC_OscConfig+0x170>
    hsi_state = RCC_OscInitStruct->HSIState;
 8001b58:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001b5a:	069a      	lsls	r2, r3, #26
 8001b5c:	d505      	bpl.n	8001b6a <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001b5e:	48a1      	ldr	r0, [pc, #644]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001b60:	6802      	ldr	r2, [r0, #0]
 8001b62:	2120      	movs	r1, #32
 8001b64:	430a      	orrs	r2, r1
 8001b66:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001b68:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b6a:	2d04      	cmp	r5, #4
 8001b6c:	d03c      	beq.n	8001be8 <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b6e:	2d0c      	cmp	r5, #12
 8001b70:	d038      	beq.n	8001be4 <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d100      	bne.n	8001b78 <HAL_RCC_OscConfig+0xb4>
 8001b76:	e0b0      	b.n	8001cda <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b78:	499a      	ldr	r1, [pc, #616]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001b7a:	680a      	ldr	r2, [r1, #0]
 8001b7c:	2009      	movs	r0, #9
 8001b7e:	4382      	bics	r2, r0
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001b84:	f7ff f8dc 	bl	8000d40 <HAL_GetTick>
 8001b88:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b8a:	4b96      	ldr	r3, [pc, #600]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	075b      	lsls	r3, r3, #29
 8001b90:	d500      	bpl.n	8001b94 <HAL_RCC_OscConfig+0xd0>
 8001b92:	e099      	b.n	8001cc8 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b94:	f7ff f8d4 	bl	8000d40 <HAL_GetTick>
 8001b98:	1b80      	subs	r0, r0, r6
 8001b9a:	2802      	cmp	r0, #2
 8001b9c:	d9f5      	bls.n	8001b8a <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8001b9e:	2003      	movs	r0, #3
 8001ba0:	e1fc      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba2:	4a90      	ldr	r2, [pc, #576]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001ba4:	6811      	ldr	r1, [r2, #0]
 8001ba6:	2380      	movs	r3, #128	@ 0x80
 8001ba8:	025b      	lsls	r3, r3, #9
 8001baa:	430b      	orrs	r3, r1
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e7b5      	b.n	8001b1c <HAL_RCC_OscConfig+0x58>
 8001bb0:	4b8c      	ldr	r3, [pc, #560]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001bb2:	6819      	ldr	r1, [r3, #0]
 8001bb4:	2280      	movs	r2, #128	@ 0x80
 8001bb6:	02d2      	lsls	r2, r2, #11
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	6819      	ldr	r1, [r3, #0]
 8001bbe:	2280      	movs	r2, #128	@ 0x80
 8001bc0:	0252      	lsls	r2, r2, #9
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e7a9      	b.n	8001b1c <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f8ba 	bl	8000d40 <HAL_GetTick>
 8001bcc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bce:	4b85      	ldr	r3, [pc, #532]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	039b      	lsls	r3, r3, #14
 8001bd4:	d5bd      	bpl.n	8001b52 <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd6:	f7ff f8b3 	bl	8000d40 <HAL_GetTick>
 8001bda:	1bc0      	subs	r0, r0, r7
 8001bdc:	2864      	cmp	r0, #100	@ 0x64
 8001bde:	d9f6      	bls.n	8001bce <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8001be0:	2003      	movs	r0, #3
 8001be2:	e1db      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001be4:	2e00      	cmp	r6, #0
 8001be6:	d1c4      	bne.n	8001b72 <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001be8:	4a7e      	ldr	r2, [pc, #504]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	0752      	lsls	r2, r2, #29
 8001bee:	d502      	bpl.n	8001bf6 <HAL_RCC_OscConfig+0x132>
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x132>
 8001bf4:	e1d6      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4e7b      	ldr	r6, [pc, #492]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001bf8:	6872      	ldr	r2, [r6, #4]
 8001bfa:	497d      	ldr	r1, [pc, #500]	@ (8001df0 <HAL_RCC_OscConfig+0x32c>)
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	6921      	ldr	r1, [r4, #16]
 8001c00:	0209      	lsls	r1, r1, #8
 8001c02:	430a      	orrs	r2, r1
 8001c04:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c06:	6832      	ldr	r2, [r6, #0]
 8001c08:	2109      	movs	r1, #9
 8001c0a:	438a      	bics	r2, r1
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c10:	f7ff ff00 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 8001c14:	68f2      	ldr	r2, [r6, #12]
 8001c16:	0912      	lsrs	r2, r2, #4
 8001c18:	230f      	movs	r3, #15
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	4a75      	ldr	r2, [pc, #468]	@ (8001df4 <HAL_RCC_OscConfig+0x330>)
 8001c1e:	5cd3      	ldrb	r3, [r2, r3]
 8001c20:	40d8      	lsrs	r0, r3
 8001c22:	4b75      	ldr	r3, [pc, #468]	@ (8001df8 <HAL_RCC_OscConfig+0x334>)
 8001c24:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8001c26:	4b75      	ldr	r3, [pc, #468]	@ (8001dfc <HAL_RCC_OscConfig+0x338>)
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	f7ff f841 	bl	8000cb0 <HAL_InitTick>
      if(status != HAL_OK)
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	d000      	beq.n	8001c34 <HAL_RCC_OscConfig+0x170>
 8001c32:	e1b3      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	06db      	lsls	r3, r3, #27
 8001c38:	d52d      	bpl.n	8001c96 <HAL_RCC_OscConfig+0x1d2>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c3a:	2d00      	cmp	r5, #0
 8001c3c:	d160      	bne.n	8001d00 <HAL_RCC_OscConfig+0x23c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c3e:	4b69      	ldr	r3, [pc, #420]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	059b      	lsls	r3, r3, #22
 8001c44:	d503      	bpl.n	8001c4e <HAL_RCC_OscConfig+0x18a>
 8001c46:	69a3      	ldr	r3, [r4, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d100      	bne.n	8001c4e <HAL_RCC_OscConfig+0x18a>
 8001c4c:	e1ac      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4e4>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c4e:	4a65      	ldr	r2, [pc, #404]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001c50:	6853      	ldr	r3, [r2, #4]
 8001c52:	496b      	ldr	r1, [pc, #428]	@ (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001c54:	400b      	ands	r3, r1
 8001c56:	6a21      	ldr	r1, [r4, #32]
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c5c:	6853      	ldr	r3, [r2, #4]
 8001c5e:	021b      	lsls	r3, r3, #8
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	69e1      	ldr	r1, [r4, #28]
 8001c64:	0609      	lsls	r1, r1, #24
 8001c66:	430b      	orrs	r3, r1
 8001c68:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c6a:	6a21      	ldr	r1, [r4, #32]
 8001c6c:	0b49      	lsrs	r1, r1, #13
 8001c6e:	3101      	adds	r1, #1
 8001c70:	2380      	movs	r3, #128	@ 0x80
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c76:	68d1      	ldr	r1, [r2, #12]
 8001c78:	0909      	lsrs	r1, r1, #4
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	495d      	ldr	r1, [pc, #372]	@ (8001df4 <HAL_RCC_OscConfig+0x330>)
 8001c80:	5c8a      	ldrb	r2, [r1, r2]
 8001c82:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c84:	4a5c      	ldr	r2, [pc, #368]	@ (8001df8 <HAL_RCC_OscConfig+0x334>)
 8001c86:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8001c88:	4b5c      	ldr	r3, [pc, #368]	@ (8001dfc <HAL_RCC_OscConfig+0x338>)
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	f7ff f810 	bl	8000cb0 <HAL_InitTick>
        if(status != HAL_OK)
 8001c90:	2800      	cmp	r0, #0
 8001c92:	d000      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1d2>
 8001c94:	e182      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c96:	6823      	ldr	r3, [r4, #0]
 8001c98:	071b      	lsls	r3, r3, #28
 8001c9a:	d57d      	bpl.n	8001d98 <HAL_RCC_OscConfig+0x2d4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c9c:	6963      	ldr	r3, [r4, #20]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d067      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_LSI_ENABLE();
 8001ca2:	4a50      	ldr	r2, [pc, #320]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001ca4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	6513      	str	r3, [r2, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001cac:	f7ff f848 	bl	8000d40 <HAL_GetTick>
 8001cb0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cb6:	079b      	lsls	r3, r3, #30
 8001cb8:	d46e      	bmi.n	8001d98 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cba:	f7ff f841 	bl	8000d40 <HAL_GetTick>
 8001cbe:	1b80      	subs	r0, r0, r6
 8001cc0:	2802      	cmp	r0, #2
 8001cc2:	d9f6      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x1ee>
          return HAL_TIMEOUT;
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	e169      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4946      	ldr	r1, [pc, #280]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001cca:	684b      	ldr	r3, [r1, #4]
 8001ccc:	4a48      	ldr	r2, [pc, #288]	@ (8001df0 <HAL_RCC_OscConfig+0x32c>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	6922      	ldr	r2, [r4, #16]
 8001cd2:	0212      	lsls	r2, r2, #8
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	604b      	str	r3, [r1, #4]
 8001cd8:	e7ac      	b.n	8001c34 <HAL_RCC_OscConfig+0x170>
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4a42      	ldr	r2, [pc, #264]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001cdc:	6813      	ldr	r3, [r2, #0]
 8001cde:	2101      	movs	r1, #1
 8001ce0:	438b      	bics	r3, r1
 8001ce2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f82c 	bl	8000d40 <HAL_GetTick>
 8001ce8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cea:	4b3e      	ldr	r3, [pc, #248]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	075b      	lsls	r3, r3, #29
 8001cf0:	d5a0      	bpl.n	8001c34 <HAL_RCC_OscConfig+0x170>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7ff f825 	bl	8000d40 <HAL_GetTick>
 8001cf6:	1b80      	subs	r0, r0, r6
 8001cf8:	2802      	cmp	r0, #2
 8001cfa:	d9f6      	bls.n	8001cea <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	e14d      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d00:	69a3      	ldr	r3, [r4, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d022      	beq.n	8001d4c <HAL_RCC_OscConfig+0x288>
        __HAL_RCC_MSI_ENABLE();
 8001d06:	4a37      	ldr	r2, [pc, #220]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001d08:	6811      	ldr	r1, [r2, #0]
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d12:	f7ff f815 	bl	8000d40 <HAL_GetTick>
 8001d16:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d18:	4b32      	ldr	r3, [pc, #200]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	059b      	lsls	r3, r3, #22
 8001d1e:	d406      	bmi.n	8001d2e <HAL_RCC_OscConfig+0x26a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d20:	f7ff f80e 	bl	8000d40 <HAL_GetTick>
 8001d24:	1b80      	subs	r0, r0, r6
 8001d26:	2802      	cmp	r0, #2
 8001d28:	d9f6      	bls.n	8001d18 <HAL_RCC_OscConfig+0x254>
            return HAL_TIMEOUT;
 8001d2a:	2003      	movs	r0, #3
 8001d2c:	e136      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001d30:	6853      	ldr	r3, [r2, #4]
 8001d32:	4933      	ldr	r1, [pc, #204]	@ (8001e00 <HAL_RCC_OscConfig+0x33c>)
 8001d34:	400b      	ands	r3, r1
 8001d36:	6a21      	ldr	r1, [r4, #32]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d3c:	6853      	ldr	r3, [r2, #4]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	69e1      	ldr	r1, [r4, #28]
 8001d44:	0609      	lsls	r1, r1, #24
 8001d46:	430b      	orrs	r3, r1
 8001d48:	6053      	str	r3, [r2, #4]
 8001d4a:	e7a4      	b.n	8001c96 <HAL_RCC_OscConfig+0x1d2>
        __HAL_RCC_MSI_DISABLE();
 8001d4c:	4a25      	ldr	r2, [pc, #148]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001d4e:	6813      	ldr	r3, [r2, #0]
 8001d50:	492c      	ldr	r1, [pc, #176]	@ (8001e04 <HAL_RCC_OscConfig+0x340>)
 8001d52:	400b      	ands	r3, r1
 8001d54:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d56:	f7fe fff3 	bl	8000d40 <HAL_GetTick>
 8001d5a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d5c:	4b21      	ldr	r3, [pc, #132]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	059b      	lsls	r3, r3, #22
 8001d62:	d598      	bpl.n	8001c96 <HAL_RCC_OscConfig+0x1d2>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d64:	f7fe ffec 	bl	8000d40 <HAL_GetTick>
 8001d68:	1b80      	subs	r0, r0, r6
 8001d6a:	2802      	cmp	r0, #2
 8001d6c:	d9f6      	bls.n	8001d5c <HAL_RCC_OscConfig+0x298>
            return HAL_TIMEOUT;
 8001d6e:	2003      	movs	r0, #3
 8001d70:	e114      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_LSI_DISABLE();
 8001d72:	4a1c      	ldr	r2, [pc, #112]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001d74:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8001d76:	2101      	movs	r1, #1
 8001d78:	438b      	bics	r3, r1
 8001d7a:	6513      	str	r3, [r2, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8001d7c:	f7fe ffe0 	bl	8000d40 <HAL_GetTick>
 8001d80:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d82:	4b18      	ldr	r3, [pc, #96]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d86:	079b      	lsls	r3, r3, #30
 8001d88:	d506      	bpl.n	8001d98 <HAL_RCC_OscConfig+0x2d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d8a:	f7fe ffd9 	bl	8000d40 <HAL_GetTick>
 8001d8e:	1b80      	subs	r0, r0, r6
 8001d90:	2802      	cmp	r0, #2
 8001d92:	d9f6      	bls.n	8001d82 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 8001d94:	2003      	movs	r0, #3
 8001d96:	e101      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	075b      	lsls	r3, r3, #29
 8001d9c:	d400      	bmi.n	8001da0 <HAL_RCC_OscConfig+0x2dc>
 8001d9e:	e08e      	b.n	8001ebe <HAL_RCC_OscConfig+0x3fa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da0:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	d41b      	bmi.n	8001de0 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da8:	4a0e      	ldr	r2, [pc, #56]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001daa:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8001dac:	2380      	movs	r3, #128	@ 0x80
 8001dae:	055b      	lsls	r3, r3, #21
 8001db0:	430b      	orrs	r3, r1
 8001db2:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 8001db4:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <HAL_RCC_OscConfig+0x344>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	05db      	lsls	r3, r3, #23
 8001dbc:	d528      	bpl.n	8001e10 <HAL_RCC_OscConfig+0x34c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbe:	68a3      	ldr	r3, [r4, #8]
 8001dc0:	2280      	movs	r2, #128	@ 0x80
 8001dc2:	0052      	lsls	r2, r2, #1
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d037      	beq.n	8001e38 <HAL_RCC_OscConfig+0x374>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d14d      	bne.n	8001e68 <HAL_RCC_OscConfig+0x3a4>
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <HAL_RCC_OscConfig+0x320>)
 8001dce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dd0:	490c      	ldr	r1, [pc, #48]	@ (8001e04 <HAL_RCC_OscConfig+0x340>)
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dd8:	490c      	ldr	r1, [pc, #48]	@ (8001e0c <HAL_RCC_OscConfig+0x348>)
 8001dda:	400a      	ands	r2, r1
 8001ddc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dde:	e031      	b.n	8001e44 <HAL_RCC_OscConfig+0x380>
    FlagStatus       pwrclkchanged = RESET;
 8001de0:	2600      	movs	r6, #0
 8001de2:	e7e8      	b.n	8001db6 <HAL_RCC_OscConfig+0x2f2>
 8001de4:	40021000 	.word	0x40021000
 8001de8:	fffeffff 	.word	0xfffeffff
 8001dec:	fffbffff 	.word	0xfffbffff
 8001df0:	ffffe0ff 	.word	0xffffe0ff
 8001df4:	08002a74 	.word	0x08002a74
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000010 	.word	0x20000010
 8001e00:	ffff1fff 	.word	0xffff1fff
 8001e04:	fffffeff 	.word	0xfffffeff
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e10:	4a6b      	ldr	r2, [pc, #428]	@ (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001e12:	6811      	ldr	r1, [r2, #0]
 8001e14:	2380      	movs	r3, #128	@ 0x80
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001e1c:	f7fe ff90 	bl	8000d40 <HAL_GetTick>
 8001e20:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b67      	ldr	r3, [pc, #412]	@ (8001fc0 <HAL_RCC_OscConfig+0x4fc>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	05db      	lsls	r3, r3, #23
 8001e28:	d4c9      	bmi.n	8001dbe <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2a:	f7fe ff89 	bl	8000d40 <HAL_GetTick>
 8001e2e:	1bc0      	subs	r0, r0, r7
 8001e30:	2864      	cmp	r0, #100	@ 0x64
 8001e32:	d9f6      	bls.n	8001e22 <HAL_RCC_OscConfig+0x35e>
          return HAL_TIMEOUT;
 8001e34:	2003      	movs	r0, #3
 8001e36:	e0b1      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	4a62      	ldr	r2, [pc, #392]	@ (8001fc4 <HAL_RCC_OscConfig+0x500>)
 8001e3a:	6d11      	ldr	r1, [r2, #80]	@ 0x50
 8001e3c:	2380      	movs	r3, #128	@ 0x80
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	430b      	orrs	r3, r1
 8001e42:	6513      	str	r3, [r2, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e44:	68a3      	ldr	r3, [r4, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d028      	beq.n	8001e9c <HAL_RCC_OscConfig+0x3d8>
      tickstart = HAL_GetTick();
 8001e4a:	f7fe ff79 	bl	8000d40 <HAL_GetTick>
 8001e4e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e50:	4b5c      	ldr	r3, [pc, #368]	@ (8001fc4 <HAL_RCC_OscConfig+0x500>)
 8001e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e54:	059b      	lsls	r3, r3, #22
 8001e56:	d430      	bmi.n	8001eba <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7fe ff72 	bl	8000d40 <HAL_GetTick>
 8001e5c:	1bc0      	subs	r0, r0, r7
 8001e5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001fc8 <HAL_RCC_OscConfig+0x504>)
 8001e60:	4298      	cmp	r0, r3
 8001e62:	d9f5      	bls.n	8001e50 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8001e64:	2003      	movs	r0, #3
 8001e66:	e099      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e68:	22a0      	movs	r2, #160	@ 0xa0
 8001e6a:	00d2      	lsls	r2, r2, #3
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d009      	beq.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
 8001e70:	4b54      	ldr	r3, [pc, #336]	@ (8001fc4 <HAL_RCC_OscConfig+0x500>)
 8001e72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e74:	4955      	ldr	r1, [pc, #340]	@ (8001fcc <HAL_RCC_OscConfig+0x508>)
 8001e76:	400a      	ands	r2, r1
 8001e78:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e7c:	4954      	ldr	r1, [pc, #336]	@ (8001fd0 <HAL_RCC_OscConfig+0x50c>)
 8001e7e:	400a      	ands	r2, r1
 8001e80:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e82:	e7df      	b.n	8001e44 <HAL_RCC_OscConfig+0x380>
 8001e84:	4b4f      	ldr	r3, [pc, #316]	@ (8001fc4 <HAL_RCC_OscConfig+0x500>)
 8001e86:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001e88:	3a01      	subs	r2, #1
 8001e8a:	3aff      	subs	r2, #255	@ 0xff
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e90:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001e92:	2280      	movs	r2, #128	@ 0x80
 8001e94:	0052      	lsls	r2, r2, #1
 8001e96:	430a      	orrs	r2, r1
 8001e98:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e9a:	e7d3      	b.n	8001e44 <HAL_RCC_OscConfig+0x380>
      tickstart = HAL_GetTick();
 8001e9c:	f7fe ff50 	bl	8000d40 <HAL_GetTick>
 8001ea0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ea2:	4b48      	ldr	r3, [pc, #288]	@ (8001fc4 <HAL_RCC_OscConfig+0x500>)
 8001ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ea6:	059b      	lsls	r3, r3, #22
 8001ea8:	d507      	bpl.n	8001eba <HAL_RCC_OscConfig+0x3f6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7fe ff49 	bl	8000d40 <HAL_GetTick>
 8001eae:	1bc0      	subs	r0, r0, r7
 8001eb0:	4b45      	ldr	r3, [pc, #276]	@ (8001fc8 <HAL_RCC_OscConfig+0x504>)
 8001eb2:	4298      	cmp	r0, r3
 8001eb4:	d9f5      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x3de>
          return HAL_TIMEOUT;
 8001eb6:	2003      	movs	r0, #3
 8001eb8:	e070      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
    if(pwrclkchanged == SET)
 8001eba:	2e01      	cmp	r6, #1
 8001ebc:	d01a      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x430>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ebe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d100      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x402>
 8001ec4:	e072      	b.n	8001fac <HAL_RCC_OscConfig+0x4e8>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec6:	2d0c      	cmp	r5, #12
 8001ec8:	d04f      	beq.n	8001f6a <HAL_RCC_OscConfig+0x4a6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d018      	beq.n	8001f00 <HAL_RCC_OscConfig+0x43c>
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4a3d      	ldr	r2, [pc, #244]	@ (8001fc4 <HAL_RCC_OscConfig+0x500>)
 8001ed0:	6813      	ldr	r3, [r2, #0]
 8001ed2:	4940      	ldr	r1, [pc, #256]	@ (8001fd4 <HAL_RCC_OscConfig+0x510>)
 8001ed4:	400b      	ands	r3, r1
 8001ed6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001ed8:	f7fe ff32 	bl	8000d40 <HAL_GetTick>
 8001edc:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ede:	4b39      	ldr	r3, [pc, #228]	@ (8001fc4 <HAL_RCC_OscConfig+0x500>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	019b      	lsls	r3, r3, #6
 8001ee4:	d53f      	bpl.n	8001f66 <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7fe ff2b 	bl	8000d40 <HAL_GetTick>
 8001eea:	1b00      	subs	r0, r0, r4
 8001eec:	2802      	cmp	r0, #2
 8001eee:	d9f6      	bls.n	8001ede <HAL_RCC_OscConfig+0x41a>
            return HAL_TIMEOUT;
 8001ef0:	2003      	movs	r0, #3
 8001ef2:	e053      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef4:	4a33      	ldr	r2, [pc, #204]	@ (8001fc4 <HAL_RCC_OscConfig+0x500>)
 8001ef6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8001ef8:	4937      	ldr	r1, [pc, #220]	@ (8001fd8 <HAL_RCC_OscConfig+0x514>)
 8001efa:	400b      	ands	r3, r1
 8001efc:	6393      	str	r3, [r2, #56]	@ 0x38
 8001efe:	e7de      	b.n	8001ebe <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_PLL_DISABLE();
 8001f00:	4a30      	ldr	r2, [pc, #192]	@ (8001fc4 <HAL_RCC_OscConfig+0x500>)
 8001f02:	6813      	ldr	r3, [r2, #0]
 8001f04:	4933      	ldr	r1, [pc, #204]	@ (8001fd4 <HAL_RCC_OscConfig+0x510>)
 8001f06:	400b      	ands	r3, r1
 8001f08:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001f0a:	f7fe ff19 	bl	8000d40 <HAL_GetTick>
 8001f0e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f10:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc4 <HAL_RCC_OscConfig+0x500>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	019b      	lsls	r3, r3, #6
 8001f16:	d506      	bpl.n	8001f26 <HAL_RCC_OscConfig+0x462>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f18:	f7fe ff12 	bl	8000d40 <HAL_GetTick>
 8001f1c:	1b40      	subs	r0, r0, r5
 8001f1e:	2802      	cmp	r0, #2
 8001f20:	d9f6      	bls.n	8001f10 <HAL_RCC_OscConfig+0x44c>
            return HAL_TIMEOUT;
 8001f22:	2003      	movs	r0, #3
 8001f24:	e03a      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f26:	4927      	ldr	r1, [pc, #156]	@ (8001fc4 <HAL_RCC_OscConfig+0x500>)
 8001f28:	68cb      	ldr	r3, [r1, #12]
 8001f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001fdc <HAL_RCC_OscConfig+0x518>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001f30:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8001f32:	4302      	orrs	r2, r0
 8001f34:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001f36:	4302      	orrs	r2, r0
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 8001f3c:	680a      	ldr	r2, [r1, #0]
 8001f3e:	2380      	movs	r3, #128	@ 0x80
 8001f40:	045b      	lsls	r3, r3, #17
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8001f46:	f7fe fefb 	bl	8000d40 <HAL_GetTick>
 8001f4a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <HAL_RCC_OscConfig+0x500>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	019b      	lsls	r3, r3, #6
 8001f52:	d406      	bmi.n	8001f62 <HAL_RCC_OscConfig+0x49e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f54:	f7fe fef4 	bl	8000d40 <HAL_GetTick>
 8001f58:	1b00      	subs	r0, r0, r4
 8001f5a:	2802      	cmp	r0, #2
 8001f5c:	d9f6      	bls.n	8001f4c <HAL_RCC_OscConfig+0x488>
            return HAL_TIMEOUT;
 8001f5e:	2003      	movs	r0, #3
 8001f60:	e01c      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
  return HAL_OK;
 8001f62:	2000      	movs	r0, #0
 8001f64:	e01a      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
 8001f66:	2000      	movs	r0, #0
 8001f68:	e018      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d020      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4ec>
        pll_config = RCC->CFGR;
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <HAL_RCC_OscConfig+0x500>)
 8001f70:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	2380      	movs	r3, #128	@ 0x80
 8001f74:	025b      	lsls	r3, r3, #9
 8001f76:	4013      	ands	r3, r2
 8001f78:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001f7a:	428b      	cmp	r3, r1
 8001f7c:	d11a      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4f0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f7e:	23f0      	movs	r3, #240	@ 0xf0
 8001f80:	039b      	lsls	r3, r3, #14
 8001f82:	4013      	ands	r3, r2
 8001f84:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	428b      	cmp	r3, r1
 8001f88:	d116      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x4f4>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f8a:	23c0      	movs	r3, #192	@ 0xc0
 8001f8c:	041b      	lsls	r3, r3, #16
 8001f8e:	401a      	ands	r2, r3
 8001f90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d112      	bne.n	8001fbc <HAL_RCC_OscConfig+0x4f8>
  return HAL_OK;
 8001f96:	2000      	movs	r0, #0
 8001f98:	e000      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
    return HAL_ERROR;
 8001f9a:	2001      	movs	r0, #1
}
 8001f9c:	b003      	add	sp, #12
 8001f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	e7fb      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	e7f9      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 8001fa8:	2001      	movs	r0, #1
 8001faa:	e7f7      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
  return HAL_OK;
 8001fac:	2000      	movs	r0, #0
 8001fae:	e7f5      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
        return HAL_ERROR;
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	e7f3      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
          return HAL_ERROR;
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	e7f1      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
 8001fb8:	2001      	movs	r0, #1
 8001fba:	e7ef      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	e7ed      	b.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	00001388 	.word	0x00001388
 8001fcc:	fffffeff 	.word	0xfffffeff
 8001fd0:	fffffbff 	.word	0xfffffbff
 8001fd4:	feffffff 	.word	0xfeffffff
 8001fd8:	efffffff 	.word	0xefffffff
 8001fdc:	ff02ffff 	.word	0xff02ffff

08001fe0 <HAL_RCC_ClockConfig>:
{
 8001fe0:	b570      	push	{r4, r5, r6, lr}
 8001fe2:	0005      	movs	r5, r0
 8001fe4:	000c      	movs	r4, r1
  if(RCC_ClkInitStruct == NULL)
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	d100      	bne.n	8001fec <HAL_RCC_ClockConfig+0xc>
 8001fea:	e0d1      	b.n	8002190 <HAL_RCC_ClockConfig+0x1b0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b6a      	ldr	r3, [pc, #424]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	428b      	cmp	r3, r1
 8001ff6:	d319      	bcc.n	800202c <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	682b      	ldr	r3, [r5, #0]
 8001ffa:	079b      	lsls	r3, r3, #30
 8001ffc:	d506      	bpl.n	800200c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ffe:	4a67      	ldr	r2, [pc, #412]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002000:	68d3      	ldr	r3, [r2, #12]
 8002002:	21f0      	movs	r1, #240	@ 0xf0
 8002004:	438b      	bics	r3, r1
 8002006:	68a9      	ldr	r1, [r5, #8]
 8002008:	430b      	orrs	r3, r1
 800200a:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200c:	682b      	ldr	r3, [r5, #0]
 800200e:	07db      	lsls	r3, r3, #31
 8002010:	d57b      	bpl.n	800210a <HAL_RCC_ClockConfig+0x12a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002012:	686b      	ldr	r3, [r5, #4]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d020      	beq.n	800205a <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002018:	2b03      	cmp	r3, #3
 800201a:	d040      	beq.n	800209e <HAL_RCC_ClockConfig+0xbe>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800201c:	2b01      	cmp	r3, #1
 800201e:	d044      	beq.n	80020aa <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002020:	4a5e      	ldr	r2, [pc, #376]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	0592      	lsls	r2, r2, #22
 8002026:	d41d      	bmi.n	8002064 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8002028:	2001      	movs	r0, #1
 800202a:	e099      	b.n	8002160 <HAL_RCC_ClockConfig+0x180>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202c:	4a5a      	ldr	r2, [pc, #360]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 800202e:	6813      	ldr	r3, [r2, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	438b      	bics	r3, r1
 8002034:	4323      	orrs	r3, r4
 8002036:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002038:	f7fe fe82 	bl	8000d40 <HAL_GetTick>
 800203c:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b56      	ldr	r3, [pc, #344]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	2301      	movs	r3, #1
 8002044:	4013      	ands	r3, r2
 8002046:	42a3      	cmp	r3, r4
 8002048:	d0d6      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204a:	f7fe fe79 	bl	8000d40 <HAL_GetTick>
 800204e:	1b80      	subs	r0, r0, r6
 8002050:	4a53      	ldr	r2, [pc, #332]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002052:	4290      	cmp	r0, r2
 8002054:	d9f3      	bls.n	800203e <HAL_RCC_ClockConfig+0x5e>
        return HAL_TIMEOUT;
 8002056:	2003      	movs	r0, #3
 8002058:	e082      	b.n	8002160 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800205a:	4a50      	ldr	r2, [pc, #320]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	0392      	lsls	r2, r2, #14
 8002060:	d400      	bmi.n	8002064 <HAL_RCC_ClockConfig+0x84>
 8002062:	e097      	b.n	8002194 <HAL_RCC_ClockConfig+0x1b4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002064:	494d      	ldr	r1, [pc, #308]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	68ca      	ldr	r2, [r1, #12]
 8002068:	2003      	movs	r0, #3
 800206a:	4382      	bics	r2, r0
 800206c:	4313      	orrs	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8002070:	f7fe fe66 	bl	8000d40 <HAL_GetTick>
 8002074:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	686b      	ldr	r3, [r5, #4]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d01c      	beq.n	80020b6 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207c:	2b03      	cmp	r3, #3
 800207e:	d028      	beq.n	80020d2 <HAL_RCC_ClockConfig+0xf2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002080:	2b01      	cmp	r3, #1
 8002082:	d034      	beq.n	80020ee <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002084:	4b45      	ldr	r3, [pc, #276]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	220c      	movs	r2, #12
 800208a:	421a      	tst	r2, r3
 800208c:	d03d      	beq.n	800210a <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208e:	f7fe fe57 	bl	8000d40 <HAL_GetTick>
 8002092:	1b80      	subs	r0, r0, r6
 8002094:	4b42      	ldr	r3, [pc, #264]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002096:	4298      	cmp	r0, r3
 8002098:	d9f4      	bls.n	8002084 <HAL_RCC_ClockConfig+0xa4>
          return HAL_TIMEOUT;
 800209a:	2003      	movs	r0, #3
 800209c:	e060      	b.n	8002160 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800209e:	4a3f      	ldr	r2, [pc, #252]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	0192      	lsls	r2, r2, #6
 80020a4:	d4de      	bmi.n	8002064 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80020a6:	2001      	movs	r0, #1
 80020a8:	e05a      	b.n	8002160 <HAL_RCC_ClockConfig+0x180>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020aa:	4a3c      	ldr	r2, [pc, #240]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	0752      	lsls	r2, r2, #29
 80020b0:	d4d8      	bmi.n	8002064 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80020b2:	2001      	movs	r0, #1
 80020b4:	e054      	b.n	8002160 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b6:	4b39      	ldr	r3, [pc, #228]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	230c      	movs	r3, #12
 80020bc:	4013      	ands	r3, r2
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d023      	beq.n	800210a <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c2:	f7fe fe3d 	bl	8000d40 <HAL_GetTick>
 80020c6:	1b80      	subs	r0, r0, r6
 80020c8:	4a35      	ldr	r2, [pc, #212]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 80020ca:	4290      	cmp	r0, r2
 80020cc:	d9f3      	bls.n	80020b6 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 80020ce:	2003      	movs	r0, #3
 80020d0:	e046      	b.n	8002160 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d2:	4b32      	ldr	r3, [pc, #200]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	230c      	movs	r3, #12
 80020d8:	4013      	ands	r3, r2
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d015      	beq.n	800210a <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020de:	f7fe fe2f 	bl	8000d40 <HAL_GetTick>
 80020e2:	1b80      	subs	r0, r0, r6
 80020e4:	4b2e      	ldr	r3, [pc, #184]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 80020e6:	4298      	cmp	r0, r3
 80020e8:	d9f3      	bls.n	80020d2 <HAL_RCC_ClockConfig+0xf2>
          return HAL_TIMEOUT;
 80020ea:	2003      	movs	r0, #3
 80020ec:	e038      	b.n	8002160 <HAL_RCC_ClockConfig+0x180>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ee:	4b2b      	ldr	r3, [pc, #172]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	230c      	movs	r3, #12
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d007      	beq.n	800210a <HAL_RCC_ClockConfig+0x12a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fa:	f7fe fe21 	bl	8000d40 <HAL_GetTick>
 80020fe:	1b80      	subs	r0, r0, r6
 8002100:	4b27      	ldr	r3, [pc, #156]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	4298      	cmp	r0, r3
 8002104:	d9f3      	bls.n	80020ee <HAL_RCC_ClockConfig+0x10e>
          return HAL_TIMEOUT;
 8002106:	2003      	movs	r0, #3
 8002108:	e02a      	b.n	8002160 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800210a:	4b23      	ldr	r3, [pc, #140]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2301      	movs	r3, #1
 8002110:	4013      	ands	r3, r2
 8002112:	42a3      	cmp	r3, r4
 8002114:	d825      	bhi.n	8002162 <HAL_RCC_ClockConfig+0x182>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002116:	682b      	ldr	r3, [r5, #0]
 8002118:	075b      	lsls	r3, r3, #29
 800211a:	d506      	bpl.n	800212a <HAL_RCC_ClockConfig+0x14a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800211c:	4a1f      	ldr	r2, [pc, #124]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	68d3      	ldr	r3, [r2, #12]
 8002120:	4920      	ldr	r1, [pc, #128]	@ (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	400b      	ands	r3, r1
 8002124:	68e9      	ldr	r1, [r5, #12]
 8002126:	430b      	orrs	r3, r1
 8002128:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212a:	682b      	ldr	r3, [r5, #0]
 800212c:	071b      	lsls	r3, r3, #28
 800212e:	d507      	bpl.n	8002140 <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002130:	491a      	ldr	r1, [pc, #104]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	68cb      	ldr	r3, [r1, #12]
 8002134:	4a1c      	ldr	r2, [pc, #112]	@ (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002136:	4013      	ands	r3, r2
 8002138:	692a      	ldr	r2, [r5, #16]
 800213a:	00d2      	lsls	r2, r2, #3
 800213c:	4313      	orrs	r3, r2
 800213e:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002140:	f7ff fc68 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 8002144:	4b15      	ldr	r3, [pc, #84]	@ (800219c <HAL_RCC_ClockConfig+0x1bc>)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	0912      	lsrs	r2, r2, #4
 800214a:	230f      	movs	r3, #15
 800214c:	4013      	ands	r3, r2
 800214e:	4a17      	ldr	r2, [pc, #92]	@ (80021ac <HAL_RCC_ClockConfig+0x1cc>)
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	40d8      	lsrs	r0, r3
 8002154:	4b16      	ldr	r3, [pc, #88]	@ (80021b0 <HAL_RCC_ClockConfig+0x1d0>)
 8002156:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002158:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <HAL_RCC_ClockConfig+0x1d4>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	f7fe fda8 	bl	8000cb0 <HAL_InitTick>
}
 8002160:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4a0d      	ldr	r2, [pc, #52]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	6813      	ldr	r3, [r2, #0]
 8002166:	2101      	movs	r1, #1
 8002168:	438b      	bics	r3, r1
 800216a:	4323      	orrs	r3, r4
 800216c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800216e:	f7fe fde7 	bl	8000d40 <HAL_GetTick>
 8002172:	0006      	movs	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <HAL_RCC_ClockConfig+0x1b8>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2301      	movs	r3, #1
 800217a:	4013      	ands	r3, r2
 800217c:	42a3      	cmp	r3, r4
 800217e:	d0ca      	beq.n	8002116 <HAL_RCC_ClockConfig+0x136>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002180:	f7fe fdde 	bl	8000d40 <HAL_GetTick>
 8002184:	1b80      	subs	r0, r0, r6
 8002186:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	4298      	cmp	r0, r3
 800218a:	d9f3      	bls.n	8002174 <HAL_RCC_ClockConfig+0x194>
        return HAL_TIMEOUT;
 800218c:	2003      	movs	r0, #3
 800218e:	e7e7      	b.n	8002160 <HAL_RCC_ClockConfig+0x180>
    return HAL_ERROR;
 8002190:	2001      	movs	r0, #1
 8002192:	e7e5      	b.n	8002160 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8002194:	2001      	movs	r0, #1
 8002196:	e7e3      	b.n	8002160 <HAL_RCC_ClockConfig+0x180>
 8002198:	40022000 	.word	0x40022000
 800219c:	40021000 	.word	0x40021000
 80021a0:	00001388 	.word	0x00001388
 80021a4:	fffff8ff 	.word	0xfffff8ff
 80021a8:	ffffc7ff 	.word	0xffffc7ff
 80021ac:	08002a74 	.word	0x08002a74
 80021b0:	20000008 	.word	0x20000008
 80021b4:	20000010 	.word	0x20000010

080021b8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021bc:	6803      	ldr	r3, [r0, #0]
 80021be:	069b      	lsls	r3, r3, #26
 80021c0:	d54e      	bpl.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xa8>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80021c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	d474      	bmi.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ca:	4a59      	ldr	r2, [pc, #356]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80021cc:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80021ce:	2380      	movs	r3, #128	@ 0x80
 80021d0:	055b      	lsls	r3, r3, #21
 80021d2:	430b      	orrs	r3, r1
 80021d4:	6393      	str	r3, [r2, #56]	@ 0x38
      pwrclkchanged = SET;
 80021d6:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	4b56      	ldr	r3, [pc, #344]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	05db      	lsls	r3, r3, #23
 80021de:	d56b      	bpl.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80021e0:	4b53      	ldr	r3, [pc, #332]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80021e2:	681b      	ldr	r3, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80021e4:	6862      	ldr	r2, [r4, #4]
 80021e6:	4053      	eors	r3, r2
 80021e8:	21c0      	movs	r1, #192	@ 0xc0
 80021ea:	0389      	lsls	r1, r1, #14
 80021ec:	420b      	tst	r3, r1
 80021ee:	d005      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x44>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80021f0:	23c0      	movs	r3, #192	@ 0xc0
 80021f2:	029b      	lsls	r3, r3, #10
 80021f4:	0011      	movs	r1, r2
 80021f6:	4019      	ands	r1, r3
 80021f8:	4299      	cmp	r1, r3
 80021fa:	d071      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80021fc:	4b4c      	ldr	r3, [pc, #304]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80021fe:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002200:	23c0      	movs	r3, #192	@ 0xc0
 8002202:	029b      	lsls	r3, r3, #10
 8002204:	0008      	movs	r0, r1
 8002206:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002208:	4219      	tst	r1, r3
 800220a:	d015      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x80>
 800220c:	401a      	ands	r2, r3
 800220e:	4282      	cmp	r2, r0
 8002210:	d012      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x80>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	069b      	lsls	r3, r3, #26
 8002216:	d50f      	bpl.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x80>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002218:	4b45      	ldr	r3, [pc, #276]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800221a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800221c:	4946      	ldr	r1, [pc, #280]	@ (8002338 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800221e:	4011      	ands	r1, r2

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002220:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 8002222:	2080      	movs	r0, #128	@ 0x80
 8002224:	0300      	lsls	r0, r0, #12
 8002226:	4328      	orrs	r0, r5
 8002228:	6518      	str	r0, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800222a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800222c:	4d43      	ldr	r5, [pc, #268]	@ (800233c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800222e:	4028      	ands	r0, r5
 8002230:	6518      	str	r0, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002232:	6519      	str	r1, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002234:	05d2      	lsls	r2, r2, #23
 8002236:	d459      	bmi.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x134>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002238:	6823      	ldr	r3, [r4, #0]
 800223a:	069b      	lsls	r3, r3, #26
 800223c:	d50e      	bpl.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800223e:	6863      	ldr	r3, [r4, #4]
 8002240:	22c0      	movs	r2, #192	@ 0xc0
 8002242:	0292      	lsls	r2, r2, #10
 8002244:	0019      	movs	r1, r3
 8002246:	4011      	ands	r1, r2
 8002248:	4291      	cmp	r1, r2
 800224a:	d05e      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x152>
 800224c:	4938      	ldr	r1, [pc, #224]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800224e:	6d0b      	ldr	r3, [r1, #80]	@ 0x50
 8002250:	6862      	ldr	r2, [r4, #4]
 8002252:	20c0      	movs	r0, #192	@ 0xc0
 8002254:	0280      	lsls	r0, r0, #10
 8002256:	4002      	ands	r2, r0
 8002258:	4313      	orrs	r3, r2
 800225a:	650b      	str	r3, [r1, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800225c:	2e01      	cmp	r6, #1
 800225e:	d05e      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x166>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	079b      	lsls	r3, r3, #30
 8002264:	d506      	bpl.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002266:	4a32      	ldr	r2, [pc, #200]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002268:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800226a:	210c      	movs	r1, #12
 800226c:	438b      	bics	r3, r1
 800226e:	68a1      	ldr	r1, [r4, #8]
 8002270:	430b      	orrs	r3, r1
 8002272:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	075b      	lsls	r3, r3, #29
 8002278:	d506      	bpl.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800227a:	4a2d      	ldr	r2, [pc, #180]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800227c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800227e:	4930      	ldr	r1, [pc, #192]	@ (8002340 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002280:	400b      	ands	r3, r1
 8002282:	68e1      	ldr	r1, [r4, #12]
 8002284:	430b      	orrs	r3, r1
 8002286:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	071b      	lsls	r3, r3, #28
 800228c:	d506      	bpl.n	800229c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800228e:	4a28      	ldr	r2, [pc, #160]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002290:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002292:	492c      	ldr	r1, [pc, #176]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002294:	400b      	ands	r3, r1
 8002296:	6921      	ldr	r1, [r4, #16]
 8002298:	430b      	orrs	r3, r1
 800229a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	061b      	lsls	r3, r3, #24
 80022a0:	d543      	bpl.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80022a2:	4a23      	ldr	r2, [pc, #140]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80022a4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80022a6:	4928      	ldr	r1, [pc, #160]	@ (8002348 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80022a8:	400b      	ands	r3, r1
 80022aa:	6961      	ldr	r1, [r4, #20]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  return HAL_OK;
 80022b0:	2000      	movs	r0, #0
 80022b2:	e03b      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x174>
  FlagStatus       pwrclkchanged = RESET;
 80022b4:	2600      	movs	r6, #0
 80022b6:	e78f      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80022ba:	6811      	ldr	r1, [r2, #0]
 80022bc:	2380      	movs	r3, #128	@ 0x80
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80022c4:	f7fe fd3c 	bl	8000d40 <HAL_GetTick>
 80022c8:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	05db      	lsls	r3, r3, #23
 80022d0:	d486      	bmi.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d2:	f7fe fd35 	bl	8000d40 <HAL_GetTick>
 80022d6:	1b40      	subs	r0, r0, r5
 80022d8:	2864      	cmp	r0, #100	@ 0x64
 80022da:	d9f6      	bls.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x112>
          return HAL_TIMEOUT;
 80022dc:	2003      	movs	r0, #3
 80022de:	e025      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x174>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80022e0:	4b13      	ldr	r3, [pc, #76]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	039b      	lsls	r3, r3, #14
 80022e6:	d589      	bpl.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x44>
          return HAL_ERROR;
 80022e8:	2001      	movs	r0, #1
 80022ea:	e01f      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x174>
        tickstart = HAL_GetTick();
 80022ec:	f7fe fd28 	bl	8000d40 <HAL_GetTick>
 80022f0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80022f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022f6:	059b      	lsls	r3, r3, #22
 80022f8:	d49e      	bmi.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x80>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7fe fd21 	bl	8000d40 <HAL_GetTick>
 80022fe:	1b40      	subs	r0, r0, r5
 8002300:	4b12      	ldr	r3, [pc, #72]	@ (800234c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002302:	4298      	cmp	r0, r3
 8002304:	d9f5      	bls.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
            return HAL_TIMEOUT;
 8002306:	2003      	movs	r0, #3
 8002308:	e010      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x174>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800230a:	4909      	ldr	r1, [pc, #36]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800230c:	680a      	ldr	r2, [r1, #0]
 800230e:	4810      	ldr	r0, [pc, #64]	@ (8002350 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002310:	4002      	ands	r2, r0
 8002312:	20c0      	movs	r0, #192	@ 0xc0
 8002314:	0380      	lsls	r0, r0, #14
 8002316:	4003      	ands	r3, r0
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]
 800231c:	e796      	b.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PWR_CLK_DISABLE();
 800231e:	4a04      	ldr	r2, [pc, #16]	@ (8002330 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002320:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8002322:	490c      	ldr	r1, [pc, #48]	@ (8002354 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002324:	400b      	ands	r3, r1
 8002326:	6393      	str	r3, [r2, #56]	@ 0x38
 8002328:	e79a      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  return HAL_OK;
 800232a:	2000      	movs	r0, #0
}
 800232c:	bd70      	pop	{r4, r5, r6, pc}
 800232e:	46c0      	nop			@ (mov r8, r8)
 8002330:	40021000 	.word	0x40021000
 8002334:	40007000 	.word	0x40007000
 8002338:	fffcffff 	.word	0xfffcffff
 800233c:	fff7ffff 	.word	0xfff7ffff
 8002340:	fffff3ff 	.word	0xfffff3ff
 8002344:	ffffcfff 	.word	0xffffcfff
 8002348:	fff3ffff 	.word	0xfff3ffff
 800234c:	00001388 	.word	0x00001388
 8002350:	ffcfffff 	.word	0xffcfffff
 8002354:	efffffff 	.word	0xefffffff

08002358 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800235c:	6803      	ldr	r3, [r0, #0]
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <HAL_RTC_WaitForSynchro+0x30>)
 8002360:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002362:	f7fe fced 	bl	8000d40 <HAL_GetTick>
 8002366:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	069b      	lsls	r3, r3, #26
 800236e:	d408      	bmi.n	8002382 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002370:	f7fe fce6 	bl	8000d40 <HAL_GetTick>
 8002374:	1b40      	subs	r0, r0, r5
 8002376:	23fa      	movs	r3, #250	@ 0xfa
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4298      	cmp	r0, r3
 800237c:	d9f4      	bls.n	8002368 <HAL_RTC_WaitForSynchro+0x10>
    {
      return HAL_TIMEOUT;
 800237e:	2003      	movs	r0, #3
 8002380:	e000      	b.n	8002384 <HAL_RTC_WaitForSynchro+0x2c>
    }
  }

  return HAL_OK;
 8002382:	2000      	movs	r0, #0
}
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	0001ff5f 	.word	0x0001ff5f

0800238c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800238c:	b570      	push	{r4, r5, r6, lr}
 800238e:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002390:	6802      	ldr	r2, [r0, #0]
 8002392:	68d3      	ldr	r3, [r2, #12]
 8002394:	065b      	lsls	r3, r3, #25
 8002396:	d502      	bpl.n	800239e <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 800239a:	0028      	movs	r0, r5
 800239c:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800239e:	68d3      	ldr	r3, [r2, #12]
 80023a0:	2180      	movs	r1, #128	@ 0x80
 80023a2:	430b      	orrs	r3, r1
 80023a4:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80023a6:	f7fe fccb 	bl	8000d40 <HAL_GetTick>
 80023aa:	0006      	movs	r6, r0
  HAL_StatusTypeDef status = HAL_OK;
 80023ac:	2500      	movs	r5, #0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	065b      	lsls	r3, r3, #25
 80023b4:	d4f1      	bmi.n	800239a <RTC_EnterInitMode+0xe>
 80023b6:	2d01      	cmp	r5, #1
 80023b8:	d0ef      	beq.n	800239a <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023ba:	f7fe fcc1 	bl	8000d40 <HAL_GetTick>
 80023be:	1b80      	subs	r0, r0, r6
 80023c0:	22fa      	movs	r2, #250	@ 0xfa
 80023c2:	0092      	lsls	r2, r2, #2
 80023c4:	4290      	cmp	r0, r2
 80023c6:	d9f2      	bls.n	80023ae <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_ERROR;
 80023c8:	2321      	movs	r3, #33	@ 0x21
 80023ca:	2204      	movs	r2, #4
 80023cc:	54e2      	strb	r2, [r4, r3]
        status = HAL_ERROR;
 80023ce:	2501      	movs	r5, #1
 80023d0:	e7ed      	b.n	80023ae <RTC_EnterInitMode+0x22>

080023d2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80023d2:	b510      	push	{r4, lr}
 80023d4:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80023d6:	6802      	ldr	r2, [r0, #0]
 80023d8:	68d3      	ldr	r3, [r2, #12]
 80023da:	2180      	movs	r1, #128	@ 0x80
 80023dc:	438b      	bics	r3, r1
 80023de:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80023e0:	6803      	ldr	r3, [r0, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	069b      	lsls	r3, r3, #26
 80023e6:	d501      	bpl.n	80023ec <RTC_ExitInitMode+0x1a>
  HAL_StatusTypeDef status = HAL_OK;
 80023e8:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 80023ea:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023ec:	f7ff ffb4 	bl	8002358 <HAL_RTC_WaitForSynchro>
 80023f0:	2800      	cmp	r0, #0
 80023f2:	d0fa      	beq.n	80023ea <RTC_ExitInitMode+0x18>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80023f4:	2321      	movs	r3, #33	@ 0x21
 80023f6:	2204      	movs	r2, #4
 80023f8:	54e2      	strb	r2, [r4, r3]
      status = HAL_ERROR;
 80023fa:	2001      	movs	r0, #1
 80023fc:	e7f5      	b.n	80023ea <RTC_ExitInitMode+0x18>
	...

08002400 <HAL_RTC_Init>:
{
 8002400:	b570      	push	{r4, r5, r6, lr}
 8002402:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 8002404:	d04e      	beq.n	80024a4 <HAL_RTC_Init+0xa4>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002406:	2321      	movs	r3, #33	@ 0x21
 8002408:	5cc3      	ldrb	r3, [r0, r3]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_RTC_Init+0x26>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800240e:	2321      	movs	r3, #33	@ 0x21
 8002410:	2202      	movs	r2, #2
 8002412:	54e2      	strb	r2, [r4, r3]
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002414:	6822      	ldr	r2, [r4, #0]
 8002416:	68d3      	ldr	r3, [r2, #12]
 8002418:	06db      	lsls	r3, r3, #27
 800241a:	d50a      	bpl.n	8002432 <HAL_RTC_Init+0x32>
    status = HAL_OK;
 800241c:	2000      	movs	r0, #0
    hrtc->State = HAL_RTC_STATE_READY;
 800241e:	2321      	movs	r3, #33	@ 0x21
 8002420:	2201      	movs	r2, #1
 8002422:	54e2      	strb	r2, [r4, r3]
}
 8002424:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8002426:	3320      	adds	r3, #32
 8002428:	2200      	movs	r2, #0
 800242a:	54c2      	strb	r2, [r0, r3]
    HAL_RTC_MspInit(hrtc);
 800242c:	f7fe fb8e 	bl	8000b4c <HAL_RTC_MspInit>
 8002430:	e7ed      	b.n	800240e <HAL_RTC_Init+0xe>
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002432:	23ca      	movs	r3, #202	@ 0xca
 8002434:	6253      	str	r3, [r2, #36]	@ 0x24
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	2253      	movs	r2, #83	@ 0x53
 800243a:	625a      	str	r2, [r3, #36]	@ 0x24
    status = RTC_EnterInitMode(hrtc);
 800243c:	0020      	movs	r0, r4
 800243e:	f7ff ffa5 	bl	800238c <RTC_EnterInitMode>
    if (status == HAL_OK)
 8002442:	2800      	cmp	r0, #0
 8002444:	d005      	beq.n	8002452 <HAL_RTC_Init+0x52>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	22ff      	movs	r2, #255	@ 0xff
 800244a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (status == HAL_OK)
 800244c:	2800      	cmp	r0, #0
 800244e:	d1e9      	bne.n	8002424 <HAL_RTC_Init+0x24>
 8002450:	e7e5      	b.n	800241e <HAL_RTC_Init+0x1e>
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002452:	6822      	ldr	r2, [r4, #0]
 8002454:	6893      	ldr	r3, [r2, #8]
 8002456:	4914      	ldr	r1, [pc, #80]	@ (80024a8 <HAL_RTC_Init+0xa8>)
 8002458:	400b      	ands	r3, r1
 800245a:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800245c:	6821      	ldr	r1, [r4, #0]
 800245e:	688a      	ldr	r2, [r1, #8]
 8002460:	6863      	ldr	r3, [r4, #4]
 8002462:	6920      	ldr	r0, [r4, #16]
 8002464:	4303      	orrs	r3, r0
 8002466:	69a0      	ldr	r0, [r4, #24]
 8002468:	4303      	orrs	r3, r0
 800246a:	4313      	orrs	r3, r2
 800246c:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	68e2      	ldr	r2, [r4, #12]
 8002472:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002474:	6821      	ldr	r1, [r4, #0]
 8002476:	690b      	ldr	r3, [r1, #16]
 8002478:	68a2      	ldr	r2, [r4, #8]
 800247a:	0412      	lsls	r2, r2, #16
 800247c:	4313      	orrs	r3, r2
 800247e:	610b      	str	r3, [r1, #16]
      status = RTC_ExitInitMode(hrtc);
 8002480:	0020      	movs	r0, r4
 8002482:	f7ff ffa6 	bl	80023d2 <RTC_ExitInitMode>
    if (status == HAL_OK)
 8002486:	2800      	cmp	r0, #0
 8002488:	d1dd      	bne.n	8002446 <HAL_RTC_Init+0x46>
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800248a:	6822      	ldr	r2, [r4, #0]
 800248c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800248e:	2103      	movs	r1, #3
 8002490:	438b      	bics	r3, r1
 8002492:	64d3      	str	r3, [r2, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002494:	6821      	ldr	r1, [r4, #0]
 8002496:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8002498:	69e2      	ldr	r2, [r4, #28]
 800249a:	6965      	ldr	r5, [r4, #20]
 800249c:	432a      	orrs	r2, r5
 800249e:	4313      	orrs	r3, r2
 80024a0:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80024a2:	e7d0      	b.n	8002446 <HAL_RTC_Init+0x46>
    return HAL_ERROR;
 80024a4:	2001      	movs	r0, #1
 80024a6:	e7bd      	b.n	8002424 <HAL_RTC_Init+0x24>
 80024a8:	ff8fffbf 	.word	0xff8fffbf

080024ac <TIM_Base_SetConfig>:
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ac:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ae:	2280      	movs	r2, #128	@ 0x80
 80024b0:	05d2      	lsls	r2, r2, #23
 80024b2:	4290      	cmp	r0, r2
 80024b4:	d005      	beq.n	80024c2 <TIM_Base_SetConfig+0x16>
 80024b6:	4a12      	ldr	r2, [pc, #72]	@ (8002500 <TIM_Base_SetConfig+0x54>)
 80024b8:	4290      	cmp	r0, r2
 80024ba:	d002      	beq.n	80024c2 <TIM_Base_SetConfig+0x16>
 80024bc:	4a11      	ldr	r2, [pc, #68]	@ (8002504 <TIM_Base_SetConfig+0x58>)
 80024be:	4290      	cmp	r0, r2
 80024c0:	d103      	bne.n	80024ca <TIM_Base_SetConfig+0x1e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024c2:	2270      	movs	r2, #112	@ 0x70
 80024c4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80024c6:	684a      	ldr	r2, [r1, #4]
 80024c8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ca:	2280      	movs	r2, #128	@ 0x80
 80024cc:	05d2      	lsls	r2, r2, #23
 80024ce:	4290      	cmp	r0, r2
 80024d0:	d005      	beq.n	80024de <TIM_Base_SetConfig+0x32>
 80024d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002500 <TIM_Base_SetConfig+0x54>)
 80024d4:	4290      	cmp	r0, r2
 80024d6:	d002      	beq.n	80024de <TIM_Base_SetConfig+0x32>
 80024d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002504 <TIM_Base_SetConfig+0x58>)
 80024da:	4290      	cmp	r0, r2
 80024dc:	d103      	bne.n	80024e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024de:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <TIM_Base_SetConfig+0x5c>)
 80024e0:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024e2:	68ca      	ldr	r2, [r1, #12]
 80024e4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e6:	2280      	movs	r2, #128	@ 0x80
 80024e8:	4393      	bics	r3, r2
 80024ea:	690a      	ldr	r2, [r1, #16]
 80024ec:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80024ee:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f0:	688b      	ldr	r3, [r1, #8]
 80024f2:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f4:	680b      	ldr	r3, [r1, #0]
 80024f6:	6283      	str	r3, [r0, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024f8:	2301      	movs	r3, #1
 80024fa:	6143      	str	r3, [r0, #20]
}
 80024fc:	4770      	bx	lr
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	40010800 	.word	0x40010800
 8002504:	40011400 	.word	0x40011400
 8002508:	fffffcff 	.word	0xfffffcff

0800250c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800250c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800250e:	6a03      	ldr	r3, [r0, #32]
 8002510:	2201      	movs	r2, #1
 8002512:	4393      	bics	r3, r2
 8002514:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002516:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002518:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800251a:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800251c:	3272      	adds	r2, #114	@ 0x72
 800251e:	4393      	bics	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002520:	680a      	ldr	r2, [r1, #0]
 8002522:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002524:	2302      	movs	r3, #2
 8002526:	439c      	bics	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002528:	688b      	ldr	r3, [r1, #8]
 800252a:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800252c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800252e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002530:	684a      	ldr	r2, [r1, #4]
 8002532:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002534:	6203      	str	r3, [r0, #32]
}
 8002536:	bd30      	pop	{r4, r5, pc}

08002538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002538:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800253a:	6a03      	ldr	r3, [r0, #32]
 800253c:	2210      	movs	r2, #16
 800253e:	4393      	bics	r3, r2
 8002540:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002542:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002544:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002546:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002548:	4a07      	ldr	r2, [pc, #28]	@ (8002568 <TIM_OC2_SetConfig+0x30>)
 800254a:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800254c:	680a      	ldr	r2, [r1, #0]
 800254e:	0212      	lsls	r2, r2, #8
 8002550:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002552:	2320      	movs	r3, #32
 8002554:	439c      	bics	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002556:	688b      	ldr	r3, [r1, #8]
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800255c:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800255e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002560:	684a      	ldr	r2, [r1, #4]
 8002562:	6382      	str	r2, [r0, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002564:	6203      	str	r3, [r0, #32]
}
 8002566:	bd30      	pop	{r4, r5, pc}
 8002568:	ffff8cff 	.word	0xffff8cff

0800256c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800256c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800256e:	6a03      	ldr	r3, [r0, #32]
 8002570:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <TIM_OC3_SetConfig+0x30>)
 8002572:	4013      	ands	r3, r2
 8002574:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002576:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002578:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800257a:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800257c:	3275      	adds	r2, #117	@ 0x75
 800257e:	32ff      	adds	r2, #255	@ 0xff
 8002580:	4393      	bics	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002582:	680a      	ldr	r2, [r1, #0]
 8002584:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002586:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <TIM_OC3_SetConfig+0x34>)
 8002588:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800258a:	688b      	ldr	r3, [r1, #8]
 800258c:	021b      	lsls	r3, r3, #8
 800258e:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002590:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002592:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002594:	684a      	ldr	r2, [r1, #4]
 8002596:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002598:	6203      	str	r3, [r0, #32]
}
 800259a:	bd30      	pop	{r4, r5, pc}
 800259c:	fffffeff 	.word	0xfffffeff
 80025a0:	fffffdff 	.word	0xfffffdff

080025a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025a4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025a6:	6a03      	ldr	r3, [r0, #32]
 80025a8:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <TIM_OC4_SetConfig+0x30>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ae:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b0:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025b2:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025b4:	4a08      	ldr	r2, [pc, #32]	@ (80025d8 <TIM_OC4_SetConfig+0x34>)
 80025b6:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025b8:	680a      	ldr	r2, [r1, #0]
 80025ba:	0212      	lsls	r2, r2, #8
 80025bc:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025be:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <TIM_OC4_SetConfig+0x38>)
 80025c0:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025c2:	688b      	ldr	r3, [r1, #8]
 80025c4:	031b      	lsls	r3, r3, #12
 80025c6:	4323      	orrs	r3, r4

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025ca:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025cc:	684a      	ldr	r2, [r1, #4]
 80025ce:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d0:	6203      	str	r3, [r0, #32]
}
 80025d2:	bd30      	pop	{r4, r5, pc}
 80025d4:	ffffefff 	.word	0xffffefff
 80025d8:	ffff8cff 	.word	0xffff8cff
 80025dc:	ffffdfff 	.word	0xffffdfff

080025e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025e2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025e4:	6a04      	ldr	r4, [r0, #32]
 80025e6:	2501      	movs	r5, #1
 80025e8:	43ac      	bics	r4, r5
 80025ea:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ec:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ee:	35ef      	adds	r5, #239	@ 0xef
 80025f0:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025f2:	0112      	lsls	r2, r2, #4
 80025f4:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025f6:	240a      	movs	r4, #10
 80025f8:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 80025fa:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025fc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80025fe:	6203      	str	r3, [r0, #32]
}
 8002600:	bd30      	pop	{r4, r5, pc}
	...

08002604 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002604:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002606:	6a03      	ldr	r3, [r0, #32]
 8002608:	2410      	movs	r4, #16
 800260a:	43a3      	bics	r3, r4
 800260c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800260e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002610:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002612:	4d05      	ldr	r5, [pc, #20]	@ (8002628 <TIM_TI2_ConfigInputStage+0x24>)
 8002614:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002616:	0312      	lsls	r2, r2, #12
 8002618:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800261a:	24a0      	movs	r4, #160	@ 0xa0
 800261c:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 800261e:	0109      	lsls	r1, r1, #4
 8002620:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002622:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002624:	6201      	str	r1, [r0, #32]
}
 8002626:	bd30      	pop	{r4, r5, pc}
 8002628:	ffff0fff 	.word	0xffff0fff

0800262c <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800262c:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800262e:	2270      	movs	r2, #112	@ 0x70
 8002630:	4393      	bics	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002632:	430b      	orrs	r3, r1
 8002634:	3a69      	subs	r2, #105	@ 0x69
 8002636:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002638:	6083      	str	r3, [r0, #8]
}
 800263a:	4770      	bx	lr

0800263c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800263c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800263e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002640:	4d03      	ldr	r5, [pc, #12]	@ (8002650 <TIM_ETR_SetConfig+0x14>)
 8002642:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	4313      	orrs	r3, r2
 8002648:	430b      	orrs	r3, r1
 800264a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800264c:	6083      	str	r3, [r0, #8]
}
 800264e:	bd30      	pop	{r4, r5, pc}
 8002650:	ffff00ff 	.word	0xffff00ff

08002654 <HAL_TIM_Base_MspInit>:
}
 8002654:	4770      	bx	lr

08002656 <HAL_TIM_Base_Init>:
{
 8002656:	b570      	push	{r4, r5, r6, lr}
 8002658:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800265a:	d01e      	beq.n	800269a <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 800265c:	2339      	movs	r3, #57	@ 0x39
 800265e:	5cc3      	ldrb	r3, [r0, r3]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d014      	beq.n	800268e <HAL_TIM_Base_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	2539      	movs	r5, #57	@ 0x39
 8002666:	2302      	movs	r3, #2
 8002668:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800266a:	0021      	movs	r1, r4
 800266c:	c901      	ldmia	r1!, {r0}
 800266e:	f7ff ff1d 	bl	80024ac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002672:	2301      	movs	r3, #1
 8002674:	223e      	movs	r2, #62	@ 0x3e
 8002676:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	3a04      	subs	r2, #4
 800267a:	54a3      	strb	r3, [r4, r2]
 800267c:	3201      	adds	r2, #1
 800267e:	54a3      	strb	r3, [r4, r2]
 8002680:	3201      	adds	r2, #1
 8002682:	54a3      	strb	r3, [r4, r2]
 8002684:	3201      	adds	r2, #1
 8002686:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8002688:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800268a:	2000      	movs	r0, #0
}
 800268c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800268e:	3338      	adds	r3, #56	@ 0x38
 8002690:	2200      	movs	r2, #0
 8002692:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8002694:	f7ff ffde 	bl	8002654 <HAL_TIM_Base_MspInit>
 8002698:	e7e4      	b.n	8002664 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 800269a:	2001      	movs	r0, #1
 800269c:	e7f6      	b.n	800268c <HAL_TIM_Base_Init+0x36>
	...

080026a0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80026a0:	2339      	movs	r3, #57	@ 0x39
 80026a2:	5cc3      	ldrb	r3, [r0, r3]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d11e      	bne.n	80026e6 <HAL_TIM_Base_Start+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	3338      	adds	r3, #56	@ 0x38
 80026aa:	2202      	movs	r2, #2
 80026ac:	54c2      	strb	r2, [r0, r3]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ae:	6803      	ldr	r3, [r0, #0]
 80026b0:	2280      	movs	r2, #128	@ 0x80
 80026b2:	05d2      	lsls	r2, r2, #23
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d00b      	beq.n	80026d0 <HAL_TIM_Base_Start+0x30>
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <HAL_TIM_Base_Start+0x50>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d008      	beq.n	80026d0 <HAL_TIM_Base_Start+0x30>
 80026be:	4a0d      	ldr	r2, [pc, #52]	@ (80026f4 <HAL_TIM_Base_Start+0x54>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d005      	beq.n	80026d0 <HAL_TIM_Base_Start+0x30>
    __HAL_TIM_ENABLE(htim);
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	2101      	movs	r1, #1
 80026c8:	430a      	orrs	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80026cc:	2000      	movs	r0, #0
 80026ce:	e00b      	b.n	80026e8 <HAL_TIM_Base_Start+0x48>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026d0:	6899      	ldr	r1, [r3, #8]
 80026d2:	2207      	movs	r2, #7
 80026d4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d6:	2a06      	cmp	r2, #6
 80026d8:	d007      	beq.n	80026ea <HAL_TIM_Base_Start+0x4a>
      __HAL_TIM_ENABLE(htim);
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	2101      	movs	r1, #1
 80026de:	430a      	orrs	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80026e2:	2000      	movs	r0, #0
 80026e4:	e000      	b.n	80026e8 <HAL_TIM_Base_Start+0x48>
    return HAL_ERROR;
 80026e6:	2001      	movs	r0, #1
}
 80026e8:	4770      	bx	lr
  return HAL_OK;
 80026ea:	2000      	movs	r0, #0
 80026ec:	e7fc      	b.n	80026e8 <HAL_TIM_Base_Start+0x48>
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	40010800 	.word	0x40010800
 80026f4:	40011400 	.word	0x40011400

080026f8 <HAL_TIM_OC_MspInit>:
}
 80026f8:	4770      	bx	lr

080026fa <HAL_TIM_OC_Init>:
{
 80026fa:	b570      	push	{r4, r5, r6, lr}
 80026fc:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80026fe:	d01e      	beq.n	800273e <HAL_TIM_OC_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002700:	2339      	movs	r3, #57	@ 0x39
 8002702:	5cc3      	ldrb	r3, [r0, r3]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d014      	beq.n	8002732 <HAL_TIM_OC_Init+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	2539      	movs	r5, #57	@ 0x39
 800270a:	2302      	movs	r3, #2
 800270c:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800270e:	0021      	movs	r1, r4
 8002710:	c901      	ldmia	r1!, {r0}
 8002712:	f7ff fecb 	bl	80024ac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002716:	2301      	movs	r3, #1
 8002718:	223e      	movs	r2, #62	@ 0x3e
 800271a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271c:	3a04      	subs	r2, #4
 800271e:	54a3      	strb	r3, [r4, r2]
 8002720:	3201      	adds	r2, #1
 8002722:	54a3      	strb	r3, [r4, r2]
 8002724:	3201      	adds	r2, #1
 8002726:	54a3      	strb	r3, [r4, r2]
 8002728:	3201      	adds	r2, #1
 800272a:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800272c:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800272e:	2000      	movs	r0, #0
}
 8002730:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002732:	3338      	adds	r3, #56	@ 0x38
 8002734:	2200      	movs	r2, #0
 8002736:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_OC_MspInit(htim);
 8002738:	f7ff ffde 	bl	80026f8 <HAL_TIM_OC_MspInit>
 800273c:	e7e4      	b.n	8002708 <HAL_TIM_OC_Init+0xe>
    return HAL_ERROR;
 800273e:	2001      	movs	r0, #1
 8002740:	e7f6      	b.n	8002730 <HAL_TIM_OC_Init+0x36>

08002742 <HAL_TIM_OC_ConfigChannel>:
{
 8002742:	b510      	push	{r4, lr}
 8002744:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8002746:	2338      	movs	r3, #56	@ 0x38
 8002748:	5cc3      	ldrb	r3, [r0, r3]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d024      	beq.n	8002798 <HAL_TIM_OC_ConfigChannel+0x56>
 800274e:	2338      	movs	r3, #56	@ 0x38
 8002750:	2001      	movs	r0, #1
 8002752:	54e0      	strb	r0, [r4, r3]
  switch (Channel)
 8002754:	2a08      	cmp	r2, #8
 8002756:	d01a      	beq.n	800278e <HAL_TIM_OC_ConfigChannel+0x4c>
 8002758:	d808      	bhi.n	800276c <HAL_TIM_OC_ConfigChannel+0x2a>
 800275a:	2a00      	cmp	r2, #0
 800275c:	d012      	beq.n	8002784 <HAL_TIM_OC_ConfigChannel+0x42>
 800275e:	2a04      	cmp	r2, #4
 8002760:	d10c      	bne.n	800277c <HAL_TIM_OC_ConfigChannel+0x3a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002762:	6820      	ldr	r0, [r4, #0]
 8002764:	f7ff fee8 	bl	8002538 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002768:	2000      	movs	r0, #0
      break;
 800276a:	e007      	b.n	800277c <HAL_TIM_OC_ConfigChannel+0x3a>
  switch (Channel)
 800276c:	2a0c      	cmp	r2, #12
 800276e:	d104      	bne.n	800277a <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002770:	6820      	ldr	r0, [r4, #0]
 8002772:	f7ff ff17 	bl	80025a4 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002776:	2000      	movs	r0, #0
      break;
 8002778:	e000      	b.n	800277c <HAL_TIM_OC_ConfigChannel+0x3a>
  switch (Channel)
 800277a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800277c:	2338      	movs	r3, #56	@ 0x38
 800277e:	2200      	movs	r2, #0
 8002780:	54e2      	strb	r2, [r4, r3]
}
 8002782:	bd10      	pop	{r4, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002784:	6820      	ldr	r0, [r4, #0]
 8002786:	f7ff fec1 	bl	800250c <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800278a:	2000      	movs	r0, #0
      break;
 800278c:	e7f6      	b.n	800277c <HAL_TIM_OC_ConfigChannel+0x3a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	f7ff feec 	bl	800256c <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002794:	2000      	movs	r0, #0
      break;
 8002796:	e7f1      	b.n	800277c <HAL_TIM_OC_ConfigChannel+0x3a>
  __HAL_LOCK(htim);
 8002798:	2002      	movs	r0, #2
 800279a:	e7f2      	b.n	8002782 <HAL_TIM_OC_ConfigChannel+0x40>

0800279c <HAL_TIM_PWM_ConfigChannel>:
{
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	0004      	movs	r4, r0
 80027a0:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80027a2:	2338      	movs	r3, #56	@ 0x38
 80027a4:	5cc3      	ldrb	r3, [r0, r3]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d100      	bne.n	80027ac <HAL_TIM_PWM_ConfigChannel+0x10>
 80027aa:	e06a      	b.n	8002882 <HAL_TIM_PWM_ConfigChannel+0xe6>
 80027ac:	2338      	movs	r3, #56	@ 0x38
 80027ae:	2101      	movs	r1, #1
 80027b0:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 80027b2:	2a08      	cmp	r2, #8
 80027b4:	d050      	beq.n	8002858 <HAL_TIM_PWM_ConfigChannel+0xbc>
 80027b6:	d81c      	bhi.n	80027f2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80027b8:	2a00      	cmp	r2, #0
 80027ba:	d038      	beq.n	800282e <HAL_TIM_PWM_ConfigChannel+0x92>
 80027bc:	2a04      	cmp	r2, #4
 80027be:	d116      	bne.n	80027ee <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027c0:	6800      	ldr	r0, [r0, #0]
 80027c2:	0029      	movs	r1, r5
 80027c4:	f7ff feb8 	bl	8002538 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027c8:	6822      	ldr	r2, [r4, #0]
 80027ca:	6991      	ldr	r1, [r2, #24]
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027d4:	6822      	ldr	r2, [r4, #0]
 80027d6:	6993      	ldr	r3, [r2, #24]
 80027d8:	492b      	ldr	r1, [pc, #172]	@ (8002888 <HAL_TIM_PWM_ConfigChannel+0xec>)
 80027da:	400b      	ands	r3, r1
 80027dc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027de:	6821      	ldr	r1, [r4, #0]
 80027e0:	698b      	ldr	r3, [r1, #24]
 80027e2:	68ea      	ldr	r2, [r5, #12]
 80027e4:	0212      	lsls	r2, r2, #8
 80027e6:	4313      	orrs	r3, r2
 80027e8:	618b      	str	r3, [r1, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80027ea:	2000      	movs	r0, #0
      break;
 80027ec:	e01b      	b.n	8002826 <HAL_TIM_PWM_ConfigChannel+0x8a>
  switch (Channel)
 80027ee:	0008      	movs	r0, r1
 80027f0:	e019      	b.n	8002826 <HAL_TIM_PWM_ConfigChannel+0x8a>
 80027f2:	2a0c      	cmp	r2, #12
 80027f4:	d116      	bne.n	8002824 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027f6:	6800      	ldr	r0, [r0, #0]
 80027f8:	0029      	movs	r1, r5
 80027fa:	f7ff fed3 	bl	80025a4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027fe:	6822      	ldr	r2, [r4, #0]
 8002800:	69d1      	ldr	r1, [r2, #28]
 8002802:	2380      	movs	r3, #128	@ 0x80
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	430b      	orrs	r3, r1
 8002808:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800280a:	6822      	ldr	r2, [r4, #0]
 800280c:	69d3      	ldr	r3, [r2, #28]
 800280e:	491e      	ldr	r1, [pc, #120]	@ (8002888 <HAL_TIM_PWM_ConfigChannel+0xec>)
 8002810:	400b      	ands	r3, r1
 8002812:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002814:	6821      	ldr	r1, [r4, #0]
 8002816:	69cb      	ldr	r3, [r1, #28]
 8002818:	68ea      	ldr	r2, [r5, #12]
 800281a:	0212      	lsls	r2, r2, #8
 800281c:	4313      	orrs	r3, r2
 800281e:	61cb      	str	r3, [r1, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8002820:	2000      	movs	r0, #0
      break;
 8002822:	e000      	b.n	8002826 <HAL_TIM_PWM_ConfigChannel+0x8a>
  switch (Channel)
 8002824:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8002826:	2338      	movs	r3, #56	@ 0x38
 8002828:	2200      	movs	r2, #0
 800282a:	54e2      	strb	r2, [r4, r3]
}
 800282c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800282e:	6800      	ldr	r0, [r0, #0]
 8002830:	0029      	movs	r1, r5
 8002832:	f7ff fe6b 	bl	800250c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002836:	6822      	ldr	r2, [r4, #0]
 8002838:	6993      	ldr	r3, [r2, #24]
 800283a:	2108      	movs	r1, #8
 800283c:	430b      	orrs	r3, r1
 800283e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002840:	6822      	ldr	r2, [r4, #0]
 8002842:	6993      	ldr	r3, [r2, #24]
 8002844:	3904      	subs	r1, #4
 8002846:	438b      	bics	r3, r1
 8002848:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800284a:	6822      	ldr	r2, [r4, #0]
 800284c:	6993      	ldr	r3, [r2, #24]
 800284e:	68e9      	ldr	r1, [r5, #12]
 8002850:	430b      	orrs	r3, r1
 8002852:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002854:	2000      	movs	r0, #0
      break;
 8002856:	e7e6      	b.n	8002826 <HAL_TIM_PWM_ConfigChannel+0x8a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002858:	6800      	ldr	r0, [r0, #0]
 800285a:	0029      	movs	r1, r5
 800285c:	f7ff fe86 	bl	800256c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002860:	6822      	ldr	r2, [r4, #0]
 8002862:	69d3      	ldr	r3, [r2, #28]
 8002864:	2108      	movs	r1, #8
 8002866:	430b      	orrs	r3, r1
 8002868:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800286a:	6822      	ldr	r2, [r4, #0]
 800286c:	69d3      	ldr	r3, [r2, #28]
 800286e:	3904      	subs	r1, #4
 8002870:	438b      	bics	r3, r1
 8002872:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002874:	6822      	ldr	r2, [r4, #0]
 8002876:	69d3      	ldr	r3, [r2, #28]
 8002878:	68e9      	ldr	r1, [r5, #12]
 800287a:	430b      	orrs	r3, r1
 800287c:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800287e:	2000      	movs	r0, #0
      break;
 8002880:	e7d1      	b.n	8002826 <HAL_TIM_PWM_ConfigChannel+0x8a>
  __HAL_LOCK(htim);
 8002882:	2002      	movs	r0, #2
 8002884:	e7d2      	b.n	800282c <HAL_TIM_PWM_ConfigChannel+0x90>
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	fffffbff 	.word	0xfffffbff

0800288c <HAL_TIM_ConfigClockSource>:
{
 800288c:	b510      	push	{r4, lr}
 800288e:	0004      	movs	r4, r0
 8002890:	0008      	movs	r0, r1
  __HAL_LOCK(htim);
 8002892:	2338      	movs	r3, #56	@ 0x38
 8002894:	5ce3      	ldrb	r3, [r4, r3]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d100      	bne.n	800289c <HAL_TIM_ConfigClockSource+0x10>
 800289a:	e077      	b.n	800298c <HAL_TIM_ConfigClockSource+0x100>
 800289c:	2338      	movs	r3, #56	@ 0x38
 800289e:	2201      	movs	r2, #1
 80028a0:	54e2      	strb	r2, [r4, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80028a2:	3301      	adds	r3, #1
 80028a4:	3201      	adds	r2, #1
 80028a6:	54e2      	strb	r2, [r4, r3]
  tmpsmcr = htim->Instance->SMCR;
 80028a8:	6822      	ldr	r2, [r4, #0]
 80028aa:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ac:	4938      	ldr	r1, [pc, #224]	@ (8002990 <HAL_TIM_ConfigClockSource+0x104>)
 80028ae:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 80028b0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80028b2:	6801      	ldr	r1, [r0, #0]
 80028b4:	2960      	cmp	r1, #96	@ 0x60
 80028b6:	d04f      	beq.n	8002958 <HAL_TIM_ConfigClockSource+0xcc>
 80028b8:	d829      	bhi.n	800290e <HAL_TIM_ConfigClockSource+0x82>
 80028ba:	2940      	cmp	r1, #64	@ 0x40
 80028bc:	d057      	beq.n	800296e <HAL_TIM_ConfigClockSource+0xe2>
 80028be:	d90c      	bls.n	80028da <HAL_TIM_ConfigClockSource+0x4e>
 80028c0:	2950      	cmp	r1, #80	@ 0x50
 80028c2:	d122      	bne.n	800290a <HAL_TIM_ConfigClockSource+0x7e>
                               sClockSourceConfig->ClockPolarity,
 80028c4:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 80028c6:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c8:	6820      	ldr	r0, [r4, #0]
 80028ca:	f7ff fe89 	bl	80025e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028ce:	6820      	ldr	r0, [r4, #0]
 80028d0:	2150      	movs	r1, #80	@ 0x50
 80028d2:	f7ff feab 	bl	800262c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80028d6:	2000      	movs	r0, #0
      break;
 80028d8:	e005      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80028da:	2920      	cmp	r1, #32
 80028dc:	d00e      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x70>
 80028de:	d909      	bls.n	80028f4 <HAL_TIM_ConfigClockSource+0x68>
 80028e0:	2930      	cmp	r1, #48	@ 0x30
 80028e2:	d00b      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x70>
      status = HAL_ERROR;
 80028e4:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80028e6:	2339      	movs	r3, #57	@ 0x39
 80028e8:	2201      	movs	r2, #1
 80028ea:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80028ec:	3b01      	subs	r3, #1
 80028ee:	2200      	movs	r2, #0
 80028f0:	54e2      	strb	r2, [r4, r3]
}
 80028f2:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80028f4:	2900      	cmp	r1, #0
 80028f6:	d001      	beq.n	80028fc <HAL_TIM_ConfigClockSource+0x70>
 80028f8:	2910      	cmp	r1, #16
 80028fa:	d104      	bne.n	8002906 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028fc:	6820      	ldr	r0, [r4, #0]
 80028fe:	f7ff fe95 	bl	800262c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002902:	2000      	movs	r0, #0
      break;
 8002904:	e7ef      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002906:	2001      	movs	r0, #1
 8002908:	e7ed      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x5a>
 800290a:	2001      	movs	r0, #1
 800290c:	e7eb      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800290e:	2280      	movs	r2, #128	@ 0x80
 8002910:	0152      	lsls	r2, r2, #5
 8002912:	4291      	cmp	r1, r2
 8002914:	d036      	beq.n	8002984 <HAL_TIM_ConfigClockSource+0xf8>
 8002916:	2280      	movs	r2, #128	@ 0x80
 8002918:	0192      	lsls	r2, r2, #6
 800291a:	4291      	cmp	r1, r2
 800291c:	d10d      	bne.n	800293a <HAL_TIM_ConfigClockSource+0xae>
                        sClockSourceConfig->ClockPrescaler,
 800291e:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 8002920:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 8002922:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002924:	6820      	ldr	r0, [r4, #0]
 8002926:	f7ff fe89 	bl	800263c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800292a:	6822      	ldr	r2, [r4, #0]
 800292c:	6891      	ldr	r1, [r2, #8]
 800292e:	2380      	movs	r3, #128	@ 0x80
 8002930:	01db      	lsls	r3, r3, #7
 8002932:	430b      	orrs	r3, r1
 8002934:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002936:	2000      	movs	r0, #0
      break;
 8002938:	e7d5      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800293a:	2970      	cmp	r1, #112	@ 0x70
 800293c:	d124      	bne.n	8002988 <HAL_TIM_ConfigClockSource+0xfc>
                        sClockSourceConfig->ClockPrescaler,
 800293e:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 8002940:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 8002942:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002944:	6820      	ldr	r0, [r4, #0]
 8002946:	f7ff fe79 	bl	800263c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800294a:	6822      	ldr	r2, [r4, #0]
 800294c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800294e:	2177      	movs	r1, #119	@ 0x77
 8002950:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8002952:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002954:	2000      	movs	r0, #0
      break;
 8002956:	e7c6      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 8002958:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 800295a:	68c2      	ldr	r2, [r0, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800295c:	6820      	ldr	r0, [r4, #0]
 800295e:	f7ff fe51 	bl	8002604 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002962:	6820      	ldr	r0, [r4, #0]
 8002964:	2160      	movs	r1, #96	@ 0x60
 8002966:	f7ff fe61 	bl	800262c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800296a:	2000      	movs	r0, #0
      break;
 800296c:	e7bb      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 800296e:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8002970:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002972:	6820      	ldr	r0, [r4, #0]
 8002974:	f7ff fe34 	bl	80025e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002978:	6820      	ldr	r0, [r4, #0]
 800297a:	2140      	movs	r1, #64	@ 0x40
 800297c:	f7ff fe56 	bl	800262c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002980:	2000      	movs	r0, #0
      break;
 8002982:	e7b0      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002984:	2000      	movs	r0, #0
 8002986:	e7ae      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002988:	2001      	movs	r0, #1
 800298a:	e7ac      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800298c:	2002      	movs	r0, #2
 800298e:	e7b0      	b.n	80028f2 <HAL_TIM_ConfigClockSource+0x66>
 8002990:	ffff0088 	.word	0xffff0088

08002994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002994:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002996:	2338      	movs	r3, #56	@ 0x38
 8002998:	5cc3      	ldrb	r3, [r0, r3]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d025      	beq.n	80029ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800299e:	2338      	movs	r3, #56	@ 0x38
 80029a0:	2201      	movs	r2, #1
 80029a2:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	3301      	adds	r3, #1
 80029a6:	3201      	adds	r2, #1
 80029a8:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029aa:	6803      	ldr	r3, [r0, #0]
 80029ac:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029ae:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029b0:	326e      	adds	r2, #110	@ 0x6e
 80029b2:	4394      	bics	r4, r2
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b4:	680a      	ldr	r2, [r1, #0]
 80029b6:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ba:	6803      	ldr	r3, [r0, #0]
 80029bc:	2280      	movs	r2, #128	@ 0x80
 80029be:	05d2      	lsls	r2, r2, #23
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d005      	beq.n	80029d0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80029c4:	4a0a      	ldr	r2, [pc, #40]	@ (80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d002      	beq.n	80029d0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80029ca:	4a0a      	ldr	r2, [pc, #40]	@ (80029f4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d104      	bne.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029d0:	2280      	movs	r2, #128	@ 0x80
 80029d2:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d4:	684a      	ldr	r2, [r1, #4]
 80029d6:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029da:	2339      	movs	r3, #57	@ 0x39
 80029dc:	2201      	movs	r2, #1
 80029de:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80029e0:	3b01      	subs	r3, #1
 80029e2:	2200      	movs	r2, #0
 80029e4:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80029e6:	2000      	movs	r0, #0
}
 80029e8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80029ea:	2002      	movs	r0, #2
 80029ec:	e7fc      	b.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	40010800 	.word	0x40010800
 80029f4:	40011400 	.word	0x40011400

080029f8 <memset>:
 80029f8:	0003      	movs	r3, r0
 80029fa:	1882      	adds	r2, r0, r2
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d100      	bne.n	8002a02 <memset+0xa>
 8002a00:	4770      	bx	lr
 8002a02:	7019      	strb	r1, [r3, #0]
 8002a04:	3301      	adds	r3, #1
 8002a06:	e7f9      	b.n	80029fc <memset+0x4>

08002a08 <__libc_init_array>:
 8002a08:	b570      	push	{r4, r5, r6, lr}
 8002a0a:	2600      	movs	r6, #0
 8002a0c:	4c0c      	ldr	r4, [pc, #48]	@ (8002a40 <__libc_init_array+0x38>)
 8002a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8002a44 <__libc_init_array+0x3c>)
 8002a10:	1b64      	subs	r4, r4, r5
 8002a12:	10a4      	asrs	r4, r4, #2
 8002a14:	42a6      	cmp	r6, r4
 8002a16:	d109      	bne.n	8002a2c <__libc_init_array+0x24>
 8002a18:	2600      	movs	r6, #0
 8002a1a:	f000 f819 	bl	8002a50 <_init>
 8002a1e:	4c0a      	ldr	r4, [pc, #40]	@ (8002a48 <__libc_init_array+0x40>)
 8002a20:	4d0a      	ldr	r5, [pc, #40]	@ (8002a4c <__libc_init_array+0x44>)
 8002a22:	1b64      	subs	r4, r4, r5
 8002a24:	10a4      	asrs	r4, r4, #2
 8002a26:	42a6      	cmp	r6, r4
 8002a28:	d105      	bne.n	8002a36 <__libc_init_array+0x2e>
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
 8002a2c:	00b3      	lsls	r3, r6, #2
 8002a2e:	58eb      	ldr	r3, [r5, r3]
 8002a30:	4798      	blx	r3
 8002a32:	3601      	adds	r6, #1
 8002a34:	e7ee      	b.n	8002a14 <__libc_init_array+0xc>
 8002a36:	00b3      	lsls	r3, r6, #2
 8002a38:	58eb      	ldr	r3, [r5, r3]
 8002a3a:	4798      	blx	r3
 8002a3c:	3601      	adds	r6, #1
 8002a3e:	e7f2      	b.n	8002a26 <__libc_init_array+0x1e>
 8002a40:	08002a8c 	.word	0x08002a8c
 8002a44:	08002a8c 	.word	0x08002a8c
 8002a48:	08002a90 	.word	0x08002a90
 8002a4c:	08002a8c 	.word	0x08002a8c

08002a50 <_init>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a56:	bc08      	pop	{r3}
 8002a58:	469e      	mov	lr, r3
 8002a5a:	4770      	bx	lr

08002a5c <_fini>:
 8002a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a62:	bc08      	pop	{r3}
 8002a64:	469e      	mov	lr, r3
 8002a66:	4770      	bx	lr
